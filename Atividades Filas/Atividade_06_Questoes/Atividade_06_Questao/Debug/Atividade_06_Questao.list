
Atividade_06_Questao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800a7c0  0800a7c0  0000b7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac34  0800ac34  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ac34  0800ac34  0000bc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac3c  0800ac3c  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac3c  0800ac3c  0000bc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac40  0800ac40  0000bc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ac44  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c4c  200001d8  0800ae1c  0000c1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004e24  0800ae1c  0000ce24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a445  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003865  00000000  00000000  0002664d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00029eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000111d  00000000  00000000  0002b4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047a4  00000000  00000000  0002c5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f82  00000000  00000000  00030d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9f7b  00000000  00000000  00049d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133c7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e40  00000000  00000000  00133cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0013ab04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a7a4 	.word	0x0800a7a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a7a4 	.word	0x0800a7a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double map(uint16_t x, float in_min, float in_max, float out_min, float out_max)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f20:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f24:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f28:	edc7 1a01 	vstr	s3, [r7, #4]
 8000f2c:	82fb      	strh	r3, [r7, #22]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000f2e:	8afb      	ldrh	r3, [r7, #22]
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f38:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f40:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f44:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f4c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f50:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f54:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f60:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f68:	ee17 0a90 	vmov	r0, s15
 8000f6c:	f7ff fb0c 	bl	8000588 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f78:	eeb0 0a47 	vmov.f32	s0, s14
 8000f7c:	eef0 0a67 	vmov.f32	s1, s15
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
	if(pin == B1_Pin)
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f98:	d104      	bne.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(semReadADCHandle);
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <HAL_GPIO_EXTI_Callback+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fae2 	bl	8004568 <osSemaphoreRelease>
	}



}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000290 	.word	0x20000290

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb4:	f000 fd3a 	bl	8001a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb8:	f000 f84c 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f000 f934 	bl	8001228 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fc0:	f000 f8b6 	bl	8001130 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000fc4:	f000 f906 	bl	80011d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fc8:	f003 f8fc 	bl	80041c4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semReadADC */
  semReadADCHandle = osSemaphoreNew(1, 0, &semReadADC_attributes);
 8000fcc:	4a15      	ldr	r2, [pc, #84]	@ (8001024 <main+0x74>)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f003 f9ee 	bl	80043b2 <osSemaphoreNew>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a13      	ldr	r2, [pc, #76]	@ (8001028 <main+0x78>)
 8000fda:	6013      	str	r3, [r2, #0]

  /* creation of semAverage */
  semAverageHandle = osSemaphoreNew(1, 0, &semAverage_attributes);
 8000fdc:	4a13      	ldr	r2, [pc, #76]	@ (800102c <main+0x7c>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f003 f9e6 	bl	80043b2 <osSemaphoreNew>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a11      	ldr	r2, [pc, #68]	@ (8001030 <main+0x80>)
 8000fea:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BufferADC */
  BufferADCHandle = osMessageQueueNew (32, sizeof(double), &BufferADC_attributes);
 8000fec:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <main+0x84>)
 8000fee:	2108      	movs	r1, #8
 8000ff0:	2020      	movs	r0, #32
 8000ff2:	f003 fafd 	bl	80045f0 <osMessageQueueNew>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <main+0x88>)
 8000ffa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <main+0x8c>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	480f      	ldr	r0, [pc, #60]	@ (8001040 <main+0x90>)
 8001002:	f003 f929 	bl	8004258 <osThreadNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <main+0x94>)
 800100a:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 800100c:	4a0e      	ldr	r2, [pc, #56]	@ (8001048 <main+0x98>)
 800100e:	2100      	movs	r1, #0
 8001010:	480e      	ldr	r0, [pc, #56]	@ (800104c <main+0x9c>)
 8001012:	f003 f921 	bl	8004258 <osThreadNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <main+0xa0>)
 800101a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800101c:	f003 f8f6 	bl	800420c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <main+0x70>
 8001024:	0800a884 	.word	0x0800a884
 8001028:	20000290 	.word	0x20000290
 800102c:	0800a894 	.word	0x0800a894
 8001030:	20000294 	.word	0x20000294
 8001034:	0800a86c 	.word	0x0800a86c
 8001038:	2000028c 	.word	0x2000028c
 800103c:	0800a824 	.word	0x0800a824
 8001040:	08001331 	.word	0x08001331
 8001044:	20000284 	.word	0x20000284
 8001048:	0800a848 	.word	0x0800a848
 800104c:	0800146d 	.word	0x0800146d
 8001050:	20000288 	.word	0x20000288

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b094      	sub	sp, #80	@ 0x50
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2234      	movs	r2, #52	@ 0x34
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f007 fa71 	bl	800854a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4b2a      	ldr	r3, [pc, #168]	@ (8001128 <SystemClock_Config+0xd4>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	4a29      	ldr	r2, [pc, #164]	@ (8001128 <SystemClock_Config+0xd4>)
 8001082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001086:	6413      	str	r3, [r2, #64]	@ 0x40
 8001088:	4b27      	ldr	r3, [pc, #156]	@ (8001128 <SystemClock_Config+0xd4>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	4b24      	ldr	r3, [pc, #144]	@ (800112c <SystemClock_Config+0xd8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010a0:	4a22      	ldr	r2, [pc, #136]	@ (800112c <SystemClock_Config+0xd8>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b20      	ldr	r3, [pc, #128]	@ (800112c <SystemClock_Config+0xd8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010bc:	2310      	movs	r3, #16
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c0:	2302      	movs	r3, #2
 80010c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010c8:	2310      	movs	r3, #16
 80010ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010da:	2302      	movs	r3, #2
 80010dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fee4 	bl	8002eb0 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010ee:	f000 fa33 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2302      	movs	r3, #2
 80010f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fb52 	bl	80027b8 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800111a:	f000 fa1d 	bl	8001558 <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	@ 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001142:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_ADC1_Init+0x98>)
 8001144:	4a21      	ldr	r2, [pc, #132]	@ (80011cc <MX_ADC1_Init+0x9c>)
 8001146:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <MX_ADC1_Init+0x98>)
 800114a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800114e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001150:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <MX_ADC1_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001156:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <MX_ADC1_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800115c:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_ADC1_Init+0x98>)
 800115e:	2200      	movs	r2, #0
 8001160:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <MX_ADC1_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <MX_ADC1_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <MX_ADC1_Init+0x98>)
 8001172:	4a17      	ldr	r2, [pc, #92]	@ (80011d0 <MX_ADC1_Init+0xa0>)
 8001174:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <MX_ADC1_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <MX_ADC1_Init+0x98>)
 800117e:	2201      	movs	r2, #1
 8001180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001182:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <MX_ADC1_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <MX_ADC1_Init+0x98>)
 800118c:	2201      	movs	r2, #1
 800118e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001190:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_ADC1_Init+0x98>)
 8001192:	f000 fc8d 	bl	8001ab0 <HAL_ADC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800119c:	f000 f9dc 	bl	8001558 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_ADC1_Init+0x98>)
 80011b2:	f000 fe2b 	bl	8001e0c <HAL_ADC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011bc:	f000 f9cc 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200001f4 	.word	0x200001f4
 80011cc:	40012000 	.word	0x40012000
 80011d0:	0f000001 	.word	0x0f000001

080011d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <MX_USART1_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 800120c:	f002 fb8a 	bl	8003924 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f99f 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000023c 	.word	0x2000023c
 8001224:	40011000 	.word	0x40011000

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b38      	ldr	r3, [pc, #224]	@ (8001324 <MX_GPIO_Init+0xfc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a37      	ldr	r2, [pc, #220]	@ (8001324 <MX_GPIO_Init+0xfc>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b35      	ldr	r3, [pc, #212]	@ (8001324 <MX_GPIO_Init+0xfc>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b31      	ldr	r3, [pc, #196]	@ (8001324 <MX_GPIO_Init+0xfc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a30      	ldr	r2, [pc, #192]	@ (8001324 <MX_GPIO_Init+0xfc>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b2e      	ldr	r3, [pc, #184]	@ (8001324 <MX_GPIO_Init+0xfc>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <MX_GPIO_Init+0xfc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a29      	ldr	r2, [pc, #164]	@ (8001324 <MX_GPIO_Init+0xfc>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <MX_GPIO_Init+0xfc>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <MX_GPIO_Init+0xfc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a22      	ldr	r2, [pc, #136]	@ (8001324 <MX_GPIO_Init+0xfc>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <MX_GPIO_Init+0xfc>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2120      	movs	r1, #32
 80012b2:	481d      	ldr	r0, [pc, #116]	@ (8001328 <MX_GPIO_Init+0x100>)
 80012b4:	f001 fa4e 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4817      	ldr	r0, [pc, #92]	@ (800132c <MX_GPIO_Init+0x104>)
 80012d0:	f001 f8ac 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012d4:	2308      	movs	r3, #8
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	480f      	ldr	r0, [pc, #60]	@ (8001328 <MX_GPIO_Init+0x100>)
 80012ea:	f001 f89f 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012ee:	2320      	movs	r3, #32
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4808      	ldr	r0, [pc, #32]	@ (8001328 <MX_GPIO_Init+0x100>)
 8001306:	f001 f891 	bl	800242c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2105      	movs	r1, #5
 800130e:	2028      	movs	r0, #40	@ 0x28
 8001310:	f001 f862 	bl	80023d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001314:	2028      	movs	r0, #40	@ 0x28
 8001316:	f001 f87b 	bl	8002410 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	@ 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020800 	.word	0x40020800

08001330 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	@ 0x50
 8001334:	af02      	add	r7, sp, #8
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char msg[50];
	uint16_t adc_value = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	double voltage_value = 0;
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(semReadADCHandle, osWaitForever);
 800134a:	4b3e      	ldr	r3, [pc, #248]	@ (8001444 <StartTask01+0x114>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f04f 31ff 	mov.w	r1, #4294967295
 8001352:	4618      	mov	r0, r3
 8001354:	f003 f8b6 	bl	80044c4 <osSemaphoreAcquire>

	  for(uint8_t i = 0 ;i<TAM_BUFFER;i++)
 8001358:	2300      	movs	r3, #0
 800135a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800135e:	e049      	b.n	80013f4 <StartTask01+0xc4>
	  {
		  for(uint8_t j = 0;j<TAM_BUFFER;j++)
 8001360:	2300      	movs	r3, #0
 8001362:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001366:	e030      	b.n	80013ca <StartTask01+0x9a>
		  {
			  HAL_ADC_Start(&hadc1);
 8001368:	4837      	ldr	r0, [pc, #220]	@ (8001448 <StartTask01+0x118>)
 800136a:	f000 fbe5 	bl	8001b38 <HAL_ADC_Start>

			  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800136e:	210a      	movs	r1, #10
 8001370:	4835      	ldr	r0, [pc, #212]	@ (8001448 <StartTask01+0x118>)
 8001372:	f000 fcb3 	bl	8001cdc <HAL_ADC_PollForConversion>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d121      	bne.n	80013c0 <StartTask01+0x90>
			  {
				  adc_value = HAL_ADC_GetValue(&hadc1);
 800137c:	4832      	ldr	r0, [pc, #200]	@ (8001448 <StartTask01+0x118>)
 800137e:	f000 fd38 	bl	8001df2 <HAL_ADC_GetValue>
 8001382:	4603      	mov	r3, r0
 8001384:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
				  /*ADC_BUFFER[j] = map(adc_value,0,4095,0,3.3);*/
				  voltage_value = map(adc_value,0,4095,0,3.3);
 8001388:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800138c:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 800144c <StartTask01+0x11c>
 8001390:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 8001450 <StartTask01+0x120>
 8001394:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8001454 <StartTask01+0x124>
 8001398:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8001450 <StartTask01+0x120>
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fdb9 	bl	8000f14 <map>
 80013a2:	eeb0 7a40 	vmov.f32	s14, s0
 80013a6:	eef0 7a60 	vmov.f32	s15, s1
 80013aa:	ed87 7b02 	vstr	d7, [r7, #8]
				  osMessageQueuePut(BufferADCHandle,&voltage_value ,0,osWaitForever);
 80013ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <StartTask01+0x128>)
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	f107 0108 	add.w	r1, r7, #8
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	2200      	movs	r2, #0
 80013bc:	f003 f98c 	bl	80046d8 <osMessageQueuePut>
		  for(uint8_t j = 0;j<TAM_BUFFER;j++)
 80013c0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80013c4:	3301      	adds	r3, #1
 80013c6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80013ca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80013ce:	2b1f      	cmp	r3, #31
 80013d0:	d9ca      	bls.n	8001368 <StartTask01+0x38>
			  }
		  }
		  osSemaphoreRelease(semAverageHandle);
 80013d2:	4b22      	ldr	r3, [pc, #136]	@ (800145c <StartTask01+0x12c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 f8c6 	bl	8004568 <osSemaphoreRelease>
		  osSemaphoreAcquire(semReadADCHandle, osWaitForever);
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <StartTask01+0x114>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 f86d 	bl	80044c4 <osSemaphoreAcquire>
	  for(uint8_t i = 0 ;i<TAM_BUFFER;i++)
 80013ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013ee:	3301      	adds	r3, #1
 80013f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80013f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013f8:	2b1f      	cmp	r3, #31
 80013fa:	d9b1      	bls.n	8001360 <StartTask01+0x30>
	  }




	  snprintf(msg,sizeof(msg),"O Valor da Media: %lf",AverageFinal);
 80013fc:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <StartTask01+0x130>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f107 0010 	add.w	r0, r7, #16
 8001406:	e9cd 2300 	strd	r2, r3, [sp]
 800140a:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <StartTask01+0x134>)
 800140c:	2132      	movs	r1, #50	@ 0x32
 800140e:	f007 f823 	bl	8008458 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)msg,strlen(msg),100);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe ff4a 	bl	80002b0 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	b29a      	uxth	r2, r3
 8001420:	f107 0110 	add.w	r1, r7, #16
 8001424:	2364      	movs	r3, #100	@ 0x64
 8001426:	4810      	ldr	r0, [pc, #64]	@ (8001468 <StartTask01+0x138>)
 8001428:	f002 facc 	bl	80039c4 <HAL_UART_Transmit>


	  AverageFinal = 0;
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <StartTask01+0x130>)
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	e9c1 2300 	strd	r2, r3, [r1]
      osDelay(100);
 800143a:	2064      	movs	r0, #100	@ 0x64
 800143c:	f002 ff9e 	bl	800437c <osDelay>
	  osSemaphoreAcquire(semReadADCHandle, osWaitForever);
 8001440:	e783      	b.n	800134a <StartTask01+0x1a>
 8001442:	bf00      	nop
 8001444:	20000290 	.word	0x20000290
 8001448:	200001f4 	.word	0x200001f4
 800144c:	40533333 	.word	0x40533333
 8001450:	00000000 	.word	0x00000000
 8001454:	457ff000 	.word	0x457ff000
 8001458:	2000028c 	.word	0x2000028c
 800145c:	20000294 	.word	0x20000294
 8001460:	20000298 	.word	0x20000298
 8001464:	0800a7f4 	.word	0x0800a7f4
 8001468:	2000023c 	.word	0x2000023c

0800146c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	double sum = 0;
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double average;
	double voltage_value = 0;
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(semAverageHandle, osWaitForever);
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <StartTask02+0xb4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	4618      	mov	r0, r3
 8001496:	f003 f815 	bl	80044c4 <osSemaphoreAcquire>

	  for(uint8_t i =0; i<TAM_BUFFER;i++)
 800149a:	2300      	movs	r3, #0
 800149c:	77fb      	strb	r3, [r7, #31]
 800149e:	e015      	b.n	80014cc <StartTask02+0x60>
	  {
		  /*sum+=ADC_BUFFER[i];*/
		  osMessageQueueGet(BufferADCHandle,&voltage_value,NULL,osWaitForever);
 80014a0:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <StartTask02+0xb8>)
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	f107 0108 	add.w	r1, r7, #8
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	2200      	movs	r2, #0
 80014ae:	f003 f973 	bl	8004798 <osMessageQueueGet>
		  sum+=voltage_value;
 80014b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014ba:	f7fe ff07 	bl	80002cc <__adddf3>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  for(uint8_t i =0; i<TAM_BUFFER;i++)
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	3301      	adds	r3, #1
 80014ca:	77fb      	strb	r3, [r7, #31]
 80014cc:	7ffb      	ldrb	r3, [r7, #31]
 80014ce:	2b1f      	cmp	r3, #31
 80014d0:	d9e6      	bls.n	80014a0 <StartTask02+0x34>

	  }

	  average = sum/NUM_SAMPLES;
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <StartTask02+0xbc>)
 80014d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014dc:	f7ff f9d6 	bl	800088c <__aeabi_ddiv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  sum = 0;
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9c7 2308 	strd	r2, r3, [r7, #32]

	  AverageFinal+=average;
 80014f4:	4b0d      	ldr	r3, [pc, #52]	@ (800152c <StartTask02+0xc0>)
 80014f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014fe:	f7fe fee5 	bl	80002cc <__adddf3>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4909      	ldr	r1, [pc, #36]	@ (800152c <StartTask02+0xc0>)
 8001508:	e9c1 2300 	strd	r2, r3, [r1]


	  osSemaphoreRelease(semReadADCHandle);
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <StartTask02+0xc4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f003 f829 	bl	8004568 <osSemaphoreRelease>




    osDelay(100);
 8001516:	2064      	movs	r0, #100	@ 0x64
 8001518:	f002 ff30 	bl	800437c <osDelay>
	  osSemaphoreAcquire(semAverageHandle, osWaitForever);
 800151c:	e7b6      	b.n	800148c <StartTask02+0x20>
 800151e:	bf00      	nop
 8001520:	20000294 	.word	0x20000294
 8001524:	2000028c 	.word	0x2000028c
 8001528:	40900000 	.word	0x40900000
 800152c:	20000298 	.word	0x20000298
 8001530:	20000290 	.word	0x20000290

08001534 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a04      	ldr	r2, [pc, #16]	@ (8001554 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001546:	f000 fa93 	bl	8001a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40001000 	.word	0x40001000

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <Error_Handler+0x8>

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_MspInit+0x54>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	4a11      	ldr	r2, [pc, #68]	@ (80015b8 <HAL_MspInit+0x54>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001578:	6453      	str	r3, [r2, #68]	@ 0x44
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_MspInit+0x54>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <HAL_MspInit+0x54>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <HAL_MspInit+0x54>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	@ 0x40
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <HAL_MspInit+0x54>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	210f      	movs	r1, #15
 80015a6:	f06f 0001 	mvn.w	r0, #1
 80015aa:	f000 ff15 	bl	80023d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a17      	ldr	r2, [pc, #92]	@ (8001638 <HAL_ADC_MspInit+0x7c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d127      	bne.n	800162e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <HAL_ADC_MspInit+0x80>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	4a15      	ldr	r2, [pc, #84]	@ (800163c <HAL_ADC_MspInit+0x80>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <HAL_ADC_MspInit+0x80>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_ADC_MspInit+0x80>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a0e      	ldr	r2, [pc, #56]	@ (800163c <HAL_ADC_MspInit+0x80>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <HAL_ADC_MspInit+0x80>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001616:	2301      	movs	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161a:	2303      	movs	r3, #3
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <HAL_ADC_MspInit+0x84>)
 800162a:	f000 feff 	bl	800242c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	@ 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40012000 	.word	0x40012000
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000

08001644 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a19      	ldr	r2, [pc, #100]	@ (80016c8 <HAL_UART_MspInit+0x84>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d12c      	bne.n	80016c0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_UART_MspInit+0x88>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	4a17      	ldr	r2, [pc, #92]	@ (80016cc <HAL_UART_MspInit+0x88>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	6453      	str	r3, [r2, #68]	@ 0x44
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_UART_MspInit+0x88>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <HAL_UART_MspInit+0x88>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a10      	ldr	r2, [pc, #64]	@ (80016cc <HAL_UART_MspInit+0x88>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <HAL_UART_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800169e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b0:	2307      	movs	r3, #7
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <HAL_UART_MspInit+0x8c>)
 80016bc:	f000 feb6 	bl	800242c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	@ 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40011000 	.word	0x40011000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000

080016d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	@ 0x38
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4b33      	ldr	r3, [pc, #204]	@ (80017b8 <HAL_InitTick+0xe4>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	4a32      	ldr	r2, [pc, #200]	@ (80017b8 <HAL_InitTick+0xe4>)
 80016ee:	f043 0310 	orr.w	r3, r3, #16
 80016f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f4:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <HAL_InitTick+0xe4>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001700:	f107 0210 	add.w	r2, r7, #16
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f001 f96e 	bl	80029ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001716:	2b00      	cmp	r3, #0
 8001718:	d103      	bne.n	8001722 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800171a:	f001 f93f 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 800171e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001720:	e004      	b.n	800172c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001722:	f001 f93b 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8001726:	4603      	mov	r3, r0
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800172c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800172e:	4a23      	ldr	r2, [pc, #140]	@ (80017bc <HAL_InitTick+0xe8>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	0c9b      	lsrs	r3, r3, #18
 8001736:	3b01      	subs	r3, #1
 8001738:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800173a:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <HAL_InitTick+0xec>)
 800173c:	4a21      	ldr	r2, [pc, #132]	@ (80017c4 <HAL_InitTick+0xf0>)
 800173e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001740:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <HAL_InitTick+0xec>)
 8001742:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001746:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001748:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <HAL_InitTick+0xec>)
 800174a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800174e:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <HAL_InitTick+0xec>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <HAL_InitTick+0xec>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_InitTick+0xec>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001760:	4817      	ldr	r0, [pc, #92]	@ (80017c0 <HAL_InitTick+0xec>)
 8001762:	f001 fe43 	bl	80033ec <HAL_TIM_Base_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800176c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001770:	2b00      	cmp	r3, #0
 8001772:	d11b      	bne.n	80017ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001774:	4812      	ldr	r0, [pc, #72]	@ (80017c0 <HAL_InitTick+0xec>)
 8001776:	f001 fe93 	bl	80034a0 <HAL_TIM_Base_Start_IT>
 800177a:	4603      	mov	r3, r0
 800177c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001780:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001784:	2b00      	cmp	r3, #0
 8001786:	d111      	bne.n	80017ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001788:	2036      	movs	r0, #54	@ 0x36
 800178a:	f000 fe41 	bl	8002410 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d808      	bhi.n	80017a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	2036      	movs	r0, #54	@ 0x36
 800179a:	f000 fe1d 	bl	80023d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <HAL_InitTick+0xf4>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e002      	b.n	80017ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3738      	adds	r7, #56	@ 0x38
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40023800 	.word	0x40023800
 80017bc:	431bde83 	.word	0x431bde83
 80017c0:	200002a0 	.word	0x200002a0
 80017c4:	40001000 	.word	0x40001000
 80017c8:	20000004 	.word	0x20000004

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <NMI_Handler+0x4>

080017d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <MemManage_Handler+0x4>

080017e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001806:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800180a:	f000 ffbd 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <TIM6_DAC_IRQHandler+0x10>)
 800181a:	f001 feb1 	bl	8003580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200002a0 	.word	0x200002a0

08001828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return 1;
 800182c:	2301      	movs	r3, #1
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_kill>:

int _kill(int pid, int sig)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001842:	f006 ff33 	bl	80086ac <__errno>
 8001846:	4603      	mov	r3, r0
 8001848:	2216      	movs	r2, #22
 800184a:	601a      	str	r2, [r3, #0]
  return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_exit>:

void _exit (int status)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffe7 	bl	8001838 <_kill>
  while (1) {}    /* Make sure we hang here */
 800186a:	bf00      	nop
 800186c:	e7fd      	b.n	800186a <_exit+0x12>

0800186e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e00a      	b.n	8001896 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001880:	f3af 8000 	nop.w
 8001884:	4601      	mov	r1, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	60ba      	str	r2, [r7, #8]
 800188c:	b2ca      	uxtb	r2, r1
 800188e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbf0      	blt.n	8001880 <_read+0x12>
  }

  return len;
 800189e:	687b      	ldr	r3, [r7, #4]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e009      	b.n	80018ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	60ba      	str	r2, [r7, #8]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbf1      	blt.n	80018ba <_write+0x12>
  }
  return len;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_close>:

int _close(int file)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001908:	605a      	str	r2, [r3, #4]
  return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_isatty>:

int _isatty(int file)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f006 fe98 	bl	80086ac <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20020000 	.word	0x20020000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	200002e8 	.word	0x200002e8
 80019b0:	20004e28 	.word	0x20004e28

080019b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019dc:	f7ff ffea 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e0:	480c      	ldr	r0, [pc, #48]	@ (8001a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e2:	490d      	ldr	r1, [pc, #52]	@ (8001a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f006 fe57 	bl	80086b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0a:	f7ff fad1 	bl	8000fb0 <main>
  bx  lr    
 8001a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a1c:	0800ac44 	.word	0x0800ac44
  ldr r2, =_sbss
 8001a20:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a24:	20004e24 	.word	0x20004e24

08001a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC_IRQHandler>
	...

08001a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <HAL_Init+0x40>)
 8001a36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_Init+0x40>)
 8001a42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_Init+0x40>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 fcb4 	bl	80023c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f7ff fe3a 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a60:	f7ff fd80 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	200002ec 	.word	0x200002ec

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	200002ec 	.word	0x200002ec

08001ab0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e033      	b.n	8001b2e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fd74 	bl	80015bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d118      	bne.n	8001b20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001af6:	f023 0302 	bic.w	r3, r3, #2
 8001afa:	f043 0202 	orr.w	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fab4 	bl	8002070 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b1e:	e001      	b.n	8001b24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_Start+0x1a>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e0b2      	b.n	8001cb8 <HAL_ADC_Start+0x180>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d018      	beq.n	8001b9a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b78:	4b52      	ldr	r3, [pc, #328]	@ (8001cc4 <HAL_ADC_Start+0x18c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	@ (8001cc8 <HAL_ADC_Start+0x190>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0c9a      	lsrs	r2, r3, #18
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b8c:	e002      	b.n	8001b94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f9      	bne.n	8001b8e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d17a      	bne.n	8001c9e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bd2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001be6:	d106      	bne.n	8001bf6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	f023 0206 	bic.w	r2, r3, #6
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bf4:	e002      	b.n	8001bfc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c04:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <HAL_ADC_Start+0x194>)
 8001c06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c10:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d12a      	bne.n	8001c74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd0 <HAL_ADC_Start+0x198>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d015      	beq.n	8001c54 <HAL_ADC_Start+0x11c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a29      	ldr	r2, [pc, #164]	@ (8001cd4 <HAL_ADC_Start+0x19c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d105      	bne.n	8001c3e <HAL_ADC_Start+0x106>
 8001c32:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <HAL_ADC_Start+0x194>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a25      	ldr	r2, [pc, #148]	@ (8001cd8 <HAL_ADC_Start+0x1a0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d136      	bne.n	8001cb6 <HAL_ADC_Start+0x17e>
 8001c48:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <HAL_ADC_Start+0x194>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d130      	bne.n	8001cb6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d129      	bne.n	8001cb6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	e020      	b.n	8001cb6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a15      	ldr	r2, [pc, #84]	@ (8001cd0 <HAL_ADC_Start+0x198>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d11b      	bne.n	8001cb6 <HAL_ADC_Start+0x17e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d114      	bne.n	8001cb6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e00b      	b.n	8001cb6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	431bde83 	.word	0x431bde83
 8001ccc:	40012300 	.word	0x40012300
 8001cd0:	40012000 	.word	0x40012000
 8001cd4:	40012100 	.word	0x40012100
 8001cd8:	40012200 	.word	0x40012200

08001cdc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cf8:	d113      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d08:	d10b      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f043 0220 	orr.w	r2, r3, #32
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e063      	b.n	8001dea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d22:	f7ff feb9 	bl	8001a98 <HAL_GetTick>
 8001d26:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d28:	e021      	b.n	8001d6e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d01d      	beq.n	8001d6e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_ADC_PollForConversion+0x6c>
 8001d38:	f7ff feae 	bl	8001a98 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d212      	bcs.n	8001d6e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d00b      	beq.n	8001d6e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f043 0204 	orr.w	r2, r3, #4
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e03d      	b.n	8001dea <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d1d6      	bne.n	8001d2a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0212 	mvn.w	r2, #18
 8001d84:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d123      	bne.n	8001de8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d11f      	bne.n	8001de8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d111      	bne.n	8001de8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1c>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e113      	b.n	8002050 <HAL_ADC_ConfigChannel+0x244>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d925      	bls.n	8001e84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68d9      	ldr	r1, [r3, #12]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b1e      	subs	r3, #30
 8001e4e:	2207      	movs	r2, #7
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43da      	mvns	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	400a      	ands	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68d9      	ldr	r1, [r3, #12]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4403      	add	r3, r0
 8001e76:	3b1e      	subs	r3, #30
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	e022      	b.n	8001eca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6919      	ldr	r1, [r3, #16]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	2207      	movs	r2, #7
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6919      	ldr	r1, [r3, #16]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4403      	add	r3, r0
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d824      	bhi.n	8001f1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b05      	subs	r3, #5
 8001ee4:	221f      	movs	r2, #31
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b05      	subs	r3, #5
 8001f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f1a:	e04c      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d824      	bhi.n	8001f6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3b23      	subs	r3, #35	@ 0x23
 8001f36:	221f      	movs	r2, #31
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	400a      	ands	r2, r1
 8001f44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b23      	subs	r3, #35	@ 0x23
 8001f60:	fa00 f203 	lsl.w	r2, r0, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f6c:	e023      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b41      	subs	r3, #65	@ 0x41
 8001f80:	221f      	movs	r2, #31
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3b41      	subs	r3, #65	@ 0x41
 8001faa:	fa00 f203 	lsl.w	r2, r0, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb6:	4b29      	ldr	r3, [pc, #164]	@ (800205c <HAL_ADC_ConfigChannel+0x250>)
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a28      	ldr	r2, [pc, #160]	@ (8002060 <HAL_ADC_ConfigChannel+0x254>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d10f      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1d8>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b12      	cmp	r3, #18
 8001fca:	d10b      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8002060 <HAL_ADC_ConfigChannel+0x254>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d12b      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x23a>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <HAL_ADC_ConfigChannel+0x258>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d003      	beq.n	8002000 <HAL_ADC_ConfigChannel+0x1f4>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b11      	cmp	r3, #17
 8001ffe:	d122      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a11      	ldr	r2, [pc, #68]	@ (8002064 <HAL_ADC_ConfigChannel+0x258>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d111      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002022:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <HAL_ADC_ConfigChannel+0x25c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a11      	ldr	r2, [pc, #68]	@ (800206c <HAL_ADC_ConfigChannel+0x260>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	0c9a      	lsrs	r2, r3, #18
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002038:	e002      	b.n	8002040 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3b01      	subs	r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f9      	bne.n	800203a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40012300 	.word	0x40012300
 8002060:	40012000 	.word	0x40012000
 8002064:	10000012 	.word	0x10000012
 8002068:	20000000 	.word	0x20000000
 800206c:	431bde83 	.word	0x431bde83

08002070 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002078:	4b79      	ldr	r3, [pc, #484]	@ (8002260 <ADC_Init+0x1f0>)
 800207a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	431a      	orrs	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	021a      	lsls	r2, r3, #8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002102:	4a58      	ldr	r2, [pc, #352]	@ (8002264 <ADC_Init+0x1f4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d022      	beq.n	800214e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002116:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6899      	ldr	r1, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6899      	ldr	r1, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	e00f      	b.n	800216e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800215c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800216c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0202 	bic.w	r2, r2, #2
 800217c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6899      	ldr	r1, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7e1b      	ldrb	r3, [r3, #24]
 8002188:	005a      	lsls	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01b      	beq.n	80021d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	3b01      	subs	r3, #1
 80021c8:	035a      	lsls	r2, r3, #13
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	e007      	b.n	80021e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	3b01      	subs	r3, #1
 8002200:	051a      	lsls	r2, r3, #20
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002218:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002226:	025a      	lsls	r2, r3, #9
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800223e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6899      	ldr	r1, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	029a      	lsls	r2, r3, #10
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40012300 	.word	0x40012300
 8002264:	0f000001 	.word	0x0f000001

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	@ (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	@ (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	@ (8002304 <__NVIC_EnableIRQ+0x38>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	@ (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	@ (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	@ 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ff4c 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ea:	f7ff ff61 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 80023ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	6978      	ldr	r0, [r7, #20]
 80023f6:	f7ff ffb1 	bl	800235c <NVIC_EncodePriority>
 80023fa:	4602      	mov	r2, r0
 80023fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff80 	bl	8002308 <__NVIC_SetPriority>
}
 8002408:	bf00      	nop
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff54 	bl	80022cc <__NVIC_EnableIRQ>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e165      	b.n	8002714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	f040 8154 	bne.w	800270e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d005      	beq.n	800247e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247a:	2b02      	cmp	r3, #2
 800247c:	d130      	bne.n	80024e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0201 	and.w	r2, r3, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d017      	beq.n	800251c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d123      	bne.n	8002570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	08da      	lsrs	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80ae 	beq.w	800270e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b5d      	ldr	r3, [pc, #372]	@ (800272c <HAL_GPIO_Init+0x300>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	4a5c      	ldr	r2, [pc, #368]	@ (800272c <HAL_GPIO_Init+0x300>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c2:	4b5a      	ldr	r3, [pc, #360]	@ (800272c <HAL_GPIO_Init+0x300>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ce:	4a58      	ldr	r2, [pc, #352]	@ (8002730 <HAL_GPIO_Init+0x304>)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002734 <HAL_GPIO_Init+0x308>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d025      	beq.n	8002646 <HAL_GPIO_Init+0x21a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002738 <HAL_GPIO_Init+0x30c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01f      	beq.n	8002642 <HAL_GPIO_Init+0x216>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4d      	ldr	r2, [pc, #308]	@ (800273c <HAL_GPIO_Init+0x310>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_Init+0x212>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4c      	ldr	r2, [pc, #304]	@ (8002740 <HAL_GPIO_Init+0x314>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x20e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4b      	ldr	r2, [pc, #300]	@ (8002744 <HAL_GPIO_Init+0x318>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x20a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4a      	ldr	r2, [pc, #296]	@ (8002748 <HAL_GPIO_Init+0x31c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x206>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a49      	ldr	r2, [pc, #292]	@ (800274c <HAL_GPIO_Init+0x320>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x202>
 800262a:	2306      	movs	r3, #6
 800262c:	e00c      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 800262e:	2307      	movs	r3, #7
 8002630:	e00a      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002632:	2305      	movs	r3, #5
 8002634:	e008      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002636:	2304      	movs	r3, #4
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 800263a:	2303      	movs	r3, #3
 800263c:	e004      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 800263e:	2302      	movs	r3, #2
 8002640:	e002      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002646:	2300      	movs	r3, #0
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	f002 0203 	and.w	r2, r2, #3
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	4093      	lsls	r3, r2
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002658:	4935      	ldr	r1, [pc, #212]	@ (8002730 <HAL_GPIO_Init+0x304>)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3302      	adds	r3, #2
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002666:	4b3a      	ldr	r3, [pc, #232]	@ (8002750 <HAL_GPIO_Init+0x324>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268a:	4a31      	ldr	r2, [pc, #196]	@ (8002750 <HAL_GPIO_Init+0x324>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002690:	4b2f      	ldr	r3, [pc, #188]	@ (8002750 <HAL_GPIO_Init+0x324>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b4:	4a26      	ldr	r2, [pc, #152]	@ (8002750 <HAL_GPIO_Init+0x324>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ba:	4b25      	ldr	r3, [pc, #148]	@ (8002750 <HAL_GPIO_Init+0x324>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026de:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <HAL_GPIO_Init+0x324>)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_GPIO_Init+0x324>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002708:	4a11      	ldr	r2, [pc, #68]	@ (8002750 <HAL_GPIO_Init+0x324>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b0f      	cmp	r3, #15
 8002718:	f67f ae96 	bls.w	8002448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	40013800 	.word	0x40013800
 8002734:	40020000 	.word	0x40020000
 8002738:	40020400 	.word	0x40020400
 800273c:	40020800 	.word	0x40020800
 8002740:	40020c00 	.word	0x40020c00
 8002744:	40021000 	.word	0x40021000
 8002748:	40021400 	.word	0x40021400
 800274c:	40021800 	.word	0x40021800
 8002750:	40013c00 	.word	0x40013c00

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002770:	e003      	b.n	800277a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	041a      	lsls	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fbee 	bl	8000f88 <HAL_GPIO_EXTI_Callback>
  }
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0cc      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b68      	ldr	r3, [pc, #416]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d90c      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b65      	ldr	r3, [pc, #404]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b63      	ldr	r3, [pc, #396]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a58      	ldr	r2, [pc, #352]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002816:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a52      	ldr	r2, [pc, #328]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800282e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b50      	ldr	r3, [pc, #320]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d044      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d119      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	2b03      	cmp	r3, #3
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b3f      	ldr	r3, [pc, #252]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e06f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b3b      	ldr	r3, [pc, #236]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e067      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002896:	4b37      	ldr	r3, [pc, #220]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4934      	ldr	r1, [pc, #208]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a8:	f7ff f8f6 	bl	8001a98 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b0:	f7ff f8f2 	bl	8001a98 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e04f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 020c 	and.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1eb      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d8:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d20c      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292a:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800293e:	f000 f887 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	@ (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	@ (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe feb8 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	0800a8a4 	.word	0x0800a8a4
 800297c:	20000000 	.word	0x20000000
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <HAL_RCC_GetHCLKFreq+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a0:	f7ff fff0 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0a9b      	lsrs	r3, r3, #10
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4903      	ldr	r1, [pc, #12]	@ (80029c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40023800 	.word	0x40023800
 80029c0:	0800a8b4 	.word	0x0800a8b4

080029c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c8:	f7ff ffdc 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0b5b      	lsrs	r3, r3, #13
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4903      	ldr	r1, [pc, #12]	@ (80029e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	0800a8b4 	.word	0x0800a8b4

080029ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	220f      	movs	r2, #15
 80029fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029fc:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <HAL_RCC_GetClockConfig+0x5c>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0203 	and.w	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a08:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <HAL_RCC_GetClockConfig+0x5c>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_RCC_GetClockConfig+0x5c>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	08db      	lsrs	r3, r3, #3
 8002a26:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a2e:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <HAL_RCC_GetClockConfig+0x60>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	601a      	str	r2, [r3, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40023c00 	.word	0x40023c00

08002a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a54:	b0ae      	sub	sp, #184	@ 0xb8
 8002a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a76:	4bcb      	ldr	r3, [pc, #812]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	f200 8206 	bhi.w	8002e90 <HAL_RCC_GetSysClockFreq+0x440>
 8002a84:	a201      	add	r2, pc, #4	@ (adr r2, 8002a8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002e91 	.word	0x08002e91
 8002a94:	08002e91 	.word	0x08002e91
 8002a98:	08002e91 	.word	0x08002e91
 8002a9c:	08002ac9 	.word	0x08002ac9
 8002aa0:	08002e91 	.word	0x08002e91
 8002aa4:	08002e91 	.word	0x08002e91
 8002aa8:	08002e91 	.word	0x08002e91
 8002aac:	08002ad1 	.word	0x08002ad1
 8002ab0:	08002e91 	.word	0x08002e91
 8002ab4:	08002e91 	.word	0x08002e91
 8002ab8:	08002e91 	.word	0x08002e91
 8002abc:	08002cc1 	.word	0x08002cc1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4bb9      	ldr	r3, [pc, #740]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ac6:	e1e7      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac8:	4bb8      	ldr	r3, [pc, #736]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x35c>)
 8002aca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ace:	e1e3      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad0:	4bb4      	ldr	r3, [pc, #720]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002adc:	4bb1      	ldr	r3, [pc, #708]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d071      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae8:	4bae      	ldr	r3, [pc, #696]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002af4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b0e:	4622      	mov	r2, r4
 8002b10:	462b      	mov	r3, r5
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4621      	mov	r1, r4
 8002b28:	1a51      	subs	r1, r2, r1
 8002b2a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b40:	4649      	mov	r1, r9
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	4641      	mov	r1, r8
 8002b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	018a      	lsls	r2, r1, #6
 8002b4e:	4641      	mov	r1, r8
 8002b50:	1a51      	subs	r1, r2, r1
 8002b52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b54:	4649      	mov	r1, r9
 8002b56:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b68:	4649      	mov	r1, r9
 8002b6a:	00cb      	lsls	r3, r1, #3
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b72:	4641      	mov	r1, r8
 8002b74:	00ca      	lsls	r2, r1, #3
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b82:	462b      	mov	r3, r5
 8002b84:	460a      	mov	r2, r1
 8002b86:	eb42 0303 	adc.w	r3, r2, r3
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b98:	4629      	mov	r1, r5
 8002b9a:	024b      	lsls	r3, r1, #9
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	024a      	lsls	r2, r1, #9
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002bbc:	f7fe f814 	bl	8000be8 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bca:	e067      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bcc:	4b75      	ldr	r3, [pc, #468]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bd8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002be6:	2300      	movs	r3, #0
 8002be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002bee:	4622      	mov	r2, r4
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	f04f 0000 	mov.w	r0, #0
 8002bf6:	f04f 0100 	mov.w	r1, #0
 8002bfa:	0159      	lsls	r1, r3, #5
 8002bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c00:	0150      	lsls	r0, r2, #5
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4621      	mov	r1, r4
 8002c08:	1a51      	subs	r1, r2, r1
 8002c0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c20:	4649      	mov	r1, r9
 8002c22:	018b      	lsls	r3, r1, #6
 8002c24:	4641      	mov	r1, r8
 8002c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c2a:	4641      	mov	r1, r8
 8002c2c:	018a      	lsls	r2, r1, #6
 8002c2e:	4641      	mov	r1, r8
 8002c30:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c34:	4649      	mov	r1, r9
 8002c36:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c4e:	4692      	mov	sl, r2
 8002c50:	469b      	mov	fp, r3
 8002c52:	4623      	mov	r3, r4
 8002c54:	eb1a 0303 	adds.w	r3, sl, r3
 8002c58:	623b      	str	r3, [r7, #32]
 8002c5a:	462b      	mov	r3, r5
 8002c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c6e:	4629      	mov	r1, r5
 8002c70:	028b      	lsls	r3, r1, #10
 8002c72:	4621      	mov	r1, r4
 8002c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c78:	4621      	mov	r1, r4
 8002c7a:	028a      	lsls	r2, r1, #10
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c84:	2200      	movs	r2, #0
 8002c86:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c88:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c8e:	f7fd ffab 	bl	8000be8 <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4613      	mov	r3, r2
 8002c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c9c:	4b41      	ldr	r3, [pc, #260]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cbe:	e0eb      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4b38      	ldr	r3, [pc, #224]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ccc:	4b35      	ldr	r3, [pc, #212]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d06b      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd8:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	2200      	movs	r2, #0
 8002ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ce2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cea:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cec:	2300      	movs	r3, #0
 8002cee:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cf0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	462b      	mov	r3, r5
 8002cf8:	f04f 0000 	mov.w	r0, #0
 8002cfc:	f04f 0100 	mov.w	r1, #0
 8002d00:	0159      	lsls	r1, r3, #5
 8002d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d06:	0150      	lsls	r0, r2, #5
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	1a51      	subs	r1, r2, r1
 8002d10:	61b9      	str	r1, [r7, #24]
 8002d12:	4629      	mov	r1, r5
 8002d14:	eb63 0301 	sbc.w	r3, r3, r1
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d26:	4659      	mov	r1, fp
 8002d28:	018b      	lsls	r3, r1, #6
 8002d2a:	4651      	mov	r1, sl
 8002d2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d30:	4651      	mov	r1, sl
 8002d32:	018a      	lsls	r2, r1, #6
 8002d34:	4651      	mov	r1, sl
 8002d36:	ebb2 0801 	subs.w	r8, r2, r1
 8002d3a:	4659      	mov	r1, fp
 8002d3c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d54:	4690      	mov	r8, r2
 8002d56:	4699      	mov	r9, r3
 8002d58:	4623      	mov	r3, r4
 8002d5a:	eb18 0303 	adds.w	r3, r8, r3
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	462b      	mov	r3, r5
 8002d62:	eb49 0303 	adc.w	r3, r9, r3
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d74:	4629      	mov	r1, r5
 8002d76:	024b      	lsls	r3, r1, #9
 8002d78:	4621      	mov	r1, r4
 8002d7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d7e:	4621      	mov	r1, r4
 8002d80:	024a      	lsls	r2, r1, #9
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d8e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d94:	f7fd ff28 	bl	8000be8 <__aeabi_uldivmod>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002da2:	e065      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x420>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	2200      	movs	r2, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	4611      	mov	r1, r2
 8002dbc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dc6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002dca:	4642      	mov	r2, r8
 8002dcc:	464b      	mov	r3, r9
 8002dce:	f04f 0000 	mov.w	r0, #0
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	0159      	lsls	r1, r3, #5
 8002dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ddc:	0150      	lsls	r0, r2, #5
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4641      	mov	r1, r8
 8002de4:	1a51      	subs	r1, r2, r1
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	4649      	mov	r1, r9
 8002dea:	eb63 0301 	sbc.w	r3, r3, r1
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	018b      	lsls	r3, r1, #6
 8002e00:	4651      	mov	r1, sl
 8002e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e06:	4651      	mov	r1, sl
 8002e08:	018a      	lsls	r2, r1, #6
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	1a54      	subs	r4, r2, r1
 8002e0e:	4659      	mov	r1, fp
 8002e10:	eb63 0501 	sbc.w	r5, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	00eb      	lsls	r3, r5, #3
 8002e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e22:	00e2      	lsls	r2, r4, #3
 8002e24:	4614      	mov	r4, r2
 8002e26:	461d      	mov	r5, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	18e3      	adds	r3, r4, r3
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	464b      	mov	r3, r9
 8002e30:	eb45 0303 	adc.w	r3, r5, r3
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e42:	4629      	mov	r1, r5
 8002e44:	028b      	lsls	r3, r1, #10
 8002e46:	4621      	mov	r1, r4
 8002e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	028a      	lsls	r2, r1, #10
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e58:	2200      	movs	r2, #0
 8002e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e5c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e62:	f7fd fec1 	bl	8000be8 <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	0f1b      	lsrs	r3, r3, #28
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e8e:	e003      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	37b8      	adds	r7, #184	@ 0xb8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400

08002eb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e28d      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8083 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ed0:	4b94      	ldr	r3, [pc, #592]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d019      	beq.n	8002f10 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002edc:	4b91      	ldr	r3, [pc, #580]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ee8:	4b8e      	ldr	r3, [pc, #568]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ef4:	d00c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d112      	bne.n	8002f28 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f02:	4b88      	ldr	r3, [pc, #544]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	4b84      	ldr	r3, [pc, #528]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d05b      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x124>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d157      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e25a      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_OscConfig+0x90>
 8002f32:	4b7c      	ldr	r3, [pc, #496]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a7b      	ldr	r2, [pc, #492]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xcc>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0xb4>
 8002f4a:	4b76      	ldr	r3, [pc, #472]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a75      	ldr	r2, [pc, #468]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b73      	ldr	r3, [pc, #460]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a72      	ldr	r2, [pc, #456]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xcc>
 8002f64:	4b6f      	ldr	r3, [pc, #444]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6e      	ldr	r2, [pc, #440]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b6c      	ldr	r3, [pc, #432]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6b      	ldr	r2, [pc, #428]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe fd88 	bl	8001a98 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fd84 	bl	8001a98 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e21f      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b61      	ldr	r3, [pc, #388]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xdc>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fd74 	bl	8001a98 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fd70 	bl	8001a98 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e20b      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b57      	ldr	r3, [pc, #348]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x104>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d06f      	beq.n	80030c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fe2:	4b50      	ldr	r3, [pc, #320]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d017      	beq.n	800301e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fee:	4b4d      	ldr	r3, [pc, #308]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d105      	bne.n	8003006 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b47      	ldr	r3, [pc, #284]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b44      	ldr	r3, [pc, #272]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b41      	ldr	r3, [pc, #260]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x186>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1d3      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4937      	ldr	r1, [pc, #220]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b34      	ldr	r3, [pc, #208]	@ (8003128 <HAL_RCC_OscConfig+0x278>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe fd1d 	bl	8001a98 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003062:	f7fe fd19 	bl	8001a98 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e1b4      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4925      	ldr	r1, [pc, #148]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <HAL_RCC_OscConfig+0x278>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fcfc 	bl	8001a98 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fe fcf8 	bl	8001a98 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e193      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d036      	beq.n	800313c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d6:	4b15      	ldr	r3, [pc, #84]	@ (800312c <HAL_RCC_OscConfig+0x27c>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fe fcdc 	bl	8001a98 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e4:	f7fe fcd8 	bl	8001a98 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e173      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 80030f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x234>
 8003102:	e01b      	b.n	800313c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003104:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_RCC_OscConfig+0x27c>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fe fcc5 	bl	8001a98 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003110:	e00e      	b.n	8003130 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003112:	f7fe fcc1 	bl	8001a98 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d907      	bls.n	8003130 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e15c      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
 8003124:	40023800 	.word	0x40023800
 8003128:	42470000 	.word	0x42470000
 800312c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b8a      	ldr	r3, [pc, #552]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ea      	bne.n	8003112 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8097 	beq.w	8003278 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4b83      	ldr	r3, [pc, #524]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b7f      	ldr	r3, [pc, #508]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4a7e      	ldr	r2, [pc, #504]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	@ 0x40
 800316a:	4b7c      	ldr	r3, [pc, #496]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b79      	ldr	r3, [pc, #484]	@ (8003360 <HAL_RCC_OscConfig+0x4b0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d118      	bne.n	80031b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003186:	4b76      	ldr	r3, [pc, #472]	@ (8003360 <HAL_RCC_OscConfig+0x4b0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a75      	ldr	r2, [pc, #468]	@ (8003360 <HAL_RCC_OscConfig+0x4b0>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7fe fc81 	bl	8001a98 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319a:	f7fe fc7d 	bl	8001a98 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e118      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003360 <HAL_RCC_OscConfig+0x4b0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x31e>
 80031c0:	4b66      	ldr	r3, [pc, #408]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	4a65      	ldr	r2, [pc, #404]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80031cc:	e01c      	b.n	8003208 <HAL_RCC_OscConfig+0x358>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x340>
 80031d6:	4b61      	ldr	r3, [pc, #388]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a60      	ldr	r2, [pc, #384]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e2:	4b5e      	ldr	r3, [pc, #376]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e6:	4a5d      	ldr	r2, [pc, #372]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0x358>
 80031f0:	4b5a      	ldr	r3, [pc, #360]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a59      	ldr	r2, [pc, #356]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fc:	4b57      	ldr	r3, [pc, #348]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003200:	4a56      	ldr	r2, [pc, #344]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003202:	f023 0304 	bic.w	r3, r3, #4
 8003206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe fc42 	bl	8001a98 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fe fc3e 	bl	8001a98 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0d7      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	4b4b      	ldr	r3, [pc, #300]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0ee      	beq.n	8003218 <HAL_RCC_OscConfig+0x368>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fe fc2c 	bl	8001a98 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fe fc28 	bl	8001a98 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0c1      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325a:	4b40      	ldr	r3, [pc, #256]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ee      	bne.n	8003244 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b3b      	ldr	r3, [pc, #236]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	4a3a      	ldr	r2, [pc, #232]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80ad 	beq.w	80033dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003282:	4b36      	ldr	r3, [pc, #216]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b08      	cmp	r3, #8
 800328c:	d060      	beq.n	8003350 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d145      	bne.n	8003322 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b33      	ldr	r3, [pc, #204]	@ (8003364 <HAL_RCC_OscConfig+0x4b4>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fbfc 	bl	8001a98 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe fbf8 	bl	8001a98 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e093      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b29      	ldr	r3, [pc, #164]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ec:	071b      	lsls	r3, r3, #28
 80032ee:	491b      	ldr	r1, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <HAL_RCC_OscConfig+0x4b4>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fe fbcd 	bl	8001a98 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe fbc9 	bl	8001a98 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e064      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x452>
 8003320:	e05c      	b.n	80033dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b10      	ldr	r3, [pc, #64]	@ (8003364 <HAL_RCC_OscConfig+0x4b4>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fbb6 	bl	8001a98 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003330:	f7fe fbb2 	bl	8001a98 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e04d      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x480>
 800334e:	e045      	b.n	80033dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e040      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
 800335c:	40023800 	.word	0x40023800
 8003360:	40007000 	.word	0x40007000
 8003364:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003368:	4b1f      	ldr	r3, [pc, #124]	@ (80033e8 <HAL_RCC_OscConfig+0x538>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d030      	beq.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d129      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d122      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003398:	4013      	ands	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800339e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d119      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	3b01      	subs	r3, #1
 80033b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d10f      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800

080033ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e041      	b.n	8003482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f839 	bl	800348a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3304      	adds	r3, #4
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f000 f9c0 	bl	80037b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d001      	beq.n	80034b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e04e      	b.n	8003556 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a23      	ldr	r2, [pc, #140]	@ (8003564 <HAL_TIM_Base_Start_IT+0xc4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d022      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x80>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e2:	d01d      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x80>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003568 <HAL_TIM_Base_Start_IT+0xc8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d018      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x80>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	@ (800356c <HAL_TIM_Base_Start_IT+0xcc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d013      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x80>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003570 <HAL_TIM_Base_Start_IT+0xd0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00e      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x80>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1b      	ldr	r2, [pc, #108]	@ (8003574 <HAL_TIM_Base_Start_IT+0xd4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x80>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <HAL_TIM_Base_Start_IT+0xd8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x80>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a18      	ldr	r2, [pc, #96]	@ (800357c <HAL_TIM_Base_Start_IT+0xdc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d111      	bne.n	8003544 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b06      	cmp	r3, #6
 8003530:	d010      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003542:	e007      	b.n	8003554 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40010000 	.word	0x40010000
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00
 8003574:	40010400 	.word	0x40010400
 8003578:	40014000 	.word	0x40014000
 800357c:	40001800 	.word	0x40001800

08003580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d020      	beq.n	80035e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01b      	beq.n	80035e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0202 	mvn.w	r2, #2
 80035b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8d2 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8c4 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8d5 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d020      	beq.n	8003630 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01b      	beq.n	8003630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0204 	mvn.w	r2, #4
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8ac 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f89e 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f8af 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d020      	beq.n	800367c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01b      	beq.n	800367c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0208 	mvn.w	r2, #8
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2204      	movs	r2, #4
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f886 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f878 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f889 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d020      	beq.n	80036c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01b      	beq.n	80036c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0210 	mvn.w	r2, #16
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2208      	movs	r2, #8
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f860 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f852 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f863 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0201 	mvn.w	r2, #1
 80036e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd ff24 	bl	8001534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00c      	beq.n	8003710 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f900 	bl	8003910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00c      	beq.n	8003734 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800372c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f834 	bl	800379c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0220 	mvn.w	r2, #32
 8003750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8d2 	bl	80038fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a43      	ldr	r2, [pc, #268]	@ (80038d0 <TIM_Base_SetConfig+0x120>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d013      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ce:	d00f      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a40      	ldr	r2, [pc, #256]	@ (80038d4 <TIM_Base_SetConfig+0x124>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a3f      	ldr	r2, [pc, #252]	@ (80038d8 <TIM_Base_SetConfig+0x128>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a3e      	ldr	r2, [pc, #248]	@ (80038dc <TIM_Base_SetConfig+0x12c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a3d      	ldr	r2, [pc, #244]	@ (80038e0 <TIM_Base_SetConfig+0x130>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d108      	bne.n	8003802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a32      	ldr	r2, [pc, #200]	@ (80038d0 <TIM_Base_SetConfig+0x120>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02b      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003810:	d027      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a2f      	ldr	r2, [pc, #188]	@ (80038d4 <TIM_Base_SetConfig+0x124>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d023      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a2e      	ldr	r2, [pc, #184]	@ (80038d8 <TIM_Base_SetConfig+0x128>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01f      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a2d      	ldr	r2, [pc, #180]	@ (80038dc <TIM_Base_SetConfig+0x12c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01b      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a2c      	ldr	r2, [pc, #176]	@ (80038e0 <TIM_Base_SetConfig+0x130>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d017      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a2b      	ldr	r2, [pc, #172]	@ (80038e4 <TIM_Base_SetConfig+0x134>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2a      	ldr	r2, [pc, #168]	@ (80038e8 <TIM_Base_SetConfig+0x138>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00f      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a29      	ldr	r2, [pc, #164]	@ (80038ec <TIM_Base_SetConfig+0x13c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a28      	ldr	r2, [pc, #160]	@ (80038f0 <TIM_Base_SetConfig+0x140>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a27      	ldr	r2, [pc, #156]	@ (80038f4 <TIM_Base_SetConfig+0x144>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a26      	ldr	r2, [pc, #152]	@ (80038f8 <TIM_Base_SetConfig+0x148>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d108      	bne.n	8003874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a0e      	ldr	r2, [pc, #56]	@ (80038d0 <TIM_Base_SetConfig+0x120>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_Base_SetConfig+0xf2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a10      	ldr	r2, [pc, #64]	@ (80038e0 <TIM_Base_SetConfig+0x130>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d103      	bne.n	80038aa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f043 0204 	orr.w	r2, r3, #4
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	601a      	str	r2, [r3, #0]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40014400 	.word	0x40014400
 80038ec:	40014800 	.word	0x40014800
 80038f0:	40001800 	.word	0x40001800
 80038f4:	40001c00 	.word	0x40001c00
 80038f8:	40002000 	.word	0x40002000

080038fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e042      	b.n	80039bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fe7a 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	@ 0x24
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f973 	bl	8003c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800397c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800398c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800399c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	@ 0x28
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d175      	bne.n	8003ad0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_UART_Transmit+0x2c>
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e06e      	b.n	8003ad2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2221      	movs	r2, #33	@ 0x21
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a02:	f7fe f849 	bl	8001a98 <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1c:	d108      	bne.n	8003a30 <HAL_UART_Transmit+0x6c>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d104      	bne.n	8003a30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	e003      	b.n	8003a38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a38:	e02e      	b.n	8003a98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2180      	movs	r1, #128	@ 0x80
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f848 	bl	8003ada <UART_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e03a      	b.n	8003ad2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	3302      	adds	r3, #2
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e007      	b.n	8003a8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3301      	adds	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1cb      	bne.n	8003a3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2140      	movs	r1, #64	@ 0x40
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f814 	bl	8003ada <UART_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e006      	b.n	8003ad2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e000      	b.n	8003ad2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aea:	e03b      	b.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d037      	beq.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7fd ffd0 	bl	8001a98 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	6a3a      	ldr	r2, [r7, #32]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e03a      	b.n	8003b84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d023      	beq.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b80      	cmp	r3, #128	@ 0x80
 8003b20:	d020      	beq.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d01d      	beq.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d116      	bne.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f81d 	bl	8003b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2208      	movs	r2, #8
 8003b56:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e00f      	b.n	8003b84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d0b4      	beq.n	8003aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b095      	sub	sp, #84	@ 0x54
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e5      	bne.n	8003b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3314      	adds	r3, #20
 8003be6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003be8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e5      	bne.n	8003bc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d119      	bne.n	8003c38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f023 0310 	bic.w	r3, r3, #16
 8003c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c24:	61ba      	str	r2, [r7, #24]
 8003c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6979      	ldr	r1, [r7, #20]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	613b      	str	r3, [r7, #16]
   return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e5      	bne.n	8003c04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c46:	bf00      	nop
 8003c48:	3754      	adds	r7, #84	@ 0x54
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c58:	b0c0      	sub	sp, #256	@ 0x100
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	68d9      	ldr	r1, [r3, #12]
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	ea40 0301 	orr.w	r3, r0, r1
 8003c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cac:	f021 010c 	bic.w	r1, r1, #12
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cce:	6999      	ldr	r1, [r3, #24]
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	ea40 0301 	orr.w	r3, r0, r1
 8003cda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b8f      	ldr	r3, [pc, #572]	@ (8003f20 <UART_SetConfig+0x2cc>)
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d005      	beq.n	8003cf4 <UART_SetConfig+0xa0>
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4b8d      	ldr	r3, [pc, #564]	@ (8003f24 <UART_SetConfig+0x2d0>)
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d104      	bne.n	8003cfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cf4:	f7fe fe66 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8003cf8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003cfc:	e003      	b.n	8003d06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cfe:	f7fe fe4d 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8003d02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d10:	f040 810c 	bne.w	8003f2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d26:	4622      	mov	r2, r4
 8003d28:	462b      	mov	r3, r5
 8003d2a:	1891      	adds	r1, r2, r2
 8003d2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d2e:	415b      	adcs	r3, r3
 8003d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d36:	4621      	mov	r1, r4
 8003d38:	eb12 0801 	adds.w	r8, r2, r1
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	eb43 0901 	adc.w	r9, r3, r1
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d56:	4690      	mov	r8, r2
 8003d58:	4699      	mov	r9, r3
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	eb18 0303 	adds.w	r3, r8, r3
 8003d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d64:	462b      	mov	r3, r5
 8003d66:	eb49 0303 	adc.w	r3, r9, r3
 8003d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d82:	460b      	mov	r3, r1
 8003d84:	18db      	adds	r3, r3, r3
 8003d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d88:	4613      	mov	r3, r2
 8003d8a:	eb42 0303 	adc.w	r3, r2, r3
 8003d8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d98:	f7fc ff26 	bl	8000be8 <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4b61      	ldr	r3, [pc, #388]	@ (8003f28 <UART_SetConfig+0x2d4>)
 8003da2:	fba3 2302 	umull	r2, r3, r3, r2
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	011c      	lsls	r4, r3, #4
 8003daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003db4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003db8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	1891      	adds	r1, r2, r2
 8003dc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003dc4:	415b      	adcs	r3, r3
 8003dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dcc:	4641      	mov	r1, r8
 8003dce:	eb12 0a01 	adds.w	sl, r2, r1
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	eb43 0b01 	adc.w	fp, r3, r1
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003de4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003de8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dec:	4692      	mov	sl, r2
 8003dee:	469b      	mov	fp, r3
 8003df0:	4643      	mov	r3, r8
 8003df2:	eb1a 0303 	adds.w	r3, sl, r3
 8003df6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	eb4b 0303 	adc.w	r3, fp, r3
 8003e00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	18db      	adds	r3, r3, r3
 8003e1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e1e:	4613      	mov	r3, r2
 8003e20:	eb42 0303 	adc.w	r3, r2, r3
 8003e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e2e:	f7fc fedb 	bl	8000be8 <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	4b3b      	ldr	r3, [pc, #236]	@ (8003f28 <UART_SetConfig+0x2d4>)
 8003e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2264      	movs	r2, #100	@ 0x64
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	1acb      	subs	r3, r1, r3
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e4e:	4b36      	ldr	r3, [pc, #216]	@ (8003f28 <UART_SetConfig+0x2d4>)
 8003e50:	fba3 2302 	umull	r2, r3, r3, r2
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e5c:	441c      	add	r4, r3
 8003e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	1891      	adds	r1, r2, r2
 8003e76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e78:	415b      	adcs	r3, r3
 8003e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e80:	4641      	mov	r1, r8
 8003e82:	1851      	adds	r1, r2, r1
 8003e84:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e86:	4649      	mov	r1, r9
 8003e88:	414b      	adcs	r3, r1
 8003e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e98:	4659      	mov	r1, fp
 8003e9a:	00cb      	lsls	r3, r1, #3
 8003e9c:	4651      	mov	r1, sl
 8003e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea2:	4651      	mov	r1, sl
 8003ea4:	00ca      	lsls	r2, r1, #3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4642      	mov	r2, r8
 8003eae:	189b      	adds	r3, r3, r2
 8003eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003eb4:	464b      	mov	r3, r9
 8003eb6:	460a      	mov	r2, r1
 8003eb8:	eb42 0303 	adc.w	r3, r2, r3
 8003ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ecc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ed0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	18db      	adds	r3, r3, r3
 8003ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eda:	4613      	mov	r3, r2
 8003edc:	eb42 0303 	adc.w	r3, r2, r3
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ee6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003eea:	f7fc fe7d 	bl	8000be8 <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f28 <UART_SetConfig+0x2d4>)
 8003ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	2164      	movs	r1, #100	@ 0x64
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	3332      	adds	r3, #50	@ 0x32
 8003f06:	4a08      	ldr	r2, [pc, #32]	@ (8003f28 <UART_SetConfig+0x2d4>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	f003 0207 	and.w	r2, r3, #7
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4422      	add	r2, r4
 8003f1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f1c:	e106      	b.n	800412c <UART_SetConfig+0x4d8>
 8003f1e:	bf00      	nop
 8003f20:	40011000 	.word	0x40011000
 8003f24:	40011400 	.word	0x40011400
 8003f28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f3e:	4642      	mov	r2, r8
 8003f40:	464b      	mov	r3, r9
 8003f42:	1891      	adds	r1, r2, r2
 8003f44:	6239      	str	r1, [r7, #32]
 8003f46:	415b      	adcs	r3, r3
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f4e:	4641      	mov	r1, r8
 8003f50:	1854      	adds	r4, r2, r1
 8003f52:	4649      	mov	r1, r9
 8003f54:	eb43 0501 	adc.w	r5, r3, r1
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	00eb      	lsls	r3, r5, #3
 8003f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f66:	00e2      	lsls	r2, r4, #3
 8003f68:	4614      	mov	r4, r2
 8003f6a:	461d      	mov	r5, r3
 8003f6c:	4643      	mov	r3, r8
 8003f6e:	18e3      	adds	r3, r4, r3
 8003f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f74:	464b      	mov	r3, r9
 8003f76:	eb45 0303 	adc.w	r3, r5, r3
 8003f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	008b      	lsls	r3, r1, #2
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	008a      	lsls	r2, r1, #2
 8003fa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fac:	f7fc fe1c 	bl	8000be8 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4b60      	ldr	r3, [pc, #384]	@ (8004138 <UART_SetConfig+0x4e4>)
 8003fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	011c      	lsls	r4, r3, #4
 8003fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	1891      	adds	r1, r2, r2
 8003fd6:	61b9      	str	r1, [r7, #24]
 8003fd8:	415b      	adcs	r3, r3
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	1851      	adds	r1, r2, r1
 8003fe4:	6139      	str	r1, [r7, #16]
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	414b      	adcs	r3, r1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ff8:	4659      	mov	r1, fp
 8003ffa:	00cb      	lsls	r3, r1, #3
 8003ffc:	4651      	mov	r1, sl
 8003ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004002:	4651      	mov	r1, sl
 8004004:	00ca      	lsls	r2, r1, #3
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	4603      	mov	r3, r0
 800400c:	4642      	mov	r2, r8
 800400e:	189b      	adds	r3, r3, r2
 8004010:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004014:	464b      	mov	r3, r9
 8004016:	460a      	mov	r2, r1
 8004018:	eb42 0303 	adc.w	r3, r2, r3
 800401c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	67bb      	str	r3, [r7, #120]	@ 0x78
 800402a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004038:	4649      	mov	r1, r9
 800403a:	008b      	lsls	r3, r1, #2
 800403c:	4641      	mov	r1, r8
 800403e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004042:	4641      	mov	r1, r8
 8004044:	008a      	lsls	r2, r1, #2
 8004046:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800404a:	f7fc fdcd 	bl	8000be8 <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4611      	mov	r1, r2
 8004054:	4b38      	ldr	r3, [pc, #224]	@ (8004138 <UART_SetConfig+0x4e4>)
 8004056:	fba3 2301 	umull	r2, r3, r3, r1
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	2264      	movs	r2, #100	@ 0x64
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	1acb      	subs	r3, r1, r3
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	3332      	adds	r3, #50	@ 0x32
 8004068:	4a33      	ldr	r2, [pc, #204]	@ (8004138 <UART_SetConfig+0x4e4>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004074:	441c      	add	r4, r3
 8004076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800407a:	2200      	movs	r2, #0
 800407c:	673b      	str	r3, [r7, #112]	@ 0x70
 800407e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004080:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	1891      	adds	r1, r2, r2
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	415b      	adcs	r3, r3
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004094:	4641      	mov	r1, r8
 8004096:	1851      	adds	r1, r2, r1
 8004098:	6039      	str	r1, [r7, #0]
 800409a:	4649      	mov	r1, r9
 800409c:	414b      	adcs	r3, r1
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040ac:	4659      	mov	r1, fp
 80040ae:	00cb      	lsls	r3, r1, #3
 80040b0:	4651      	mov	r1, sl
 80040b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b6:	4651      	mov	r1, sl
 80040b8:	00ca      	lsls	r2, r1, #3
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	4642      	mov	r2, r8
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040c6:	464b      	mov	r3, r9
 80040c8:	460a      	mov	r2, r1
 80040ca:	eb42 0303 	adc.w	r3, r2, r3
 80040ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80040da:	667a      	str	r2, [r7, #100]	@ 0x64
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040e8:	4649      	mov	r1, r9
 80040ea:	008b      	lsls	r3, r1, #2
 80040ec:	4641      	mov	r1, r8
 80040ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f2:	4641      	mov	r1, r8
 80040f4:	008a      	lsls	r2, r1, #2
 80040f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80040fa:	f7fc fd75 	bl	8000be8 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <UART_SetConfig+0x4e4>)
 8004104:	fba3 1302 	umull	r1, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	2164      	movs	r1, #100	@ 0x64
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	3332      	adds	r3, #50	@ 0x32
 8004116:	4a08      	ldr	r2, [pc, #32]	@ (8004138 <UART_SetConfig+0x4e4>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	f003 020f 	and.w	r2, r3, #15
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4422      	add	r2, r4
 800412a:	609a      	str	r2, [r3, #8]
}
 800412c:	bf00      	nop
 800412e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004132:	46bd      	mov	sp, r7
 8004134:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004138:	51eb851f 	.word	0x51eb851f

0800413c <__NVIC_SetPriority>:
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414c:	2b00      	cmp	r3, #0
 800414e:	db0a      	blt.n	8004166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b2da      	uxtb	r2, r3
 8004154:	490c      	ldr	r1, [pc, #48]	@ (8004188 <__NVIC_SetPriority+0x4c>)
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	440b      	add	r3, r1
 8004160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004164:	e00a      	b.n	800417c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4908      	ldr	r1, [pc, #32]	@ (800418c <__NVIC_SetPriority+0x50>)
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	3b04      	subs	r3, #4
 8004174:	0112      	lsls	r2, r2, #4
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	440b      	add	r3, r1
 800417a:	761a      	strb	r2, [r3, #24]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000e100 	.word	0xe000e100
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <SysTick_Handler+0x1c>)
 8004196:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004198:	f002 fac8 	bl	800672c <xTaskGetSchedulerState>
 800419c:	4603      	mov	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d001      	beq.n	80041a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80041a2:	f003 f9c1 	bl	8007528 <xPortSysTickHandler>
  }
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	e000e010 	.word	0xe000e010

080041b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80041b4:	2100      	movs	r1, #0
 80041b6:	f06f 0004 	mvn.w	r0, #4
 80041ba:	f7ff ffbf 	bl	800413c <__NVIC_SetPriority>
#endif
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ca:	f3ef 8305 	mrs	r3, IPSR
 80041ce:	603b      	str	r3, [r7, #0]
  return(result);
 80041d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80041d6:	f06f 0305 	mvn.w	r3, #5
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	e00c      	b.n	80041f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041de:	4b0a      	ldr	r3, [pc, #40]	@ (8004208 <osKernelInitialize+0x44>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041e6:	4b08      	ldr	r3, [pc, #32]	@ (8004208 <osKernelInitialize+0x44>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	607b      	str	r3, [r7, #4]
 80041f0:	e002      	b.n	80041f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80041f2:	f04f 33ff 	mov.w	r3, #4294967295
 80041f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80041f8:	687b      	ldr	r3, [r7, #4]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	200002f0 	.word	0x200002f0

0800420c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004212:	f3ef 8305 	mrs	r3, IPSR
 8004216:	603b      	str	r3, [r7, #0]
  return(result);
 8004218:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <osKernelStart+0x1a>
    stat = osErrorISR;
 800421e:	f06f 0305 	mvn.w	r3, #5
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	e010      	b.n	8004248 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <osKernelStart+0x48>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d109      	bne.n	8004242 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800422e:	f7ff ffbf 	bl	80041b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004232:	4b08      	ldr	r3, [pc, #32]	@ (8004254 <osKernelStart+0x48>)
 8004234:	2202      	movs	r2, #2
 8004236:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004238:	f001 fe14 	bl	8005e64 <vTaskStartScheduler>
      stat = osOK;
 800423c:	2300      	movs	r3, #0
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	e002      	b.n	8004248 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004242:	f04f 33ff 	mov.w	r3, #4294967295
 8004246:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004248:	687b      	ldr	r3, [r7, #4]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200002f0 	.word	0x200002f0

08004258 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b08e      	sub	sp, #56	@ 0x38
 800425c:	af04      	add	r7, sp, #16
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004268:	f3ef 8305 	mrs	r3, IPSR
 800426c:	617b      	str	r3, [r7, #20]
  return(result);
 800426e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004270:	2b00      	cmp	r3, #0
 8004272:	d17e      	bne.n	8004372 <osThreadNew+0x11a>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d07b      	beq.n	8004372 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800427a:	2380      	movs	r3, #128	@ 0x80
 800427c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800427e:	2318      	movs	r3, #24
 8004280:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004286:	f04f 33ff 	mov.w	r3, #4294967295
 800428a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d045      	beq.n	800431e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <osThreadNew+0x48>
        name = attr->name;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <osThreadNew+0x6e>
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b38      	cmp	r3, #56	@ 0x38
 80042b8:	d805      	bhi.n	80042c6 <osThreadNew+0x6e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <osThreadNew+0x72>
        return (NULL);
 80042c6:	2300      	movs	r3, #0
 80042c8:	e054      	b.n	8004374 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	089b      	lsrs	r3, r3, #2
 80042d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00e      	beq.n	8004300 <osThreadNew+0xa8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2ba7      	cmp	r3, #167	@ 0xa7
 80042e8:	d90a      	bls.n	8004300 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d006      	beq.n	8004300 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <osThreadNew+0xa8>
        mem = 1;
 80042fa:	2301      	movs	r3, #1
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	e010      	b.n	8004322 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10c      	bne.n	8004322 <osThreadNew+0xca>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <osThreadNew+0xca>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d104      	bne.n	8004322 <osThreadNew+0xca>
          mem = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	e001      	b.n	8004322 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d110      	bne.n	800434a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004330:	9202      	str	r2, [sp, #8]
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6a3a      	ldr	r2, [r7, #32]
 800433c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f001 fb9c 	bl	8005a7c <xTaskCreateStatic>
 8004344:	4603      	mov	r3, r0
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	e013      	b.n	8004372 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d110      	bne.n	8004372 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	b29a      	uxth	r2, r3
 8004354:	f107 0310 	add.w	r3, r7, #16
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f001 fbea 	bl	8005b3c <xTaskCreate>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d001      	beq.n	8004372 <osThreadNew+0x11a>
            hTask = NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004372:	693b      	ldr	r3, [r7, #16]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3728      	adds	r7, #40	@ 0x28
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004384:	f3ef 8305 	mrs	r3, IPSR
 8004388:	60bb      	str	r3, [r7, #8]
  return(result);
 800438a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <osDelay+0x1c>
    stat = osErrorISR;
 8004390:	f06f 0305 	mvn.w	r3, #5
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e007      	b.n	80043a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 fd28 	bl	8005df8 <vTaskDelay>
    }
  }

  return (stat);
 80043a8:	68fb      	ldr	r3, [r7, #12]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b08a      	sub	sp, #40	@ 0x28
 80043b6:	af02      	add	r7, sp, #8
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043c2:	f3ef 8305 	mrs	r3, IPSR
 80043c6:	613b      	str	r3, [r7, #16]
  return(result);
 80043c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d175      	bne.n	80044ba <osSemaphoreNew+0x108>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d072      	beq.n	80044ba <osSemaphoreNew+0x108>
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d86e      	bhi.n	80044ba <osSemaphoreNew+0x108>
    mem = -1;
 80043dc:	f04f 33ff 	mov.w	r3, #4294967295
 80043e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d006      	beq.n	80043fe <osSemaphoreNew+0x4c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80043f6:	d902      	bls.n	80043fe <osSemaphoreNew+0x4c>
        mem = 1;
 80043f8:	2301      	movs	r3, #1
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e00c      	b.n	8004418 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <osSemaphoreNew+0x66>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d104      	bne.n	8004418 <osSemaphoreNew+0x66>
          mem = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	e001      	b.n	8004418 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d04c      	beq.n	80044ba <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d128      	bne.n	8004478 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d10a      	bne.n	8004442 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2203      	movs	r2, #3
 8004432:	9200      	str	r2, [sp, #0]
 8004434:	2200      	movs	r2, #0
 8004436:	2100      	movs	r1, #0
 8004438:	2001      	movs	r0, #1
 800443a:	f000 fb5d 	bl	8004af8 <xQueueGenericCreateStatic>
 800443e:	61f8      	str	r0, [r7, #28]
 8004440:	e005      	b.n	800444e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004442:	2203      	movs	r2, #3
 8004444:	2100      	movs	r1, #0
 8004446:	2001      	movs	r0, #1
 8004448:	f000 fbd3 	bl	8004bf2 <xQueueGenericCreate>
 800444c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d022      	beq.n	800449a <osSemaphoreNew+0xe8>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01f      	beq.n	800449a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800445a:	2300      	movs	r3, #0
 800445c:	2200      	movs	r2, #0
 800445e:	2100      	movs	r1, #0
 8004460:	69f8      	ldr	r0, [r7, #28]
 8004462:	f000 fc93 	bl	8004d8c <xQueueGenericSend>
 8004466:	4603      	mov	r3, r0
 8004468:	2b01      	cmp	r3, #1
 800446a:	d016      	beq.n	800449a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800446c:	69f8      	ldr	r0, [r7, #28]
 800446e:	f001 f931 	bl	80056d4 <vQueueDelete>
            hSemaphore = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	e010      	b.n	800449a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d108      	bne.n	8004490 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	461a      	mov	r2, r3
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fc11 	bl	8004cae <xQueueCreateCountingSemaphoreStatic>
 800448c:	61f8      	str	r0, [r7, #28]
 800448e:	e004      	b.n	800449a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fc44 	bl	8004d20 <xQueueCreateCountingSemaphore>
 8004498:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00c      	beq.n	80044ba <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <osSemaphoreNew+0xfc>
          name = attr->name;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e001      	b.n	80044b2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80044b2:	6979      	ldr	r1, [r7, #20]
 80044b4:	69f8      	ldr	r0, [r7, #28]
 80044b6:	f001 fa59 	bl	800596c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80044ba:	69fb      	ldr	r3, [r7, #28]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d103      	bne.n	80044e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80044dc:	f06f 0303 	mvn.w	r3, #3
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e039      	b.n	8004558 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e4:	f3ef 8305 	mrs	r3, IPSR
 80044e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80044ea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d022      	beq.n	8004536 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80044f6:	f06f 0303 	mvn.w	r3, #3
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	e02c      	b.n	8004558 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004502:	f107 0308 	add.w	r3, r7, #8
 8004506:	461a      	mov	r2, r3
 8004508:	2100      	movs	r1, #0
 800450a:	6938      	ldr	r0, [r7, #16]
 800450c:	f001 f860 	bl	80055d0 <xQueueReceiveFromISR>
 8004510:	4603      	mov	r3, r0
 8004512:	2b01      	cmp	r3, #1
 8004514:	d003      	beq.n	800451e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004516:	f06f 0302 	mvn.w	r3, #2
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e01c      	b.n	8004558 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d019      	beq.n	8004558 <osSemaphoreAcquire+0x94>
 8004524:	4b0f      	ldr	r3, [pc, #60]	@ (8004564 <osSemaphoreAcquire+0xa0>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	e010      	b.n	8004558 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	6938      	ldr	r0, [r7, #16]
 800453a:	f000 ff39 	bl	80053b0 <xQueueSemaphoreTake>
 800453e:	4603      	mov	r3, r0
 8004540:	2b01      	cmp	r3, #1
 8004542:	d009      	beq.n	8004558 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800454a:	f06f 0301 	mvn.w	r3, #1
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e002      	b.n	8004558 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004552:	f06f 0302 	mvn.w	r3, #2
 8004556:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004558:	697b      	ldr	r3, [r7, #20]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800457e:	f06f 0303 	mvn.w	r3, #3
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e02c      	b.n	80045e0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004586:	f3ef 8305 	mrs	r3, IPSR
 800458a:	60fb      	str	r3, [r7, #12]
  return(result);
 800458c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01a      	beq.n	80045c8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004596:	f107 0308 	add.w	r3, r7, #8
 800459a:	4619      	mov	r1, r3
 800459c:	6938      	ldr	r0, [r7, #16]
 800459e:	f000 fd95 	bl	80050cc <xQueueGiveFromISR>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d003      	beq.n	80045b0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80045a8:	f06f 0302 	mvn.w	r3, #2
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	e017      	b.n	80045e0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d014      	beq.n	80045e0 <osSemaphoreRelease+0x78>
 80045b6:	4b0d      	ldr	r3, [pc, #52]	@ (80045ec <osSemaphoreRelease+0x84>)
 80045b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	e00b      	b.n	80045e0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80045c8:	2300      	movs	r3, #0
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	6938      	ldr	r0, [r7, #16]
 80045d0:	f000 fbdc 	bl	8004d8c <xQueueGenericSend>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d002      	beq.n	80045e0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80045da:	f06f 0302 	mvn.w	r3, #2
 80045de:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80045e0:	697b      	ldr	r3, [r7, #20]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	@ 0x28
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004600:	f3ef 8305 	mrs	r3, IPSR
 8004604:	613b      	str	r3, [r7, #16]
  return(result);
 8004606:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004608:	2b00      	cmp	r3, #0
 800460a:	d15f      	bne.n	80046cc <osMessageQueueNew+0xdc>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d05c      	beq.n	80046cc <osMessageQueueNew+0xdc>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d059      	beq.n	80046cc <osMessageQueueNew+0xdc>
    mem = -1;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d029      	beq.n	8004678 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d012      	beq.n	8004652 <osMessageQueueNew+0x62>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b4f      	cmp	r3, #79	@ 0x4f
 8004632:	d90e      	bls.n	8004652 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	429a      	cmp	r2, r3
 800464a:	d302      	bcc.n	8004652 <osMessageQueueNew+0x62>
        mem = 1;
 800464c:	2301      	movs	r3, #1
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	e014      	b.n	800467c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d110      	bne.n	800467c <osMessageQueueNew+0x8c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10c      	bne.n	800467c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <osMessageQueueNew+0x8c>
          mem = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e001      	b.n	800467c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d10b      	bne.n	800469a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2100      	movs	r1, #0
 800468c:	9100      	str	r1, [sp, #0]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fa31 	bl	8004af8 <xQueueGenericCreateStatic>
 8004696:	61f8      	str	r0, [r7, #28]
 8004698:	e008      	b.n	80046ac <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80046a0:	2200      	movs	r2, #0
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 faa4 	bl	8004bf2 <xQueueGenericCreate>
 80046aa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e001      	b.n	80046c4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80046c4:	6979      	ldr	r1, [r7, #20]
 80046c6:	69f8      	ldr	r0, [r7, #28]
 80046c8:	f001 f950 	bl	800596c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80046cc:	69fb      	ldr	r3, [r7, #28]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	4613      	mov	r3, r2
 80046e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f0:	f3ef 8305 	mrs	r3, IPSR
 80046f4:	617b      	str	r3, [r7, #20]
  return(result);
 80046f6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d028      	beq.n	800474e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <osMessageQueuePut+0x36>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <osMessageQueuePut+0x36>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800470e:	f06f 0303 	mvn.w	r3, #3
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	e038      	b.n	8004788 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800471a:	f107 0210 	add.w	r2, r7, #16
 800471e:	2300      	movs	r3, #0
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	69b8      	ldr	r0, [r7, #24]
 8004724:	f000 fc34 	bl	8004f90 <xQueueGenericSendFromISR>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d003      	beq.n	8004736 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800472e:	f06f 0302 	mvn.w	r3, #2
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	e028      	b.n	8004788 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d025      	beq.n	8004788 <osMessageQueuePut+0xb0>
 800473c:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <osMessageQueuePut+0xbc>)
 800473e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	e01c      	b.n	8004788 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <osMessageQueuePut+0x82>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d103      	bne.n	8004762 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800475a:	f06f 0303 	mvn.w	r3, #3
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	e012      	b.n	8004788 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004762:	2300      	movs	r3, #0
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	69b8      	ldr	r0, [r7, #24]
 800476a:	f000 fb0f 	bl	8004d8c <xQueueGenericSend>
 800476e:	4603      	mov	r3, r0
 8004770:	2b01      	cmp	r3, #1
 8004772:	d009      	beq.n	8004788 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800477a:	f06f 0301 	mvn.w	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	e002      	b.n	8004788 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004782:	f06f 0302 	mvn.w	r3, #2
 8004786:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004788:	69fb      	ldr	r3, [r7, #28]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ae:	f3ef 8305 	mrs	r3, IPSR
 80047b2:	617b      	str	r3, [r7, #20]
  return(result);
 80047b4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d028      	beq.n	800480c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <osMessageQueueGet+0x34>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <osMessageQueueGet+0x34>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80047cc:	f06f 0303 	mvn.w	r3, #3
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	e037      	b.n	8004844 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80047d8:	f107 0310 	add.w	r3, r7, #16
 80047dc:	461a      	mov	r2, r3
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	69b8      	ldr	r0, [r7, #24]
 80047e2:	f000 fef5 	bl	80055d0 <xQueueReceiveFromISR>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d003      	beq.n	80047f4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80047ec:	f06f 0302 	mvn.w	r3, #2
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	e027      	b.n	8004844 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d024      	beq.n	8004844 <osMessageQueueGet+0xac>
 80047fa:	4b15      	ldr	r3, [pc, #84]	@ (8004850 <osMessageQueueGet+0xb8>)
 80047fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	e01b      	b.n	8004844 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <osMessageQueueGet+0x80>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d103      	bne.n	8004820 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004818:	f06f 0303 	mvn.w	r3, #3
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	e011      	b.n	8004844 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	69b8      	ldr	r0, [r7, #24]
 8004826:	f000 fce1 	bl	80051ec <xQueueReceive>
 800482a:	4603      	mov	r3, r0
 800482c:	2b01      	cmp	r3, #1
 800482e:	d009      	beq.n	8004844 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004836:	f06f 0301 	mvn.w	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	e002      	b.n	8004844 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800483e:	f06f 0302 	mvn.w	r3, #2
 8004842:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004844:	69fb      	ldr	r3, [r7, #28]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a07      	ldr	r2, [pc, #28]	@ (8004880 <vApplicationGetIdleTaskMemory+0x2c>)
 8004864:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4a06      	ldr	r2, [pc, #24]	@ (8004884 <vApplicationGetIdleTaskMemory+0x30>)
 800486a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2280      	movs	r2, #128	@ 0x80
 8004870:	601a      	str	r2, [r3, #0]
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	200002f4 	.word	0x200002f4
 8004884:	2000039c 	.word	0x2000039c

08004888 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a07      	ldr	r2, [pc, #28]	@ (80048b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004898:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4a06      	ldr	r2, [pc, #24]	@ (80048b8 <vApplicationGetTimerTaskMemory+0x30>)
 800489e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048a6:	601a      	str	r2, [r3, #0]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	2000059c 	.word	0x2000059c
 80048b8:	20000644 	.word	0x20000644

080048bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f103 0208 	add.w	r2, r3, #8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f04f 32ff 	mov.w	r2, #4294967295
 80048d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f103 0208 	add.w	r2, r3, #8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f103 0208 	add.w	r2, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d103      	bne.n	800497e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e00c      	b.n	8004998 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3308      	adds	r3, #8
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	e002      	b.n	800498c <vListInsert+0x2e>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	d2f6      	bcs.n	8004986 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6892      	ldr	r2, [r2, #8]
 80049e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6852      	ldr	r2, [r2, #4]
 80049f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d103      	bne.n	8004a04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a50:	f002 fcda 	bl	8007408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5c:	68f9      	ldr	r1, [r7, #12]
 8004a5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	3b01      	subs	r3, #1
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	441a      	add	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	22ff      	movs	r2, #255	@ 0xff
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	22ff      	movs	r2, #255	@ 0xff
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d114      	bne.n	8004ad0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01a      	beq.n	8004ae4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3310      	adds	r3, #16
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 fc74 	bl	80063a0 <xTaskRemoveFromEventList>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d012      	beq.n	8004ae4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004abe:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <xQueueGenericReset+0xd0>)
 8004ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	e009      	b.n	8004ae4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3310      	adds	r3, #16
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fef1 	bl	80048bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3324      	adds	r3, #36	@ 0x24
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff feec 	bl	80048bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ae4:	f002 fcc2 	bl	800746c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ae8:	2301      	movs	r3, #1
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	e000ed04 	.word	0xe000ed04

08004af8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08e      	sub	sp, #56	@ 0x38
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	e7fd      	b.n	8004b3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <xQueueGenericCreateStatic+0x56>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <xQueueGenericCreateStatic+0x5a>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <xQueueGenericCreateStatic+0x5c>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	623b      	str	r3, [r7, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <xQueueGenericCreateStatic+0x84>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <xQueueGenericCreateStatic+0x88>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <xQueueGenericCreateStatic+0x8a>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	61fb      	str	r3, [r7, #28]
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	e7fd      	b.n	8004b9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b9e:	2350      	movs	r3, #80	@ 0x50
 8004ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b50      	cmp	r3, #80	@ 0x50
 8004ba6:	d00b      	beq.n	8004bc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	61bb      	str	r3, [r7, #24]
}
 8004bba:	bf00      	nop
 8004bbc:	bf00      	nop
 8004bbe:	e7fd      	b.n	8004bbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00d      	beq.n	8004be8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f840 	bl	8004c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3730      	adds	r7, #48	@ 0x30
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b08a      	sub	sp, #40	@ 0x28
 8004bf6:	af02      	add	r7, sp, #8
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	613b      	str	r3, [r7, #16]
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	3350      	adds	r3, #80	@ 0x50
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f002 fd0d 	bl	800764c <pvPortMalloc>
 8004c32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d011      	beq.n	8004c5e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	3350      	adds	r3, #80	@ 0x50
 8004c42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c4c:	79fa      	ldrb	r2, [r7, #7]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	4613      	mov	r3, r2
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f805 	bl	8004c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3720      	adds	r7, #32
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d103      	bne.n	8004c84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e002      	b.n	8004c8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c96:	2101      	movs	r1, #1
 8004c98:	69b8      	ldr	r0, [r7, #24]
 8004c9a:	f7ff fec3 	bl	8004a24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b08a      	sub	sp, #40	@ 0x28
 8004cb2:	af02      	add	r7, sp, #8
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	61bb      	str	r3, [r7, #24]
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d90b      	bls.n	8004cf8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	617b      	str	r3, [r7, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	e7fd      	b.n	8004cf4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2100      	movs	r1, #0
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff fef8 	bl	8004af8 <xQueueGenericCreateStatic>
 8004d08:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004d16:	69fb      	ldr	r3, [r7, #28]
	}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	613b      	str	r3, [r7, #16]
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d90b      	bls.n	8004d68 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60fb      	str	r3, [r7, #12]
}
 8004d62:	bf00      	nop
 8004d64:	bf00      	nop
 8004d66:	e7fd      	b.n	8004d64 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d68:	2202      	movs	r2, #2
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff40 	bl	8004bf2 <xQueueGenericCreate>
 8004d72:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004d80:	697b      	ldr	r3, [r7, #20]
	}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08e      	sub	sp, #56	@ 0x38
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <xQueueGenericSend+0x34>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <xQueueGenericSend+0x42>
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <xQueueGenericSend+0x46>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <xQueueGenericSend+0x48>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10b      	bne.n	8004df0 <xQueueGenericSend+0x64>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d103      	bne.n	8004dfe <xQueueGenericSend+0x72>
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <xQueueGenericSend+0x76>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <xQueueGenericSend+0x78>
 8004e02:	2300      	movs	r3, #0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <xQueueGenericSend+0x94>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	623b      	str	r3, [r7, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	e7fd      	b.n	8004e1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e20:	f001 fc84 	bl	800672c <xTaskGetSchedulerState>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <xQueueGenericSend+0xa4>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <xQueueGenericSend+0xa8>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <xQueueGenericSend+0xaa>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <xQueueGenericSend+0xc6>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	61fb      	str	r3, [r7, #28]
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e52:	f002 fad9 	bl	8007408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <xQueueGenericSend+0xdc>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d129      	bne.n	8004ebc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e6e:	f000 fc6d 	bl	800574c <prvCopyDataToQueue>
 8004e72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d010      	beq.n	8004e9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7e:	3324      	adds	r3, #36	@ 0x24
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 fa8d 	bl	80063a0 <xTaskRemoveFromEventList>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d013      	beq.n	8004eb4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f8c <xQueueGenericSend+0x200>)
 8004e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	e00a      	b.n	8004eb4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ea4:	4b39      	ldr	r3, [pc, #228]	@ (8004f8c <xQueueGenericSend+0x200>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004eb4:	f002 fada 	bl	800746c <vPortExitCritical>
				return pdPASS;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e063      	b.n	8004f84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ec2:	f002 fad3 	bl	800746c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e05c      	b.n	8004f84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f001 fac7 	bl	8006468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eda:	2301      	movs	r3, #1
 8004edc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ede:	f002 fac5 	bl	800746c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ee2:	f001 f82f 	bl	8005f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ee6:	f002 fa8f 	bl	8007408 <vPortEnterCritical>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d103      	bne.n	8004f00 <xQueueGenericSend+0x174>
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f06:	b25b      	sxtb	r3, r3
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d103      	bne.n	8004f16 <xQueueGenericSend+0x18a>
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f16:	f002 faa9 	bl	800746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f1a:	1d3a      	adds	r2, r7, #4
 8004f1c:	f107 0314 	add.w	r3, r7, #20
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 fab6 	bl	8006494 <xTaskCheckForTimeOut>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d124      	bne.n	8004f78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f30:	f000 fd04 	bl	800593c <prvIsQueueFull>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d018      	beq.n	8004f6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	3310      	adds	r3, #16
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 f9da 	bl	80062fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f4a:	f000 fc8f 	bl	800586c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f4e:	f001 f807 	bl	8005f60 <xTaskResumeAll>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f47f af7c 	bne.w	8004e52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <xQueueGenericSend+0x200>)
 8004f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	e772      	b.n	8004e52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f6e:	f000 fc7d 	bl	800586c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f72:	f000 fff5 	bl	8005f60 <xTaskResumeAll>
 8004f76:	e76c      	b.n	8004e52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f7a:	f000 fc77 	bl	800586c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f7e:	f000 ffef 	bl	8005f60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3738      	adds	r7, #56	@ 0x38
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b090      	sub	sp, #64	@ 0x40
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <xQueueGenericSendFromISR+0x3e>
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <xQueueGenericSendFromISR+0x42>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <xQueueGenericSendFromISR+0x44>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	e7fd      	b.n	8004fec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d103      	bne.n	8004ffe <xQueueGenericSendFromISR+0x6e>
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <xQueueGenericSendFromISR+0x72>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <xQueueGenericSendFromISR+0x74>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	623b      	str	r3, [r7, #32]
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005020:	f002 fad2 	bl	80075c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005024:	f3ef 8211 	mrs	r2, BASEPRI
 8005028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	61fa      	str	r2, [r7, #28]
 800503a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800503c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <xQueueGenericSendFromISR+0xc2>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d12f      	bne.n	80050b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005058:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005060:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005068:	f000 fb70 	bl	800574c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800506c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d112      	bne.n	800509c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	d016      	beq.n	80050ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800507e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005080:	3324      	adds	r3, #36	@ 0x24
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f98c 	bl	80063a0 <xTaskRemoveFromEventList>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00e      	beq.n	80050ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00b      	beq.n	80050ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e007      	b.n	80050ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800509c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80050a0:	3301      	adds	r3, #1
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	b25a      	sxtb	r2, r3
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80050ac:	2301      	movs	r3, #1
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80050b0:	e001      	b.n	80050b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3740      	adds	r7, #64	@ 0x40
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08e      	sub	sp, #56	@ 0x38
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	623b      	str	r3, [r7, #32]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00b      	beq.n	8005118 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	61fb      	str	r3, [r7, #28]
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <xQueueGiveFromISR+0x5c>
 8005120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <xQueueGiveFromISR+0x60>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <xQueueGiveFromISR+0x62>
 800512c:	2300      	movs	r3, #0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	61bb      	str	r3, [r7, #24]
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	e7fd      	b.n	8005146 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800514a:	f002 fa3d 	bl	80075c8 <vPortValidateInterruptPriority>
	__asm volatile
 800514e:	f3ef 8211 	mrs	r2, BASEPRI
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	617a      	str	r2, [r7, #20]
 8005164:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005166:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005168:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005174:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005176:	429a      	cmp	r2, r3
 8005178:	d22b      	bcs.n	80051d2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800518c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d112      	bne.n	80051bc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	3324      	adds	r3, #36	@ 0x24
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 f8fc 	bl	80063a0 <xTaskRemoveFromEventList>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00e      	beq.n	80051cc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e007      	b.n	80051cc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	b25a      	sxtb	r2, r3
 80051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80051cc:	2301      	movs	r3, #1
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80051d0:	e001      	b.n	80051d6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f383 8811 	msr	BASEPRI, r3
}
 80051e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3738      	adds	r7, #56	@ 0x38
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08c      	sub	sp, #48	@ 0x30
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <xQueueReceive+0x32>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	623b      	str	r3, [r7, #32]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d103      	bne.n	800522c <xQueueReceive+0x40>
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <xQueueReceive+0x44>
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <xQueueReceive+0x46>
 8005230:	2300      	movs	r3, #0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <xQueueReceive+0x62>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	61fb      	str	r3, [r7, #28]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800524e:	f001 fa6d 	bl	800672c <xTaskGetSchedulerState>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <xQueueReceive+0x72>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <xQueueReceive+0x76>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <xQueueReceive+0x78>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <xQueueReceive+0x94>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61bb      	str	r3, [r7, #24]
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005280:	f002 f8c2 	bl	8007408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01f      	beq.n	80052d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005294:	f000 fac4 	bl	8005820 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	1e5a      	subs	r2, r3, #1
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00f      	beq.n	80052c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052aa:	3310      	adds	r3, #16
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 f877 	bl	80063a0 <xTaskRemoveFromEventList>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052b8:	4b3c      	ldr	r3, [pc, #240]	@ (80053ac <xQueueReceive+0x1c0>)
 80052ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052c8:	f002 f8d0 	bl	800746c <vPortExitCritical>
				return pdPASS;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e069      	b.n	80053a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052d6:	f002 f8c9 	bl	800746c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052da:	2300      	movs	r3, #0
 80052dc:	e062      	b.n	80053a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052e4:	f107 0310 	add.w	r3, r7, #16
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 f8bd 	bl	8006468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052ee:	2301      	movs	r3, #1
 80052f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052f2:	f002 f8bb 	bl	800746c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052f6:	f000 fe25 	bl	8005f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052fa:	f002 f885 	bl	8007408 <vPortEnterCritical>
 80052fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005300:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005304:	b25b      	sxtb	r3, r3
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d103      	bne.n	8005314 <xQueueReceive+0x128>
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800531a:	b25b      	sxtb	r3, r3
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d103      	bne.n	800532a <xQueueReceive+0x13e>
 8005322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800532a:	f002 f89f 	bl	800746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800532e:	1d3a      	adds	r2, r7, #4
 8005330:	f107 0310 	add.w	r3, r7, #16
 8005334:	4611      	mov	r1, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f001 f8ac 	bl	8006494 <xTaskCheckForTimeOut>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d123      	bne.n	800538a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005344:	f000 fae4 	bl	8005910 <prvIsQueueEmpty>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d017      	beq.n	800537e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800534e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005350:	3324      	adds	r3, #36	@ 0x24
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f000 ffd0 	bl	80062fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800535c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800535e:	f000 fa85 	bl	800586c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005362:	f000 fdfd 	bl	8005f60 <xTaskResumeAll>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d189      	bne.n	8005280 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800536c:	4b0f      	ldr	r3, [pc, #60]	@ (80053ac <xQueueReceive+0x1c0>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	e780      	b.n	8005280 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800537e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005380:	f000 fa74 	bl	800586c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005384:	f000 fdec 	bl	8005f60 <xTaskResumeAll>
 8005388:	e77a      	b.n	8005280 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800538a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800538c:	f000 fa6e 	bl	800586c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005390:	f000 fde6 	bl	8005f60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005396:	f000 fabb 	bl	8005910 <prvIsQueueEmpty>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	f43f af6f 	beq.w	8005280 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3730      	adds	r7, #48	@ 0x30
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08e      	sub	sp, #56	@ 0x38
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	623b      	str	r3, [r7, #32]
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	61fb      	str	r3, [r7, #28]
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005404:	f001 f992 	bl	800672c <xTaskGetSchedulerState>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <xQueueSemaphoreTake+0x64>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <xQueueSemaphoreTake+0x68>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <xQueueSemaphoreTake+0x6a>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	61bb      	str	r3, [r7, #24]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005436:	f001 ffe7 	bl	8007408 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800543a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d024      	beq.n	8005490 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005448:	1e5a      	subs	r2, r3, #1
 800544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005456:	f001 fae3 	bl	8006a20 <pvTaskIncrementMutexHeldCount>
 800545a:	4602      	mov	r2, r0
 800545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00f      	beq.n	8005488 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546a:	3310      	adds	r3, #16
 800546c:	4618      	mov	r0, r3
 800546e:	f000 ff97 	bl	80063a0 <xTaskRemoveFromEventList>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005478:	4b54      	ldr	r3, [pc, #336]	@ (80055cc <xQueueSemaphoreTake+0x21c>)
 800547a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005488:	f001 fff0 	bl	800746c <vPortExitCritical>
				return pdPASS;
 800548c:	2301      	movs	r3, #1
 800548e:	e098      	b.n	80055c2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d112      	bne.n	80054bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	617b      	str	r3, [r7, #20]
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	e7fd      	b.n	80054b0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80054b4:	f001 ffda 	bl	800746c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e082      	b.n	80055c2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 ffce 	bl	8006468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054d0:	f001 ffcc 	bl	800746c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054d4:	f000 fd36 	bl	8005f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054d8:	f001 ff96 	bl	8007408 <vPortEnterCritical>
 80054dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <xQueueSemaphoreTake+0x142>
 80054ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d103      	bne.n	8005508 <xQueueSemaphoreTake+0x158>
 8005500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005508:	f001 ffb0 	bl	800746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800550c:	463a      	mov	r2, r7
 800550e:	f107 030c 	add.w	r3, r7, #12
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f000 ffbd 	bl	8006494 <xTaskCheckForTimeOut>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d132      	bne.n	8005586 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005520:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005522:	f000 f9f5 	bl	8005910 <prvIsQueueEmpty>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d026      	beq.n	800557a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800552c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005534:	f001 ff68 	bl	8007408 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f913 	bl	8006768 <xTaskPriorityInherit>
 8005542:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005544:	f001 ff92 	bl	800746c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554a:	3324      	adds	r3, #36	@ 0x24
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	4611      	mov	r1, r2
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fed3 	bl	80062fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005556:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005558:	f000 f988 	bl	800586c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800555c:	f000 fd00 	bl	8005f60 <xTaskResumeAll>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	f47f af67 	bne.w	8005436 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005568:	4b18      	ldr	r3, [pc, #96]	@ (80055cc <xQueueSemaphoreTake+0x21c>)
 800556a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	e75d      	b.n	8005436 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800557a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800557c:	f000 f976 	bl	800586c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005580:	f000 fcee 	bl	8005f60 <xTaskResumeAll>
 8005584:	e757      	b.n	8005436 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005588:	f000 f970 	bl	800586c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800558c:	f000 fce8 	bl	8005f60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005590:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005592:	f000 f9bd 	bl	8005910 <prvIsQueueEmpty>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	f43f af4c 	beq.w	8005436 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00d      	beq.n	80055c0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80055a4:	f001 ff30 	bl	8007408 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80055a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055aa:	f000 f8b7 	bl	800571c <prvGetDisinheritPriorityAfterTimeout>
 80055ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 f9ae 	bl	8006918 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80055bc:	f001 ff56 	bl	800746c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3738      	adds	r7, #56	@ 0x38
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08e      	sub	sp, #56	@ 0x38
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	623b      	str	r3, [r7, #32]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d103      	bne.n	800560c <xQueueReceiveFromISR+0x3c>
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <xQueueReceiveFromISR+0x40>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <xQueueReceiveFromISR+0x42>
 8005610:	2300      	movs	r3, #0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	61fb      	str	r3, [r7, #28]
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	e7fd      	b.n	800562a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800562e:	f001 ffcb 	bl	80075c8 <vPortValidateInterruptPriority>
	__asm volatile
 8005632:	f3ef 8211 	mrs	r2, BASEPRI
 8005636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	61ba      	str	r2, [r7, #24]
 8005648:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800564a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800564c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	d02f      	beq.n	80056ba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005668:	f000 f8da 	bl	8005820 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566e:	1e5a      	subs	r2, r3, #1
 8005670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005672:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005674:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d112      	bne.n	80056a4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d016      	beq.n	80056b4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	3310      	adds	r3, #16
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fe88 	bl	80063a0 <xTaskRemoveFromEventList>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00e      	beq.n	80056b4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e007      	b.n	80056b4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80056a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056a8:	3301      	adds	r3, #1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	b25a      	sxtb	r2, r3
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80056b4:	2301      	movs	r3, #1
 80056b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80056b8:	e001      	b.n	80056be <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80056be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f383 8811 	msr	BASEPRI, r3
}
 80056c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3738      	adds	r7, #56	@ 0x38
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <vQueueDelete+0x2a>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60bb      	str	r3, [r7, #8]
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	e7fd      	b.n	80056fa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f95e 	bl	80059c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800570a:	2b00      	cmp	r3, #0
 800570c:	d102      	bne.n	8005714 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f002 f86a 	bl	80077e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	d006      	beq.n	800573a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e001      	b.n	800573e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800573e:	68fb      	ldr	r3, [r7, #12]
	}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005760:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10d      	bne.n	8005786 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d14d      	bne.n	800580e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	4618      	mov	r0, r3
 8005778:	f001 f85e 	bl	8006838 <xTaskPriorityDisinherit>
 800577c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	e043      	b.n	800580e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d119      	bne.n	80057c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6858      	ldr	r0, [r3, #4]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005794:	461a      	mov	r2, r3
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	f002 ffb5 	bl	8008706 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a4:	441a      	add	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d32b      	bcc.n	800580e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	e026      	b.n	800580e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68d8      	ldr	r0, [r3, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	461a      	mov	r2, r3
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	f002 ff9b 	bl	8008706 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	425b      	negs	r3, r3
 80057da:	441a      	add	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d207      	bcs.n	80057fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	425b      	negs	r3, r3
 80057f6:	441a      	add	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d105      	bne.n	800580e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	3b01      	subs	r3, #1
 800580c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005816:	697b      	ldr	r3, [r7, #20]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d018      	beq.n	8005864 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	441a      	add	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	d303      	bcc.n	8005854 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68d9      	ldr	r1, [r3, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	461a      	mov	r2, r3
 800585e:	6838      	ldr	r0, [r7, #0]
 8005860:	f002 ff51 	bl	8008706 <memcpy>
	}
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005874:	f001 fdc8 	bl	8007408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800587e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005880:	e011      	b.n	80058a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d012      	beq.n	80058b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3324      	adds	r3, #36	@ 0x24
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fd86 	bl	80063a0 <xTaskRemoveFromEventList>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800589a:	f000 fe5f 	bl	800655c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	dce9      	bgt.n	8005882 <prvUnlockQueue+0x16>
 80058ae:	e000      	b.n	80058b2 <prvUnlockQueue+0x46>
					break;
 80058b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	22ff      	movs	r2, #255	@ 0xff
 80058b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80058ba:	f001 fdd7 	bl	800746c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058be:	f001 fda3 	bl	8007408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ca:	e011      	b.n	80058f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d012      	beq.n	80058fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3310      	adds	r3, #16
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fd61 	bl	80063a0 <xTaskRemoveFromEventList>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058e4:	f000 fe3a 	bl	800655c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	dce9      	bgt.n	80058cc <prvUnlockQueue+0x60>
 80058f8:	e000      	b.n	80058fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80058fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	22ff      	movs	r2, #255	@ 0xff
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005904:	f001 fdb2 	bl	800746c <vPortExitCritical>
}
 8005908:	bf00      	nop
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005918:	f001 fd76 	bl	8007408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005924:	2301      	movs	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	e001      	b.n	800592e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800592e:	f001 fd9d 	bl	800746c <vPortExitCritical>

	return xReturn;
 8005932:	68fb      	ldr	r3, [r7, #12]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005944:	f001 fd60 	bl	8007408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005950:	429a      	cmp	r2, r3
 8005952:	d102      	bne.n	800595a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005954:	2301      	movs	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e001      	b.n	800595e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800595e:	f001 fd85 	bl	800746c <vPortExitCritical>

	return xReturn;
 8005962:	68fb      	ldr	r3, [r7, #12]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e014      	b.n	80059a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800597c:	4a0f      	ldr	r2, [pc, #60]	@ (80059bc <vQueueAddToRegistry+0x50>)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005988:	490c      	ldr	r1, [pc, #48]	@ (80059bc <vQueueAddToRegistry+0x50>)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005992:	4a0a      	ldr	r2, [pc, #40]	@ (80059bc <vQueueAddToRegistry+0x50>)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4413      	add	r3, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800599e:	e006      	b.n	80059ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3301      	adds	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b07      	cmp	r3, #7
 80059aa:	d9e7      	bls.n	800597c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20000a44 	.word	0x20000a44

080059c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	e016      	b.n	80059fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80059ce:	4a10      	ldr	r2, [pc, #64]	@ (8005a10 <vQueueUnregisterQueue+0x50>)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d10b      	bne.n	80059f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80059de:	4a0c      	ldr	r2, [pc, #48]	@ (8005a10 <vQueueUnregisterQueue+0x50>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2100      	movs	r1, #0
 80059e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80059e8:	4a09      	ldr	r2, [pc, #36]	@ (8005a10 <vQueueUnregisterQueue+0x50>)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	4413      	add	r3, r2
 80059f0:	2200      	movs	r2, #0
 80059f2:	605a      	str	r2, [r3, #4]
				break;
 80059f4:	e006      	b.n	8005a04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b07      	cmp	r3, #7
 8005a00:	d9e5      	bls.n	80059ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	20000a44 	.word	0x20000a44

08005a14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a24:	f001 fcf0 	bl	8007408 <vPortEnterCritical>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a2e:	b25b      	sxtb	r3, r3
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d103      	bne.n	8005a3e <vQueueWaitForMessageRestricted+0x2a>
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a44:	b25b      	sxtb	r3, r3
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d103      	bne.n	8005a54 <vQueueWaitForMessageRestricted+0x40>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a54:	f001 fd0a 	bl	800746c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d106      	bne.n	8005a6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	3324      	adds	r3, #36	@ 0x24
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fc6d 	bl	8006348 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a6e:	6978      	ldr	r0, [r7, #20]
 8005a70:	f7ff fefc 	bl	800586c <prvUnlockQueue>
	}
 8005a74:	bf00      	nop
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08e      	sub	sp, #56	@ 0x38
 8005a80:	af04      	add	r7, sp, #16
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	623b      	str	r3, [r7, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	61fb      	str	r3, [r7, #28]
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	e7fd      	b.n	8005ac2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ac6:	23a8      	movs	r3, #168	@ 0xa8
 8005ac8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2ba8      	cmp	r3, #168	@ 0xa8
 8005ace:	d00b      	beq.n	8005ae8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	61bb      	str	r3, [r7, #24]
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ae8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01e      	beq.n	8005b2e <xTaskCreateStatic+0xb2>
 8005af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01b      	beq.n	8005b2e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005afe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b08:	2300      	movs	r3, #0
 8005b0a:	9303      	str	r3, [sp, #12]
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	9302      	str	r3, [sp, #8]
 8005b10:	f107 0314 	add.w	r3, r7, #20
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f851 	bl	8005bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b28:	f000 f8f6 	bl	8005d18 <prvAddNewTaskToReadyList>
 8005b2c:	e001      	b.n	8005b32 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b32:	697b      	ldr	r3, [r7, #20]
	}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3728      	adds	r7, #40	@ 0x28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08c      	sub	sp, #48	@ 0x30
 8005b40:	af04      	add	r7, sp, #16
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 fd7b 	bl	800764c <pvPortMalloc>
 8005b56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00e      	beq.n	8005b7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b5e:	20a8      	movs	r0, #168	@ 0xa8
 8005b60:	f001 fd74 	bl	800764c <pvPortMalloc>
 8005b64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b72:	e005      	b.n	8005b80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b74:	6978      	ldr	r0, [r7, #20]
 8005b76:	f001 fe37 	bl	80077e8 <vPortFree>
 8005b7a:	e001      	b.n	8005b80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d017      	beq.n	8005bb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	2300      	movs	r3, #0
 8005b92:	9303      	str	r3, [sp, #12]
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	9302      	str	r3, [sp, #8]
 8005b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f80f 	bl	8005bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005baa:	69f8      	ldr	r0, [r7, #28]
 8005bac:	f000 f8b4 	bl	8005d18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	e002      	b.n	8005bbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
	}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	461a      	mov	r2, r3
 8005be0:	21a5      	movs	r1, #165	@ 0xa5
 8005be2:	f002 fcb2 	bl	800854a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	f023 0307 	bic.w	r3, r3, #7
 8005bfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00b      	beq.n	8005c22 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	617b      	str	r3, [r7, #20]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01f      	beq.n	8005c68 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	e012      	b.n	8005c54 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	7819      	ldrb	r1, [r3, #0]
 8005c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	3334      	adds	r3, #52	@ 0x34
 8005c3e:	460a      	mov	r2, r1
 8005c40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	4413      	add	r3, r2
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d006      	beq.n	8005c5c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	3301      	adds	r3, #1
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b0f      	cmp	r3, #15
 8005c58:	d9e9      	bls.n	8005c2e <prvInitialiseNewTask+0x66>
 8005c5a:	e000      	b.n	8005c5e <prvInitialiseNewTask+0x96>
			{
				break;
 8005c5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c66:	e003      	b.n	8005c70 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c72:	2b37      	cmp	r3, #55	@ 0x37
 8005c74:	d901      	bls.n	8005c7a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c76:	2337      	movs	r3, #55	@ 0x37
 8005c78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	2200      	movs	r2, #0
 8005c8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe fe33 	bl	80048fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c98:	3318      	adds	r3, #24
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe fe2e 	bl	80048fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	3354      	adds	r3, #84	@ 0x54
 8005cca:	224c      	movs	r2, #76	@ 0x4c
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f002 fc3b 	bl	800854a <memset>
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005d0c <prvInitialiseNewTask+0x144>)
 8005cd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8005d10 <prvInitialiseNewTask+0x148>)
 8005cde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8005d14 <prvInitialiseNewTask+0x14c>)
 8005ce4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	68f9      	ldr	r1, [r7, #12]
 8005cea:	69b8      	ldr	r0, [r7, #24]
 8005cec:	f001 fa5a 	bl	80071a4 <pxPortInitialiseStack>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d02:	bf00      	nop
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20004cd8 	.word	0x20004cd8
 8005d10:	20004d40 	.word	0x20004d40
 8005d14:	20004da8 	.word	0x20004da8

08005d18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d20:	f001 fb72 	bl	8007408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d24:	4b2d      	ldr	r3, [pc, #180]	@ (8005ddc <prvAddNewTaskToReadyList+0xc4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005ddc <prvAddNewTaskToReadyList+0xc4>)
 8005d2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005de0 <prvAddNewTaskToReadyList+0xc8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d36:	4a2a      	ldr	r2, [pc, #168]	@ (8005de0 <prvAddNewTaskToReadyList+0xc8>)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d3c:	4b27      	ldr	r3, [pc, #156]	@ (8005ddc <prvAddNewTaskToReadyList+0xc4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d110      	bne.n	8005d66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d44:	f000 fc2e 	bl	80065a4 <prvInitialiseTaskLists>
 8005d48:	e00d      	b.n	8005d66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d4a:	4b26      	ldr	r3, [pc, #152]	@ (8005de4 <prvAddNewTaskToReadyList+0xcc>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d52:	4b23      	ldr	r3, [pc, #140]	@ (8005de0 <prvAddNewTaskToReadyList+0xc8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d802      	bhi.n	8005d66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d60:	4a1f      	ldr	r2, [pc, #124]	@ (8005de0 <prvAddNewTaskToReadyList+0xc8>)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d66:	4b20      	ldr	r3, [pc, #128]	@ (8005de8 <prvAddNewTaskToReadyList+0xd0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005de8 <prvAddNewTaskToReadyList+0xd0>)
 8005d6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d70:	4b1d      	ldr	r3, [pc, #116]	@ (8005de8 <prvAddNewTaskToReadyList+0xd0>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dec <prvAddNewTaskToReadyList+0xd4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d903      	bls.n	8005d8c <prvAddNewTaskToReadyList+0x74>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	4a18      	ldr	r2, [pc, #96]	@ (8005dec <prvAddNewTaskToReadyList+0xd4>)
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d90:	4613      	mov	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4a15      	ldr	r2, [pc, #84]	@ (8005df0 <prvAddNewTaskToReadyList+0xd8>)
 8005d9a:	441a      	add	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	4619      	mov	r1, r3
 8005da2:	4610      	mov	r0, r2
 8005da4:	f7fe fdb7 	bl	8004916 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005da8:	f001 fb60 	bl	800746c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dac:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <prvAddNewTaskToReadyList+0xcc>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00e      	beq.n	8005dd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005db4:	4b0a      	ldr	r3, [pc, #40]	@ (8005de0 <prvAddNewTaskToReadyList+0xc8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d207      	bcs.n	8005dd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <prvAddNewTaskToReadyList+0xdc>)
 8005dc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000f58 	.word	0x20000f58
 8005de0:	20000a84 	.word	0x20000a84
 8005de4:	20000f64 	.word	0x20000f64
 8005de8:	20000f74 	.word	0x20000f74
 8005dec:	20000f60 	.word	0x20000f60
 8005df0:	20000a88 	.word	0x20000a88
 8005df4:	e000ed04 	.word	0xe000ed04

08005df8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d018      	beq.n	8005e3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e0a:	4b14      	ldr	r3, [pc, #80]	@ (8005e5c <vTaskDelay+0x64>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <vTaskDelay+0x32>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60bb      	str	r3, [r7, #8]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e2a:	f000 f88b 	bl	8005f44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e2e:	2100      	movs	r1, #0
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fe09 	bl	8006a48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e36:	f000 f893 	bl	8005f60 <xTaskResumeAll>
 8005e3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d107      	bne.n	8005e52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e42:	4b07      	ldr	r3, [pc, #28]	@ (8005e60 <vTaskDelay+0x68>)
 8005e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000f80 	.word	0x20000f80
 8005e60:	e000ed04 	.word	0xe000ed04

08005e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	@ 0x28
 8005e68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e72:	463a      	mov	r2, r7
 8005e74:	1d39      	adds	r1, r7, #4
 8005e76:	f107 0308 	add.w	r3, r7, #8
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fcea 	bl	8004854 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	9202      	str	r2, [sp, #8]
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	460a      	mov	r2, r1
 8005e92:	4924      	ldr	r1, [pc, #144]	@ (8005f24 <vTaskStartScheduler+0xc0>)
 8005e94:	4824      	ldr	r0, [pc, #144]	@ (8005f28 <vTaskStartScheduler+0xc4>)
 8005e96:	f7ff fdf1 	bl	8005a7c <xTaskCreateStatic>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4a23      	ldr	r2, [pc, #140]	@ (8005f2c <vTaskStartScheduler+0xc8>)
 8005e9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ea0:	4b22      	ldr	r3, [pc, #136]	@ (8005f2c <vTaskStartScheduler+0xc8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	e001      	b.n	8005eb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d102      	bne.n	8005ebe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005eb8:	f000 fe1a 	bl	8006af0 <xTimerCreateTimerTask>
 8005ebc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d11b      	bne.n	8005efc <vTaskStartScheduler+0x98>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	613b      	str	r3, [r7, #16]
}
 8005ed6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ed8:	4b15      	ldr	r3, [pc, #84]	@ (8005f30 <vTaskStartScheduler+0xcc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3354      	adds	r3, #84	@ 0x54
 8005ede:	4a15      	ldr	r2, [pc, #84]	@ (8005f34 <vTaskStartScheduler+0xd0>)
 8005ee0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ee2:	4b15      	ldr	r3, [pc, #84]	@ (8005f38 <vTaskStartScheduler+0xd4>)
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eea:	4b14      	ldr	r3, [pc, #80]	@ (8005f3c <vTaskStartScheduler+0xd8>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ef0:	4b13      	ldr	r3, [pc, #76]	@ (8005f40 <vTaskStartScheduler+0xdc>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ef6:	f001 f9e3 	bl	80072c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005efa:	e00f      	b.n	8005f1c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d10b      	bne.n	8005f1c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	60fb      	str	r3, [r7, #12]
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <vTaskStartScheduler+0xb4>
}
 8005f1c:	bf00      	nop
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	0800a80c 	.word	0x0800a80c
 8005f28:	08006575 	.word	0x08006575
 8005f2c:	20000f7c 	.word	0x20000f7c
 8005f30:	20000a84 	.word	0x20000a84
 8005f34:	2000001c 	.word	0x2000001c
 8005f38:	20000f78 	.word	0x20000f78
 8005f3c:	20000f64 	.word	0x20000f64
 8005f40:	20000f5c 	.word	0x20000f5c

08005f44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f48:	4b04      	ldr	r3, [pc, #16]	@ (8005f5c <vTaskSuspendAll+0x18>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	4a03      	ldr	r2, [pc, #12]	@ (8005f5c <vTaskSuspendAll+0x18>)
 8005f50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f52:	bf00      	nop
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	20000f80 	.word	0x20000f80

08005f60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f6e:	4b42      	ldr	r3, [pc, #264]	@ (8006078 <xTaskResumeAll+0x118>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10b      	bne.n	8005f8e <xTaskResumeAll+0x2e>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	603b      	str	r3, [r7, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f8e:	f001 fa3b 	bl	8007408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f92:	4b39      	ldr	r3, [pc, #228]	@ (8006078 <xTaskResumeAll+0x118>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	4a37      	ldr	r2, [pc, #220]	@ (8006078 <xTaskResumeAll+0x118>)
 8005f9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f9c:	4b36      	ldr	r3, [pc, #216]	@ (8006078 <xTaskResumeAll+0x118>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d162      	bne.n	800606a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fa4:	4b35      	ldr	r3, [pc, #212]	@ (800607c <xTaskResumeAll+0x11c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d05e      	beq.n	800606a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fac:	e02f      	b.n	800600e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fae:	4b34      	ldr	r3, [pc, #208]	@ (8006080 <xTaskResumeAll+0x120>)
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3318      	adds	r3, #24
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fd08 	bl	80049d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe fd03 	bl	80049d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fce:	4b2d      	ldr	r3, [pc, #180]	@ (8006084 <xTaskResumeAll+0x124>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d903      	bls.n	8005fde <xTaskResumeAll+0x7e>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	4a2a      	ldr	r2, [pc, #168]	@ (8006084 <xTaskResumeAll+0x124>)
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4a27      	ldr	r2, [pc, #156]	@ (8006088 <xTaskResumeAll+0x128>)
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f7fe fc8e 	bl	8004916 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffe:	4b23      	ldr	r3, [pc, #140]	@ (800608c <xTaskResumeAll+0x12c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006004:	429a      	cmp	r2, r3
 8006006:	d302      	bcc.n	800600e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006008:	4b21      	ldr	r3, [pc, #132]	@ (8006090 <xTaskResumeAll+0x130>)
 800600a:	2201      	movs	r2, #1
 800600c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800600e:	4b1c      	ldr	r3, [pc, #112]	@ (8006080 <xTaskResumeAll+0x120>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1cb      	bne.n	8005fae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800601c:	f000 fb66 	bl	80066ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006020:	4b1c      	ldr	r3, [pc, #112]	@ (8006094 <xTaskResumeAll+0x134>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800602c:	f000 f846 	bl	80060bc <xTaskIncrementTick>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006036:	4b16      	ldr	r3, [pc, #88]	@ (8006090 <xTaskResumeAll+0x130>)
 8006038:	2201      	movs	r2, #1
 800603a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3b01      	subs	r3, #1
 8006040:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f1      	bne.n	800602c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006048:	4b12      	ldr	r3, [pc, #72]	@ (8006094 <xTaskResumeAll+0x134>)
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800604e:	4b10      	ldr	r3, [pc, #64]	@ (8006090 <xTaskResumeAll+0x130>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006056:	2301      	movs	r3, #1
 8006058:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800605a:	4b0f      	ldr	r3, [pc, #60]	@ (8006098 <xTaskResumeAll+0x138>)
 800605c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800606a:	f001 f9ff 	bl	800746c <vPortExitCritical>

	return xAlreadyYielded;
 800606e:	68bb      	ldr	r3, [r7, #8]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000f80 	.word	0x20000f80
 800607c:	20000f58 	.word	0x20000f58
 8006080:	20000f18 	.word	0x20000f18
 8006084:	20000f60 	.word	0x20000f60
 8006088:	20000a88 	.word	0x20000a88
 800608c:	20000a84 	.word	0x20000a84
 8006090:	20000f6c 	.word	0x20000f6c
 8006094:	20000f68 	.word	0x20000f68
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060a2:	4b05      	ldr	r3, [pc, #20]	@ (80060b8 <xTaskGetTickCount+0x1c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060a8:	687b      	ldr	r3, [r7, #4]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20000f5c 	.word	0x20000f5c

080060bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006204 <xTaskIncrementTick+0x148>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f040 8090 	bne.w	80061f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006208 <xTaskIncrementTick+0x14c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3301      	adds	r3, #1
 80060d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060d8:	4a4b      	ldr	r2, [pc, #300]	@ (8006208 <xTaskIncrementTick+0x14c>)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d121      	bne.n	8006128 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80060e4:	4b49      	ldr	r3, [pc, #292]	@ (800620c <xTaskIncrementTick+0x150>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <xTaskIncrementTick+0x4a>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	603b      	str	r3, [r7, #0]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <xTaskIncrementTick+0x46>
 8006106:	4b41      	ldr	r3, [pc, #260]	@ (800620c <xTaskIncrementTick+0x150>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	4b40      	ldr	r3, [pc, #256]	@ (8006210 <xTaskIncrementTick+0x154>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3e      	ldr	r2, [pc, #248]	@ (800620c <xTaskIncrementTick+0x150>)
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	4a3e      	ldr	r2, [pc, #248]	@ (8006210 <xTaskIncrementTick+0x154>)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4b3e      	ldr	r3, [pc, #248]	@ (8006214 <xTaskIncrementTick+0x158>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	4a3c      	ldr	r2, [pc, #240]	@ (8006214 <xTaskIncrementTick+0x158>)
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	f000 fae2 	bl	80066ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006128:	4b3b      	ldr	r3, [pc, #236]	@ (8006218 <xTaskIncrementTick+0x15c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	429a      	cmp	r2, r3
 8006130:	d349      	bcc.n	80061c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006132:	4b36      	ldr	r3, [pc, #216]	@ (800620c <xTaskIncrementTick+0x150>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d104      	bne.n	8006146 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800613c:	4b36      	ldr	r3, [pc, #216]	@ (8006218 <xTaskIncrementTick+0x15c>)
 800613e:	f04f 32ff 	mov.w	r2, #4294967295
 8006142:	601a      	str	r2, [r3, #0]
					break;
 8006144:	e03f      	b.n	80061c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006146:	4b31      	ldr	r3, [pc, #196]	@ (800620c <xTaskIncrementTick+0x150>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	429a      	cmp	r2, r3
 800615c:	d203      	bcs.n	8006166 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800615e:	4a2e      	ldr	r2, [pc, #184]	@ (8006218 <xTaskIncrementTick+0x15c>)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006164:	e02f      	b.n	80061c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	3304      	adds	r3, #4
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fc30 	bl	80049d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	3318      	adds	r3, #24
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe fc27 	bl	80049d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006186:	4b25      	ldr	r3, [pc, #148]	@ (800621c <xTaskIncrementTick+0x160>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d903      	bls.n	8006196 <xTaskIncrementTick+0xda>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006192:	4a22      	ldr	r2, [pc, #136]	@ (800621c <xTaskIncrementTick+0x160>)
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006220 <xTaskIncrementTick+0x164>)
 80061a4:	441a      	add	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7fe fbb2 	bl	8004916 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006224 <xTaskIncrementTick+0x168>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d3b8      	bcc.n	8006132 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c4:	e7b5      	b.n	8006132 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061c6:	4b17      	ldr	r3, [pc, #92]	@ (8006224 <xTaskIncrementTick+0x168>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061cc:	4914      	ldr	r1, [pc, #80]	@ (8006220 <xTaskIncrementTick+0x164>)
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d901      	bls.n	80061e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80061de:	2301      	movs	r3, #1
 80061e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061e2:	4b11      	ldr	r3, [pc, #68]	@ (8006228 <xTaskIncrementTick+0x16c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80061ea:	2301      	movs	r3, #1
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	e004      	b.n	80061fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061f0:	4b0e      	ldr	r3, [pc, #56]	@ (800622c <xTaskIncrementTick+0x170>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	4a0d      	ldr	r2, [pc, #52]	@ (800622c <xTaskIncrementTick+0x170>)
 80061f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061fa:	697b      	ldr	r3, [r7, #20]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000f80 	.word	0x20000f80
 8006208:	20000f5c 	.word	0x20000f5c
 800620c:	20000f10 	.word	0x20000f10
 8006210:	20000f14 	.word	0x20000f14
 8006214:	20000f70 	.word	0x20000f70
 8006218:	20000f78 	.word	0x20000f78
 800621c:	20000f60 	.word	0x20000f60
 8006220:	20000a88 	.word	0x20000a88
 8006224:	20000a84 	.word	0x20000a84
 8006228:	20000f6c 	.word	0x20000f6c
 800622c:	20000f68 	.word	0x20000f68

08006230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006236:	4b2b      	ldr	r3, [pc, #172]	@ (80062e4 <vTaskSwitchContext+0xb4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800623e:	4b2a      	ldr	r3, [pc, #168]	@ (80062e8 <vTaskSwitchContext+0xb8>)
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006244:	e047      	b.n	80062d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006246:	4b28      	ldr	r3, [pc, #160]	@ (80062e8 <vTaskSwitchContext+0xb8>)
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800624c:	4b27      	ldr	r3, [pc, #156]	@ (80062ec <vTaskSwitchContext+0xbc>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e011      	b.n	8006278 <vTaskSwitchContext+0x48>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10b      	bne.n	8006272 <vTaskSwitchContext+0x42>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	607b      	str	r3, [r7, #4]
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	e7fd      	b.n	800626e <vTaskSwitchContext+0x3e>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3b01      	subs	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	491d      	ldr	r1, [pc, #116]	@ (80062f0 <vTaskSwitchContext+0xc0>)
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4613      	mov	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0e3      	beq.n	8006254 <vTaskSwitchContext+0x24>
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4a16      	ldr	r2, [pc, #88]	@ (80062f0 <vTaskSwitchContext+0xc0>)
 8006298:	4413      	add	r3, r2
 800629a:	60bb      	str	r3, [r7, #8]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	605a      	str	r2, [r3, #4]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	3308      	adds	r3, #8
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d104      	bne.n	80062bc <vTaskSwitchContext+0x8c>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	605a      	str	r2, [r3, #4]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	4a0c      	ldr	r2, [pc, #48]	@ (80062f4 <vTaskSwitchContext+0xc4>)
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	4a09      	ldr	r2, [pc, #36]	@ (80062ec <vTaskSwitchContext+0xbc>)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062cc:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <vTaskSwitchContext+0xc4>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3354      	adds	r3, #84	@ 0x54
 80062d2:	4a09      	ldr	r2, [pc, #36]	@ (80062f8 <vTaskSwitchContext+0xc8>)
 80062d4:	6013      	str	r3, [r2, #0]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20000f80 	.word	0x20000f80
 80062e8:	20000f6c 	.word	0x20000f6c
 80062ec:	20000f60 	.word	0x20000f60
 80062f0:	20000a88 	.word	0x20000a88
 80062f4:	20000a84 	.word	0x20000a84
 80062f8:	2000001c 	.word	0x2000001c

080062fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60fb      	str	r3, [r7, #12]
}
 800631e:	bf00      	nop
 8006320:	bf00      	nop
 8006322:	e7fd      	b.n	8006320 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006324:	4b07      	ldr	r3, [pc, #28]	@ (8006344 <vTaskPlaceOnEventList+0x48>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3318      	adds	r3, #24
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fe fb16 	bl	800495e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006332:	2101      	movs	r1, #1
 8006334:	6838      	ldr	r0, [r7, #0]
 8006336:	f000 fb87 	bl	8006a48 <prvAddCurrentTaskToDelayedList>
}
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000a84 	.word	0x20000a84

08006348 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10b      	bne.n	8006372 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	617b      	str	r3, [r7, #20]
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	e7fd      	b.n	800636e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006372:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <vTaskPlaceOnEventListRestricted+0x54>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3318      	adds	r3, #24
 8006378:	4619      	mov	r1, r3
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7fe facb 	bl	8004916 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006386:	f04f 33ff 	mov.w	r3, #4294967295
 800638a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	68b8      	ldr	r0, [r7, #8]
 8006390:	f000 fb5a 	bl	8006a48 <prvAddCurrentTaskToDelayedList>
	}
 8006394:	bf00      	nop
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20000a84 	.word	0x20000a84

080063a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	60fb      	str	r3, [r7, #12]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	3318      	adds	r3, #24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe fafc 	bl	80049d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006450 <xTaskRemoveFromEventList+0xb0>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d11d      	bne.n	800641c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe faf3 	bl	80049d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ee:	4b19      	ldr	r3, [pc, #100]	@ (8006454 <xTaskRemoveFromEventList+0xb4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d903      	bls.n	80063fe <xTaskRemoveFromEventList+0x5e>
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	4a16      	ldr	r2, [pc, #88]	@ (8006454 <xTaskRemoveFromEventList+0xb4>)
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4a13      	ldr	r2, [pc, #76]	@ (8006458 <xTaskRemoveFromEventList+0xb8>)
 800640c:	441a      	add	r2, r3
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	3304      	adds	r3, #4
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f7fe fa7e 	bl	8004916 <vListInsertEnd>
 800641a:	e005      	b.n	8006428 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3318      	adds	r3, #24
 8006420:	4619      	mov	r1, r3
 8006422:	480e      	ldr	r0, [pc, #56]	@ (800645c <xTaskRemoveFromEventList+0xbc>)
 8006424:	f7fe fa77 	bl	8004916 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800642c:	4b0c      	ldr	r3, [pc, #48]	@ (8006460 <xTaskRemoveFromEventList+0xc0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006432:	429a      	cmp	r2, r3
 8006434:	d905      	bls.n	8006442 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006436:	2301      	movs	r3, #1
 8006438:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800643a:	4b0a      	ldr	r3, [pc, #40]	@ (8006464 <xTaskRemoveFromEventList+0xc4>)
 800643c:	2201      	movs	r2, #1
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e001      	b.n	8006446 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006446:	697b      	ldr	r3, [r7, #20]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20000f80 	.word	0x20000f80
 8006454:	20000f60 	.word	0x20000f60
 8006458:	20000a88 	.word	0x20000a88
 800645c:	20000f18 	.word	0x20000f18
 8006460:	20000a84 	.word	0x20000a84
 8006464:	20000f6c 	.word	0x20000f6c

08006468 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006470:	4b06      	ldr	r3, [pc, #24]	@ (800648c <vTaskInternalSetTimeOutState+0x24>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006478:	4b05      	ldr	r3, [pc, #20]	@ (8006490 <vTaskInternalSetTimeOutState+0x28>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	605a      	str	r2, [r3, #4]
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	20000f70 	.word	0x20000f70
 8006490:	20000f5c 	.word	0x20000f5c

08006494 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10b      	bne.n	80064bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	613b      	str	r3, [r7, #16]
}
 80064b6:	bf00      	nop
 80064b8:	bf00      	nop
 80064ba:	e7fd      	b.n	80064b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10b      	bne.n	80064da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	60fb      	str	r3, [r7, #12]
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	e7fd      	b.n	80064d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80064da:	f000 ff95 	bl	8007408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064de:	4b1d      	ldr	r3, [pc, #116]	@ (8006554 <xTaskCheckForTimeOut+0xc0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f6:	d102      	bne.n	80064fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	e023      	b.n	8006546 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4b15      	ldr	r3, [pc, #84]	@ (8006558 <xTaskCheckForTimeOut+0xc4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d007      	beq.n	800651a <xTaskCheckForTimeOut+0x86>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006514:	2301      	movs	r3, #1
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	e015      	b.n	8006546 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	429a      	cmp	r2, r3
 8006522:	d20b      	bcs.n	800653c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	1ad2      	subs	r2, r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff ff99 	bl	8006468 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006536:	2300      	movs	r3, #0
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	e004      	b.n	8006546 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006546:	f000 ff91 	bl	800746c <vPortExitCritical>

	return xReturn;
 800654a:	69fb      	ldr	r3, [r7, #28]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000f5c 	.word	0x20000f5c
 8006558:	20000f70 	.word	0x20000f70

0800655c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006560:	4b03      	ldr	r3, [pc, #12]	@ (8006570 <vTaskMissedYield+0x14>)
 8006562:	2201      	movs	r2, #1
 8006564:	601a      	str	r2, [r3, #0]
}
 8006566:	bf00      	nop
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000f6c 	.word	0x20000f6c

08006574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800657c:	f000 f852 	bl	8006624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006580:	4b06      	ldr	r3, [pc, #24]	@ (800659c <prvIdleTask+0x28>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d9f9      	bls.n	800657c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006588:	4b05      	ldr	r3, [pc, #20]	@ (80065a0 <prvIdleTask+0x2c>)
 800658a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006598:	e7f0      	b.n	800657c <prvIdleTask+0x8>
 800659a:	bf00      	nop
 800659c:	20000a88 	.word	0x20000a88
 80065a0:	e000ed04 	.word	0xe000ed04

080065a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065aa:	2300      	movs	r3, #0
 80065ac:	607b      	str	r3, [r7, #4]
 80065ae:	e00c      	b.n	80065ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4a12      	ldr	r2, [pc, #72]	@ (8006604 <prvInitialiseTaskLists+0x60>)
 80065bc:	4413      	add	r3, r2
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe f97c 	bl	80048bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3301      	adds	r3, #1
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b37      	cmp	r3, #55	@ 0x37
 80065ce:	d9ef      	bls.n	80065b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065d0:	480d      	ldr	r0, [pc, #52]	@ (8006608 <prvInitialiseTaskLists+0x64>)
 80065d2:	f7fe f973 	bl	80048bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065d6:	480d      	ldr	r0, [pc, #52]	@ (800660c <prvInitialiseTaskLists+0x68>)
 80065d8:	f7fe f970 	bl	80048bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065dc:	480c      	ldr	r0, [pc, #48]	@ (8006610 <prvInitialiseTaskLists+0x6c>)
 80065de:	f7fe f96d 	bl	80048bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065e2:	480c      	ldr	r0, [pc, #48]	@ (8006614 <prvInitialiseTaskLists+0x70>)
 80065e4:	f7fe f96a 	bl	80048bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065e8:	480b      	ldr	r0, [pc, #44]	@ (8006618 <prvInitialiseTaskLists+0x74>)
 80065ea:	f7fe f967 	bl	80048bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065ee:	4b0b      	ldr	r3, [pc, #44]	@ (800661c <prvInitialiseTaskLists+0x78>)
 80065f0:	4a05      	ldr	r2, [pc, #20]	@ (8006608 <prvInitialiseTaskLists+0x64>)
 80065f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006620 <prvInitialiseTaskLists+0x7c>)
 80065f6:	4a05      	ldr	r2, [pc, #20]	@ (800660c <prvInitialiseTaskLists+0x68>)
 80065f8:	601a      	str	r2, [r3, #0]
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000a88 	.word	0x20000a88
 8006608:	20000ee8 	.word	0x20000ee8
 800660c:	20000efc 	.word	0x20000efc
 8006610:	20000f18 	.word	0x20000f18
 8006614:	20000f2c 	.word	0x20000f2c
 8006618:	20000f44 	.word	0x20000f44
 800661c:	20000f10 	.word	0x20000f10
 8006620:	20000f14 	.word	0x20000f14

08006624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800662a:	e019      	b.n	8006660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800662c:	f000 feec 	bl	8007408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006630:	4b10      	ldr	r3, [pc, #64]	@ (8006674 <prvCheckTasksWaitingTermination+0x50>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe f9c7 	bl	80049d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006642:	4b0d      	ldr	r3, [pc, #52]	@ (8006678 <prvCheckTasksWaitingTermination+0x54>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3b01      	subs	r3, #1
 8006648:	4a0b      	ldr	r2, [pc, #44]	@ (8006678 <prvCheckTasksWaitingTermination+0x54>)
 800664a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800664c:	4b0b      	ldr	r3, [pc, #44]	@ (800667c <prvCheckTasksWaitingTermination+0x58>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3b01      	subs	r3, #1
 8006652:	4a0a      	ldr	r2, [pc, #40]	@ (800667c <prvCheckTasksWaitingTermination+0x58>)
 8006654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006656:	f000 ff09 	bl	800746c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f810 	bl	8006680 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006660:	4b06      	ldr	r3, [pc, #24]	@ (800667c <prvCheckTasksWaitingTermination+0x58>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e1      	bne.n	800662c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000f2c 	.word	0x20000f2c
 8006678:	20000f58 	.word	0x20000f58
 800667c:	20000f40 	.word	0x20000f40

08006680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3354      	adds	r3, #84	@ 0x54
 800668c:	4618      	mov	r0, r3
 800668e:	f001 ff79 	bl	8008584 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006698:	2b00      	cmp	r3, #0
 800669a:	d108      	bne.n	80066ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a0:	4618      	mov	r0, r3
 80066a2:	f001 f8a1 	bl	80077e8 <vPortFree>
				vPortFree( pxTCB );
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 f89e 	bl	80077e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066ac:	e019      	b.n	80066e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d103      	bne.n	80066c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 f895 	bl	80077e8 <vPortFree>
	}
 80066be:	e010      	b.n	80066e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d00b      	beq.n	80066e2 <prvDeleteTCB+0x62>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	60fb      	str	r3, [r7, #12]
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	e7fd      	b.n	80066de <prvDeleteTCB+0x5e>
	}
 80066e2:	bf00      	nop
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006724 <prvResetNextTaskUnblockTime+0x38>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006728 <prvResetNextTaskUnblockTime+0x3c>)
 80066fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006704:	e008      	b.n	8006718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006706:	4b07      	ldr	r3, [pc, #28]	@ (8006724 <prvResetNextTaskUnblockTime+0x38>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4a04      	ldr	r2, [pc, #16]	@ (8006728 <prvResetNextTaskUnblockTime+0x3c>)
 8006716:	6013      	str	r3, [r2, #0]
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	20000f10 	.word	0x20000f10
 8006728:	20000f78 	.word	0x20000f78

0800672c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006732:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <xTaskGetSchedulerState+0x34>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800673a:	2301      	movs	r3, #1
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	e008      	b.n	8006752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006740:	4b08      	ldr	r3, [pc, #32]	@ (8006764 <xTaskGetSchedulerState+0x38>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006748:	2302      	movs	r3, #2
 800674a:	607b      	str	r3, [r7, #4]
 800674c:	e001      	b.n	8006752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800674e:	2300      	movs	r3, #0
 8006750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006752:	687b      	ldr	r3, [r7, #4]
	}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	20000f64 	.word	0x20000f64
 8006764:	20000f80 	.word	0x20000f80

08006768 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d051      	beq.n	8006822 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006782:	4b2a      	ldr	r3, [pc, #168]	@ (800682c <xTaskPriorityInherit+0xc4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	429a      	cmp	r2, r3
 800678a:	d241      	bcs.n	8006810 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	db06      	blt.n	80067a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006794:	4b25      	ldr	r3, [pc, #148]	@ (800682c <xTaskPriorityInherit+0xc4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6959      	ldr	r1, [r3, #20]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006830 <xTaskPriorityInherit+0xc8>)
 80067b4:	4413      	add	r3, r2
 80067b6:	4299      	cmp	r1, r3
 80067b8:	d122      	bne.n	8006800 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3304      	adds	r3, #4
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe f906 	bl	80049d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067c4:	4b19      	ldr	r3, [pc, #100]	@ (800682c <xTaskPriorityInherit+0xc4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d2:	4b18      	ldr	r3, [pc, #96]	@ (8006834 <xTaskPriorityInherit+0xcc>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d903      	bls.n	80067e2 <xTaskPriorityInherit+0x7a>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067de:	4a15      	ldr	r2, [pc, #84]	@ (8006834 <xTaskPriorityInherit+0xcc>)
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e6:	4613      	mov	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4a10      	ldr	r2, [pc, #64]	@ (8006830 <xTaskPriorityInherit+0xc8>)
 80067f0:	441a      	add	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f7fe f88c 	bl	8004916 <vListInsertEnd>
 80067fe:	e004      	b.n	800680a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006800:	4b0a      	ldr	r3, [pc, #40]	@ (800682c <xTaskPriorityInherit+0xc4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e008      	b.n	8006822 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006814:	4b05      	ldr	r3, [pc, #20]	@ (800682c <xTaskPriorityInherit+0xc4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	429a      	cmp	r2, r3
 800681c:	d201      	bcs.n	8006822 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800681e:	2301      	movs	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006822:	68fb      	ldr	r3, [r7, #12]
	}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000a84 	.word	0x20000a84
 8006830:	20000a88 	.word	0x20000a88
 8006834:	20000f60 	.word	0x20000f60

08006838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d058      	beq.n	8006900 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800684e:	4b2f      	ldr	r3, [pc, #188]	@ (800690c <xTaskPriorityDisinherit+0xd4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	429a      	cmp	r2, r3
 8006856:	d00b      	beq.n	8006870 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	60fb      	str	r3, [r7, #12]
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10b      	bne.n	8006890 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60bb      	str	r3, [r7, #8]
}
 800688a:	bf00      	nop
 800688c:	bf00      	nop
 800688e:	e7fd      	b.n	800688c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006894:	1e5a      	subs	r2, r3, #1
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d02c      	beq.n	8006900 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d128      	bne.n	8006900 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe f88c 	bl	80049d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006910 <xTaskPriorityDisinherit+0xd8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d903      	bls.n	80068e0 <xTaskPriorityDisinherit+0xa8>
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006910 <xTaskPriorityDisinherit+0xd8>)
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4a09      	ldr	r2, [pc, #36]	@ (8006914 <xTaskPriorityDisinherit+0xdc>)
 80068ee:	441a      	add	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7fe f80d 	bl	8004916 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006900:	697b      	ldr	r3, [r7, #20]
	}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000a84 	.word	0x20000a84
 8006910:	20000f60 	.word	0x20000f60
 8006914:	20000a88 	.word	0x20000a88

08006918 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006926:	2301      	movs	r3, #1
 8006928:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d06c      	beq.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10b      	bne.n	8006950 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	60fb      	str	r3, [r7, #12]
}
 800694a:	bf00      	nop
 800694c:	bf00      	nop
 800694e:	e7fd      	b.n	800694c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d902      	bls.n	8006960 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	e002      	b.n	8006966 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006964:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	429a      	cmp	r2, r3
 800696e:	d04c      	beq.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	429a      	cmp	r2, r3
 8006978:	d147      	bne.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800697a:	4b26      	ldr	r3, [pc, #152]	@ (8006a14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	429a      	cmp	r2, r3
 8006982:	d10b      	bne.n	800699c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	60bb      	str	r3, [r7, #8]
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	e7fd      	b.n	8006998 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	db04      	blt.n	80069ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	6959      	ldr	r1, [r3, #20]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4a13      	ldr	r2, [pc, #76]	@ (8006a18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069ca:	4413      	add	r3, r2
 80069cc:	4299      	cmp	r1, r3
 80069ce:	d11c      	bne.n	8006a0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fd fffb 	bl	80049d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069de:	4b0f      	ldr	r3, [pc, #60]	@ (8006a1c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d903      	bls.n	80069ee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ea:	4a0c      	ldr	r2, [pc, #48]	@ (8006a1c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4a07      	ldr	r2, [pc, #28]	@ (8006a18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069fc:	441a      	add	r2, r3
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7fd ff86 	bl	8004916 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a0a:	bf00      	nop
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000a84 	.word	0x20000a84
 8006a18:	20000a88 	.word	0x20000a88
 8006a1c:	20000f60 	.word	0x20000f60

08006a20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a24:	4b07      	ldr	r3, [pc, #28]	@ (8006a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a2c:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a32:	3201      	adds	r2, #1
 8006a34:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006a36:	4b03      	ldr	r3, [pc, #12]	@ (8006a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a38:	681b      	ldr	r3, [r3, #0]
	}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	20000a84 	.word	0x20000a84

08006a48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a52:	4b21      	ldr	r3, [pc, #132]	@ (8006ad8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a58:	4b20      	ldr	r3, [pc, #128]	@ (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fd ffb6 	bl	80049d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6a:	d10a      	bne.n	8006a82 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d007      	beq.n	8006a82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a72:	4b1a      	ldr	r3, [pc, #104]	@ (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4819      	ldr	r0, [pc, #100]	@ (8006ae0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a7c:	f7fd ff4b 	bl	8004916 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a80:	e026      	b.n	8006ad0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4413      	add	r3, r2
 8006a88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a8a:	4b14      	ldr	r3, [pc, #80]	@ (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d209      	bcs.n	8006aae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a9a:	4b12      	ldr	r3, [pc, #72]	@ (8006ae4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7fd ff59 	bl	800495e <vListInsert>
}
 8006aac:	e010      	b.n	8006ad0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8006adc <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fd ff4f 	bl	800495e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d202      	bcs.n	8006ad0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006aca:	4a08      	ldr	r2, [pc, #32]	@ (8006aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6013      	str	r3, [r2, #0]
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000f5c 	.word	0x20000f5c
 8006adc:	20000a84 	.word	0x20000a84
 8006ae0:	20000f44 	.word	0x20000f44
 8006ae4:	20000f14 	.word	0x20000f14
 8006ae8:	20000f10 	.word	0x20000f10
 8006aec:	20000f78 	.word	0x20000f78

08006af0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	@ 0x28
 8006af4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006afa:	f000 fb13 	bl	8007124 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006afe:	4b1d      	ldr	r3, [pc, #116]	@ (8006b74 <xTimerCreateTimerTask+0x84>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d021      	beq.n	8006b4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b0e:	1d3a      	adds	r2, r7, #4
 8006b10:	f107 0108 	add.w	r1, r7, #8
 8006b14:	f107 030c 	add.w	r3, r7, #12
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fd feb5 	bl	8004888 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	9202      	str	r2, [sp, #8]
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	2302      	movs	r3, #2
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	460a      	mov	r2, r1
 8006b30:	4911      	ldr	r1, [pc, #68]	@ (8006b78 <xTimerCreateTimerTask+0x88>)
 8006b32:	4812      	ldr	r0, [pc, #72]	@ (8006b7c <xTimerCreateTimerTask+0x8c>)
 8006b34:	f7fe ffa2 	bl	8005a7c <xTaskCreateStatic>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	4a11      	ldr	r2, [pc, #68]	@ (8006b80 <xTimerCreateTimerTask+0x90>)
 8006b3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b3e:	4b10      	ldr	r3, [pc, #64]	@ (8006b80 <xTimerCreateTimerTask+0x90>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b46:	2301      	movs	r3, #1
 8006b48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10b      	bne.n	8006b68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	613b      	str	r3, [r7, #16]
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b68:	697b      	ldr	r3, [r7, #20]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000fb4 	.word	0x20000fb4
 8006b78:	0800a814 	.word	0x0800a814
 8006b7c:	08006cbd 	.word	0x08006cbd
 8006b80:	20000fb8 	.word	0x20000fb8

08006b84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	@ 0x28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10b      	bne.n	8006bb4 <xTimerGenericCommand+0x30>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	623b      	str	r3, [r7, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bb4:	4b19      	ldr	r3, [pc, #100]	@ (8006c1c <xTimerGenericCommand+0x98>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d02a      	beq.n	8006c12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	dc18      	bgt.n	8006c00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bce:	f7ff fdad 	bl	800672c <xTaskGetSchedulerState>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d109      	bne.n	8006bec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bd8:	4b10      	ldr	r3, [pc, #64]	@ (8006c1c <xTimerGenericCommand+0x98>)
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	f107 0110 	add.w	r1, r7, #16
 8006be0:	2300      	movs	r3, #0
 8006be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be4:	f7fe f8d2 	bl	8004d8c <xQueueGenericSend>
 8006be8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bea:	e012      	b.n	8006c12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bec:	4b0b      	ldr	r3, [pc, #44]	@ (8006c1c <xTimerGenericCommand+0x98>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	f107 0110 	add.w	r1, r7, #16
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f7fe f8c8 	bl	8004d8c <xQueueGenericSend>
 8006bfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bfe:	e008      	b.n	8006c12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c00:	4b06      	ldr	r3, [pc, #24]	@ (8006c1c <xTimerGenericCommand+0x98>)
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	f107 0110 	add.w	r1, r7, #16
 8006c08:	2300      	movs	r3, #0
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	f7fe f9c0 	bl	8004f90 <xQueueGenericSendFromISR>
 8006c10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3728      	adds	r7, #40	@ 0x28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000fb4 	.word	0x20000fb4

08006c20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c2a:	4b23      	ldr	r3, [pc, #140]	@ (8006cb8 <prvProcessExpiredTimer+0x98>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fd fec9 	bl	80049d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d023      	beq.n	8006c94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	699a      	ldr	r2, [r3, #24]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	18d1      	adds	r1, r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	6978      	ldr	r0, [r7, #20]
 8006c5a:	f000 f8d5 	bl	8006e08 <prvInsertTimerInActiveList>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d020      	beq.n	8006ca6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c64:	2300      	movs	r3, #0
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	6978      	ldr	r0, [r7, #20]
 8006c70:	f7ff ff88 	bl	8006b84 <xTimerGenericCommand>
 8006c74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d114      	bne.n	8006ca6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60fb      	str	r3, [r7, #12]
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c9a:	f023 0301 	bic.w	r3, r3, #1
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	6978      	ldr	r0, [r7, #20]
 8006cac:	4798      	blx	r3
}
 8006cae:	bf00      	nop
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000fac 	.word	0x20000fac

08006cbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cc4:	f107 0308 	add.w	r3, r7, #8
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 f859 	bl	8006d80 <prvGetNextExpireTime>
 8006cce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 f805 	bl	8006ce4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cda:	f000 f8d7 	bl	8006e8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cde:	bf00      	nop
 8006ce0:	e7f0      	b.n	8006cc4 <prvTimerTask+0x8>
	...

08006ce4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006cee:	f7ff f929 	bl	8005f44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cf2:	f107 0308 	add.w	r3, r7, #8
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 f866 	bl	8006dc8 <prvSampleTimeNow>
 8006cfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d130      	bne.n	8006d66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <prvProcessTimerOrBlockTask+0x3c>
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d806      	bhi.n	8006d20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d12:	f7ff f925 	bl	8005f60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff ff81 	bl	8006c20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d1e:	e024      	b.n	8006d6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d008      	beq.n	8006d38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d26:	4b13      	ldr	r3, [pc, #76]	@ (8006d74 <prvProcessTimerOrBlockTask+0x90>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <prvProcessTimerOrBlockTask+0x50>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <prvProcessTimerOrBlockTask+0x52>
 8006d34:	2300      	movs	r3, #0
 8006d36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d38:	4b0f      	ldr	r3, [pc, #60]	@ (8006d78 <prvProcessTimerOrBlockTask+0x94>)
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	4619      	mov	r1, r3
 8006d46:	f7fe fe65 	bl	8005a14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d4a:	f7ff f909 	bl	8005f60 <xTaskResumeAll>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d54:	4b09      	ldr	r3, [pc, #36]	@ (8006d7c <prvProcessTimerOrBlockTask+0x98>)
 8006d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	f3bf 8f6f 	isb	sy
}
 8006d64:	e001      	b.n	8006d6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d66:	f7ff f8fb 	bl	8005f60 <xTaskResumeAll>
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000fb0 	.word	0x20000fb0
 8006d78:	20000fb4 	.word	0x20000fb4
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d88:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc4 <prvGetNextExpireTime+0x44>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <prvGetNextExpireTime+0x16>
 8006d92:	2201      	movs	r2, #1
 8006d94:	e000      	b.n	8006d98 <prvGetNextExpireTime+0x18>
 8006d96:	2200      	movs	r2, #0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d105      	bne.n	8006db0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006da4:	4b07      	ldr	r3, [pc, #28]	@ (8006dc4 <prvGetNextExpireTime+0x44>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	e001      	b.n	8006db4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006db4:	68fb      	ldr	r3, [r7, #12]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000fac 	.word	0x20000fac

08006dc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006dd0:	f7ff f964 	bl	800609c <xTaskGetTickCount>
 8006dd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e04 <prvSampleTimeNow+0x3c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d205      	bcs.n	8006dec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006de0:	f000 f93a 	bl	8007058 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	e002      	b.n	8006df2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006df2:	4a04      	ldr	r2, [pc, #16]	@ (8006e04 <prvSampleTimeNow+0x3c>)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006df8:	68fb      	ldr	r3, [r7, #12]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000fbc 	.word	0x20000fbc

08006e08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d812      	bhi.n	8006e54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	1ad2      	subs	r2, r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d302      	bcc.n	8006e42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e01b      	b.n	8006e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e42:	4b10      	ldr	r3, [pc, #64]	@ (8006e84 <prvInsertTimerInActiveList+0x7c>)
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f7fd fd86 	bl	800495e <vListInsert>
 8006e52:	e012      	b.n	8006e7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d206      	bcs.n	8006e6a <prvInsertTimerInActiveList+0x62>
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d302      	bcc.n	8006e6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e64:	2301      	movs	r3, #1
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	e007      	b.n	8006e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e6a:	4b07      	ldr	r3, [pc, #28]	@ (8006e88 <prvInsertTimerInActiveList+0x80>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f7fd fd72 	bl	800495e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e7a:	697b      	ldr	r3, [r7, #20]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000fb0 	.word	0x20000fb0
 8006e88:	20000fac 	.word	0x20000fac

08006e8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08e      	sub	sp, #56	@ 0x38
 8006e90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e92:	e0ce      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da19      	bge.n	8006ece <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e9a:	1d3b      	adds	r3, r7, #4
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	61fb      	str	r3, [r7, #28]
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	e7fd      	b.n	8006eba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec4:	6850      	ldr	r0, [r2, #4]
 8006ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec8:	6892      	ldr	r2, [r2, #8]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f2c0 80ae 	blt.w	8007032 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fd fd72 	bl	80049d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eec:	463b      	mov	r3, r7
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff ff6a 	bl	8006dc8 <prvSampleTimeNow>
 8006ef4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b09      	cmp	r3, #9
 8006efa:	f200 8097 	bhi.w	800702c <prvProcessReceivedCommands+0x1a0>
 8006efe:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <prvProcessReceivedCommands+0x78>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f2d 	.word	0x08006f2d
 8006f10:	08006fa3 	.word	0x08006fa3
 8006f14:	08006fb7 	.word	0x08006fb7
 8006f18:	08007003 	.word	0x08007003
 8006f1c:	08006f2d 	.word	0x08006f2d
 8006f20:	08006f2d 	.word	0x08006f2d
 8006f24:	08006fa3 	.word	0x08006fa3
 8006f28:	08006fb7 	.word	0x08006fb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f32:	f043 0301 	orr.w	r3, r3, #1
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	18d1      	adds	r1, r2, r3
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f4c:	f7ff ff5c 	bl	8006e08 <prvInsertTimerInActiveList>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d06c      	beq.n	8007030 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d061      	beq.n	8007030 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	441a      	add	r2, r3
 8006f74:	2300      	movs	r3, #0
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f7e:	f7ff fe01 	bl	8006b84 <xTimerGenericCommand>
 8006f82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d152      	bne.n	8007030 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	61bb      	str	r3, [r7, #24]
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	e7fd      	b.n	8006f9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fb4:	e03d      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fbc:	f043 0301 	orr.w	r3, r3, #1
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	617b      	str	r3, [r7, #20]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	18d1      	adds	r1, r2, r3
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ffc:	f7ff ff04 	bl	8006e08 <prvInsertTimerInActiveList>
					break;
 8007000:	e017      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007012:	f000 fbe9 	bl	80077e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007016:	e00c      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800702a:	e002      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800702c:	bf00      	nop
 800702e:	e000      	b.n	8007032 <prvProcessReceivedCommands+0x1a6>
					break;
 8007030:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007032:	4b08      	ldr	r3, [pc, #32]	@ (8007054 <prvProcessReceivedCommands+0x1c8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	1d39      	adds	r1, r7, #4
 8007038:	2200      	movs	r2, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe f8d6 	bl	80051ec <xQueueReceive>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	f47f af26 	bne.w	8006e94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	3730      	adds	r7, #48	@ 0x30
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000fb4 	.word	0x20000fb4

08007058 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800705e:	e049      	b.n	80070f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007060:	4b2e      	ldr	r3, [pc, #184]	@ (800711c <prvSwitchTimerLists+0xc4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800706a:	4b2c      	ldr	r3, [pc, #176]	@ (800711c <prvSwitchTimerLists+0xc4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3304      	adds	r3, #4
 8007078:	4618      	mov	r0, r3
 800707a:	f7fd fca9 	bl	80049d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d02f      	beq.n	80070f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4413      	add	r3, r2
 800709c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d90e      	bls.n	80070c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070b2:	4b1a      	ldr	r3, [pc, #104]	@ (800711c <prvSwitchTimerLists+0xc4>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3304      	adds	r3, #4
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f7fd fc4e 	bl	800495e <vListInsert>
 80070c2:	e017      	b.n	80070f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070c4:	2300      	movs	r3, #0
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	2100      	movs	r1, #0
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7ff fd58 	bl	8006b84 <xTimerGenericCommand>
 80070d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10b      	bne.n	80070f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	603b      	str	r3, [r7, #0]
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	e7fd      	b.n	80070f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070f4:	4b09      	ldr	r3, [pc, #36]	@ (800711c <prvSwitchTimerLists+0xc4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1b0      	bne.n	8007060 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070fe:	4b07      	ldr	r3, [pc, #28]	@ (800711c <prvSwitchTimerLists+0xc4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007104:	4b06      	ldr	r3, [pc, #24]	@ (8007120 <prvSwitchTimerLists+0xc8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a04      	ldr	r2, [pc, #16]	@ (800711c <prvSwitchTimerLists+0xc4>)
 800710a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800710c:	4a04      	ldr	r2, [pc, #16]	@ (8007120 <prvSwitchTimerLists+0xc8>)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	6013      	str	r3, [r2, #0]
}
 8007112:	bf00      	nop
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000fac 	.word	0x20000fac
 8007120:	20000fb0 	.word	0x20000fb0

08007124 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800712a:	f000 f96d 	bl	8007408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800712e:	4b15      	ldr	r3, [pc, #84]	@ (8007184 <prvCheckForValidListAndQueue+0x60>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d120      	bne.n	8007178 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007136:	4814      	ldr	r0, [pc, #80]	@ (8007188 <prvCheckForValidListAndQueue+0x64>)
 8007138:	f7fd fbc0 	bl	80048bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800713c:	4813      	ldr	r0, [pc, #76]	@ (800718c <prvCheckForValidListAndQueue+0x68>)
 800713e:	f7fd fbbd 	bl	80048bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007142:	4b13      	ldr	r3, [pc, #76]	@ (8007190 <prvCheckForValidListAndQueue+0x6c>)
 8007144:	4a10      	ldr	r2, [pc, #64]	@ (8007188 <prvCheckForValidListAndQueue+0x64>)
 8007146:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007148:	4b12      	ldr	r3, [pc, #72]	@ (8007194 <prvCheckForValidListAndQueue+0x70>)
 800714a:	4a10      	ldr	r2, [pc, #64]	@ (800718c <prvCheckForValidListAndQueue+0x68>)
 800714c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800714e:	2300      	movs	r3, #0
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	4b11      	ldr	r3, [pc, #68]	@ (8007198 <prvCheckForValidListAndQueue+0x74>)
 8007154:	4a11      	ldr	r2, [pc, #68]	@ (800719c <prvCheckForValidListAndQueue+0x78>)
 8007156:	2110      	movs	r1, #16
 8007158:	200a      	movs	r0, #10
 800715a:	f7fd fccd 	bl	8004af8 <xQueueGenericCreateStatic>
 800715e:	4603      	mov	r3, r0
 8007160:	4a08      	ldr	r2, [pc, #32]	@ (8007184 <prvCheckForValidListAndQueue+0x60>)
 8007162:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007164:	4b07      	ldr	r3, [pc, #28]	@ (8007184 <prvCheckForValidListAndQueue+0x60>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800716c:	4b05      	ldr	r3, [pc, #20]	@ (8007184 <prvCheckForValidListAndQueue+0x60>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	490b      	ldr	r1, [pc, #44]	@ (80071a0 <prvCheckForValidListAndQueue+0x7c>)
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe fbfa 	bl	800596c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007178:	f000 f978 	bl	800746c <vPortExitCritical>
}
 800717c:	bf00      	nop
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000fb4 	.word	0x20000fb4
 8007188:	20000f84 	.word	0x20000f84
 800718c:	20000f98 	.word	0x20000f98
 8007190:	20000fac 	.word	0x20000fac
 8007194:	20000fb0 	.word	0x20000fb0
 8007198:	20001060 	.word	0x20001060
 800719c:	20000fc0 	.word	0x20000fc0
 80071a0:	0800a81c 	.word	0x0800a81c

080071a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3b04      	subs	r3, #4
 80071b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3b04      	subs	r3, #4
 80071c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f023 0201 	bic.w	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3b04      	subs	r3, #4
 80071d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007208 <pxPortInitialiseStack+0x64>)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3b14      	subs	r3, #20
 80071de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f06f 0202 	mvn.w	r2, #2
 80071f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3b20      	subs	r3, #32
 80071f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071fa:	68fb      	ldr	r3, [r7, #12]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	0800720d 	.word	0x0800720d

0800720c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007216:	4b13      	ldr	r3, [pc, #76]	@ (8007264 <prvTaskExitError+0x58>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d00b      	beq.n	8007238 <prvTaskExitError+0x2c>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	60fb      	str	r3, [r7, #12]
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	e7fd      	b.n	8007234 <prvTaskExitError+0x28>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	60bb      	str	r3, [r7, #8]
}
 800724a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800724c:	bf00      	nop
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0fc      	beq.n	800724e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	2000000c 	.word	0x2000000c
	...

08007270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007270:	4b07      	ldr	r3, [pc, #28]	@ (8007290 <pxCurrentTCBConst2>)
 8007272:	6819      	ldr	r1, [r3, #0]
 8007274:	6808      	ldr	r0, [r1, #0]
 8007276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727a:	f380 8809 	msr	PSP, r0
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f04f 0000 	mov.w	r0, #0
 8007286:	f380 8811 	msr	BASEPRI, r0
 800728a:	4770      	bx	lr
 800728c:	f3af 8000 	nop.w

08007290 <pxCurrentTCBConst2>:
 8007290:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop

08007298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007298:	4808      	ldr	r0, [pc, #32]	@ (80072bc <prvPortStartFirstTask+0x24>)
 800729a:	6800      	ldr	r0, [r0, #0]
 800729c:	6800      	ldr	r0, [r0, #0]
 800729e:	f380 8808 	msr	MSP, r0
 80072a2:	f04f 0000 	mov.w	r0, #0
 80072a6:	f380 8814 	msr	CONTROL, r0
 80072aa:	b662      	cpsie	i
 80072ac:	b661      	cpsie	f
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	df00      	svc	0
 80072b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ba:	bf00      	nop
 80072bc:	e000ed08 	.word	0xe000ed08

080072c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072c6:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <xPortStartScheduler+0x124>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a47      	ldr	r2, [pc, #284]	@ (80073e8 <xPortStartScheduler+0x128>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10b      	bne.n	80072e8 <xPortStartScheduler+0x28>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	60fb      	str	r3, [r7, #12]
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	e7fd      	b.n	80072e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072e8:	4b3e      	ldr	r3, [pc, #248]	@ (80073e4 <xPortStartScheduler+0x124>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a3f      	ldr	r2, [pc, #252]	@ (80073ec <xPortStartScheduler+0x12c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10b      	bne.n	800730a <xPortStartScheduler+0x4a>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	613b      	str	r3, [r7, #16]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800730a:	4b39      	ldr	r3, [pc, #228]	@ (80073f0 <xPortStartScheduler+0x130>)
 800730c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	22ff      	movs	r2, #255	@ 0xff
 800731a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800732c:	b2da      	uxtb	r2, r3
 800732e:	4b31      	ldr	r3, [pc, #196]	@ (80073f4 <xPortStartScheduler+0x134>)
 8007330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007332:	4b31      	ldr	r3, [pc, #196]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007334:	2207      	movs	r2, #7
 8007336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007338:	e009      	b.n	800734e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800733a:	4b2f      	ldr	r3, [pc, #188]	@ (80073f8 <xPortStartScheduler+0x138>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3b01      	subs	r3, #1
 8007340:	4a2d      	ldr	r2, [pc, #180]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007356:	2b80      	cmp	r3, #128	@ 0x80
 8007358:	d0ef      	beq.n	800733a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800735a:	4b27      	ldr	r3, [pc, #156]	@ (80073f8 <xPortStartScheduler+0x138>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1c3 0307 	rsb	r3, r3, #7
 8007362:	2b04      	cmp	r3, #4
 8007364:	d00b      	beq.n	800737e <xPortStartScheduler+0xbe>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	60bb      	str	r3, [r7, #8]
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800737e:	4b1e      	ldr	r3, [pc, #120]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	4a1c      	ldr	r2, [pc, #112]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007388:	4b1b      	ldr	r3, [pc, #108]	@ (80073f8 <xPortStartScheduler+0x138>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007390:	4a19      	ldr	r2, [pc, #100]	@ (80073f8 <xPortStartScheduler+0x138>)
 8007392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800739c:	4b17      	ldr	r3, [pc, #92]	@ (80073fc <xPortStartScheduler+0x13c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a16      	ldr	r2, [pc, #88]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073a8:	4b14      	ldr	r3, [pc, #80]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a13      	ldr	r2, [pc, #76]	@ (80073fc <xPortStartScheduler+0x13c>)
 80073ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80073b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073b4:	f000 f8da 	bl	800756c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073b8:	4b11      	ldr	r3, [pc, #68]	@ (8007400 <xPortStartScheduler+0x140>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073be:	f000 f8f9 	bl	80075b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073c2:	4b10      	ldr	r3, [pc, #64]	@ (8007404 <xPortStartScheduler+0x144>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007404 <xPortStartScheduler+0x144>)
 80073c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80073cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073ce:	f7ff ff63 	bl	8007298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073d2:	f7fe ff2d 	bl	8006230 <vTaskSwitchContext>
	prvTaskExitError();
 80073d6:	f7ff ff19 	bl	800720c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	e000ed00 	.word	0xe000ed00
 80073e8:	410fc271 	.word	0x410fc271
 80073ec:	410fc270 	.word	0x410fc270
 80073f0:	e000e400 	.word	0xe000e400
 80073f4:	200010b0 	.word	0x200010b0
 80073f8:	200010b4 	.word	0x200010b4
 80073fc:	e000ed20 	.word	0xe000ed20
 8007400:	2000000c 	.word	0x2000000c
 8007404:	e000ef34 	.word	0xe000ef34

08007408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	607b      	str	r3, [r7, #4]
}
 8007420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007422:	4b10      	ldr	r3, [pc, #64]	@ (8007464 <vPortEnterCritical+0x5c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	4a0e      	ldr	r2, [pc, #56]	@ (8007464 <vPortEnterCritical+0x5c>)
 800742a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800742c:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <vPortEnterCritical+0x5c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d110      	bne.n	8007456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007434:	4b0c      	ldr	r3, [pc, #48]	@ (8007468 <vPortEnterCritical+0x60>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <vPortEnterCritical+0x4e>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	603b      	str	r3, [r7, #0]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <vPortEnterCritical+0x4a>
	}
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	2000000c 	.word	0x2000000c
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007472:	4b12      	ldr	r3, [pc, #72]	@ (80074bc <vPortExitCritical+0x50>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10b      	bne.n	8007492 <vPortExitCritical+0x26>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	607b      	str	r3, [r7, #4]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007492:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <vPortExitCritical+0x50>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3b01      	subs	r3, #1
 8007498:	4a08      	ldr	r2, [pc, #32]	@ (80074bc <vPortExitCritical+0x50>)
 800749a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800749c:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <vPortExitCritical+0x50>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <vPortExitCritical+0x44>
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f383 8811 	msr	BASEPRI, r3
}
 80074ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	2000000c 	.word	0x2000000c

080074c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074c0:	f3ef 8009 	mrs	r0, PSP
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	4b15      	ldr	r3, [pc, #84]	@ (8007520 <pxCurrentTCBConst>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	f01e 0f10 	tst.w	lr, #16
 80074d0:	bf08      	it	eq
 80074d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	6010      	str	r0, [r2, #0]
 80074dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80074e4:	f380 8811 	msr	BASEPRI, r0
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f7fe fe9e 	bl	8006230 <vTaskSwitchContext>
 80074f4:	f04f 0000 	mov.w	r0, #0
 80074f8:	f380 8811 	msr	BASEPRI, r0
 80074fc:	bc09      	pop	{r0, r3}
 80074fe:	6819      	ldr	r1, [r3, #0]
 8007500:	6808      	ldr	r0, [r1, #0]
 8007502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007506:	f01e 0f10 	tst.w	lr, #16
 800750a:	bf08      	it	eq
 800750c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007510:	f380 8809 	msr	PSP, r0
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst>:
 8007520:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	607b      	str	r3, [r7, #4]
}
 8007540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007542:	f7fe fdbb 	bl	80060bc <xTaskIncrementTick>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800754c:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <xPortSysTickHandler+0x40>)
 800754e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	2300      	movs	r3, #0
 8007556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f383 8811 	msr	BASEPRI, r3
}
 800755e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	e000ed04 	.word	0xe000ed04

0800756c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007570:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <vPortSetupTimerInterrupt+0x34>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007576:	4b0b      	ldr	r3, [pc, #44]	@ (80075a4 <vPortSetupTimerInterrupt+0x38>)
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800757c:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <vPortSetupTimerInterrupt+0x3c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a0a      	ldr	r2, [pc, #40]	@ (80075ac <vPortSetupTimerInterrupt+0x40>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	099b      	lsrs	r3, r3, #6
 8007588:	4a09      	ldr	r2, [pc, #36]	@ (80075b0 <vPortSetupTimerInterrupt+0x44>)
 800758a:	3b01      	subs	r3, #1
 800758c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800758e:	4b04      	ldr	r3, [pc, #16]	@ (80075a0 <vPortSetupTimerInterrupt+0x34>)
 8007590:	2207      	movs	r2, #7
 8007592:	601a      	str	r2, [r3, #0]
}
 8007594:	bf00      	nop
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	e000e010 	.word	0xe000e010
 80075a4:	e000e018 	.word	0xe000e018
 80075a8:	20000000 	.word	0x20000000
 80075ac:	10624dd3 	.word	0x10624dd3
 80075b0:	e000e014 	.word	0xe000e014

080075b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80075c4 <vPortEnableVFP+0x10>
 80075b8:	6801      	ldr	r1, [r0, #0]
 80075ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80075be:	6001      	str	r1, [r0, #0]
 80075c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075c2:	bf00      	nop
 80075c4:	e000ed88 	.word	0xe000ed88

080075c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075ce:	f3ef 8305 	mrs	r3, IPSR
 80075d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d915      	bls.n	8007606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075da:	4a18      	ldr	r2, [pc, #96]	@ (800763c <vPortValidateInterruptPriority+0x74>)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075e4:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <vPortValidateInterruptPriority+0x78>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	7afa      	ldrb	r2, [r7, #11]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d20b      	bcs.n	8007606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	607b      	str	r3, [r7, #4]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007606:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <vPortValidateInterruptPriority+0x7c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800760e:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <vPortValidateInterruptPriority+0x80>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d90b      	bls.n	800762e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	603b      	str	r3, [r7, #0]
}
 8007628:	bf00      	nop
 800762a:	bf00      	nop
 800762c:	e7fd      	b.n	800762a <vPortValidateInterruptPriority+0x62>
	}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	e000e3f0 	.word	0xe000e3f0
 8007640:	200010b0 	.word	0x200010b0
 8007644:	e000ed0c 	.word	0xe000ed0c
 8007648:	200010b4 	.word	0x200010b4

0800764c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007658:	f7fe fc74 	bl	8005f44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800765c:	4b5c      	ldr	r3, [pc, #368]	@ (80077d0 <pvPortMalloc+0x184>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007664:	f000 f924 	bl	80078b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007668:	4b5a      	ldr	r3, [pc, #360]	@ (80077d4 <pvPortMalloc+0x188>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4013      	ands	r3, r2
 8007670:	2b00      	cmp	r3, #0
 8007672:	f040 8095 	bne.w	80077a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01e      	beq.n	80076ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800767c:	2208      	movs	r2, #8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b00      	cmp	r3, #0
 800768c:	d015      	beq.n	80076ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f023 0307 	bic.w	r3, r3, #7
 8007694:	3308      	adds	r3, #8
 8007696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00b      	beq.n	80076ba <pvPortMalloc+0x6e>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	617b      	str	r3, [r7, #20]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d06f      	beq.n	80077a0 <pvPortMalloc+0x154>
 80076c0:	4b45      	ldr	r3, [pc, #276]	@ (80077d8 <pvPortMalloc+0x18c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d86a      	bhi.n	80077a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076ca:	4b44      	ldr	r3, [pc, #272]	@ (80077dc <pvPortMalloc+0x190>)
 80076cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076ce:	4b43      	ldr	r3, [pc, #268]	@ (80077dc <pvPortMalloc+0x190>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076d4:	e004      	b.n	80076e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d903      	bls.n	80076f2 <pvPortMalloc+0xa6>
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f1      	bne.n	80076d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076f2:	4b37      	ldr	r3, [pc, #220]	@ (80077d0 <pvPortMalloc+0x184>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d051      	beq.n	80077a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2208      	movs	r2, #8
 8007702:	4413      	add	r3, r2
 8007704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	1ad2      	subs	r2, r2, r3
 8007716:	2308      	movs	r3, #8
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	429a      	cmp	r2, r3
 800771c:	d920      	bls.n	8007760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800771e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4413      	add	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <pvPortMalloc+0xfc>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	613b      	str	r3, [r7, #16]
}
 8007742:	bf00      	nop
 8007744:	bf00      	nop
 8007746:	e7fd      	b.n	8007744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800775a:	69b8      	ldr	r0, [r7, #24]
 800775c:	f000 f90a 	bl	8007974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007760:	4b1d      	ldr	r3, [pc, #116]	@ (80077d8 <pvPortMalloc+0x18c>)
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	4a1b      	ldr	r2, [pc, #108]	@ (80077d8 <pvPortMalloc+0x18c>)
 800776c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800776e:	4b1a      	ldr	r3, [pc, #104]	@ (80077d8 <pvPortMalloc+0x18c>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b1b      	ldr	r3, [pc, #108]	@ (80077e0 <pvPortMalloc+0x194>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d203      	bcs.n	8007782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800777a:	4b17      	ldr	r3, [pc, #92]	@ (80077d8 <pvPortMalloc+0x18c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a18      	ldr	r2, [pc, #96]	@ (80077e0 <pvPortMalloc+0x194>)
 8007780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4b13      	ldr	r3, [pc, #76]	@ (80077d4 <pvPortMalloc+0x188>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	431a      	orrs	r2, r3
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007796:	4b13      	ldr	r3, [pc, #76]	@ (80077e4 <pvPortMalloc+0x198>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3301      	adds	r3, #1
 800779c:	4a11      	ldr	r2, [pc, #68]	@ (80077e4 <pvPortMalloc+0x198>)
 800779e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077a0:	f7fe fbde 	bl	8005f60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <pvPortMalloc+0x17a>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60fb      	str	r3, [r7, #12]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <pvPortMalloc+0x176>
	return pvReturn;
 80077c6:	69fb      	ldr	r3, [r7, #28]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3728      	adds	r7, #40	@ 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20004cc0 	.word	0x20004cc0
 80077d4:	20004cd4 	.word	0x20004cd4
 80077d8:	20004cc4 	.word	0x20004cc4
 80077dc:	20004cb8 	.word	0x20004cb8
 80077e0:	20004cc8 	.word	0x20004cc8
 80077e4:	20004ccc 	.word	0x20004ccc

080077e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d04f      	beq.n	800789a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077fa:	2308      	movs	r3, #8
 80077fc:	425b      	negs	r3, r3
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4413      	add	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	4b25      	ldr	r3, [pc, #148]	@ (80078a4 <vPortFree+0xbc>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10b      	bne.n	800782e <vPortFree+0x46>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60fb      	str	r3, [r7, #12]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <vPortFree+0x66>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	60bb      	str	r3, [r7, #8]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <vPortFree+0xbc>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4013      	ands	r3, r2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01e      	beq.n	800789a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d11a      	bne.n	800789a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	4b0e      	ldr	r3, [pc, #56]	@ (80078a4 <vPortFree+0xbc>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	43db      	mvns	r3, r3
 800786e:	401a      	ands	r2, r3
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007874:	f7fe fb66 	bl	8005f44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <vPortFree+0xc0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4413      	add	r3, r2
 8007882:	4a09      	ldr	r2, [pc, #36]	@ (80078a8 <vPortFree+0xc0>)
 8007884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007886:	6938      	ldr	r0, [r7, #16]
 8007888:	f000 f874 	bl	8007974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800788c:	4b07      	ldr	r3, [pc, #28]	@ (80078ac <vPortFree+0xc4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	4a06      	ldr	r2, [pc, #24]	@ (80078ac <vPortFree+0xc4>)
 8007894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007896:	f7fe fb63 	bl	8005f60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800789a:	bf00      	nop
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20004cd4 	.word	0x20004cd4
 80078a8:	20004cc4 	.word	0x20004cc4
 80078ac:	20004cd0 	.word	0x20004cd0

080078b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80078ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078bc:	4b27      	ldr	r3, [pc, #156]	@ (800795c <prvHeapInit+0xac>)
 80078be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00c      	beq.n	80078e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3307      	adds	r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0307 	bic.w	r3, r3, #7
 80078d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	4a1f      	ldr	r2, [pc, #124]	@ (800795c <prvHeapInit+0xac>)
 80078e0:	4413      	add	r3, r2
 80078e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007960 <prvHeapInit+0xb0>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007960 <prvHeapInit+0xb0>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4413      	add	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078fc:	2208      	movs	r2, #8
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0307 	bic.w	r3, r3, #7
 800790a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4a15      	ldr	r2, [pc, #84]	@ (8007964 <prvHeapInit+0xb4>)
 8007910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007912:	4b14      	ldr	r3, [pc, #80]	@ (8007964 <prvHeapInit+0xb4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2200      	movs	r2, #0
 8007918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800791a:	4b12      	ldr	r3, [pc, #72]	@ (8007964 <prvHeapInit+0xb4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	1ad2      	subs	r2, r2, r3
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007930:	4b0c      	ldr	r3, [pc, #48]	@ (8007964 <prvHeapInit+0xb4>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	4a0a      	ldr	r2, [pc, #40]	@ (8007968 <prvHeapInit+0xb8>)
 800793e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4a09      	ldr	r2, [pc, #36]	@ (800796c <prvHeapInit+0xbc>)
 8007946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007948:	4b09      	ldr	r3, [pc, #36]	@ (8007970 <prvHeapInit+0xc0>)
 800794a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800794e:	601a      	str	r2, [r3, #0]
}
 8007950:	bf00      	nop
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	200010b8 	.word	0x200010b8
 8007960:	20004cb8 	.word	0x20004cb8
 8007964:	20004cc0 	.word	0x20004cc0
 8007968:	20004cc8 	.word	0x20004cc8
 800796c:	20004cc4 	.word	0x20004cc4
 8007970:	20004cd4 	.word	0x20004cd4

08007974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800797c:	4b28      	ldr	r3, [pc, #160]	@ (8007a20 <prvInsertBlockIntoFreeList+0xac>)
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	e002      	b.n	8007988 <prvInsertBlockIntoFreeList+0x14>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	429a      	cmp	r2, r3
 8007990:	d8f7      	bhi.n	8007982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d108      	bne.n	80079b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	441a      	add	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	441a      	add	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d118      	bne.n	80079fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4b15      	ldr	r3, [pc, #84]	@ (8007a24 <prvInsertBlockIntoFreeList+0xb0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d00d      	beq.n	80079f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	441a      	add	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	e008      	b.n	8007a04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a24 <prvInsertBlockIntoFreeList+0xb0>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e003      	b.n	8007a04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d002      	beq.n	8007a12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	20004cb8 	.word	0x20004cb8
 8007a24:	20004cc0 	.word	0x20004cc0

08007a28 <__cvt>:
 8007a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2c:	ec57 6b10 	vmov	r6, r7, d0
 8007a30:	2f00      	cmp	r7, #0
 8007a32:	460c      	mov	r4, r1
 8007a34:	4619      	mov	r1, r3
 8007a36:	463b      	mov	r3, r7
 8007a38:	bfbb      	ittet	lt
 8007a3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007a3e:	461f      	movlt	r7, r3
 8007a40:	2300      	movge	r3, #0
 8007a42:	232d      	movlt	r3, #45	@ 0x2d
 8007a44:	700b      	strb	r3, [r1, #0]
 8007a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007a4c:	4691      	mov	r9, r2
 8007a4e:	f023 0820 	bic.w	r8, r3, #32
 8007a52:	bfbc      	itt	lt
 8007a54:	4632      	movlt	r2, r6
 8007a56:	4616      	movlt	r6, r2
 8007a58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a5c:	d005      	beq.n	8007a6a <__cvt+0x42>
 8007a5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007a62:	d100      	bne.n	8007a66 <__cvt+0x3e>
 8007a64:	3401      	adds	r4, #1
 8007a66:	2102      	movs	r1, #2
 8007a68:	e000      	b.n	8007a6c <__cvt+0x44>
 8007a6a:	2103      	movs	r1, #3
 8007a6c:	ab03      	add	r3, sp, #12
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	ab02      	add	r3, sp, #8
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	ec47 6b10 	vmov	d0, r6, r7
 8007a78:	4653      	mov	r3, sl
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	f000 fedc 	bl	8008838 <_dtoa_r>
 8007a80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007a84:	4605      	mov	r5, r0
 8007a86:	d119      	bne.n	8007abc <__cvt+0x94>
 8007a88:	f019 0f01 	tst.w	r9, #1
 8007a8c:	d00e      	beq.n	8007aac <__cvt+0x84>
 8007a8e:	eb00 0904 	add.w	r9, r0, r4
 8007a92:	2200      	movs	r2, #0
 8007a94:	2300      	movs	r3, #0
 8007a96:	4630      	mov	r0, r6
 8007a98:	4639      	mov	r1, r7
 8007a9a:	f7f9 f835 	bl	8000b08 <__aeabi_dcmpeq>
 8007a9e:	b108      	cbz	r0, 8007aa4 <__cvt+0x7c>
 8007aa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007aa4:	2230      	movs	r2, #48	@ 0x30
 8007aa6:	9b03      	ldr	r3, [sp, #12]
 8007aa8:	454b      	cmp	r3, r9
 8007aaa:	d31e      	bcc.n	8007aea <__cvt+0xc2>
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ab0:	1b5b      	subs	r3, r3, r5
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	b004      	add	sp, #16
 8007ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ac0:	eb00 0904 	add.w	r9, r0, r4
 8007ac4:	d1e5      	bne.n	8007a92 <__cvt+0x6a>
 8007ac6:	7803      	ldrb	r3, [r0, #0]
 8007ac8:	2b30      	cmp	r3, #48	@ 0x30
 8007aca:	d10a      	bne.n	8007ae2 <__cvt+0xba>
 8007acc:	2200      	movs	r2, #0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	f7f9 f818 	bl	8000b08 <__aeabi_dcmpeq>
 8007ad8:	b918      	cbnz	r0, 8007ae2 <__cvt+0xba>
 8007ada:	f1c4 0401 	rsb	r4, r4, #1
 8007ade:	f8ca 4000 	str.w	r4, [sl]
 8007ae2:	f8da 3000 	ldr.w	r3, [sl]
 8007ae6:	4499      	add	r9, r3
 8007ae8:	e7d3      	b.n	8007a92 <__cvt+0x6a>
 8007aea:	1c59      	adds	r1, r3, #1
 8007aec:	9103      	str	r1, [sp, #12]
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	e7d9      	b.n	8007aa6 <__cvt+0x7e>

08007af2 <__exponent>:
 8007af2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007af4:	2900      	cmp	r1, #0
 8007af6:	bfba      	itte	lt
 8007af8:	4249      	neglt	r1, r1
 8007afa:	232d      	movlt	r3, #45	@ 0x2d
 8007afc:	232b      	movge	r3, #43	@ 0x2b
 8007afe:	2909      	cmp	r1, #9
 8007b00:	7002      	strb	r2, [r0, #0]
 8007b02:	7043      	strb	r3, [r0, #1]
 8007b04:	dd29      	ble.n	8007b5a <__exponent+0x68>
 8007b06:	f10d 0307 	add.w	r3, sp, #7
 8007b0a:	461d      	mov	r5, r3
 8007b0c:	270a      	movs	r7, #10
 8007b0e:	461a      	mov	r2, r3
 8007b10:	fbb1 f6f7 	udiv	r6, r1, r7
 8007b14:	fb07 1416 	mls	r4, r7, r6, r1
 8007b18:	3430      	adds	r4, #48	@ 0x30
 8007b1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007b1e:	460c      	mov	r4, r1
 8007b20:	2c63      	cmp	r4, #99	@ 0x63
 8007b22:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b26:	4631      	mov	r1, r6
 8007b28:	dcf1      	bgt.n	8007b0e <__exponent+0x1c>
 8007b2a:	3130      	adds	r1, #48	@ 0x30
 8007b2c:	1e94      	subs	r4, r2, #2
 8007b2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b32:	1c41      	adds	r1, r0, #1
 8007b34:	4623      	mov	r3, r4
 8007b36:	42ab      	cmp	r3, r5
 8007b38:	d30a      	bcc.n	8007b50 <__exponent+0x5e>
 8007b3a:	f10d 0309 	add.w	r3, sp, #9
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	42ac      	cmp	r4, r5
 8007b42:	bf88      	it	hi
 8007b44:	2300      	movhi	r3, #0
 8007b46:	3302      	adds	r3, #2
 8007b48:	4403      	add	r3, r0
 8007b4a:	1a18      	subs	r0, r3, r0
 8007b4c:	b003      	add	sp, #12
 8007b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007b54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007b58:	e7ed      	b.n	8007b36 <__exponent+0x44>
 8007b5a:	2330      	movs	r3, #48	@ 0x30
 8007b5c:	3130      	adds	r1, #48	@ 0x30
 8007b5e:	7083      	strb	r3, [r0, #2]
 8007b60:	70c1      	strb	r1, [r0, #3]
 8007b62:	1d03      	adds	r3, r0, #4
 8007b64:	e7f1      	b.n	8007b4a <__exponent+0x58>
	...

08007b68 <_printf_float>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	b08d      	sub	sp, #52	@ 0x34
 8007b6e:	460c      	mov	r4, r1
 8007b70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007b74:	4616      	mov	r6, r2
 8007b76:	461f      	mov	r7, r3
 8007b78:	4605      	mov	r5, r0
 8007b7a:	f000 fcef 	bl	800855c <_localeconv_r>
 8007b7e:	6803      	ldr	r3, [r0, #0]
 8007b80:	9304      	str	r3, [sp, #16]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7f8 fb94 	bl	80002b0 <strlen>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b90:	9005      	str	r0, [sp, #20]
 8007b92:	3307      	adds	r3, #7
 8007b94:	f023 0307 	bic.w	r3, r3, #7
 8007b98:	f103 0208 	add.w	r2, r3, #8
 8007b9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ba0:	f8d4 b000 	ldr.w	fp, [r4]
 8007ba4:	f8c8 2000 	str.w	r2, [r8]
 8007ba8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007bb0:	9307      	str	r3, [sp, #28]
 8007bb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bbe:	4b9c      	ldr	r3, [pc, #624]	@ (8007e30 <_printf_float+0x2c8>)
 8007bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc4:	f7f8 ffd2 	bl	8000b6c <__aeabi_dcmpun>
 8007bc8:	bb70      	cbnz	r0, 8007c28 <_printf_float+0xc0>
 8007bca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bce:	4b98      	ldr	r3, [pc, #608]	@ (8007e30 <_printf_float+0x2c8>)
 8007bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd4:	f7f8 ffac 	bl	8000b30 <__aeabi_dcmple>
 8007bd8:	bb30      	cbnz	r0, 8007c28 <_printf_float+0xc0>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4640      	mov	r0, r8
 8007be0:	4649      	mov	r1, r9
 8007be2:	f7f8 ff9b 	bl	8000b1c <__aeabi_dcmplt>
 8007be6:	b110      	cbz	r0, 8007bee <_printf_float+0x86>
 8007be8:	232d      	movs	r3, #45	@ 0x2d
 8007bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bee:	4a91      	ldr	r2, [pc, #580]	@ (8007e34 <_printf_float+0x2cc>)
 8007bf0:	4b91      	ldr	r3, [pc, #580]	@ (8007e38 <_printf_float+0x2d0>)
 8007bf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007bf6:	bf8c      	ite	hi
 8007bf8:	4690      	movhi	r8, r2
 8007bfa:	4698      	movls	r8, r3
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	6123      	str	r3, [r4, #16]
 8007c00:	f02b 0304 	bic.w	r3, fp, #4
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	f04f 0900 	mov.w	r9, #0
 8007c0a:	9700      	str	r7, [sp, #0]
 8007c0c:	4633      	mov	r3, r6
 8007c0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007c10:	4621      	mov	r1, r4
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 f9d2 	bl	8007fbc <_printf_common>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	f040 808d 	bne.w	8007d38 <_printf_float+0x1d0>
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	b00d      	add	sp, #52	@ 0x34
 8007c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c28:	4642      	mov	r2, r8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	4649      	mov	r1, r9
 8007c30:	f7f8 ff9c 	bl	8000b6c <__aeabi_dcmpun>
 8007c34:	b140      	cbz	r0, 8007c48 <_printf_float+0xe0>
 8007c36:	464b      	mov	r3, r9
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bfbc      	itt	lt
 8007c3c:	232d      	movlt	r3, #45	@ 0x2d
 8007c3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007c42:	4a7e      	ldr	r2, [pc, #504]	@ (8007e3c <_printf_float+0x2d4>)
 8007c44:	4b7e      	ldr	r3, [pc, #504]	@ (8007e40 <_printf_float+0x2d8>)
 8007c46:	e7d4      	b.n	8007bf2 <_printf_float+0x8a>
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007c4e:	9206      	str	r2, [sp, #24]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	d13b      	bne.n	8007ccc <_printf_float+0x164>
 8007c54:	2306      	movs	r3, #6
 8007c56:	6063      	str	r3, [r4, #4]
 8007c58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	6022      	str	r2, [r4, #0]
 8007c60:	9303      	str	r3, [sp, #12]
 8007c62:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007c68:	ab09      	add	r3, sp, #36	@ 0x24
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	ec49 8b10 	vmov	d0, r8, r9
 8007c72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007c76:	4628      	mov	r0, r5
 8007c78:	f7ff fed6 	bl	8007a28 <__cvt>
 8007c7c:	9b06      	ldr	r3, [sp, #24]
 8007c7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c80:	2b47      	cmp	r3, #71	@ 0x47
 8007c82:	4680      	mov	r8, r0
 8007c84:	d129      	bne.n	8007cda <_printf_float+0x172>
 8007c86:	1cc8      	adds	r0, r1, #3
 8007c88:	db02      	blt.n	8007c90 <_printf_float+0x128>
 8007c8a:	6863      	ldr	r3, [r4, #4]
 8007c8c:	4299      	cmp	r1, r3
 8007c8e:	dd41      	ble.n	8007d14 <_printf_float+0x1ac>
 8007c90:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c94:	fa5f fa8a 	uxtb.w	sl, sl
 8007c98:	3901      	subs	r1, #1
 8007c9a:	4652      	mov	r2, sl
 8007c9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ca0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ca2:	f7ff ff26 	bl	8007af2 <__exponent>
 8007ca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ca8:	1813      	adds	r3, r2, r0
 8007caa:	2a01      	cmp	r2, #1
 8007cac:	4681      	mov	r9, r0
 8007cae:	6123      	str	r3, [r4, #16]
 8007cb0:	dc02      	bgt.n	8007cb8 <_printf_float+0x150>
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	07d2      	lsls	r2, r2, #31
 8007cb6:	d501      	bpl.n	8007cbc <_printf_float+0x154>
 8007cb8:	3301      	adds	r3, #1
 8007cba:	6123      	str	r3, [r4, #16]
 8007cbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0a2      	beq.n	8007c0a <_printf_float+0xa2>
 8007cc4:	232d      	movs	r3, #45	@ 0x2d
 8007cc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cca:	e79e      	b.n	8007c0a <_printf_float+0xa2>
 8007ccc:	9a06      	ldr	r2, [sp, #24]
 8007cce:	2a47      	cmp	r2, #71	@ 0x47
 8007cd0:	d1c2      	bne.n	8007c58 <_printf_float+0xf0>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1c0      	bne.n	8007c58 <_printf_float+0xf0>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e7bd      	b.n	8007c56 <_printf_float+0xee>
 8007cda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007cde:	d9db      	bls.n	8007c98 <_printf_float+0x130>
 8007ce0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ce4:	d118      	bne.n	8007d18 <_printf_float+0x1b0>
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	6863      	ldr	r3, [r4, #4]
 8007cea:	dd0b      	ble.n	8007d04 <_printf_float+0x19c>
 8007cec:	6121      	str	r1, [r4, #16]
 8007cee:	b913      	cbnz	r3, 8007cf6 <_printf_float+0x18e>
 8007cf0:	6822      	ldr	r2, [r4, #0]
 8007cf2:	07d0      	lsls	r0, r2, #31
 8007cf4:	d502      	bpl.n	8007cfc <_printf_float+0x194>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	440b      	add	r3, r1
 8007cfa:	6123      	str	r3, [r4, #16]
 8007cfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007cfe:	f04f 0900 	mov.w	r9, #0
 8007d02:	e7db      	b.n	8007cbc <_printf_float+0x154>
 8007d04:	b913      	cbnz	r3, 8007d0c <_printf_float+0x1a4>
 8007d06:	6822      	ldr	r2, [r4, #0]
 8007d08:	07d2      	lsls	r2, r2, #31
 8007d0a:	d501      	bpl.n	8007d10 <_printf_float+0x1a8>
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	e7f4      	b.n	8007cfa <_printf_float+0x192>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e7f2      	b.n	8007cfa <_printf_float+0x192>
 8007d14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d1a:	4299      	cmp	r1, r3
 8007d1c:	db05      	blt.n	8007d2a <_printf_float+0x1c2>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	6121      	str	r1, [r4, #16]
 8007d22:	07d8      	lsls	r0, r3, #31
 8007d24:	d5ea      	bpl.n	8007cfc <_printf_float+0x194>
 8007d26:	1c4b      	adds	r3, r1, #1
 8007d28:	e7e7      	b.n	8007cfa <_printf_float+0x192>
 8007d2a:	2900      	cmp	r1, #0
 8007d2c:	bfd4      	ite	le
 8007d2e:	f1c1 0202 	rsble	r2, r1, #2
 8007d32:	2201      	movgt	r2, #1
 8007d34:	4413      	add	r3, r2
 8007d36:	e7e0      	b.n	8007cfa <_printf_float+0x192>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	055a      	lsls	r2, r3, #21
 8007d3c:	d407      	bmi.n	8007d4e <_printf_float+0x1e6>
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	4642      	mov	r2, r8
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b8      	blx	r7
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d12b      	bne.n	8007da4 <_printf_float+0x23c>
 8007d4c:	e767      	b.n	8007c1e <_printf_float+0xb6>
 8007d4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d52:	f240 80dd 	bls.w	8007f10 <_printf_float+0x3a8>
 8007d56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f7f8 fed3 	bl	8000b08 <__aeabi_dcmpeq>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d033      	beq.n	8007dce <_printf_float+0x266>
 8007d66:	4a37      	ldr	r2, [pc, #220]	@ (8007e44 <_printf_float+0x2dc>)
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	f43f af54 	beq.w	8007c1e <_printf_float+0xb6>
 8007d76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007d7a:	4543      	cmp	r3, r8
 8007d7c:	db02      	blt.n	8007d84 <_printf_float+0x21c>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	07d8      	lsls	r0, r3, #31
 8007d82:	d50f      	bpl.n	8007da4 <_printf_float+0x23c>
 8007d84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b8      	blx	r7
 8007d8e:	3001      	adds	r0, #1
 8007d90:	f43f af45 	beq.w	8007c1e <_printf_float+0xb6>
 8007d94:	f04f 0900 	mov.w	r9, #0
 8007d98:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d9c:	f104 0a1a 	add.w	sl, r4, #26
 8007da0:	45c8      	cmp	r8, r9
 8007da2:	dc09      	bgt.n	8007db8 <_printf_float+0x250>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	079b      	lsls	r3, r3, #30
 8007da8:	f100 8103 	bmi.w	8007fb2 <_printf_float+0x44a>
 8007dac:	68e0      	ldr	r0, [r4, #12]
 8007dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007db0:	4298      	cmp	r0, r3
 8007db2:	bfb8      	it	lt
 8007db4:	4618      	movlt	r0, r3
 8007db6:	e734      	b.n	8007c22 <_printf_float+0xba>
 8007db8:	2301      	movs	r3, #1
 8007dba:	4652      	mov	r2, sl
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	f43f af2b 	beq.w	8007c1e <_printf_float+0xb6>
 8007dc8:	f109 0901 	add.w	r9, r9, #1
 8007dcc:	e7e8      	b.n	8007da0 <_printf_float+0x238>
 8007dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dc39      	bgt.n	8007e48 <_printf_float+0x2e0>
 8007dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8007e44 <_printf_float+0x2dc>)
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	47b8      	blx	r7
 8007dde:	3001      	adds	r0, #1
 8007de0:	f43f af1d 	beq.w	8007c1e <_printf_float+0xb6>
 8007de4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007de8:	ea59 0303 	orrs.w	r3, r9, r3
 8007dec:	d102      	bne.n	8007df4 <_printf_float+0x28c>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	07d9      	lsls	r1, r3, #31
 8007df2:	d5d7      	bpl.n	8007da4 <_printf_float+0x23c>
 8007df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df8:	4631      	mov	r1, r6
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	47b8      	blx	r7
 8007dfe:	3001      	adds	r0, #1
 8007e00:	f43f af0d 	beq.w	8007c1e <_printf_float+0xb6>
 8007e04:	f04f 0a00 	mov.w	sl, #0
 8007e08:	f104 0b1a 	add.w	fp, r4, #26
 8007e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e0e:	425b      	negs	r3, r3
 8007e10:	4553      	cmp	r3, sl
 8007e12:	dc01      	bgt.n	8007e18 <_printf_float+0x2b0>
 8007e14:	464b      	mov	r3, r9
 8007e16:	e793      	b.n	8007d40 <_printf_float+0x1d8>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	465a      	mov	r2, fp
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4628      	mov	r0, r5
 8007e20:	47b8      	blx	r7
 8007e22:	3001      	adds	r0, #1
 8007e24:	f43f aefb 	beq.w	8007c1e <_printf_float+0xb6>
 8007e28:	f10a 0a01 	add.w	sl, sl, #1
 8007e2c:	e7ee      	b.n	8007e0c <_printf_float+0x2a4>
 8007e2e:	bf00      	nop
 8007e30:	7fefffff 	.word	0x7fefffff
 8007e34:	0800a8c0 	.word	0x0800a8c0
 8007e38:	0800a8bc 	.word	0x0800a8bc
 8007e3c:	0800a8c8 	.word	0x0800a8c8
 8007e40:	0800a8c4 	.word	0x0800a8c4
 8007e44:	0800a8cc 	.word	0x0800a8cc
 8007e48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e4e:	4553      	cmp	r3, sl
 8007e50:	bfa8      	it	ge
 8007e52:	4653      	movge	r3, sl
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	4699      	mov	r9, r3
 8007e58:	dc36      	bgt.n	8007ec8 <_printf_float+0x360>
 8007e5a:	f04f 0b00 	mov.w	fp, #0
 8007e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e62:	f104 021a 	add.w	r2, r4, #26
 8007e66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e68:	9306      	str	r3, [sp, #24]
 8007e6a:	eba3 0309 	sub.w	r3, r3, r9
 8007e6e:	455b      	cmp	r3, fp
 8007e70:	dc31      	bgt.n	8007ed6 <_printf_float+0x36e>
 8007e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e74:	459a      	cmp	sl, r3
 8007e76:	dc3a      	bgt.n	8007eee <_printf_float+0x386>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	07da      	lsls	r2, r3, #31
 8007e7c:	d437      	bmi.n	8007eee <_printf_float+0x386>
 8007e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e80:	ebaa 0903 	sub.w	r9, sl, r3
 8007e84:	9b06      	ldr	r3, [sp, #24]
 8007e86:	ebaa 0303 	sub.w	r3, sl, r3
 8007e8a:	4599      	cmp	r9, r3
 8007e8c:	bfa8      	it	ge
 8007e8e:	4699      	movge	r9, r3
 8007e90:	f1b9 0f00 	cmp.w	r9, #0
 8007e94:	dc33      	bgt.n	8007efe <_printf_float+0x396>
 8007e96:	f04f 0800 	mov.w	r8, #0
 8007e9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e9e:	f104 0b1a 	add.w	fp, r4, #26
 8007ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ea8:	eba3 0309 	sub.w	r3, r3, r9
 8007eac:	4543      	cmp	r3, r8
 8007eae:	f77f af79 	ble.w	8007da4 <_printf_float+0x23c>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	465a      	mov	r2, fp
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	4628      	mov	r0, r5
 8007eba:	47b8      	blx	r7
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	f43f aeae 	beq.w	8007c1e <_printf_float+0xb6>
 8007ec2:	f108 0801 	add.w	r8, r8, #1
 8007ec6:	e7ec      	b.n	8007ea2 <_printf_float+0x33a>
 8007ec8:	4642      	mov	r2, r8
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b8      	blx	r7
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d1c2      	bne.n	8007e5a <_printf_float+0x2f2>
 8007ed4:	e6a3      	b.n	8007c1e <_printf_float+0xb6>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4628      	mov	r0, r5
 8007edc:	9206      	str	r2, [sp, #24]
 8007ede:	47b8      	blx	r7
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	f43f ae9c 	beq.w	8007c1e <_printf_float+0xb6>
 8007ee6:	9a06      	ldr	r2, [sp, #24]
 8007ee8:	f10b 0b01 	add.w	fp, fp, #1
 8007eec:	e7bb      	b.n	8007e66 <_printf_float+0x2fe>
 8007eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	47b8      	blx	r7
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d1c0      	bne.n	8007e7e <_printf_float+0x316>
 8007efc:	e68f      	b.n	8007c1e <_printf_float+0xb6>
 8007efe:	9a06      	ldr	r2, [sp, #24]
 8007f00:	464b      	mov	r3, r9
 8007f02:	4442      	add	r2, r8
 8007f04:	4631      	mov	r1, r6
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d1c3      	bne.n	8007e96 <_printf_float+0x32e>
 8007f0e:	e686      	b.n	8007c1e <_printf_float+0xb6>
 8007f10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f14:	f1ba 0f01 	cmp.w	sl, #1
 8007f18:	dc01      	bgt.n	8007f1e <_printf_float+0x3b6>
 8007f1a:	07db      	lsls	r3, r3, #31
 8007f1c:	d536      	bpl.n	8007f8c <_printf_float+0x424>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4642      	mov	r2, r8
 8007f22:	4631      	mov	r1, r6
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b8      	blx	r7
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f43f ae78 	beq.w	8007c1e <_printf_float+0xb6>
 8007f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f32:	4631      	mov	r1, r6
 8007f34:	4628      	mov	r0, r5
 8007f36:	47b8      	blx	r7
 8007f38:	3001      	adds	r0, #1
 8007f3a:	f43f ae70 	beq.w	8007c1e <_printf_float+0xb6>
 8007f3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f42:	2200      	movs	r2, #0
 8007f44:	2300      	movs	r3, #0
 8007f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f4a:	f7f8 fddd 	bl	8000b08 <__aeabi_dcmpeq>
 8007f4e:	b9c0      	cbnz	r0, 8007f82 <_printf_float+0x41a>
 8007f50:	4653      	mov	r3, sl
 8007f52:	f108 0201 	add.w	r2, r8, #1
 8007f56:	4631      	mov	r1, r6
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b8      	blx	r7
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d10c      	bne.n	8007f7a <_printf_float+0x412>
 8007f60:	e65d      	b.n	8007c1e <_printf_float+0xb6>
 8007f62:	2301      	movs	r3, #1
 8007f64:	465a      	mov	r2, fp
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f43f ae56 	beq.w	8007c1e <_printf_float+0xb6>
 8007f72:	f108 0801 	add.w	r8, r8, #1
 8007f76:	45d0      	cmp	r8, sl
 8007f78:	dbf3      	blt.n	8007f62 <_printf_float+0x3fa>
 8007f7a:	464b      	mov	r3, r9
 8007f7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f80:	e6df      	b.n	8007d42 <_printf_float+0x1da>
 8007f82:	f04f 0800 	mov.w	r8, #0
 8007f86:	f104 0b1a 	add.w	fp, r4, #26
 8007f8a:	e7f4      	b.n	8007f76 <_printf_float+0x40e>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	4642      	mov	r2, r8
 8007f90:	e7e1      	b.n	8007f56 <_printf_float+0x3ee>
 8007f92:	2301      	movs	r3, #1
 8007f94:	464a      	mov	r2, r9
 8007f96:	4631      	mov	r1, r6
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47b8      	blx	r7
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f43f ae3e 	beq.w	8007c1e <_printf_float+0xb6>
 8007fa2:	f108 0801 	add.w	r8, r8, #1
 8007fa6:	68e3      	ldr	r3, [r4, #12]
 8007fa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007faa:	1a5b      	subs	r3, r3, r1
 8007fac:	4543      	cmp	r3, r8
 8007fae:	dcf0      	bgt.n	8007f92 <_printf_float+0x42a>
 8007fb0:	e6fc      	b.n	8007dac <_printf_float+0x244>
 8007fb2:	f04f 0800 	mov.w	r8, #0
 8007fb6:	f104 0919 	add.w	r9, r4, #25
 8007fba:	e7f4      	b.n	8007fa6 <_printf_float+0x43e>

08007fbc <_printf_common>:
 8007fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc0:	4616      	mov	r6, r2
 8007fc2:	4698      	mov	r8, r3
 8007fc4:	688a      	ldr	r2, [r1, #8]
 8007fc6:	690b      	ldr	r3, [r1, #16]
 8007fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	bfb8      	it	lt
 8007fd0:	4613      	movlt	r3, r2
 8007fd2:	6033      	str	r3, [r6, #0]
 8007fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fd8:	4607      	mov	r7, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	b10a      	cbz	r2, 8007fe2 <_printf_common+0x26>
 8007fde:	3301      	adds	r3, #1
 8007fe0:	6033      	str	r3, [r6, #0]
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	0699      	lsls	r1, r3, #26
 8007fe6:	bf42      	ittt	mi
 8007fe8:	6833      	ldrmi	r3, [r6, #0]
 8007fea:	3302      	addmi	r3, #2
 8007fec:	6033      	strmi	r3, [r6, #0]
 8007fee:	6825      	ldr	r5, [r4, #0]
 8007ff0:	f015 0506 	ands.w	r5, r5, #6
 8007ff4:	d106      	bne.n	8008004 <_printf_common+0x48>
 8007ff6:	f104 0a19 	add.w	sl, r4, #25
 8007ffa:	68e3      	ldr	r3, [r4, #12]
 8007ffc:	6832      	ldr	r2, [r6, #0]
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	42ab      	cmp	r3, r5
 8008002:	dc26      	bgt.n	8008052 <_printf_common+0x96>
 8008004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	3b00      	subs	r3, #0
 800800c:	bf18      	it	ne
 800800e:	2301      	movne	r3, #1
 8008010:	0692      	lsls	r2, r2, #26
 8008012:	d42b      	bmi.n	800806c <_printf_common+0xb0>
 8008014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008018:	4641      	mov	r1, r8
 800801a:	4638      	mov	r0, r7
 800801c:	47c8      	blx	r9
 800801e:	3001      	adds	r0, #1
 8008020:	d01e      	beq.n	8008060 <_printf_common+0xa4>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	6922      	ldr	r2, [r4, #16]
 8008026:	f003 0306 	and.w	r3, r3, #6
 800802a:	2b04      	cmp	r3, #4
 800802c:	bf02      	ittt	eq
 800802e:	68e5      	ldreq	r5, [r4, #12]
 8008030:	6833      	ldreq	r3, [r6, #0]
 8008032:	1aed      	subeq	r5, r5, r3
 8008034:	68a3      	ldr	r3, [r4, #8]
 8008036:	bf0c      	ite	eq
 8008038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800803c:	2500      	movne	r5, #0
 800803e:	4293      	cmp	r3, r2
 8008040:	bfc4      	itt	gt
 8008042:	1a9b      	subgt	r3, r3, r2
 8008044:	18ed      	addgt	r5, r5, r3
 8008046:	2600      	movs	r6, #0
 8008048:	341a      	adds	r4, #26
 800804a:	42b5      	cmp	r5, r6
 800804c:	d11a      	bne.n	8008084 <_printf_common+0xc8>
 800804e:	2000      	movs	r0, #0
 8008050:	e008      	b.n	8008064 <_printf_common+0xa8>
 8008052:	2301      	movs	r3, #1
 8008054:	4652      	mov	r2, sl
 8008056:	4641      	mov	r1, r8
 8008058:	4638      	mov	r0, r7
 800805a:	47c8      	blx	r9
 800805c:	3001      	adds	r0, #1
 800805e:	d103      	bne.n	8008068 <_printf_common+0xac>
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008068:	3501      	adds	r5, #1
 800806a:	e7c6      	b.n	8007ffa <_printf_common+0x3e>
 800806c:	18e1      	adds	r1, r4, r3
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	2030      	movs	r0, #48	@ 0x30
 8008072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008076:	4422      	add	r2, r4
 8008078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800807c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008080:	3302      	adds	r3, #2
 8008082:	e7c7      	b.n	8008014 <_printf_common+0x58>
 8008084:	2301      	movs	r3, #1
 8008086:	4622      	mov	r2, r4
 8008088:	4641      	mov	r1, r8
 800808a:	4638      	mov	r0, r7
 800808c:	47c8      	blx	r9
 800808e:	3001      	adds	r0, #1
 8008090:	d0e6      	beq.n	8008060 <_printf_common+0xa4>
 8008092:	3601      	adds	r6, #1
 8008094:	e7d9      	b.n	800804a <_printf_common+0x8e>
	...

08008098 <_printf_i>:
 8008098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	7e0f      	ldrb	r7, [r1, #24]
 800809e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080a0:	2f78      	cmp	r7, #120	@ 0x78
 80080a2:	4691      	mov	r9, r2
 80080a4:	4680      	mov	r8, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	469a      	mov	sl, r3
 80080aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080ae:	d807      	bhi.n	80080c0 <_printf_i+0x28>
 80080b0:	2f62      	cmp	r7, #98	@ 0x62
 80080b2:	d80a      	bhi.n	80080ca <_printf_i+0x32>
 80080b4:	2f00      	cmp	r7, #0
 80080b6:	f000 80d1 	beq.w	800825c <_printf_i+0x1c4>
 80080ba:	2f58      	cmp	r7, #88	@ 0x58
 80080bc:	f000 80b8 	beq.w	8008230 <_printf_i+0x198>
 80080c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080c8:	e03a      	b.n	8008140 <_printf_i+0xa8>
 80080ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080ce:	2b15      	cmp	r3, #21
 80080d0:	d8f6      	bhi.n	80080c0 <_printf_i+0x28>
 80080d2:	a101      	add	r1, pc, #4	@ (adr r1, 80080d8 <_printf_i+0x40>)
 80080d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080d8:	08008131 	.word	0x08008131
 80080dc:	08008145 	.word	0x08008145
 80080e0:	080080c1 	.word	0x080080c1
 80080e4:	080080c1 	.word	0x080080c1
 80080e8:	080080c1 	.word	0x080080c1
 80080ec:	080080c1 	.word	0x080080c1
 80080f0:	08008145 	.word	0x08008145
 80080f4:	080080c1 	.word	0x080080c1
 80080f8:	080080c1 	.word	0x080080c1
 80080fc:	080080c1 	.word	0x080080c1
 8008100:	080080c1 	.word	0x080080c1
 8008104:	08008243 	.word	0x08008243
 8008108:	0800816f 	.word	0x0800816f
 800810c:	080081fd 	.word	0x080081fd
 8008110:	080080c1 	.word	0x080080c1
 8008114:	080080c1 	.word	0x080080c1
 8008118:	08008265 	.word	0x08008265
 800811c:	080080c1 	.word	0x080080c1
 8008120:	0800816f 	.word	0x0800816f
 8008124:	080080c1 	.word	0x080080c1
 8008128:	080080c1 	.word	0x080080c1
 800812c:	08008205 	.word	0x08008205
 8008130:	6833      	ldr	r3, [r6, #0]
 8008132:	1d1a      	adds	r2, r3, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6032      	str	r2, [r6, #0]
 8008138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800813c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008140:	2301      	movs	r3, #1
 8008142:	e09c      	b.n	800827e <_printf_i+0x1e6>
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	1d19      	adds	r1, r3, #4
 800814a:	6031      	str	r1, [r6, #0]
 800814c:	0606      	lsls	r6, r0, #24
 800814e:	d501      	bpl.n	8008154 <_printf_i+0xbc>
 8008150:	681d      	ldr	r5, [r3, #0]
 8008152:	e003      	b.n	800815c <_printf_i+0xc4>
 8008154:	0645      	lsls	r5, r0, #25
 8008156:	d5fb      	bpl.n	8008150 <_printf_i+0xb8>
 8008158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800815c:	2d00      	cmp	r5, #0
 800815e:	da03      	bge.n	8008168 <_printf_i+0xd0>
 8008160:	232d      	movs	r3, #45	@ 0x2d
 8008162:	426d      	negs	r5, r5
 8008164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008168:	4858      	ldr	r0, [pc, #352]	@ (80082cc <_printf_i+0x234>)
 800816a:	230a      	movs	r3, #10
 800816c:	e011      	b.n	8008192 <_printf_i+0xfa>
 800816e:	6821      	ldr	r1, [r4, #0]
 8008170:	6833      	ldr	r3, [r6, #0]
 8008172:	0608      	lsls	r0, r1, #24
 8008174:	f853 5b04 	ldr.w	r5, [r3], #4
 8008178:	d402      	bmi.n	8008180 <_printf_i+0xe8>
 800817a:	0649      	lsls	r1, r1, #25
 800817c:	bf48      	it	mi
 800817e:	b2ad      	uxthmi	r5, r5
 8008180:	2f6f      	cmp	r7, #111	@ 0x6f
 8008182:	4852      	ldr	r0, [pc, #328]	@ (80082cc <_printf_i+0x234>)
 8008184:	6033      	str	r3, [r6, #0]
 8008186:	bf14      	ite	ne
 8008188:	230a      	movne	r3, #10
 800818a:	2308      	moveq	r3, #8
 800818c:	2100      	movs	r1, #0
 800818e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008192:	6866      	ldr	r6, [r4, #4]
 8008194:	60a6      	str	r6, [r4, #8]
 8008196:	2e00      	cmp	r6, #0
 8008198:	db05      	blt.n	80081a6 <_printf_i+0x10e>
 800819a:	6821      	ldr	r1, [r4, #0]
 800819c:	432e      	orrs	r6, r5
 800819e:	f021 0104 	bic.w	r1, r1, #4
 80081a2:	6021      	str	r1, [r4, #0]
 80081a4:	d04b      	beq.n	800823e <_printf_i+0x1a6>
 80081a6:	4616      	mov	r6, r2
 80081a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80081ac:	fb03 5711 	mls	r7, r3, r1, r5
 80081b0:	5dc7      	ldrb	r7, [r0, r7]
 80081b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081b6:	462f      	mov	r7, r5
 80081b8:	42bb      	cmp	r3, r7
 80081ba:	460d      	mov	r5, r1
 80081bc:	d9f4      	bls.n	80081a8 <_printf_i+0x110>
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d10b      	bne.n	80081da <_printf_i+0x142>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	07df      	lsls	r7, r3, #31
 80081c6:	d508      	bpl.n	80081da <_printf_i+0x142>
 80081c8:	6923      	ldr	r3, [r4, #16]
 80081ca:	6861      	ldr	r1, [r4, #4]
 80081cc:	4299      	cmp	r1, r3
 80081ce:	bfde      	ittt	le
 80081d0:	2330      	movle	r3, #48	@ 0x30
 80081d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081da:	1b92      	subs	r2, r2, r6
 80081dc:	6122      	str	r2, [r4, #16]
 80081de:	f8cd a000 	str.w	sl, [sp]
 80081e2:	464b      	mov	r3, r9
 80081e4:	aa03      	add	r2, sp, #12
 80081e6:	4621      	mov	r1, r4
 80081e8:	4640      	mov	r0, r8
 80081ea:	f7ff fee7 	bl	8007fbc <_printf_common>
 80081ee:	3001      	adds	r0, #1
 80081f0:	d14a      	bne.n	8008288 <_printf_i+0x1f0>
 80081f2:	f04f 30ff 	mov.w	r0, #4294967295
 80081f6:	b004      	add	sp, #16
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	f043 0320 	orr.w	r3, r3, #32
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	4832      	ldr	r0, [pc, #200]	@ (80082d0 <_printf_i+0x238>)
 8008206:	2778      	movs	r7, #120	@ 0x78
 8008208:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	6831      	ldr	r1, [r6, #0]
 8008210:	061f      	lsls	r7, r3, #24
 8008212:	f851 5b04 	ldr.w	r5, [r1], #4
 8008216:	d402      	bmi.n	800821e <_printf_i+0x186>
 8008218:	065f      	lsls	r7, r3, #25
 800821a:	bf48      	it	mi
 800821c:	b2ad      	uxthmi	r5, r5
 800821e:	6031      	str	r1, [r6, #0]
 8008220:	07d9      	lsls	r1, r3, #31
 8008222:	bf44      	itt	mi
 8008224:	f043 0320 	orrmi.w	r3, r3, #32
 8008228:	6023      	strmi	r3, [r4, #0]
 800822a:	b11d      	cbz	r5, 8008234 <_printf_i+0x19c>
 800822c:	2310      	movs	r3, #16
 800822e:	e7ad      	b.n	800818c <_printf_i+0xf4>
 8008230:	4826      	ldr	r0, [pc, #152]	@ (80082cc <_printf_i+0x234>)
 8008232:	e7e9      	b.n	8008208 <_printf_i+0x170>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	f023 0320 	bic.w	r3, r3, #32
 800823a:	6023      	str	r3, [r4, #0]
 800823c:	e7f6      	b.n	800822c <_printf_i+0x194>
 800823e:	4616      	mov	r6, r2
 8008240:	e7bd      	b.n	80081be <_printf_i+0x126>
 8008242:	6833      	ldr	r3, [r6, #0]
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	6961      	ldr	r1, [r4, #20]
 8008248:	1d18      	adds	r0, r3, #4
 800824a:	6030      	str	r0, [r6, #0]
 800824c:	062e      	lsls	r6, r5, #24
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	d501      	bpl.n	8008256 <_printf_i+0x1be>
 8008252:	6019      	str	r1, [r3, #0]
 8008254:	e002      	b.n	800825c <_printf_i+0x1c4>
 8008256:	0668      	lsls	r0, r5, #25
 8008258:	d5fb      	bpl.n	8008252 <_printf_i+0x1ba>
 800825a:	8019      	strh	r1, [r3, #0]
 800825c:	2300      	movs	r3, #0
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	4616      	mov	r6, r2
 8008262:	e7bc      	b.n	80081de <_printf_i+0x146>
 8008264:	6833      	ldr	r3, [r6, #0]
 8008266:	1d1a      	adds	r2, r3, #4
 8008268:	6032      	str	r2, [r6, #0]
 800826a:	681e      	ldr	r6, [r3, #0]
 800826c:	6862      	ldr	r2, [r4, #4]
 800826e:	2100      	movs	r1, #0
 8008270:	4630      	mov	r0, r6
 8008272:	f7f7 ffcd 	bl	8000210 <memchr>
 8008276:	b108      	cbz	r0, 800827c <_printf_i+0x1e4>
 8008278:	1b80      	subs	r0, r0, r6
 800827a:	6060      	str	r0, [r4, #4]
 800827c:	6863      	ldr	r3, [r4, #4]
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	2300      	movs	r3, #0
 8008282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008286:	e7aa      	b.n	80081de <_printf_i+0x146>
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	4632      	mov	r2, r6
 800828c:	4649      	mov	r1, r9
 800828e:	4640      	mov	r0, r8
 8008290:	47d0      	blx	sl
 8008292:	3001      	adds	r0, #1
 8008294:	d0ad      	beq.n	80081f2 <_printf_i+0x15a>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	079b      	lsls	r3, r3, #30
 800829a:	d413      	bmi.n	80082c4 <_printf_i+0x22c>
 800829c:	68e0      	ldr	r0, [r4, #12]
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	4298      	cmp	r0, r3
 80082a2:	bfb8      	it	lt
 80082a4:	4618      	movlt	r0, r3
 80082a6:	e7a6      	b.n	80081f6 <_printf_i+0x15e>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4632      	mov	r2, r6
 80082ac:	4649      	mov	r1, r9
 80082ae:	4640      	mov	r0, r8
 80082b0:	47d0      	blx	sl
 80082b2:	3001      	adds	r0, #1
 80082b4:	d09d      	beq.n	80081f2 <_printf_i+0x15a>
 80082b6:	3501      	adds	r5, #1
 80082b8:	68e3      	ldr	r3, [r4, #12]
 80082ba:	9903      	ldr	r1, [sp, #12]
 80082bc:	1a5b      	subs	r3, r3, r1
 80082be:	42ab      	cmp	r3, r5
 80082c0:	dcf2      	bgt.n	80082a8 <_printf_i+0x210>
 80082c2:	e7eb      	b.n	800829c <_printf_i+0x204>
 80082c4:	2500      	movs	r5, #0
 80082c6:	f104 0619 	add.w	r6, r4, #25
 80082ca:	e7f5      	b.n	80082b8 <_printf_i+0x220>
 80082cc:	0800a8ce 	.word	0x0800a8ce
 80082d0:	0800a8df 	.word	0x0800a8df

080082d4 <std>:
 80082d4:	2300      	movs	r3, #0
 80082d6:	b510      	push	{r4, lr}
 80082d8:	4604      	mov	r4, r0
 80082da:	e9c0 3300 	strd	r3, r3, [r0]
 80082de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082e2:	6083      	str	r3, [r0, #8]
 80082e4:	8181      	strh	r1, [r0, #12]
 80082e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80082e8:	81c2      	strh	r2, [r0, #14]
 80082ea:	6183      	str	r3, [r0, #24]
 80082ec:	4619      	mov	r1, r3
 80082ee:	2208      	movs	r2, #8
 80082f0:	305c      	adds	r0, #92	@ 0x5c
 80082f2:	f000 f92a 	bl	800854a <memset>
 80082f6:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <std+0x58>)
 80082f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80082fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008330 <std+0x5c>)
 80082fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008334 <std+0x60>)
 8008300:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008302:	4b0d      	ldr	r3, [pc, #52]	@ (8008338 <std+0x64>)
 8008304:	6323      	str	r3, [r4, #48]	@ 0x30
 8008306:	4b0d      	ldr	r3, [pc, #52]	@ (800833c <std+0x68>)
 8008308:	6224      	str	r4, [r4, #32]
 800830a:	429c      	cmp	r4, r3
 800830c:	d006      	beq.n	800831c <std+0x48>
 800830e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008312:	4294      	cmp	r4, r2
 8008314:	d002      	beq.n	800831c <std+0x48>
 8008316:	33d0      	adds	r3, #208	@ 0xd0
 8008318:	429c      	cmp	r4, r3
 800831a:	d105      	bne.n	8008328 <std+0x54>
 800831c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008324:	f000 b9ec 	b.w	8008700 <__retarget_lock_init_recursive>
 8008328:	bd10      	pop	{r4, pc}
 800832a:	bf00      	nop
 800832c:	080084c5 	.word	0x080084c5
 8008330:	080084e7 	.word	0x080084e7
 8008334:	0800851f 	.word	0x0800851f
 8008338:	08008543 	.word	0x08008543
 800833c:	20004cd8 	.word	0x20004cd8

08008340 <stdio_exit_handler>:
 8008340:	4a02      	ldr	r2, [pc, #8]	@ (800834c <stdio_exit_handler+0xc>)
 8008342:	4903      	ldr	r1, [pc, #12]	@ (8008350 <stdio_exit_handler+0x10>)
 8008344:	4803      	ldr	r0, [pc, #12]	@ (8008354 <stdio_exit_handler+0x14>)
 8008346:	f000 b869 	b.w	800841c <_fwalk_sglue>
 800834a:	bf00      	nop
 800834c:	20000010 	.word	0x20000010
 8008350:	0800a085 	.word	0x0800a085
 8008354:	20000020 	.word	0x20000020

08008358 <cleanup_stdio>:
 8008358:	6841      	ldr	r1, [r0, #4]
 800835a:	4b0c      	ldr	r3, [pc, #48]	@ (800838c <cleanup_stdio+0x34>)
 800835c:	4299      	cmp	r1, r3
 800835e:	b510      	push	{r4, lr}
 8008360:	4604      	mov	r4, r0
 8008362:	d001      	beq.n	8008368 <cleanup_stdio+0x10>
 8008364:	f001 fe8e 	bl	800a084 <_fflush_r>
 8008368:	68a1      	ldr	r1, [r4, #8]
 800836a:	4b09      	ldr	r3, [pc, #36]	@ (8008390 <cleanup_stdio+0x38>)
 800836c:	4299      	cmp	r1, r3
 800836e:	d002      	beq.n	8008376 <cleanup_stdio+0x1e>
 8008370:	4620      	mov	r0, r4
 8008372:	f001 fe87 	bl	800a084 <_fflush_r>
 8008376:	68e1      	ldr	r1, [r4, #12]
 8008378:	4b06      	ldr	r3, [pc, #24]	@ (8008394 <cleanup_stdio+0x3c>)
 800837a:	4299      	cmp	r1, r3
 800837c:	d004      	beq.n	8008388 <cleanup_stdio+0x30>
 800837e:	4620      	mov	r0, r4
 8008380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008384:	f001 be7e 	b.w	800a084 <_fflush_r>
 8008388:	bd10      	pop	{r4, pc}
 800838a:	bf00      	nop
 800838c:	20004cd8 	.word	0x20004cd8
 8008390:	20004d40 	.word	0x20004d40
 8008394:	20004da8 	.word	0x20004da8

08008398 <global_stdio_init.part.0>:
 8008398:	b510      	push	{r4, lr}
 800839a:	4b0b      	ldr	r3, [pc, #44]	@ (80083c8 <global_stdio_init.part.0+0x30>)
 800839c:	4c0b      	ldr	r4, [pc, #44]	@ (80083cc <global_stdio_init.part.0+0x34>)
 800839e:	4a0c      	ldr	r2, [pc, #48]	@ (80083d0 <global_stdio_init.part.0+0x38>)
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	4620      	mov	r0, r4
 80083a4:	2200      	movs	r2, #0
 80083a6:	2104      	movs	r1, #4
 80083a8:	f7ff ff94 	bl	80082d4 <std>
 80083ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083b0:	2201      	movs	r2, #1
 80083b2:	2109      	movs	r1, #9
 80083b4:	f7ff ff8e 	bl	80082d4 <std>
 80083b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083bc:	2202      	movs	r2, #2
 80083be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c2:	2112      	movs	r1, #18
 80083c4:	f7ff bf86 	b.w	80082d4 <std>
 80083c8:	20004e10 	.word	0x20004e10
 80083cc:	20004cd8 	.word	0x20004cd8
 80083d0:	08008341 	.word	0x08008341

080083d4 <__sfp_lock_acquire>:
 80083d4:	4801      	ldr	r0, [pc, #4]	@ (80083dc <__sfp_lock_acquire+0x8>)
 80083d6:	f000 b994 	b.w	8008702 <__retarget_lock_acquire_recursive>
 80083da:	bf00      	nop
 80083dc:	20004e19 	.word	0x20004e19

080083e0 <__sfp_lock_release>:
 80083e0:	4801      	ldr	r0, [pc, #4]	@ (80083e8 <__sfp_lock_release+0x8>)
 80083e2:	f000 b98f 	b.w	8008704 <__retarget_lock_release_recursive>
 80083e6:	bf00      	nop
 80083e8:	20004e19 	.word	0x20004e19

080083ec <__sinit>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	f7ff fff0 	bl	80083d4 <__sfp_lock_acquire>
 80083f4:	6a23      	ldr	r3, [r4, #32]
 80083f6:	b11b      	cbz	r3, 8008400 <__sinit+0x14>
 80083f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083fc:	f7ff bff0 	b.w	80083e0 <__sfp_lock_release>
 8008400:	4b04      	ldr	r3, [pc, #16]	@ (8008414 <__sinit+0x28>)
 8008402:	6223      	str	r3, [r4, #32]
 8008404:	4b04      	ldr	r3, [pc, #16]	@ (8008418 <__sinit+0x2c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1f5      	bne.n	80083f8 <__sinit+0xc>
 800840c:	f7ff ffc4 	bl	8008398 <global_stdio_init.part.0>
 8008410:	e7f2      	b.n	80083f8 <__sinit+0xc>
 8008412:	bf00      	nop
 8008414:	08008359 	.word	0x08008359
 8008418:	20004e10 	.word	0x20004e10

0800841c <_fwalk_sglue>:
 800841c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008420:	4607      	mov	r7, r0
 8008422:	4688      	mov	r8, r1
 8008424:	4614      	mov	r4, r2
 8008426:	2600      	movs	r6, #0
 8008428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800842c:	f1b9 0901 	subs.w	r9, r9, #1
 8008430:	d505      	bpl.n	800843e <_fwalk_sglue+0x22>
 8008432:	6824      	ldr	r4, [r4, #0]
 8008434:	2c00      	cmp	r4, #0
 8008436:	d1f7      	bne.n	8008428 <_fwalk_sglue+0xc>
 8008438:	4630      	mov	r0, r6
 800843a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800843e:	89ab      	ldrh	r3, [r5, #12]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d907      	bls.n	8008454 <_fwalk_sglue+0x38>
 8008444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008448:	3301      	adds	r3, #1
 800844a:	d003      	beq.n	8008454 <_fwalk_sglue+0x38>
 800844c:	4629      	mov	r1, r5
 800844e:	4638      	mov	r0, r7
 8008450:	47c0      	blx	r8
 8008452:	4306      	orrs	r6, r0
 8008454:	3568      	adds	r5, #104	@ 0x68
 8008456:	e7e9      	b.n	800842c <_fwalk_sglue+0x10>

08008458 <sniprintf>:
 8008458:	b40c      	push	{r2, r3}
 800845a:	b530      	push	{r4, r5, lr}
 800845c:	4b18      	ldr	r3, [pc, #96]	@ (80084c0 <sniprintf+0x68>)
 800845e:	1e0c      	subs	r4, r1, #0
 8008460:	681d      	ldr	r5, [r3, #0]
 8008462:	b09d      	sub	sp, #116	@ 0x74
 8008464:	da08      	bge.n	8008478 <sniprintf+0x20>
 8008466:	238b      	movs	r3, #139	@ 0x8b
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	f04f 30ff 	mov.w	r0, #4294967295
 800846e:	b01d      	add	sp, #116	@ 0x74
 8008470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008474:	b002      	add	sp, #8
 8008476:	4770      	bx	lr
 8008478:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800847c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008480:	f04f 0300 	mov.w	r3, #0
 8008484:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008486:	bf14      	ite	ne
 8008488:	f104 33ff 	addne.w	r3, r4, #4294967295
 800848c:	4623      	moveq	r3, r4
 800848e:	9304      	str	r3, [sp, #16]
 8008490:	9307      	str	r3, [sp, #28]
 8008492:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008496:	9002      	str	r0, [sp, #8]
 8008498:	9006      	str	r0, [sp, #24]
 800849a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800849e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80084a0:	ab21      	add	r3, sp, #132	@ 0x84
 80084a2:	a902      	add	r1, sp, #8
 80084a4:	4628      	mov	r0, r5
 80084a6:	9301      	str	r3, [sp, #4]
 80084a8:	f001 fc6c 	bl	8009d84 <_svfiprintf_r>
 80084ac:	1c43      	adds	r3, r0, #1
 80084ae:	bfbc      	itt	lt
 80084b0:	238b      	movlt	r3, #139	@ 0x8b
 80084b2:	602b      	strlt	r3, [r5, #0]
 80084b4:	2c00      	cmp	r4, #0
 80084b6:	d0da      	beq.n	800846e <sniprintf+0x16>
 80084b8:	9b02      	ldr	r3, [sp, #8]
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	e7d6      	b.n	800846e <sniprintf+0x16>
 80084c0:	2000001c 	.word	0x2000001c

080084c4 <__sread>:
 80084c4:	b510      	push	{r4, lr}
 80084c6:	460c      	mov	r4, r1
 80084c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084cc:	f000 f8ca 	bl	8008664 <_read_r>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	bfab      	itete	ge
 80084d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80084d6:	89a3      	ldrhlt	r3, [r4, #12]
 80084d8:	181b      	addge	r3, r3, r0
 80084da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80084de:	bfac      	ite	ge
 80084e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80084e2:	81a3      	strhlt	r3, [r4, #12]
 80084e4:	bd10      	pop	{r4, pc}

080084e6 <__swrite>:
 80084e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ea:	461f      	mov	r7, r3
 80084ec:	898b      	ldrh	r3, [r1, #12]
 80084ee:	05db      	lsls	r3, r3, #23
 80084f0:	4605      	mov	r5, r0
 80084f2:	460c      	mov	r4, r1
 80084f4:	4616      	mov	r6, r2
 80084f6:	d505      	bpl.n	8008504 <__swrite+0x1e>
 80084f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fc:	2302      	movs	r3, #2
 80084fe:	2200      	movs	r2, #0
 8008500:	f000 f89e 	bl	8008640 <_lseek_r>
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800850a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	4632      	mov	r2, r6
 8008512:	463b      	mov	r3, r7
 8008514:	4628      	mov	r0, r5
 8008516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800851a:	f000 b8b5 	b.w	8008688 <_write_r>

0800851e <__sseek>:
 800851e:	b510      	push	{r4, lr}
 8008520:	460c      	mov	r4, r1
 8008522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008526:	f000 f88b 	bl	8008640 <_lseek_r>
 800852a:	1c43      	adds	r3, r0, #1
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	bf15      	itete	ne
 8008530:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008532:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008536:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800853a:	81a3      	strheq	r3, [r4, #12]
 800853c:	bf18      	it	ne
 800853e:	81a3      	strhne	r3, [r4, #12]
 8008540:	bd10      	pop	{r4, pc}

08008542 <__sclose>:
 8008542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008546:	f000 b80d 	b.w	8008564 <_close_r>

0800854a <memset>:
 800854a:	4402      	add	r2, r0
 800854c:	4603      	mov	r3, r0
 800854e:	4293      	cmp	r3, r2
 8008550:	d100      	bne.n	8008554 <memset+0xa>
 8008552:	4770      	bx	lr
 8008554:	f803 1b01 	strb.w	r1, [r3], #1
 8008558:	e7f9      	b.n	800854e <memset+0x4>
	...

0800855c <_localeconv_r>:
 800855c:	4800      	ldr	r0, [pc, #0]	@ (8008560 <_localeconv_r+0x4>)
 800855e:	4770      	bx	lr
 8008560:	2000015c 	.word	0x2000015c

08008564 <_close_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4d06      	ldr	r5, [pc, #24]	@ (8008580 <_close_r+0x1c>)
 8008568:	2300      	movs	r3, #0
 800856a:	4604      	mov	r4, r0
 800856c:	4608      	mov	r0, r1
 800856e:	602b      	str	r3, [r5, #0]
 8008570:	f7f9 f9b6 	bl	80018e0 <_close>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_close_r+0x1a>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_close_r+0x1a>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20004e14 	.word	0x20004e14

08008584 <_reclaim_reent>:
 8008584:	4b2d      	ldr	r3, [pc, #180]	@ (800863c <_reclaim_reent+0xb8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4283      	cmp	r3, r0
 800858a:	b570      	push	{r4, r5, r6, lr}
 800858c:	4604      	mov	r4, r0
 800858e:	d053      	beq.n	8008638 <_reclaim_reent+0xb4>
 8008590:	69c3      	ldr	r3, [r0, #28]
 8008592:	b31b      	cbz	r3, 80085dc <_reclaim_reent+0x58>
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	b163      	cbz	r3, 80085b2 <_reclaim_reent+0x2e>
 8008598:	2500      	movs	r5, #0
 800859a:	69e3      	ldr	r3, [r4, #28]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	5959      	ldr	r1, [r3, r5]
 80085a0:	b9b1      	cbnz	r1, 80085d0 <_reclaim_reent+0x4c>
 80085a2:	3504      	adds	r5, #4
 80085a4:	2d80      	cmp	r5, #128	@ 0x80
 80085a6:	d1f8      	bne.n	800859a <_reclaim_reent+0x16>
 80085a8:	69e3      	ldr	r3, [r4, #28]
 80085aa:	4620      	mov	r0, r4
 80085ac:	68d9      	ldr	r1, [r3, #12]
 80085ae:	f000 ff13 	bl	80093d8 <_free_r>
 80085b2:	69e3      	ldr	r3, [r4, #28]
 80085b4:	6819      	ldr	r1, [r3, #0]
 80085b6:	b111      	cbz	r1, 80085be <_reclaim_reent+0x3a>
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 ff0d 	bl	80093d8 <_free_r>
 80085be:	69e3      	ldr	r3, [r4, #28]
 80085c0:	689d      	ldr	r5, [r3, #8]
 80085c2:	b15d      	cbz	r5, 80085dc <_reclaim_reent+0x58>
 80085c4:	4629      	mov	r1, r5
 80085c6:	4620      	mov	r0, r4
 80085c8:	682d      	ldr	r5, [r5, #0]
 80085ca:	f000 ff05 	bl	80093d8 <_free_r>
 80085ce:	e7f8      	b.n	80085c2 <_reclaim_reent+0x3e>
 80085d0:	680e      	ldr	r6, [r1, #0]
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 ff00 	bl	80093d8 <_free_r>
 80085d8:	4631      	mov	r1, r6
 80085da:	e7e1      	b.n	80085a0 <_reclaim_reent+0x1c>
 80085dc:	6961      	ldr	r1, [r4, #20]
 80085de:	b111      	cbz	r1, 80085e6 <_reclaim_reent+0x62>
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fef9 	bl	80093d8 <_free_r>
 80085e6:	69e1      	ldr	r1, [r4, #28]
 80085e8:	b111      	cbz	r1, 80085f0 <_reclaim_reent+0x6c>
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fef4 	bl	80093d8 <_free_r>
 80085f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80085f2:	b111      	cbz	r1, 80085fa <_reclaim_reent+0x76>
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 feef 	bl	80093d8 <_free_r>
 80085fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085fc:	b111      	cbz	r1, 8008604 <_reclaim_reent+0x80>
 80085fe:	4620      	mov	r0, r4
 8008600:	f000 feea 	bl	80093d8 <_free_r>
 8008604:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008606:	b111      	cbz	r1, 800860e <_reclaim_reent+0x8a>
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fee5 	bl	80093d8 <_free_r>
 800860e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008610:	b111      	cbz	r1, 8008618 <_reclaim_reent+0x94>
 8008612:	4620      	mov	r0, r4
 8008614:	f000 fee0 	bl	80093d8 <_free_r>
 8008618:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800861a:	b111      	cbz	r1, 8008622 <_reclaim_reent+0x9e>
 800861c:	4620      	mov	r0, r4
 800861e:	f000 fedb 	bl	80093d8 <_free_r>
 8008622:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008624:	b111      	cbz	r1, 800862c <_reclaim_reent+0xa8>
 8008626:	4620      	mov	r0, r4
 8008628:	f000 fed6 	bl	80093d8 <_free_r>
 800862c:	6a23      	ldr	r3, [r4, #32]
 800862e:	b11b      	cbz	r3, 8008638 <_reclaim_reent+0xb4>
 8008630:	4620      	mov	r0, r4
 8008632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008636:	4718      	bx	r3
 8008638:	bd70      	pop	{r4, r5, r6, pc}
 800863a:	bf00      	nop
 800863c:	2000001c 	.word	0x2000001c

08008640 <_lseek_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4d07      	ldr	r5, [pc, #28]	@ (8008660 <_lseek_r+0x20>)
 8008644:	4604      	mov	r4, r0
 8008646:	4608      	mov	r0, r1
 8008648:	4611      	mov	r1, r2
 800864a:	2200      	movs	r2, #0
 800864c:	602a      	str	r2, [r5, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	f7f9 f96d 	bl	800192e <_lseek>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d102      	bne.n	800865e <_lseek_r+0x1e>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b103      	cbz	r3, 800865e <_lseek_r+0x1e>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	20004e14 	.word	0x20004e14

08008664 <_read_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	4d07      	ldr	r5, [pc, #28]	@ (8008684 <_read_r+0x20>)
 8008668:	4604      	mov	r4, r0
 800866a:	4608      	mov	r0, r1
 800866c:	4611      	mov	r1, r2
 800866e:	2200      	movs	r2, #0
 8008670:	602a      	str	r2, [r5, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	f7f9 f8fb 	bl	800186e <_read>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_read_r+0x1e>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_read_r+0x1e>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	20004e14 	.word	0x20004e14

08008688 <_write_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d07      	ldr	r5, [pc, #28]	@ (80086a8 <_write_r+0x20>)
 800868c:	4604      	mov	r4, r0
 800868e:	4608      	mov	r0, r1
 8008690:	4611      	mov	r1, r2
 8008692:	2200      	movs	r2, #0
 8008694:	602a      	str	r2, [r5, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	f7f9 f906 	bl	80018a8 <_write>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_write_r+0x1e>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_write_r+0x1e>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	20004e14 	.word	0x20004e14

080086ac <__errno>:
 80086ac:	4b01      	ldr	r3, [pc, #4]	@ (80086b4 <__errno+0x8>)
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	2000001c 	.word	0x2000001c

080086b8 <__libc_init_array>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	4d0d      	ldr	r5, [pc, #52]	@ (80086f0 <__libc_init_array+0x38>)
 80086bc:	4c0d      	ldr	r4, [pc, #52]	@ (80086f4 <__libc_init_array+0x3c>)
 80086be:	1b64      	subs	r4, r4, r5
 80086c0:	10a4      	asrs	r4, r4, #2
 80086c2:	2600      	movs	r6, #0
 80086c4:	42a6      	cmp	r6, r4
 80086c6:	d109      	bne.n	80086dc <__libc_init_array+0x24>
 80086c8:	4d0b      	ldr	r5, [pc, #44]	@ (80086f8 <__libc_init_array+0x40>)
 80086ca:	4c0c      	ldr	r4, [pc, #48]	@ (80086fc <__libc_init_array+0x44>)
 80086cc:	f002 f86a 	bl	800a7a4 <_init>
 80086d0:	1b64      	subs	r4, r4, r5
 80086d2:	10a4      	asrs	r4, r4, #2
 80086d4:	2600      	movs	r6, #0
 80086d6:	42a6      	cmp	r6, r4
 80086d8:	d105      	bne.n	80086e6 <__libc_init_array+0x2e>
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e0:	4798      	blx	r3
 80086e2:	3601      	adds	r6, #1
 80086e4:	e7ee      	b.n	80086c4 <__libc_init_array+0xc>
 80086e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ea:	4798      	blx	r3
 80086ec:	3601      	adds	r6, #1
 80086ee:	e7f2      	b.n	80086d6 <__libc_init_array+0x1e>
 80086f0:	0800ac3c 	.word	0x0800ac3c
 80086f4:	0800ac3c 	.word	0x0800ac3c
 80086f8:	0800ac3c 	.word	0x0800ac3c
 80086fc:	0800ac40 	.word	0x0800ac40

08008700 <__retarget_lock_init_recursive>:
 8008700:	4770      	bx	lr

08008702 <__retarget_lock_acquire_recursive>:
 8008702:	4770      	bx	lr

08008704 <__retarget_lock_release_recursive>:
 8008704:	4770      	bx	lr

08008706 <memcpy>:
 8008706:	440a      	add	r2, r1
 8008708:	4291      	cmp	r1, r2
 800870a:	f100 33ff 	add.w	r3, r0, #4294967295
 800870e:	d100      	bne.n	8008712 <memcpy+0xc>
 8008710:	4770      	bx	lr
 8008712:	b510      	push	{r4, lr}
 8008714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800871c:	4291      	cmp	r1, r2
 800871e:	d1f9      	bne.n	8008714 <memcpy+0xe>
 8008720:	bd10      	pop	{r4, pc}

08008722 <quorem>:
 8008722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008726:	6903      	ldr	r3, [r0, #16]
 8008728:	690c      	ldr	r4, [r1, #16]
 800872a:	42a3      	cmp	r3, r4
 800872c:	4607      	mov	r7, r0
 800872e:	db7e      	blt.n	800882e <quorem+0x10c>
 8008730:	3c01      	subs	r4, #1
 8008732:	f101 0814 	add.w	r8, r1, #20
 8008736:	00a3      	lsls	r3, r4, #2
 8008738:	f100 0514 	add.w	r5, r0, #20
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800874c:	3301      	adds	r3, #1
 800874e:	429a      	cmp	r2, r3
 8008750:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008754:	fbb2 f6f3 	udiv	r6, r2, r3
 8008758:	d32e      	bcc.n	80087b8 <quorem+0x96>
 800875a:	f04f 0a00 	mov.w	sl, #0
 800875e:	46c4      	mov	ip, r8
 8008760:	46ae      	mov	lr, r5
 8008762:	46d3      	mov	fp, sl
 8008764:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008768:	b298      	uxth	r0, r3
 800876a:	fb06 a000 	mla	r0, r6, r0, sl
 800876e:	0c02      	lsrs	r2, r0, #16
 8008770:	0c1b      	lsrs	r3, r3, #16
 8008772:	fb06 2303 	mla	r3, r6, r3, r2
 8008776:	f8de 2000 	ldr.w	r2, [lr]
 800877a:	b280      	uxth	r0, r0
 800877c:	b292      	uxth	r2, r2
 800877e:	1a12      	subs	r2, r2, r0
 8008780:	445a      	add	r2, fp
 8008782:	f8de 0000 	ldr.w	r0, [lr]
 8008786:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800878a:	b29b      	uxth	r3, r3
 800878c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008790:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008794:	b292      	uxth	r2, r2
 8008796:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800879a:	45e1      	cmp	r9, ip
 800879c:	f84e 2b04 	str.w	r2, [lr], #4
 80087a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087a4:	d2de      	bcs.n	8008764 <quorem+0x42>
 80087a6:	9b00      	ldr	r3, [sp, #0]
 80087a8:	58eb      	ldr	r3, [r5, r3]
 80087aa:	b92b      	cbnz	r3, 80087b8 <quorem+0x96>
 80087ac:	9b01      	ldr	r3, [sp, #4]
 80087ae:	3b04      	subs	r3, #4
 80087b0:	429d      	cmp	r5, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	d32f      	bcc.n	8008816 <quorem+0xf4>
 80087b6:	613c      	str	r4, [r7, #16]
 80087b8:	4638      	mov	r0, r7
 80087ba:	f001 f97f 	bl	8009abc <__mcmp>
 80087be:	2800      	cmp	r0, #0
 80087c0:	db25      	blt.n	800880e <quorem+0xec>
 80087c2:	4629      	mov	r1, r5
 80087c4:	2000      	movs	r0, #0
 80087c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80087ca:	f8d1 c000 	ldr.w	ip, [r1]
 80087ce:	fa1f fe82 	uxth.w	lr, r2
 80087d2:	fa1f f38c 	uxth.w	r3, ip
 80087d6:	eba3 030e 	sub.w	r3, r3, lr
 80087da:	4403      	add	r3, r0
 80087dc:	0c12      	lsrs	r2, r2, #16
 80087de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ec:	45c1      	cmp	r9, r8
 80087ee:	f841 3b04 	str.w	r3, [r1], #4
 80087f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087f6:	d2e6      	bcs.n	80087c6 <quorem+0xa4>
 80087f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008800:	b922      	cbnz	r2, 800880c <quorem+0xea>
 8008802:	3b04      	subs	r3, #4
 8008804:	429d      	cmp	r5, r3
 8008806:	461a      	mov	r2, r3
 8008808:	d30b      	bcc.n	8008822 <quorem+0x100>
 800880a:	613c      	str	r4, [r7, #16]
 800880c:	3601      	adds	r6, #1
 800880e:	4630      	mov	r0, r6
 8008810:	b003      	add	sp, #12
 8008812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008816:	6812      	ldr	r2, [r2, #0]
 8008818:	3b04      	subs	r3, #4
 800881a:	2a00      	cmp	r2, #0
 800881c:	d1cb      	bne.n	80087b6 <quorem+0x94>
 800881e:	3c01      	subs	r4, #1
 8008820:	e7c6      	b.n	80087b0 <quorem+0x8e>
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	3b04      	subs	r3, #4
 8008826:	2a00      	cmp	r2, #0
 8008828:	d1ef      	bne.n	800880a <quorem+0xe8>
 800882a:	3c01      	subs	r4, #1
 800882c:	e7ea      	b.n	8008804 <quorem+0xe2>
 800882e:	2000      	movs	r0, #0
 8008830:	e7ee      	b.n	8008810 <quorem+0xee>
 8008832:	0000      	movs	r0, r0
 8008834:	0000      	movs	r0, r0
	...

08008838 <_dtoa_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	69c7      	ldr	r7, [r0, #28]
 800883e:	b097      	sub	sp, #92	@ 0x5c
 8008840:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008844:	ec55 4b10 	vmov	r4, r5, d0
 8008848:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800884a:	9107      	str	r1, [sp, #28]
 800884c:	4681      	mov	r9, r0
 800884e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008850:	9311      	str	r3, [sp, #68]	@ 0x44
 8008852:	b97f      	cbnz	r7, 8008874 <_dtoa_r+0x3c>
 8008854:	2010      	movs	r0, #16
 8008856:	f000 fe09 	bl	800946c <malloc>
 800885a:	4602      	mov	r2, r0
 800885c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008860:	b920      	cbnz	r0, 800886c <_dtoa_r+0x34>
 8008862:	4ba9      	ldr	r3, [pc, #676]	@ (8008b08 <_dtoa_r+0x2d0>)
 8008864:	21ef      	movs	r1, #239	@ 0xef
 8008866:	48a9      	ldr	r0, [pc, #676]	@ (8008b0c <_dtoa_r+0x2d4>)
 8008868:	f001 fc5e 	bl	800a128 <__assert_func>
 800886c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008870:	6007      	str	r7, [r0, #0]
 8008872:	60c7      	str	r7, [r0, #12]
 8008874:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008878:	6819      	ldr	r1, [r3, #0]
 800887a:	b159      	cbz	r1, 8008894 <_dtoa_r+0x5c>
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	604a      	str	r2, [r1, #4]
 8008880:	2301      	movs	r3, #1
 8008882:	4093      	lsls	r3, r2
 8008884:	608b      	str	r3, [r1, #8]
 8008886:	4648      	mov	r0, r9
 8008888:	f000 fee6 	bl	8009658 <_Bfree>
 800888c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	1e2b      	subs	r3, r5, #0
 8008896:	bfb9      	ittee	lt
 8008898:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800889c:	9305      	strlt	r3, [sp, #20]
 800889e:	2300      	movge	r3, #0
 80088a0:	6033      	strge	r3, [r6, #0]
 80088a2:	9f05      	ldr	r7, [sp, #20]
 80088a4:	4b9a      	ldr	r3, [pc, #616]	@ (8008b10 <_dtoa_r+0x2d8>)
 80088a6:	bfbc      	itt	lt
 80088a8:	2201      	movlt	r2, #1
 80088aa:	6032      	strlt	r2, [r6, #0]
 80088ac:	43bb      	bics	r3, r7
 80088ae:	d112      	bne.n	80088d6 <_dtoa_r+0x9e>
 80088b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80088b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088bc:	4323      	orrs	r3, r4
 80088be:	f000 855a 	beq.w	8009376 <_dtoa_r+0xb3e>
 80088c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008b24 <_dtoa_r+0x2ec>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 855c 	beq.w	8009386 <_dtoa_r+0xb4e>
 80088ce:	f10a 0303 	add.w	r3, sl, #3
 80088d2:	f000 bd56 	b.w	8009382 <_dtoa_r+0xb4a>
 80088d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80088da:	2200      	movs	r2, #0
 80088dc:	ec51 0b17 	vmov	r0, r1, d7
 80088e0:	2300      	movs	r3, #0
 80088e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80088e6:	f7f8 f90f 	bl	8000b08 <__aeabi_dcmpeq>
 80088ea:	4680      	mov	r8, r0
 80088ec:	b158      	cbz	r0, 8008906 <_dtoa_r+0xce>
 80088ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80088f0:	2301      	movs	r3, #1
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088f6:	b113      	cbz	r3, 80088fe <_dtoa_r+0xc6>
 80088f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80088fa:	4b86      	ldr	r3, [pc, #536]	@ (8008b14 <_dtoa_r+0x2dc>)
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008b28 <_dtoa_r+0x2f0>
 8008902:	f000 bd40 	b.w	8009386 <_dtoa_r+0xb4e>
 8008906:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800890a:	aa14      	add	r2, sp, #80	@ 0x50
 800890c:	a915      	add	r1, sp, #84	@ 0x54
 800890e:	4648      	mov	r0, r9
 8008910:	f001 f984 	bl	8009c1c <__d2b>
 8008914:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008918:	9002      	str	r0, [sp, #8]
 800891a:	2e00      	cmp	r6, #0
 800891c:	d078      	beq.n	8008a10 <_dtoa_r+0x1d8>
 800891e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008920:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008928:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800892c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008930:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008934:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008938:	4619      	mov	r1, r3
 800893a:	2200      	movs	r2, #0
 800893c:	4b76      	ldr	r3, [pc, #472]	@ (8008b18 <_dtoa_r+0x2e0>)
 800893e:	f7f7 fcc3 	bl	80002c8 <__aeabi_dsub>
 8008942:	a36b      	add	r3, pc, #428	@ (adr r3, 8008af0 <_dtoa_r+0x2b8>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f7f7 fe76 	bl	8000638 <__aeabi_dmul>
 800894c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008af8 <_dtoa_r+0x2c0>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f7 fcbb 	bl	80002cc <__adddf3>
 8008956:	4604      	mov	r4, r0
 8008958:	4630      	mov	r0, r6
 800895a:	460d      	mov	r5, r1
 800895c:	f7f7 fe02 	bl	8000564 <__aeabi_i2d>
 8008960:	a367      	add	r3, pc, #412	@ (adr r3, 8008b00 <_dtoa_r+0x2c8>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fe67 	bl	8000638 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4620      	mov	r0, r4
 8008970:	4629      	mov	r1, r5
 8008972:	f7f7 fcab 	bl	80002cc <__adddf3>
 8008976:	4604      	mov	r4, r0
 8008978:	460d      	mov	r5, r1
 800897a:	f7f8 f90d 	bl	8000b98 <__aeabi_d2iz>
 800897e:	2200      	movs	r2, #0
 8008980:	4607      	mov	r7, r0
 8008982:	2300      	movs	r3, #0
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f8 f8c8 	bl	8000b1c <__aeabi_dcmplt>
 800898c:	b140      	cbz	r0, 80089a0 <_dtoa_r+0x168>
 800898e:	4638      	mov	r0, r7
 8008990:	f7f7 fde8 	bl	8000564 <__aeabi_i2d>
 8008994:	4622      	mov	r2, r4
 8008996:	462b      	mov	r3, r5
 8008998:	f7f8 f8b6 	bl	8000b08 <__aeabi_dcmpeq>
 800899c:	b900      	cbnz	r0, 80089a0 <_dtoa_r+0x168>
 800899e:	3f01      	subs	r7, #1
 80089a0:	2f16      	cmp	r7, #22
 80089a2:	d852      	bhi.n	8008a4a <_dtoa_r+0x212>
 80089a4:	4b5d      	ldr	r3, [pc, #372]	@ (8008b1c <_dtoa_r+0x2e4>)
 80089a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80089b2:	f7f8 f8b3 	bl	8000b1c <__aeabi_dcmplt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d049      	beq.n	8008a4e <_dtoa_r+0x216>
 80089ba:	3f01      	subs	r7, #1
 80089bc:	2300      	movs	r3, #0
 80089be:	9310      	str	r3, [sp, #64]	@ 0x40
 80089c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089c2:	1b9b      	subs	r3, r3, r6
 80089c4:	1e5a      	subs	r2, r3, #1
 80089c6:	bf45      	ittet	mi
 80089c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80089cc:	9300      	strmi	r3, [sp, #0]
 80089ce:	2300      	movpl	r3, #0
 80089d0:	2300      	movmi	r3, #0
 80089d2:	9206      	str	r2, [sp, #24]
 80089d4:	bf54      	ite	pl
 80089d6:	9300      	strpl	r3, [sp, #0]
 80089d8:	9306      	strmi	r3, [sp, #24]
 80089da:	2f00      	cmp	r7, #0
 80089dc:	db39      	blt.n	8008a52 <_dtoa_r+0x21a>
 80089de:	9b06      	ldr	r3, [sp, #24]
 80089e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80089e2:	443b      	add	r3, r7
 80089e4:	9306      	str	r3, [sp, #24]
 80089e6:	2300      	movs	r3, #0
 80089e8:	9308      	str	r3, [sp, #32]
 80089ea:	9b07      	ldr	r3, [sp, #28]
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	d863      	bhi.n	8008ab8 <_dtoa_r+0x280>
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	bfc4      	itt	gt
 80089f4:	3b04      	subgt	r3, #4
 80089f6:	9307      	strgt	r3, [sp, #28]
 80089f8:	9b07      	ldr	r3, [sp, #28]
 80089fa:	f1a3 0302 	sub.w	r3, r3, #2
 80089fe:	bfcc      	ite	gt
 8008a00:	2400      	movgt	r4, #0
 8008a02:	2401      	movle	r4, #1
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d863      	bhi.n	8008ad0 <_dtoa_r+0x298>
 8008a08:	e8df f003 	tbb	[pc, r3]
 8008a0c:	2b375452 	.word	0x2b375452
 8008a10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008a14:	441e      	add	r6, r3
 8008a16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a1a:	2b20      	cmp	r3, #32
 8008a1c:	bfc1      	itttt	gt
 8008a1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a22:	409f      	lslgt	r7, r3
 8008a24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a28:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a2c:	bfd6      	itet	le
 8008a2e:	f1c3 0320 	rsble	r3, r3, #32
 8008a32:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a36:	fa04 f003 	lslle.w	r0, r4, r3
 8008a3a:	f7f7 fd83 	bl	8000544 <__aeabi_ui2d>
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a44:	3e01      	subs	r6, #1
 8008a46:	9212      	str	r2, [sp, #72]	@ 0x48
 8008a48:	e776      	b.n	8008938 <_dtoa_r+0x100>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e7b7      	b.n	80089be <_dtoa_r+0x186>
 8008a4e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008a50:	e7b6      	b.n	80089c0 <_dtoa_r+0x188>
 8008a52:	9b00      	ldr	r3, [sp, #0]
 8008a54:	1bdb      	subs	r3, r3, r7
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	427b      	negs	r3, r7
 8008a5a:	9308      	str	r3, [sp, #32]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008a60:	e7c3      	b.n	80089ea <_dtoa_r+0x1b2>
 8008a62:	2301      	movs	r3, #1
 8008a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a68:	eb07 0b03 	add.w	fp, r7, r3
 8008a6c:	f10b 0301 	add.w	r3, fp, #1
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	9303      	str	r3, [sp, #12]
 8008a74:	bfb8      	it	lt
 8008a76:	2301      	movlt	r3, #1
 8008a78:	e006      	b.n	8008a88 <_dtoa_r+0x250>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	dd28      	ble.n	8008ad6 <_dtoa_r+0x29e>
 8008a84:	469b      	mov	fp, r3
 8008a86:	9303      	str	r3, [sp, #12]
 8008a88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	2204      	movs	r2, #4
 8008a90:	f102 0514 	add.w	r5, r2, #20
 8008a94:	429d      	cmp	r5, r3
 8008a96:	d926      	bls.n	8008ae6 <_dtoa_r+0x2ae>
 8008a98:	6041      	str	r1, [r0, #4]
 8008a9a:	4648      	mov	r0, r9
 8008a9c:	f000 fd9c 	bl	80095d8 <_Balloc>
 8008aa0:	4682      	mov	sl, r0
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d142      	bne.n	8008b2c <_dtoa_r+0x2f4>
 8008aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b20 <_dtoa_r+0x2e8>)
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	f240 11af 	movw	r1, #431	@ 0x1af
 8008aae:	e6da      	b.n	8008866 <_dtoa_r+0x2e>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e7e3      	b.n	8008a7c <_dtoa_r+0x244>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e7d5      	b.n	8008a64 <_dtoa_r+0x22c>
 8008ab8:	2401      	movs	r4, #1
 8008aba:	2300      	movs	r3, #0
 8008abc:	9307      	str	r3, [sp, #28]
 8008abe:	9409      	str	r4, [sp, #36]	@ 0x24
 8008ac0:	f04f 3bff 	mov.w	fp, #4294967295
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f8cd b00c 	str.w	fp, [sp, #12]
 8008aca:	2312      	movs	r3, #18
 8008acc:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ace:	e7db      	b.n	8008a88 <_dtoa_r+0x250>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ad4:	e7f4      	b.n	8008ac0 <_dtoa_r+0x288>
 8008ad6:	f04f 0b01 	mov.w	fp, #1
 8008ada:	f8cd b00c 	str.w	fp, [sp, #12]
 8008ade:	465b      	mov	r3, fp
 8008ae0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008ae4:	e7d0      	b.n	8008a88 <_dtoa_r+0x250>
 8008ae6:	3101      	adds	r1, #1
 8008ae8:	0052      	lsls	r2, r2, #1
 8008aea:	e7d1      	b.n	8008a90 <_dtoa_r+0x258>
 8008aec:	f3af 8000 	nop.w
 8008af0:	636f4361 	.word	0x636f4361
 8008af4:	3fd287a7 	.word	0x3fd287a7
 8008af8:	8b60c8b3 	.word	0x8b60c8b3
 8008afc:	3fc68a28 	.word	0x3fc68a28
 8008b00:	509f79fb 	.word	0x509f79fb
 8008b04:	3fd34413 	.word	0x3fd34413
 8008b08:	0800a8fd 	.word	0x0800a8fd
 8008b0c:	0800a914 	.word	0x0800a914
 8008b10:	7ff00000 	.word	0x7ff00000
 8008b14:	0800a8cd 	.word	0x0800a8cd
 8008b18:	3ff80000 	.word	0x3ff80000
 8008b1c:	0800aa68 	.word	0x0800aa68
 8008b20:	0800a96c 	.word	0x0800a96c
 8008b24:	0800a8f9 	.word	0x0800a8f9
 8008b28:	0800a8cc 	.word	0x0800a8cc
 8008b2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b30:	6018      	str	r0, [r3, #0]
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	2b0e      	cmp	r3, #14
 8008b36:	f200 80a1 	bhi.w	8008c7c <_dtoa_r+0x444>
 8008b3a:	2c00      	cmp	r4, #0
 8008b3c:	f000 809e 	beq.w	8008c7c <_dtoa_r+0x444>
 8008b40:	2f00      	cmp	r7, #0
 8008b42:	dd33      	ble.n	8008bac <_dtoa_r+0x374>
 8008b44:	4b9c      	ldr	r3, [pc, #624]	@ (8008db8 <_dtoa_r+0x580>)
 8008b46:	f007 020f 	and.w	r2, r7, #15
 8008b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b4e:	ed93 7b00 	vldr	d7, [r3]
 8008b52:	05f8      	lsls	r0, r7, #23
 8008b54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008b58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b5c:	d516      	bpl.n	8008b8c <_dtoa_r+0x354>
 8008b5e:	4b97      	ldr	r3, [pc, #604]	@ (8008dbc <_dtoa_r+0x584>)
 8008b60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008b64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b68:	f7f7 fe90 	bl	800088c <__aeabi_ddiv>
 8008b6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b70:	f004 040f 	and.w	r4, r4, #15
 8008b74:	2603      	movs	r6, #3
 8008b76:	4d91      	ldr	r5, [pc, #580]	@ (8008dbc <_dtoa_r+0x584>)
 8008b78:	b954      	cbnz	r4, 8008b90 <_dtoa_r+0x358>
 8008b7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b82:	f7f7 fe83 	bl	800088c <__aeabi_ddiv>
 8008b86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b8a:	e028      	b.n	8008bde <_dtoa_r+0x3a6>
 8008b8c:	2602      	movs	r6, #2
 8008b8e:	e7f2      	b.n	8008b76 <_dtoa_r+0x33e>
 8008b90:	07e1      	lsls	r1, r4, #31
 8008b92:	d508      	bpl.n	8008ba6 <_dtoa_r+0x36e>
 8008b94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b9c:	f7f7 fd4c 	bl	8000638 <__aeabi_dmul>
 8008ba0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ba4:	3601      	adds	r6, #1
 8008ba6:	1064      	asrs	r4, r4, #1
 8008ba8:	3508      	adds	r5, #8
 8008baa:	e7e5      	b.n	8008b78 <_dtoa_r+0x340>
 8008bac:	f000 80af 	beq.w	8008d0e <_dtoa_r+0x4d6>
 8008bb0:	427c      	negs	r4, r7
 8008bb2:	4b81      	ldr	r3, [pc, #516]	@ (8008db8 <_dtoa_r+0x580>)
 8008bb4:	4d81      	ldr	r5, [pc, #516]	@ (8008dbc <_dtoa_r+0x584>)
 8008bb6:	f004 020f 	and.w	r2, r4, #15
 8008bba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008bc6:	f7f7 fd37 	bl	8000638 <__aeabi_dmul>
 8008bca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bce:	1124      	asrs	r4, r4, #4
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2602      	movs	r6, #2
 8008bd4:	2c00      	cmp	r4, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <_dtoa_r+0x4c0>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1d3      	bne.n	8008b86 <_dtoa_r+0x34e>
 8008bde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008be0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8094 	beq.w	8008d12 <_dtoa_r+0x4da>
 8008bea:	4b75      	ldr	r3, [pc, #468]	@ (8008dc0 <_dtoa_r+0x588>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	f7f7 ff93 	bl	8000b1c <__aeabi_dcmplt>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f000 808b 	beq.w	8008d12 <_dtoa_r+0x4da>
 8008bfc:	9b03      	ldr	r3, [sp, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 8087 	beq.w	8008d12 <_dtoa_r+0x4da>
 8008c04:	f1bb 0f00 	cmp.w	fp, #0
 8008c08:	dd34      	ble.n	8008c74 <_dtoa_r+0x43c>
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4b6d      	ldr	r3, [pc, #436]	@ (8008dc4 <_dtoa_r+0x58c>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	4629      	mov	r1, r5
 8008c12:	f7f7 fd11 	bl	8000638 <__aeabi_dmul>
 8008c16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c1a:	f107 38ff 	add.w	r8, r7, #4294967295
 8008c1e:	3601      	adds	r6, #1
 8008c20:	465c      	mov	r4, fp
 8008c22:	4630      	mov	r0, r6
 8008c24:	f7f7 fc9e 	bl	8000564 <__aeabi_i2d>
 8008c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c2c:	f7f7 fd04 	bl	8000638 <__aeabi_dmul>
 8008c30:	4b65      	ldr	r3, [pc, #404]	@ (8008dc8 <_dtoa_r+0x590>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	f7f7 fb4a 	bl	80002cc <__adddf3>
 8008c38:	4605      	mov	r5, r0
 8008c3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c3e:	2c00      	cmp	r4, #0
 8008c40:	d16a      	bne.n	8008d18 <_dtoa_r+0x4e0>
 8008c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c46:	4b61      	ldr	r3, [pc, #388]	@ (8008dcc <_dtoa_r+0x594>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f7f7 fb3d 	bl	80002c8 <__aeabi_dsub>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c56:	462a      	mov	r2, r5
 8008c58:	4633      	mov	r3, r6
 8008c5a:	f7f7 ff7d 	bl	8000b58 <__aeabi_dcmpgt>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	f040 8298 	bne.w	8009194 <_dtoa_r+0x95c>
 8008c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c68:	462a      	mov	r2, r5
 8008c6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c6e:	f7f7 ff55 	bl	8000b1c <__aeabi_dcmplt>
 8008c72:	bb38      	cbnz	r0, 8008cc4 <_dtoa_r+0x48c>
 8008c74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008c78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f2c0 8157 	blt.w	8008f32 <_dtoa_r+0x6fa>
 8008c84:	2f0e      	cmp	r7, #14
 8008c86:	f300 8154 	bgt.w	8008f32 <_dtoa_r+0x6fa>
 8008c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8008db8 <_dtoa_r+0x580>)
 8008c8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c90:	ed93 7b00 	vldr	d7, [r3]
 8008c94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	ed8d 7b00 	vstr	d7, [sp]
 8008c9c:	f280 80e5 	bge.w	8008e6a <_dtoa_r+0x632>
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f300 80e1 	bgt.w	8008e6a <_dtoa_r+0x632>
 8008ca8:	d10c      	bne.n	8008cc4 <_dtoa_r+0x48c>
 8008caa:	4b48      	ldr	r3, [pc, #288]	@ (8008dcc <_dtoa_r+0x594>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	ec51 0b17 	vmov	r0, r1, d7
 8008cb2:	f7f7 fcc1 	bl	8000638 <__aeabi_dmul>
 8008cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cba:	f7f7 ff43 	bl	8000b44 <__aeabi_dcmpge>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f000 8266 	beq.w	8009190 <_dtoa_r+0x958>
 8008cc4:	2400      	movs	r4, #0
 8008cc6:	4625      	mov	r5, r4
 8008cc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cca:	4656      	mov	r6, sl
 8008ccc:	ea6f 0803 	mvn.w	r8, r3
 8008cd0:	2700      	movs	r7, #0
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4648      	mov	r0, r9
 8008cd6:	f000 fcbf 	bl	8009658 <_Bfree>
 8008cda:	2d00      	cmp	r5, #0
 8008cdc:	f000 80bd 	beq.w	8008e5a <_dtoa_r+0x622>
 8008ce0:	b12f      	cbz	r7, 8008cee <_dtoa_r+0x4b6>
 8008ce2:	42af      	cmp	r7, r5
 8008ce4:	d003      	beq.n	8008cee <_dtoa_r+0x4b6>
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	4648      	mov	r0, r9
 8008cea:	f000 fcb5 	bl	8009658 <_Bfree>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4648      	mov	r0, r9
 8008cf2:	f000 fcb1 	bl	8009658 <_Bfree>
 8008cf6:	e0b0      	b.n	8008e5a <_dtoa_r+0x622>
 8008cf8:	07e2      	lsls	r2, r4, #31
 8008cfa:	d505      	bpl.n	8008d08 <_dtoa_r+0x4d0>
 8008cfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d00:	f7f7 fc9a 	bl	8000638 <__aeabi_dmul>
 8008d04:	3601      	adds	r6, #1
 8008d06:	2301      	movs	r3, #1
 8008d08:	1064      	asrs	r4, r4, #1
 8008d0a:	3508      	adds	r5, #8
 8008d0c:	e762      	b.n	8008bd4 <_dtoa_r+0x39c>
 8008d0e:	2602      	movs	r6, #2
 8008d10:	e765      	b.n	8008bde <_dtoa_r+0x3a6>
 8008d12:	9c03      	ldr	r4, [sp, #12]
 8008d14:	46b8      	mov	r8, r7
 8008d16:	e784      	b.n	8008c22 <_dtoa_r+0x3ea>
 8008d18:	4b27      	ldr	r3, [pc, #156]	@ (8008db8 <_dtoa_r+0x580>)
 8008d1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d24:	4454      	add	r4, sl
 8008d26:	2900      	cmp	r1, #0
 8008d28:	d054      	beq.n	8008dd4 <_dtoa_r+0x59c>
 8008d2a:	4929      	ldr	r1, [pc, #164]	@ (8008dd0 <_dtoa_r+0x598>)
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	f7f7 fdad 	bl	800088c <__aeabi_ddiv>
 8008d32:	4633      	mov	r3, r6
 8008d34:	462a      	mov	r2, r5
 8008d36:	f7f7 fac7 	bl	80002c8 <__aeabi_dsub>
 8008d3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008d3e:	4656      	mov	r6, sl
 8008d40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d44:	f7f7 ff28 	bl	8000b98 <__aeabi_d2iz>
 8008d48:	4605      	mov	r5, r0
 8008d4a:	f7f7 fc0b 	bl	8000564 <__aeabi_i2d>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d56:	f7f7 fab7 	bl	80002c8 <__aeabi_dsub>
 8008d5a:	3530      	adds	r5, #48	@ 0x30
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d64:	f806 5b01 	strb.w	r5, [r6], #1
 8008d68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d6c:	f7f7 fed6 	bl	8000b1c <__aeabi_dcmplt>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d172      	bne.n	8008e5a <_dtoa_r+0x622>
 8008d74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d78:	4911      	ldr	r1, [pc, #68]	@ (8008dc0 <_dtoa_r+0x588>)
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	f7f7 faa4 	bl	80002c8 <__aeabi_dsub>
 8008d80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d84:	f7f7 feca 	bl	8000b1c <__aeabi_dcmplt>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	f040 80b4 	bne.w	8008ef6 <_dtoa_r+0x6be>
 8008d8e:	42a6      	cmp	r6, r4
 8008d90:	f43f af70 	beq.w	8008c74 <_dtoa_r+0x43c>
 8008d94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008d98:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc4 <_dtoa_r+0x58c>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f7f7 fc4c 	bl	8000638 <__aeabi_dmul>
 8008da0:	4b08      	ldr	r3, [pc, #32]	@ (8008dc4 <_dtoa_r+0x58c>)
 8008da2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008da6:	2200      	movs	r2, #0
 8008da8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dac:	f7f7 fc44 	bl	8000638 <__aeabi_dmul>
 8008db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008db4:	e7c4      	b.n	8008d40 <_dtoa_r+0x508>
 8008db6:	bf00      	nop
 8008db8:	0800aa68 	.word	0x0800aa68
 8008dbc:	0800aa40 	.word	0x0800aa40
 8008dc0:	3ff00000 	.word	0x3ff00000
 8008dc4:	40240000 	.word	0x40240000
 8008dc8:	401c0000 	.word	0x401c0000
 8008dcc:	40140000 	.word	0x40140000
 8008dd0:	3fe00000 	.word	0x3fe00000
 8008dd4:	4631      	mov	r1, r6
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 fc2e 	bl	8000638 <__aeabi_dmul>
 8008ddc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008de0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008de2:	4656      	mov	r6, sl
 8008de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008de8:	f7f7 fed6 	bl	8000b98 <__aeabi_d2iz>
 8008dec:	4605      	mov	r5, r0
 8008dee:	f7f7 fbb9 	bl	8000564 <__aeabi_i2d>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dfa:	f7f7 fa65 	bl	80002c8 <__aeabi_dsub>
 8008dfe:	3530      	adds	r5, #48	@ 0x30
 8008e00:	f806 5b01 	strb.w	r5, [r6], #1
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	42a6      	cmp	r6, r4
 8008e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e0e:	f04f 0200 	mov.w	r2, #0
 8008e12:	d124      	bne.n	8008e5e <_dtoa_r+0x626>
 8008e14:	4baf      	ldr	r3, [pc, #700]	@ (80090d4 <_dtoa_r+0x89c>)
 8008e16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008e1a:	f7f7 fa57 	bl	80002cc <__adddf3>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e26:	f7f7 fe97 	bl	8000b58 <__aeabi_dcmpgt>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d163      	bne.n	8008ef6 <_dtoa_r+0x6be>
 8008e2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e32:	49a8      	ldr	r1, [pc, #672]	@ (80090d4 <_dtoa_r+0x89c>)
 8008e34:	2000      	movs	r0, #0
 8008e36:	f7f7 fa47 	bl	80002c8 <__aeabi_dsub>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e42:	f7f7 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f43f af14 	beq.w	8008c74 <_dtoa_r+0x43c>
 8008e4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008e4e:	1e73      	subs	r3, r6, #1
 8008e50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e56:	2b30      	cmp	r3, #48	@ 0x30
 8008e58:	d0f8      	beq.n	8008e4c <_dtoa_r+0x614>
 8008e5a:	4647      	mov	r7, r8
 8008e5c:	e03b      	b.n	8008ed6 <_dtoa_r+0x69e>
 8008e5e:	4b9e      	ldr	r3, [pc, #632]	@ (80090d8 <_dtoa_r+0x8a0>)
 8008e60:	f7f7 fbea 	bl	8000638 <__aeabi_dmul>
 8008e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e68:	e7bc      	b.n	8008de4 <_dtoa_r+0x5ac>
 8008e6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008e6e:	4656      	mov	r6, sl
 8008e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e74:	4620      	mov	r0, r4
 8008e76:	4629      	mov	r1, r5
 8008e78:	f7f7 fd08 	bl	800088c <__aeabi_ddiv>
 8008e7c:	f7f7 fe8c 	bl	8000b98 <__aeabi_d2iz>
 8008e80:	4680      	mov	r8, r0
 8008e82:	f7f7 fb6f 	bl	8000564 <__aeabi_i2d>
 8008e86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e8a:	f7f7 fbd5 	bl	8000638 <__aeabi_dmul>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4620      	mov	r0, r4
 8008e94:	4629      	mov	r1, r5
 8008e96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e9a:	f7f7 fa15 	bl	80002c8 <__aeabi_dsub>
 8008e9e:	f806 4b01 	strb.w	r4, [r6], #1
 8008ea2:	9d03      	ldr	r5, [sp, #12]
 8008ea4:	eba6 040a 	sub.w	r4, r6, sl
 8008ea8:	42a5      	cmp	r5, r4
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	d133      	bne.n	8008f18 <_dtoa_r+0x6e0>
 8008eb0:	f7f7 fa0c 	bl	80002cc <__adddf3>
 8008eb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eb8:	4604      	mov	r4, r0
 8008eba:	460d      	mov	r5, r1
 8008ebc:	f7f7 fe4c 	bl	8000b58 <__aeabi_dcmpgt>
 8008ec0:	b9c0      	cbnz	r0, 8008ef4 <_dtoa_r+0x6bc>
 8008ec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	4629      	mov	r1, r5
 8008eca:	f7f7 fe1d 	bl	8000b08 <__aeabi_dcmpeq>
 8008ece:	b110      	cbz	r0, 8008ed6 <_dtoa_r+0x69e>
 8008ed0:	f018 0f01 	tst.w	r8, #1
 8008ed4:	d10e      	bne.n	8008ef4 <_dtoa_r+0x6bc>
 8008ed6:	9902      	ldr	r1, [sp, #8]
 8008ed8:	4648      	mov	r0, r9
 8008eda:	f000 fbbd 	bl	8009658 <_Bfree>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	7033      	strb	r3, [r6, #0]
 8008ee2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ee4:	3701      	adds	r7, #1
 8008ee6:	601f      	str	r7, [r3, #0]
 8008ee8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 824b 	beq.w	8009386 <_dtoa_r+0xb4e>
 8008ef0:	601e      	str	r6, [r3, #0]
 8008ef2:	e248      	b.n	8009386 <_dtoa_r+0xb4e>
 8008ef4:	46b8      	mov	r8, r7
 8008ef6:	4633      	mov	r3, r6
 8008ef8:	461e      	mov	r6, r3
 8008efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008efe:	2a39      	cmp	r2, #57	@ 0x39
 8008f00:	d106      	bne.n	8008f10 <_dtoa_r+0x6d8>
 8008f02:	459a      	cmp	sl, r3
 8008f04:	d1f8      	bne.n	8008ef8 <_dtoa_r+0x6c0>
 8008f06:	2230      	movs	r2, #48	@ 0x30
 8008f08:	f108 0801 	add.w	r8, r8, #1
 8008f0c:	f88a 2000 	strb.w	r2, [sl]
 8008f10:	781a      	ldrb	r2, [r3, #0]
 8008f12:	3201      	adds	r2, #1
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	e7a0      	b.n	8008e5a <_dtoa_r+0x622>
 8008f18:	4b6f      	ldr	r3, [pc, #444]	@ (80090d8 <_dtoa_r+0x8a0>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f7f7 fb8c 	bl	8000638 <__aeabi_dmul>
 8008f20:	2200      	movs	r2, #0
 8008f22:	2300      	movs	r3, #0
 8008f24:	4604      	mov	r4, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	f7f7 fdee 	bl	8000b08 <__aeabi_dcmpeq>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d09f      	beq.n	8008e70 <_dtoa_r+0x638>
 8008f30:	e7d1      	b.n	8008ed6 <_dtoa_r+0x69e>
 8008f32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f34:	2a00      	cmp	r2, #0
 8008f36:	f000 80ea 	beq.w	800910e <_dtoa_r+0x8d6>
 8008f3a:	9a07      	ldr	r2, [sp, #28]
 8008f3c:	2a01      	cmp	r2, #1
 8008f3e:	f300 80cd 	bgt.w	80090dc <_dtoa_r+0x8a4>
 8008f42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008f44:	2a00      	cmp	r2, #0
 8008f46:	f000 80c1 	beq.w	80090cc <_dtoa_r+0x894>
 8008f4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f4e:	9c08      	ldr	r4, [sp, #32]
 8008f50:	9e00      	ldr	r6, [sp, #0]
 8008f52:	9a00      	ldr	r2, [sp, #0]
 8008f54:	441a      	add	r2, r3
 8008f56:	9200      	str	r2, [sp, #0]
 8008f58:	9a06      	ldr	r2, [sp, #24]
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	441a      	add	r2, r3
 8008f5e:	4648      	mov	r0, r9
 8008f60:	9206      	str	r2, [sp, #24]
 8008f62:	f000 fc2d 	bl	80097c0 <__i2b>
 8008f66:	4605      	mov	r5, r0
 8008f68:	b166      	cbz	r6, 8008f84 <_dtoa_r+0x74c>
 8008f6a:	9b06      	ldr	r3, [sp, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	dd09      	ble.n	8008f84 <_dtoa_r+0x74c>
 8008f70:	42b3      	cmp	r3, r6
 8008f72:	9a00      	ldr	r2, [sp, #0]
 8008f74:	bfa8      	it	ge
 8008f76:	4633      	movge	r3, r6
 8008f78:	1ad2      	subs	r2, r2, r3
 8008f7a:	9200      	str	r2, [sp, #0]
 8008f7c:	9a06      	ldr	r2, [sp, #24]
 8008f7e:	1af6      	subs	r6, r6, r3
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	9306      	str	r3, [sp, #24]
 8008f84:	9b08      	ldr	r3, [sp, #32]
 8008f86:	b30b      	cbz	r3, 8008fcc <_dtoa_r+0x794>
 8008f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 80c6 	beq.w	800911c <_dtoa_r+0x8e4>
 8008f90:	2c00      	cmp	r4, #0
 8008f92:	f000 80c0 	beq.w	8009116 <_dtoa_r+0x8de>
 8008f96:	4629      	mov	r1, r5
 8008f98:	4622      	mov	r2, r4
 8008f9a:	4648      	mov	r0, r9
 8008f9c:	f000 fcc8 	bl	8009930 <__pow5mult>
 8008fa0:	9a02      	ldr	r2, [sp, #8]
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	4648      	mov	r0, r9
 8008fa8:	f000 fc20 	bl	80097ec <__multiply>
 8008fac:	9902      	ldr	r1, [sp, #8]
 8008fae:	4680      	mov	r8, r0
 8008fb0:	4648      	mov	r0, r9
 8008fb2:	f000 fb51 	bl	8009658 <_Bfree>
 8008fb6:	9b08      	ldr	r3, [sp, #32]
 8008fb8:	1b1b      	subs	r3, r3, r4
 8008fba:	9308      	str	r3, [sp, #32]
 8008fbc:	f000 80b1 	beq.w	8009122 <_dtoa_r+0x8ea>
 8008fc0:	9a08      	ldr	r2, [sp, #32]
 8008fc2:	4641      	mov	r1, r8
 8008fc4:	4648      	mov	r0, r9
 8008fc6:	f000 fcb3 	bl	8009930 <__pow5mult>
 8008fca:	9002      	str	r0, [sp, #8]
 8008fcc:	2101      	movs	r1, #1
 8008fce:	4648      	mov	r0, r9
 8008fd0:	f000 fbf6 	bl	80097c0 <__i2b>
 8008fd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f000 81d8 	beq.w	800938e <_dtoa_r+0xb56>
 8008fde:	461a      	mov	r2, r3
 8008fe0:	4601      	mov	r1, r0
 8008fe2:	4648      	mov	r0, r9
 8008fe4:	f000 fca4 	bl	8009930 <__pow5mult>
 8008fe8:	9b07      	ldr	r3, [sp, #28]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	4604      	mov	r4, r0
 8008fee:	f300 809f 	bgt.w	8009130 <_dtoa_r+0x8f8>
 8008ff2:	9b04      	ldr	r3, [sp, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f040 8097 	bne.w	8009128 <_dtoa_r+0x8f0>
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009000:	2b00      	cmp	r3, #0
 8009002:	f040 8093 	bne.w	800912c <_dtoa_r+0x8f4>
 8009006:	9b05      	ldr	r3, [sp, #20]
 8009008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800900c:	0d1b      	lsrs	r3, r3, #20
 800900e:	051b      	lsls	r3, r3, #20
 8009010:	b133      	cbz	r3, 8009020 <_dtoa_r+0x7e8>
 8009012:	9b00      	ldr	r3, [sp, #0]
 8009014:	3301      	adds	r3, #1
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	9b06      	ldr	r3, [sp, #24]
 800901a:	3301      	adds	r3, #1
 800901c:	9306      	str	r3, [sp, #24]
 800901e:	2301      	movs	r3, #1
 8009020:	9308      	str	r3, [sp, #32]
 8009022:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 81b8 	beq.w	800939a <_dtoa_r+0xb62>
 800902a:	6923      	ldr	r3, [r4, #16]
 800902c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009030:	6918      	ldr	r0, [r3, #16]
 8009032:	f000 fb79 	bl	8009728 <__hi0bits>
 8009036:	f1c0 0020 	rsb	r0, r0, #32
 800903a:	9b06      	ldr	r3, [sp, #24]
 800903c:	4418      	add	r0, r3
 800903e:	f010 001f 	ands.w	r0, r0, #31
 8009042:	f000 8082 	beq.w	800914a <_dtoa_r+0x912>
 8009046:	f1c0 0320 	rsb	r3, r0, #32
 800904a:	2b04      	cmp	r3, #4
 800904c:	dd73      	ble.n	8009136 <_dtoa_r+0x8fe>
 800904e:	9b00      	ldr	r3, [sp, #0]
 8009050:	f1c0 001c 	rsb	r0, r0, #28
 8009054:	4403      	add	r3, r0
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	9b06      	ldr	r3, [sp, #24]
 800905a:	4403      	add	r3, r0
 800905c:	4406      	add	r6, r0
 800905e:	9306      	str	r3, [sp, #24]
 8009060:	9b00      	ldr	r3, [sp, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	dd05      	ble.n	8009072 <_dtoa_r+0x83a>
 8009066:	9902      	ldr	r1, [sp, #8]
 8009068:	461a      	mov	r2, r3
 800906a:	4648      	mov	r0, r9
 800906c:	f000 fcba 	bl	80099e4 <__lshift>
 8009070:	9002      	str	r0, [sp, #8]
 8009072:	9b06      	ldr	r3, [sp, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	dd05      	ble.n	8009084 <_dtoa_r+0x84c>
 8009078:	4621      	mov	r1, r4
 800907a:	461a      	mov	r2, r3
 800907c:	4648      	mov	r0, r9
 800907e:	f000 fcb1 	bl	80099e4 <__lshift>
 8009082:	4604      	mov	r4, r0
 8009084:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	d061      	beq.n	800914e <_dtoa_r+0x916>
 800908a:	9802      	ldr	r0, [sp, #8]
 800908c:	4621      	mov	r1, r4
 800908e:	f000 fd15 	bl	8009abc <__mcmp>
 8009092:	2800      	cmp	r0, #0
 8009094:	da5b      	bge.n	800914e <_dtoa_r+0x916>
 8009096:	2300      	movs	r3, #0
 8009098:	9902      	ldr	r1, [sp, #8]
 800909a:	220a      	movs	r2, #10
 800909c:	4648      	mov	r0, r9
 800909e:	f000 fafd 	bl	800969c <__multadd>
 80090a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a4:	9002      	str	r0, [sp, #8]
 80090a6:	f107 38ff 	add.w	r8, r7, #4294967295
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 8177 	beq.w	800939e <_dtoa_r+0xb66>
 80090b0:	4629      	mov	r1, r5
 80090b2:	2300      	movs	r3, #0
 80090b4:	220a      	movs	r2, #10
 80090b6:	4648      	mov	r0, r9
 80090b8:	f000 faf0 	bl	800969c <__multadd>
 80090bc:	f1bb 0f00 	cmp.w	fp, #0
 80090c0:	4605      	mov	r5, r0
 80090c2:	dc6f      	bgt.n	80091a4 <_dtoa_r+0x96c>
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	dc49      	bgt.n	800915e <_dtoa_r+0x926>
 80090ca:	e06b      	b.n	80091a4 <_dtoa_r+0x96c>
 80090cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090d2:	e73c      	b.n	8008f4e <_dtoa_r+0x716>
 80090d4:	3fe00000 	.word	0x3fe00000
 80090d8:	40240000 	.word	0x40240000
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	1e5c      	subs	r4, r3, #1
 80090e0:	9b08      	ldr	r3, [sp, #32]
 80090e2:	42a3      	cmp	r3, r4
 80090e4:	db09      	blt.n	80090fa <_dtoa_r+0x8c2>
 80090e6:	1b1c      	subs	r4, r3, r4
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f6bf af30 	bge.w	8008f50 <_dtoa_r+0x718>
 80090f0:	9b00      	ldr	r3, [sp, #0]
 80090f2:	9a03      	ldr	r2, [sp, #12]
 80090f4:	1a9e      	subs	r6, r3, r2
 80090f6:	2300      	movs	r3, #0
 80090f8:	e72b      	b.n	8008f52 <_dtoa_r+0x71a>
 80090fa:	9b08      	ldr	r3, [sp, #32]
 80090fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090fe:	9408      	str	r4, [sp, #32]
 8009100:	1ae3      	subs	r3, r4, r3
 8009102:	441a      	add	r2, r3
 8009104:	9e00      	ldr	r6, [sp, #0]
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	920d      	str	r2, [sp, #52]	@ 0x34
 800910a:	2400      	movs	r4, #0
 800910c:	e721      	b.n	8008f52 <_dtoa_r+0x71a>
 800910e:	9c08      	ldr	r4, [sp, #32]
 8009110:	9e00      	ldr	r6, [sp, #0]
 8009112:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009114:	e728      	b.n	8008f68 <_dtoa_r+0x730>
 8009116:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800911a:	e751      	b.n	8008fc0 <_dtoa_r+0x788>
 800911c:	9a08      	ldr	r2, [sp, #32]
 800911e:	9902      	ldr	r1, [sp, #8]
 8009120:	e750      	b.n	8008fc4 <_dtoa_r+0x78c>
 8009122:	f8cd 8008 	str.w	r8, [sp, #8]
 8009126:	e751      	b.n	8008fcc <_dtoa_r+0x794>
 8009128:	2300      	movs	r3, #0
 800912a:	e779      	b.n	8009020 <_dtoa_r+0x7e8>
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	e777      	b.n	8009020 <_dtoa_r+0x7e8>
 8009130:	2300      	movs	r3, #0
 8009132:	9308      	str	r3, [sp, #32]
 8009134:	e779      	b.n	800902a <_dtoa_r+0x7f2>
 8009136:	d093      	beq.n	8009060 <_dtoa_r+0x828>
 8009138:	9a00      	ldr	r2, [sp, #0]
 800913a:	331c      	adds	r3, #28
 800913c:	441a      	add	r2, r3
 800913e:	9200      	str	r2, [sp, #0]
 8009140:	9a06      	ldr	r2, [sp, #24]
 8009142:	441a      	add	r2, r3
 8009144:	441e      	add	r6, r3
 8009146:	9206      	str	r2, [sp, #24]
 8009148:	e78a      	b.n	8009060 <_dtoa_r+0x828>
 800914a:	4603      	mov	r3, r0
 800914c:	e7f4      	b.n	8009138 <_dtoa_r+0x900>
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	46b8      	mov	r8, r7
 8009154:	dc20      	bgt.n	8009198 <_dtoa_r+0x960>
 8009156:	469b      	mov	fp, r3
 8009158:	9b07      	ldr	r3, [sp, #28]
 800915a:	2b02      	cmp	r3, #2
 800915c:	dd1e      	ble.n	800919c <_dtoa_r+0x964>
 800915e:	f1bb 0f00 	cmp.w	fp, #0
 8009162:	f47f adb1 	bne.w	8008cc8 <_dtoa_r+0x490>
 8009166:	4621      	mov	r1, r4
 8009168:	465b      	mov	r3, fp
 800916a:	2205      	movs	r2, #5
 800916c:	4648      	mov	r0, r9
 800916e:	f000 fa95 	bl	800969c <__multadd>
 8009172:	4601      	mov	r1, r0
 8009174:	4604      	mov	r4, r0
 8009176:	9802      	ldr	r0, [sp, #8]
 8009178:	f000 fca0 	bl	8009abc <__mcmp>
 800917c:	2800      	cmp	r0, #0
 800917e:	f77f ada3 	ble.w	8008cc8 <_dtoa_r+0x490>
 8009182:	4656      	mov	r6, sl
 8009184:	2331      	movs	r3, #49	@ 0x31
 8009186:	f806 3b01 	strb.w	r3, [r6], #1
 800918a:	f108 0801 	add.w	r8, r8, #1
 800918e:	e59f      	b.n	8008cd0 <_dtoa_r+0x498>
 8009190:	9c03      	ldr	r4, [sp, #12]
 8009192:	46b8      	mov	r8, r7
 8009194:	4625      	mov	r5, r4
 8009196:	e7f4      	b.n	8009182 <_dtoa_r+0x94a>
 8009198:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800919c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 8101 	beq.w	80093a6 <_dtoa_r+0xb6e>
 80091a4:	2e00      	cmp	r6, #0
 80091a6:	dd05      	ble.n	80091b4 <_dtoa_r+0x97c>
 80091a8:	4629      	mov	r1, r5
 80091aa:	4632      	mov	r2, r6
 80091ac:	4648      	mov	r0, r9
 80091ae:	f000 fc19 	bl	80099e4 <__lshift>
 80091b2:	4605      	mov	r5, r0
 80091b4:	9b08      	ldr	r3, [sp, #32]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d05c      	beq.n	8009274 <_dtoa_r+0xa3c>
 80091ba:	6869      	ldr	r1, [r5, #4]
 80091bc:	4648      	mov	r0, r9
 80091be:	f000 fa0b 	bl	80095d8 <_Balloc>
 80091c2:	4606      	mov	r6, r0
 80091c4:	b928      	cbnz	r0, 80091d2 <_dtoa_r+0x99a>
 80091c6:	4b82      	ldr	r3, [pc, #520]	@ (80093d0 <_dtoa_r+0xb98>)
 80091c8:	4602      	mov	r2, r0
 80091ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091ce:	f7ff bb4a 	b.w	8008866 <_dtoa_r+0x2e>
 80091d2:	692a      	ldr	r2, [r5, #16]
 80091d4:	3202      	adds	r2, #2
 80091d6:	0092      	lsls	r2, r2, #2
 80091d8:	f105 010c 	add.w	r1, r5, #12
 80091dc:	300c      	adds	r0, #12
 80091de:	f7ff fa92 	bl	8008706 <memcpy>
 80091e2:	2201      	movs	r2, #1
 80091e4:	4631      	mov	r1, r6
 80091e6:	4648      	mov	r0, r9
 80091e8:	f000 fbfc 	bl	80099e4 <__lshift>
 80091ec:	f10a 0301 	add.w	r3, sl, #1
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	eb0a 030b 	add.w	r3, sl, fp
 80091f6:	9308      	str	r3, [sp, #32]
 80091f8:	9b04      	ldr	r3, [sp, #16]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	462f      	mov	r7, r5
 8009200:	9306      	str	r3, [sp, #24]
 8009202:	4605      	mov	r5, r0
 8009204:	9b00      	ldr	r3, [sp, #0]
 8009206:	9802      	ldr	r0, [sp, #8]
 8009208:	4621      	mov	r1, r4
 800920a:	f103 3bff 	add.w	fp, r3, #4294967295
 800920e:	f7ff fa88 	bl	8008722 <quorem>
 8009212:	4603      	mov	r3, r0
 8009214:	3330      	adds	r3, #48	@ 0x30
 8009216:	9003      	str	r0, [sp, #12]
 8009218:	4639      	mov	r1, r7
 800921a:	9802      	ldr	r0, [sp, #8]
 800921c:	9309      	str	r3, [sp, #36]	@ 0x24
 800921e:	f000 fc4d 	bl	8009abc <__mcmp>
 8009222:	462a      	mov	r2, r5
 8009224:	9004      	str	r0, [sp, #16]
 8009226:	4621      	mov	r1, r4
 8009228:	4648      	mov	r0, r9
 800922a:	f000 fc63 	bl	8009af4 <__mdiff>
 800922e:	68c2      	ldr	r2, [r0, #12]
 8009230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009232:	4606      	mov	r6, r0
 8009234:	bb02      	cbnz	r2, 8009278 <_dtoa_r+0xa40>
 8009236:	4601      	mov	r1, r0
 8009238:	9802      	ldr	r0, [sp, #8]
 800923a:	f000 fc3f 	bl	8009abc <__mcmp>
 800923e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009240:	4602      	mov	r2, r0
 8009242:	4631      	mov	r1, r6
 8009244:	4648      	mov	r0, r9
 8009246:	920c      	str	r2, [sp, #48]	@ 0x30
 8009248:	9309      	str	r3, [sp, #36]	@ 0x24
 800924a:	f000 fa05 	bl	8009658 <_Bfree>
 800924e:	9b07      	ldr	r3, [sp, #28]
 8009250:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009252:	9e00      	ldr	r6, [sp, #0]
 8009254:	ea42 0103 	orr.w	r1, r2, r3
 8009258:	9b06      	ldr	r3, [sp, #24]
 800925a:	4319      	orrs	r1, r3
 800925c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925e:	d10d      	bne.n	800927c <_dtoa_r+0xa44>
 8009260:	2b39      	cmp	r3, #57	@ 0x39
 8009262:	d027      	beq.n	80092b4 <_dtoa_r+0xa7c>
 8009264:	9a04      	ldr	r2, [sp, #16]
 8009266:	2a00      	cmp	r2, #0
 8009268:	dd01      	ble.n	800926e <_dtoa_r+0xa36>
 800926a:	9b03      	ldr	r3, [sp, #12]
 800926c:	3331      	adds	r3, #49	@ 0x31
 800926e:	f88b 3000 	strb.w	r3, [fp]
 8009272:	e52e      	b.n	8008cd2 <_dtoa_r+0x49a>
 8009274:	4628      	mov	r0, r5
 8009276:	e7b9      	b.n	80091ec <_dtoa_r+0x9b4>
 8009278:	2201      	movs	r2, #1
 800927a:	e7e2      	b.n	8009242 <_dtoa_r+0xa0a>
 800927c:	9904      	ldr	r1, [sp, #16]
 800927e:	2900      	cmp	r1, #0
 8009280:	db04      	blt.n	800928c <_dtoa_r+0xa54>
 8009282:	9807      	ldr	r0, [sp, #28]
 8009284:	4301      	orrs	r1, r0
 8009286:	9806      	ldr	r0, [sp, #24]
 8009288:	4301      	orrs	r1, r0
 800928a:	d120      	bne.n	80092ce <_dtoa_r+0xa96>
 800928c:	2a00      	cmp	r2, #0
 800928e:	ddee      	ble.n	800926e <_dtoa_r+0xa36>
 8009290:	9902      	ldr	r1, [sp, #8]
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	2201      	movs	r2, #1
 8009296:	4648      	mov	r0, r9
 8009298:	f000 fba4 	bl	80099e4 <__lshift>
 800929c:	4621      	mov	r1, r4
 800929e:	9002      	str	r0, [sp, #8]
 80092a0:	f000 fc0c 	bl	8009abc <__mcmp>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	9b00      	ldr	r3, [sp, #0]
 80092a8:	dc02      	bgt.n	80092b0 <_dtoa_r+0xa78>
 80092aa:	d1e0      	bne.n	800926e <_dtoa_r+0xa36>
 80092ac:	07da      	lsls	r2, r3, #31
 80092ae:	d5de      	bpl.n	800926e <_dtoa_r+0xa36>
 80092b0:	2b39      	cmp	r3, #57	@ 0x39
 80092b2:	d1da      	bne.n	800926a <_dtoa_r+0xa32>
 80092b4:	2339      	movs	r3, #57	@ 0x39
 80092b6:	f88b 3000 	strb.w	r3, [fp]
 80092ba:	4633      	mov	r3, r6
 80092bc:	461e      	mov	r6, r3
 80092be:	3b01      	subs	r3, #1
 80092c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092c4:	2a39      	cmp	r2, #57	@ 0x39
 80092c6:	d04e      	beq.n	8009366 <_dtoa_r+0xb2e>
 80092c8:	3201      	adds	r2, #1
 80092ca:	701a      	strb	r2, [r3, #0]
 80092cc:	e501      	b.n	8008cd2 <_dtoa_r+0x49a>
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	dd03      	ble.n	80092da <_dtoa_r+0xaa2>
 80092d2:	2b39      	cmp	r3, #57	@ 0x39
 80092d4:	d0ee      	beq.n	80092b4 <_dtoa_r+0xa7c>
 80092d6:	3301      	adds	r3, #1
 80092d8:	e7c9      	b.n	800926e <_dtoa_r+0xa36>
 80092da:	9a00      	ldr	r2, [sp, #0]
 80092dc:	9908      	ldr	r1, [sp, #32]
 80092de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092e2:	428a      	cmp	r2, r1
 80092e4:	d028      	beq.n	8009338 <_dtoa_r+0xb00>
 80092e6:	9902      	ldr	r1, [sp, #8]
 80092e8:	2300      	movs	r3, #0
 80092ea:	220a      	movs	r2, #10
 80092ec:	4648      	mov	r0, r9
 80092ee:	f000 f9d5 	bl	800969c <__multadd>
 80092f2:	42af      	cmp	r7, r5
 80092f4:	9002      	str	r0, [sp, #8]
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	f04f 020a 	mov.w	r2, #10
 80092fe:	4639      	mov	r1, r7
 8009300:	4648      	mov	r0, r9
 8009302:	d107      	bne.n	8009314 <_dtoa_r+0xadc>
 8009304:	f000 f9ca 	bl	800969c <__multadd>
 8009308:	4607      	mov	r7, r0
 800930a:	4605      	mov	r5, r0
 800930c:	9b00      	ldr	r3, [sp, #0]
 800930e:	3301      	adds	r3, #1
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	e777      	b.n	8009204 <_dtoa_r+0x9cc>
 8009314:	f000 f9c2 	bl	800969c <__multadd>
 8009318:	4629      	mov	r1, r5
 800931a:	4607      	mov	r7, r0
 800931c:	2300      	movs	r3, #0
 800931e:	220a      	movs	r2, #10
 8009320:	4648      	mov	r0, r9
 8009322:	f000 f9bb 	bl	800969c <__multadd>
 8009326:	4605      	mov	r5, r0
 8009328:	e7f0      	b.n	800930c <_dtoa_r+0xad4>
 800932a:	f1bb 0f00 	cmp.w	fp, #0
 800932e:	bfcc      	ite	gt
 8009330:	465e      	movgt	r6, fp
 8009332:	2601      	movle	r6, #1
 8009334:	4456      	add	r6, sl
 8009336:	2700      	movs	r7, #0
 8009338:	9902      	ldr	r1, [sp, #8]
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	2201      	movs	r2, #1
 800933e:	4648      	mov	r0, r9
 8009340:	f000 fb50 	bl	80099e4 <__lshift>
 8009344:	4621      	mov	r1, r4
 8009346:	9002      	str	r0, [sp, #8]
 8009348:	f000 fbb8 	bl	8009abc <__mcmp>
 800934c:	2800      	cmp	r0, #0
 800934e:	dcb4      	bgt.n	80092ba <_dtoa_r+0xa82>
 8009350:	d102      	bne.n	8009358 <_dtoa_r+0xb20>
 8009352:	9b00      	ldr	r3, [sp, #0]
 8009354:	07db      	lsls	r3, r3, #31
 8009356:	d4b0      	bmi.n	80092ba <_dtoa_r+0xa82>
 8009358:	4633      	mov	r3, r6
 800935a:	461e      	mov	r6, r3
 800935c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009360:	2a30      	cmp	r2, #48	@ 0x30
 8009362:	d0fa      	beq.n	800935a <_dtoa_r+0xb22>
 8009364:	e4b5      	b.n	8008cd2 <_dtoa_r+0x49a>
 8009366:	459a      	cmp	sl, r3
 8009368:	d1a8      	bne.n	80092bc <_dtoa_r+0xa84>
 800936a:	2331      	movs	r3, #49	@ 0x31
 800936c:	f108 0801 	add.w	r8, r8, #1
 8009370:	f88a 3000 	strb.w	r3, [sl]
 8009374:	e4ad      	b.n	8008cd2 <_dtoa_r+0x49a>
 8009376:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009378:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80093d4 <_dtoa_r+0xb9c>
 800937c:	b11b      	cbz	r3, 8009386 <_dtoa_r+0xb4e>
 800937e:	f10a 0308 	add.w	r3, sl, #8
 8009382:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	4650      	mov	r0, sl
 8009388:	b017      	add	sp, #92	@ 0x5c
 800938a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938e:	9b07      	ldr	r3, [sp, #28]
 8009390:	2b01      	cmp	r3, #1
 8009392:	f77f ae2e 	ble.w	8008ff2 <_dtoa_r+0x7ba>
 8009396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009398:	9308      	str	r3, [sp, #32]
 800939a:	2001      	movs	r0, #1
 800939c:	e64d      	b.n	800903a <_dtoa_r+0x802>
 800939e:	f1bb 0f00 	cmp.w	fp, #0
 80093a2:	f77f aed9 	ble.w	8009158 <_dtoa_r+0x920>
 80093a6:	4656      	mov	r6, sl
 80093a8:	9802      	ldr	r0, [sp, #8]
 80093aa:	4621      	mov	r1, r4
 80093ac:	f7ff f9b9 	bl	8008722 <quorem>
 80093b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80093b4:	f806 3b01 	strb.w	r3, [r6], #1
 80093b8:	eba6 020a 	sub.w	r2, r6, sl
 80093bc:	4593      	cmp	fp, r2
 80093be:	ddb4      	ble.n	800932a <_dtoa_r+0xaf2>
 80093c0:	9902      	ldr	r1, [sp, #8]
 80093c2:	2300      	movs	r3, #0
 80093c4:	220a      	movs	r2, #10
 80093c6:	4648      	mov	r0, r9
 80093c8:	f000 f968 	bl	800969c <__multadd>
 80093cc:	9002      	str	r0, [sp, #8]
 80093ce:	e7eb      	b.n	80093a8 <_dtoa_r+0xb70>
 80093d0:	0800a96c 	.word	0x0800a96c
 80093d4:	0800a8f0 	.word	0x0800a8f0

080093d8 <_free_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4605      	mov	r5, r0
 80093dc:	2900      	cmp	r1, #0
 80093de:	d041      	beq.n	8009464 <_free_r+0x8c>
 80093e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e4:	1f0c      	subs	r4, r1, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfb8      	it	lt
 80093ea:	18e4      	addlt	r4, r4, r3
 80093ec:	f000 f8e8 	bl	80095c0 <__malloc_lock>
 80093f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009468 <_free_r+0x90>)
 80093f2:	6813      	ldr	r3, [r2, #0]
 80093f4:	b933      	cbnz	r3, 8009404 <_free_r+0x2c>
 80093f6:	6063      	str	r3, [r4, #4]
 80093f8:	6014      	str	r4, [r2, #0]
 80093fa:	4628      	mov	r0, r5
 80093fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009400:	f000 b8e4 	b.w	80095cc <__malloc_unlock>
 8009404:	42a3      	cmp	r3, r4
 8009406:	d908      	bls.n	800941a <_free_r+0x42>
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	1821      	adds	r1, r4, r0
 800940c:	428b      	cmp	r3, r1
 800940e:	bf01      	itttt	eq
 8009410:	6819      	ldreq	r1, [r3, #0]
 8009412:	685b      	ldreq	r3, [r3, #4]
 8009414:	1809      	addeq	r1, r1, r0
 8009416:	6021      	streq	r1, [r4, #0]
 8009418:	e7ed      	b.n	80093f6 <_free_r+0x1e>
 800941a:	461a      	mov	r2, r3
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	b10b      	cbz	r3, 8009424 <_free_r+0x4c>
 8009420:	42a3      	cmp	r3, r4
 8009422:	d9fa      	bls.n	800941a <_free_r+0x42>
 8009424:	6811      	ldr	r1, [r2, #0]
 8009426:	1850      	adds	r0, r2, r1
 8009428:	42a0      	cmp	r0, r4
 800942a:	d10b      	bne.n	8009444 <_free_r+0x6c>
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	4401      	add	r1, r0
 8009430:	1850      	adds	r0, r2, r1
 8009432:	4283      	cmp	r3, r0
 8009434:	6011      	str	r1, [r2, #0]
 8009436:	d1e0      	bne.n	80093fa <_free_r+0x22>
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	6053      	str	r3, [r2, #4]
 800943e:	4408      	add	r0, r1
 8009440:	6010      	str	r0, [r2, #0]
 8009442:	e7da      	b.n	80093fa <_free_r+0x22>
 8009444:	d902      	bls.n	800944c <_free_r+0x74>
 8009446:	230c      	movs	r3, #12
 8009448:	602b      	str	r3, [r5, #0]
 800944a:	e7d6      	b.n	80093fa <_free_r+0x22>
 800944c:	6820      	ldr	r0, [r4, #0]
 800944e:	1821      	adds	r1, r4, r0
 8009450:	428b      	cmp	r3, r1
 8009452:	bf04      	itt	eq
 8009454:	6819      	ldreq	r1, [r3, #0]
 8009456:	685b      	ldreq	r3, [r3, #4]
 8009458:	6063      	str	r3, [r4, #4]
 800945a:	bf04      	itt	eq
 800945c:	1809      	addeq	r1, r1, r0
 800945e:	6021      	streq	r1, [r4, #0]
 8009460:	6054      	str	r4, [r2, #4]
 8009462:	e7ca      	b.n	80093fa <_free_r+0x22>
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	bf00      	nop
 8009468:	20004e20 	.word	0x20004e20

0800946c <malloc>:
 800946c:	4b02      	ldr	r3, [pc, #8]	@ (8009478 <malloc+0xc>)
 800946e:	4601      	mov	r1, r0
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	f000 b825 	b.w	80094c0 <_malloc_r>
 8009476:	bf00      	nop
 8009478:	2000001c 	.word	0x2000001c

0800947c <sbrk_aligned>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	4e0f      	ldr	r6, [pc, #60]	@ (80094bc <sbrk_aligned+0x40>)
 8009480:	460c      	mov	r4, r1
 8009482:	6831      	ldr	r1, [r6, #0]
 8009484:	4605      	mov	r5, r0
 8009486:	b911      	cbnz	r1, 800948e <sbrk_aligned+0x12>
 8009488:	f000 fe3e 	bl	800a108 <_sbrk_r>
 800948c:	6030      	str	r0, [r6, #0]
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f000 fe39 	bl	800a108 <_sbrk_r>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	d103      	bne.n	80094a2 <sbrk_aligned+0x26>
 800949a:	f04f 34ff 	mov.w	r4, #4294967295
 800949e:	4620      	mov	r0, r4
 80094a0:	bd70      	pop	{r4, r5, r6, pc}
 80094a2:	1cc4      	adds	r4, r0, #3
 80094a4:	f024 0403 	bic.w	r4, r4, #3
 80094a8:	42a0      	cmp	r0, r4
 80094aa:	d0f8      	beq.n	800949e <sbrk_aligned+0x22>
 80094ac:	1a21      	subs	r1, r4, r0
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 fe2a 	bl	800a108 <_sbrk_r>
 80094b4:	3001      	adds	r0, #1
 80094b6:	d1f2      	bne.n	800949e <sbrk_aligned+0x22>
 80094b8:	e7ef      	b.n	800949a <sbrk_aligned+0x1e>
 80094ba:	bf00      	nop
 80094bc:	20004e1c 	.word	0x20004e1c

080094c0 <_malloc_r>:
 80094c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c4:	1ccd      	adds	r5, r1, #3
 80094c6:	f025 0503 	bic.w	r5, r5, #3
 80094ca:	3508      	adds	r5, #8
 80094cc:	2d0c      	cmp	r5, #12
 80094ce:	bf38      	it	cc
 80094d0:	250c      	movcc	r5, #12
 80094d2:	2d00      	cmp	r5, #0
 80094d4:	4606      	mov	r6, r0
 80094d6:	db01      	blt.n	80094dc <_malloc_r+0x1c>
 80094d8:	42a9      	cmp	r1, r5
 80094da:	d904      	bls.n	80094e6 <_malloc_r+0x26>
 80094dc:	230c      	movs	r3, #12
 80094de:	6033      	str	r3, [r6, #0]
 80094e0:	2000      	movs	r0, #0
 80094e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095bc <_malloc_r+0xfc>
 80094ea:	f000 f869 	bl	80095c0 <__malloc_lock>
 80094ee:	f8d8 3000 	ldr.w	r3, [r8]
 80094f2:	461c      	mov	r4, r3
 80094f4:	bb44      	cbnz	r4, 8009548 <_malloc_r+0x88>
 80094f6:	4629      	mov	r1, r5
 80094f8:	4630      	mov	r0, r6
 80094fa:	f7ff ffbf 	bl	800947c <sbrk_aligned>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	4604      	mov	r4, r0
 8009502:	d158      	bne.n	80095b6 <_malloc_r+0xf6>
 8009504:	f8d8 4000 	ldr.w	r4, [r8]
 8009508:	4627      	mov	r7, r4
 800950a:	2f00      	cmp	r7, #0
 800950c:	d143      	bne.n	8009596 <_malloc_r+0xd6>
 800950e:	2c00      	cmp	r4, #0
 8009510:	d04b      	beq.n	80095aa <_malloc_r+0xea>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	4639      	mov	r1, r7
 8009516:	4630      	mov	r0, r6
 8009518:	eb04 0903 	add.w	r9, r4, r3
 800951c:	f000 fdf4 	bl	800a108 <_sbrk_r>
 8009520:	4581      	cmp	r9, r0
 8009522:	d142      	bne.n	80095aa <_malloc_r+0xea>
 8009524:	6821      	ldr	r1, [r4, #0]
 8009526:	1a6d      	subs	r5, r5, r1
 8009528:	4629      	mov	r1, r5
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff ffa6 	bl	800947c <sbrk_aligned>
 8009530:	3001      	adds	r0, #1
 8009532:	d03a      	beq.n	80095aa <_malloc_r+0xea>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	442b      	add	r3, r5
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	f8d8 3000 	ldr.w	r3, [r8]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	bb62      	cbnz	r2, 800959c <_malloc_r+0xdc>
 8009542:	f8c8 7000 	str.w	r7, [r8]
 8009546:	e00f      	b.n	8009568 <_malloc_r+0xa8>
 8009548:	6822      	ldr	r2, [r4, #0]
 800954a:	1b52      	subs	r2, r2, r5
 800954c:	d420      	bmi.n	8009590 <_malloc_r+0xd0>
 800954e:	2a0b      	cmp	r2, #11
 8009550:	d917      	bls.n	8009582 <_malloc_r+0xc2>
 8009552:	1961      	adds	r1, r4, r5
 8009554:	42a3      	cmp	r3, r4
 8009556:	6025      	str	r5, [r4, #0]
 8009558:	bf18      	it	ne
 800955a:	6059      	strne	r1, [r3, #4]
 800955c:	6863      	ldr	r3, [r4, #4]
 800955e:	bf08      	it	eq
 8009560:	f8c8 1000 	streq.w	r1, [r8]
 8009564:	5162      	str	r2, [r4, r5]
 8009566:	604b      	str	r3, [r1, #4]
 8009568:	4630      	mov	r0, r6
 800956a:	f000 f82f 	bl	80095cc <__malloc_unlock>
 800956e:	f104 000b 	add.w	r0, r4, #11
 8009572:	1d23      	adds	r3, r4, #4
 8009574:	f020 0007 	bic.w	r0, r0, #7
 8009578:	1ac2      	subs	r2, r0, r3
 800957a:	bf1c      	itt	ne
 800957c:	1a1b      	subne	r3, r3, r0
 800957e:	50a3      	strne	r3, [r4, r2]
 8009580:	e7af      	b.n	80094e2 <_malloc_r+0x22>
 8009582:	6862      	ldr	r2, [r4, #4]
 8009584:	42a3      	cmp	r3, r4
 8009586:	bf0c      	ite	eq
 8009588:	f8c8 2000 	streq.w	r2, [r8]
 800958c:	605a      	strne	r2, [r3, #4]
 800958e:	e7eb      	b.n	8009568 <_malloc_r+0xa8>
 8009590:	4623      	mov	r3, r4
 8009592:	6864      	ldr	r4, [r4, #4]
 8009594:	e7ae      	b.n	80094f4 <_malloc_r+0x34>
 8009596:	463c      	mov	r4, r7
 8009598:	687f      	ldr	r7, [r7, #4]
 800959a:	e7b6      	b.n	800950a <_malloc_r+0x4a>
 800959c:	461a      	mov	r2, r3
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	42a3      	cmp	r3, r4
 80095a2:	d1fb      	bne.n	800959c <_malloc_r+0xdc>
 80095a4:	2300      	movs	r3, #0
 80095a6:	6053      	str	r3, [r2, #4]
 80095a8:	e7de      	b.n	8009568 <_malloc_r+0xa8>
 80095aa:	230c      	movs	r3, #12
 80095ac:	6033      	str	r3, [r6, #0]
 80095ae:	4630      	mov	r0, r6
 80095b0:	f000 f80c 	bl	80095cc <__malloc_unlock>
 80095b4:	e794      	b.n	80094e0 <_malloc_r+0x20>
 80095b6:	6005      	str	r5, [r0, #0]
 80095b8:	e7d6      	b.n	8009568 <_malloc_r+0xa8>
 80095ba:	bf00      	nop
 80095bc:	20004e20 	.word	0x20004e20

080095c0 <__malloc_lock>:
 80095c0:	4801      	ldr	r0, [pc, #4]	@ (80095c8 <__malloc_lock+0x8>)
 80095c2:	f7ff b89e 	b.w	8008702 <__retarget_lock_acquire_recursive>
 80095c6:	bf00      	nop
 80095c8:	20004e18 	.word	0x20004e18

080095cc <__malloc_unlock>:
 80095cc:	4801      	ldr	r0, [pc, #4]	@ (80095d4 <__malloc_unlock+0x8>)
 80095ce:	f7ff b899 	b.w	8008704 <__retarget_lock_release_recursive>
 80095d2:	bf00      	nop
 80095d4:	20004e18 	.word	0x20004e18

080095d8 <_Balloc>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	69c6      	ldr	r6, [r0, #28]
 80095dc:	4604      	mov	r4, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	b976      	cbnz	r6, 8009600 <_Balloc+0x28>
 80095e2:	2010      	movs	r0, #16
 80095e4:	f7ff ff42 	bl	800946c <malloc>
 80095e8:	4602      	mov	r2, r0
 80095ea:	61e0      	str	r0, [r4, #28]
 80095ec:	b920      	cbnz	r0, 80095f8 <_Balloc+0x20>
 80095ee:	4b18      	ldr	r3, [pc, #96]	@ (8009650 <_Balloc+0x78>)
 80095f0:	4818      	ldr	r0, [pc, #96]	@ (8009654 <_Balloc+0x7c>)
 80095f2:	216b      	movs	r1, #107	@ 0x6b
 80095f4:	f000 fd98 	bl	800a128 <__assert_func>
 80095f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095fc:	6006      	str	r6, [r0, #0]
 80095fe:	60c6      	str	r6, [r0, #12]
 8009600:	69e6      	ldr	r6, [r4, #28]
 8009602:	68f3      	ldr	r3, [r6, #12]
 8009604:	b183      	cbz	r3, 8009628 <_Balloc+0x50>
 8009606:	69e3      	ldr	r3, [r4, #28]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800960e:	b9b8      	cbnz	r0, 8009640 <_Balloc+0x68>
 8009610:	2101      	movs	r1, #1
 8009612:	fa01 f605 	lsl.w	r6, r1, r5
 8009616:	1d72      	adds	r2, r6, #5
 8009618:	0092      	lsls	r2, r2, #2
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fda2 	bl	800a164 <_calloc_r>
 8009620:	b160      	cbz	r0, 800963c <_Balloc+0x64>
 8009622:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009626:	e00e      	b.n	8009646 <_Balloc+0x6e>
 8009628:	2221      	movs	r2, #33	@ 0x21
 800962a:	2104      	movs	r1, #4
 800962c:	4620      	mov	r0, r4
 800962e:	f000 fd99 	bl	800a164 <_calloc_r>
 8009632:	69e3      	ldr	r3, [r4, #28]
 8009634:	60f0      	str	r0, [r6, #12]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e4      	bne.n	8009606 <_Balloc+0x2e>
 800963c:	2000      	movs	r0, #0
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	6802      	ldr	r2, [r0, #0]
 8009642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009646:	2300      	movs	r3, #0
 8009648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800964c:	e7f7      	b.n	800963e <_Balloc+0x66>
 800964e:	bf00      	nop
 8009650:	0800a8fd 	.word	0x0800a8fd
 8009654:	0800a97d 	.word	0x0800a97d

08009658 <_Bfree>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	69c6      	ldr	r6, [r0, #28]
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
 8009660:	b976      	cbnz	r6, 8009680 <_Bfree+0x28>
 8009662:	2010      	movs	r0, #16
 8009664:	f7ff ff02 	bl	800946c <malloc>
 8009668:	4602      	mov	r2, r0
 800966a:	61e8      	str	r0, [r5, #28]
 800966c:	b920      	cbnz	r0, 8009678 <_Bfree+0x20>
 800966e:	4b09      	ldr	r3, [pc, #36]	@ (8009694 <_Bfree+0x3c>)
 8009670:	4809      	ldr	r0, [pc, #36]	@ (8009698 <_Bfree+0x40>)
 8009672:	218f      	movs	r1, #143	@ 0x8f
 8009674:	f000 fd58 	bl	800a128 <__assert_func>
 8009678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800967c:	6006      	str	r6, [r0, #0]
 800967e:	60c6      	str	r6, [r0, #12]
 8009680:	b13c      	cbz	r4, 8009692 <_Bfree+0x3a>
 8009682:	69eb      	ldr	r3, [r5, #28]
 8009684:	6862      	ldr	r2, [r4, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800968c:	6021      	str	r1, [r4, #0]
 800968e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009692:	bd70      	pop	{r4, r5, r6, pc}
 8009694:	0800a8fd 	.word	0x0800a8fd
 8009698:	0800a97d 	.word	0x0800a97d

0800969c <__multadd>:
 800969c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a0:	690d      	ldr	r5, [r1, #16]
 80096a2:	4607      	mov	r7, r0
 80096a4:	460c      	mov	r4, r1
 80096a6:	461e      	mov	r6, r3
 80096a8:	f101 0c14 	add.w	ip, r1, #20
 80096ac:	2000      	movs	r0, #0
 80096ae:	f8dc 3000 	ldr.w	r3, [ip]
 80096b2:	b299      	uxth	r1, r3
 80096b4:	fb02 6101 	mla	r1, r2, r1, r6
 80096b8:	0c1e      	lsrs	r6, r3, #16
 80096ba:	0c0b      	lsrs	r3, r1, #16
 80096bc:	fb02 3306 	mla	r3, r2, r6, r3
 80096c0:	b289      	uxth	r1, r1
 80096c2:	3001      	adds	r0, #1
 80096c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096c8:	4285      	cmp	r5, r0
 80096ca:	f84c 1b04 	str.w	r1, [ip], #4
 80096ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096d2:	dcec      	bgt.n	80096ae <__multadd+0x12>
 80096d4:	b30e      	cbz	r6, 800971a <__multadd+0x7e>
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dc19      	bgt.n	8009710 <__multadd+0x74>
 80096dc:	6861      	ldr	r1, [r4, #4]
 80096de:	4638      	mov	r0, r7
 80096e0:	3101      	adds	r1, #1
 80096e2:	f7ff ff79 	bl	80095d8 <_Balloc>
 80096e6:	4680      	mov	r8, r0
 80096e8:	b928      	cbnz	r0, 80096f6 <__multadd+0x5a>
 80096ea:	4602      	mov	r2, r0
 80096ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009720 <__multadd+0x84>)
 80096ee:	480d      	ldr	r0, [pc, #52]	@ (8009724 <__multadd+0x88>)
 80096f0:	21ba      	movs	r1, #186	@ 0xba
 80096f2:	f000 fd19 	bl	800a128 <__assert_func>
 80096f6:	6922      	ldr	r2, [r4, #16]
 80096f8:	3202      	adds	r2, #2
 80096fa:	f104 010c 	add.w	r1, r4, #12
 80096fe:	0092      	lsls	r2, r2, #2
 8009700:	300c      	adds	r0, #12
 8009702:	f7ff f800 	bl	8008706 <memcpy>
 8009706:	4621      	mov	r1, r4
 8009708:	4638      	mov	r0, r7
 800970a:	f7ff ffa5 	bl	8009658 <_Bfree>
 800970e:	4644      	mov	r4, r8
 8009710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009714:	3501      	adds	r5, #1
 8009716:	615e      	str	r6, [r3, #20]
 8009718:	6125      	str	r5, [r4, #16]
 800971a:	4620      	mov	r0, r4
 800971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009720:	0800a96c 	.word	0x0800a96c
 8009724:	0800a97d 	.word	0x0800a97d

08009728 <__hi0bits>:
 8009728:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800972c:	4603      	mov	r3, r0
 800972e:	bf36      	itet	cc
 8009730:	0403      	lslcc	r3, r0, #16
 8009732:	2000      	movcs	r0, #0
 8009734:	2010      	movcc	r0, #16
 8009736:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800973a:	bf3c      	itt	cc
 800973c:	021b      	lslcc	r3, r3, #8
 800973e:	3008      	addcc	r0, #8
 8009740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009744:	bf3c      	itt	cc
 8009746:	011b      	lslcc	r3, r3, #4
 8009748:	3004      	addcc	r0, #4
 800974a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800974e:	bf3c      	itt	cc
 8009750:	009b      	lslcc	r3, r3, #2
 8009752:	3002      	addcc	r0, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	db05      	blt.n	8009764 <__hi0bits+0x3c>
 8009758:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800975c:	f100 0001 	add.w	r0, r0, #1
 8009760:	bf08      	it	eq
 8009762:	2020      	moveq	r0, #32
 8009764:	4770      	bx	lr

08009766 <__lo0bits>:
 8009766:	6803      	ldr	r3, [r0, #0]
 8009768:	4602      	mov	r2, r0
 800976a:	f013 0007 	ands.w	r0, r3, #7
 800976e:	d00b      	beq.n	8009788 <__lo0bits+0x22>
 8009770:	07d9      	lsls	r1, r3, #31
 8009772:	d421      	bmi.n	80097b8 <__lo0bits+0x52>
 8009774:	0798      	lsls	r0, r3, #30
 8009776:	bf49      	itett	mi
 8009778:	085b      	lsrmi	r3, r3, #1
 800977a:	089b      	lsrpl	r3, r3, #2
 800977c:	2001      	movmi	r0, #1
 800977e:	6013      	strmi	r3, [r2, #0]
 8009780:	bf5c      	itt	pl
 8009782:	6013      	strpl	r3, [r2, #0]
 8009784:	2002      	movpl	r0, #2
 8009786:	4770      	bx	lr
 8009788:	b299      	uxth	r1, r3
 800978a:	b909      	cbnz	r1, 8009790 <__lo0bits+0x2a>
 800978c:	0c1b      	lsrs	r3, r3, #16
 800978e:	2010      	movs	r0, #16
 8009790:	b2d9      	uxtb	r1, r3
 8009792:	b909      	cbnz	r1, 8009798 <__lo0bits+0x32>
 8009794:	3008      	adds	r0, #8
 8009796:	0a1b      	lsrs	r3, r3, #8
 8009798:	0719      	lsls	r1, r3, #28
 800979a:	bf04      	itt	eq
 800979c:	091b      	lsreq	r3, r3, #4
 800979e:	3004      	addeq	r0, #4
 80097a0:	0799      	lsls	r1, r3, #30
 80097a2:	bf04      	itt	eq
 80097a4:	089b      	lsreq	r3, r3, #2
 80097a6:	3002      	addeq	r0, #2
 80097a8:	07d9      	lsls	r1, r3, #31
 80097aa:	d403      	bmi.n	80097b4 <__lo0bits+0x4e>
 80097ac:	085b      	lsrs	r3, r3, #1
 80097ae:	f100 0001 	add.w	r0, r0, #1
 80097b2:	d003      	beq.n	80097bc <__lo0bits+0x56>
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	4770      	bx	lr
 80097b8:	2000      	movs	r0, #0
 80097ba:	4770      	bx	lr
 80097bc:	2020      	movs	r0, #32
 80097be:	4770      	bx	lr

080097c0 <__i2b>:
 80097c0:	b510      	push	{r4, lr}
 80097c2:	460c      	mov	r4, r1
 80097c4:	2101      	movs	r1, #1
 80097c6:	f7ff ff07 	bl	80095d8 <_Balloc>
 80097ca:	4602      	mov	r2, r0
 80097cc:	b928      	cbnz	r0, 80097da <__i2b+0x1a>
 80097ce:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <__i2b+0x24>)
 80097d0:	4805      	ldr	r0, [pc, #20]	@ (80097e8 <__i2b+0x28>)
 80097d2:	f240 1145 	movw	r1, #325	@ 0x145
 80097d6:	f000 fca7 	bl	800a128 <__assert_func>
 80097da:	2301      	movs	r3, #1
 80097dc:	6144      	str	r4, [r0, #20]
 80097de:	6103      	str	r3, [r0, #16]
 80097e0:	bd10      	pop	{r4, pc}
 80097e2:	bf00      	nop
 80097e4:	0800a96c 	.word	0x0800a96c
 80097e8:	0800a97d 	.word	0x0800a97d

080097ec <__multiply>:
 80097ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f0:	4617      	mov	r7, r2
 80097f2:	690a      	ldr	r2, [r1, #16]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	bfa8      	it	ge
 80097fa:	463b      	movge	r3, r7
 80097fc:	4689      	mov	r9, r1
 80097fe:	bfa4      	itt	ge
 8009800:	460f      	movge	r7, r1
 8009802:	4699      	movge	r9, r3
 8009804:	693d      	ldr	r5, [r7, #16]
 8009806:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6879      	ldr	r1, [r7, #4]
 800980e:	eb05 060a 	add.w	r6, r5, sl
 8009812:	42b3      	cmp	r3, r6
 8009814:	b085      	sub	sp, #20
 8009816:	bfb8      	it	lt
 8009818:	3101      	addlt	r1, #1
 800981a:	f7ff fedd 	bl	80095d8 <_Balloc>
 800981e:	b930      	cbnz	r0, 800982e <__multiply+0x42>
 8009820:	4602      	mov	r2, r0
 8009822:	4b41      	ldr	r3, [pc, #260]	@ (8009928 <__multiply+0x13c>)
 8009824:	4841      	ldr	r0, [pc, #260]	@ (800992c <__multiply+0x140>)
 8009826:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800982a:	f000 fc7d 	bl	800a128 <__assert_func>
 800982e:	f100 0414 	add.w	r4, r0, #20
 8009832:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009836:	4623      	mov	r3, r4
 8009838:	2200      	movs	r2, #0
 800983a:	4573      	cmp	r3, lr
 800983c:	d320      	bcc.n	8009880 <__multiply+0x94>
 800983e:	f107 0814 	add.w	r8, r7, #20
 8009842:	f109 0114 	add.w	r1, r9, #20
 8009846:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800984a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800984e:	9302      	str	r3, [sp, #8]
 8009850:	1beb      	subs	r3, r5, r7
 8009852:	3b15      	subs	r3, #21
 8009854:	f023 0303 	bic.w	r3, r3, #3
 8009858:	3304      	adds	r3, #4
 800985a:	3715      	adds	r7, #21
 800985c:	42bd      	cmp	r5, r7
 800985e:	bf38      	it	cc
 8009860:	2304      	movcc	r3, #4
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	9b02      	ldr	r3, [sp, #8]
 8009866:	9103      	str	r1, [sp, #12]
 8009868:	428b      	cmp	r3, r1
 800986a:	d80c      	bhi.n	8009886 <__multiply+0x9a>
 800986c:	2e00      	cmp	r6, #0
 800986e:	dd03      	ble.n	8009878 <__multiply+0x8c>
 8009870:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009874:	2b00      	cmp	r3, #0
 8009876:	d055      	beq.n	8009924 <__multiply+0x138>
 8009878:	6106      	str	r6, [r0, #16]
 800987a:	b005      	add	sp, #20
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009880:	f843 2b04 	str.w	r2, [r3], #4
 8009884:	e7d9      	b.n	800983a <__multiply+0x4e>
 8009886:	f8b1 a000 	ldrh.w	sl, [r1]
 800988a:	f1ba 0f00 	cmp.w	sl, #0
 800988e:	d01f      	beq.n	80098d0 <__multiply+0xe4>
 8009890:	46c4      	mov	ip, r8
 8009892:	46a1      	mov	r9, r4
 8009894:	2700      	movs	r7, #0
 8009896:	f85c 2b04 	ldr.w	r2, [ip], #4
 800989a:	f8d9 3000 	ldr.w	r3, [r9]
 800989e:	fa1f fb82 	uxth.w	fp, r2
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80098a8:	443b      	add	r3, r7
 80098aa:	f8d9 7000 	ldr.w	r7, [r9]
 80098ae:	0c12      	lsrs	r2, r2, #16
 80098b0:	0c3f      	lsrs	r7, r7, #16
 80098b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80098b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098c0:	4565      	cmp	r5, ip
 80098c2:	f849 3b04 	str.w	r3, [r9], #4
 80098c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80098ca:	d8e4      	bhi.n	8009896 <__multiply+0xaa>
 80098cc:	9b01      	ldr	r3, [sp, #4]
 80098ce:	50e7      	str	r7, [r4, r3]
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80098d6:	3104      	adds	r1, #4
 80098d8:	f1b9 0f00 	cmp.w	r9, #0
 80098dc:	d020      	beq.n	8009920 <__multiply+0x134>
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	4647      	mov	r7, r8
 80098e2:	46a4      	mov	ip, r4
 80098e4:	f04f 0a00 	mov.w	sl, #0
 80098e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80098ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80098f0:	fb09 220b 	mla	r2, r9, fp, r2
 80098f4:	4452      	add	r2, sl
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098fc:	f84c 3b04 	str.w	r3, [ip], #4
 8009900:	f857 3b04 	ldr.w	r3, [r7], #4
 8009904:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009908:	f8bc 3000 	ldrh.w	r3, [ip]
 800990c:	fb09 330a 	mla	r3, r9, sl, r3
 8009910:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009914:	42bd      	cmp	r5, r7
 8009916:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800991a:	d8e5      	bhi.n	80098e8 <__multiply+0xfc>
 800991c:	9a01      	ldr	r2, [sp, #4]
 800991e:	50a3      	str	r3, [r4, r2]
 8009920:	3404      	adds	r4, #4
 8009922:	e79f      	b.n	8009864 <__multiply+0x78>
 8009924:	3e01      	subs	r6, #1
 8009926:	e7a1      	b.n	800986c <__multiply+0x80>
 8009928:	0800a96c 	.word	0x0800a96c
 800992c:	0800a97d 	.word	0x0800a97d

08009930 <__pow5mult>:
 8009930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009934:	4615      	mov	r5, r2
 8009936:	f012 0203 	ands.w	r2, r2, #3
 800993a:	4607      	mov	r7, r0
 800993c:	460e      	mov	r6, r1
 800993e:	d007      	beq.n	8009950 <__pow5mult+0x20>
 8009940:	4c25      	ldr	r4, [pc, #148]	@ (80099d8 <__pow5mult+0xa8>)
 8009942:	3a01      	subs	r2, #1
 8009944:	2300      	movs	r3, #0
 8009946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800994a:	f7ff fea7 	bl	800969c <__multadd>
 800994e:	4606      	mov	r6, r0
 8009950:	10ad      	asrs	r5, r5, #2
 8009952:	d03d      	beq.n	80099d0 <__pow5mult+0xa0>
 8009954:	69fc      	ldr	r4, [r7, #28]
 8009956:	b97c      	cbnz	r4, 8009978 <__pow5mult+0x48>
 8009958:	2010      	movs	r0, #16
 800995a:	f7ff fd87 	bl	800946c <malloc>
 800995e:	4602      	mov	r2, r0
 8009960:	61f8      	str	r0, [r7, #28]
 8009962:	b928      	cbnz	r0, 8009970 <__pow5mult+0x40>
 8009964:	4b1d      	ldr	r3, [pc, #116]	@ (80099dc <__pow5mult+0xac>)
 8009966:	481e      	ldr	r0, [pc, #120]	@ (80099e0 <__pow5mult+0xb0>)
 8009968:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800996c:	f000 fbdc 	bl	800a128 <__assert_func>
 8009970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009974:	6004      	str	r4, [r0, #0]
 8009976:	60c4      	str	r4, [r0, #12]
 8009978:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800997c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009980:	b94c      	cbnz	r4, 8009996 <__pow5mult+0x66>
 8009982:	f240 2171 	movw	r1, #625	@ 0x271
 8009986:	4638      	mov	r0, r7
 8009988:	f7ff ff1a 	bl	80097c0 <__i2b>
 800998c:	2300      	movs	r3, #0
 800998e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009992:	4604      	mov	r4, r0
 8009994:	6003      	str	r3, [r0, #0]
 8009996:	f04f 0900 	mov.w	r9, #0
 800999a:	07eb      	lsls	r3, r5, #31
 800999c:	d50a      	bpl.n	80099b4 <__pow5mult+0x84>
 800999e:	4631      	mov	r1, r6
 80099a0:	4622      	mov	r2, r4
 80099a2:	4638      	mov	r0, r7
 80099a4:	f7ff ff22 	bl	80097ec <__multiply>
 80099a8:	4631      	mov	r1, r6
 80099aa:	4680      	mov	r8, r0
 80099ac:	4638      	mov	r0, r7
 80099ae:	f7ff fe53 	bl	8009658 <_Bfree>
 80099b2:	4646      	mov	r6, r8
 80099b4:	106d      	asrs	r5, r5, #1
 80099b6:	d00b      	beq.n	80099d0 <__pow5mult+0xa0>
 80099b8:	6820      	ldr	r0, [r4, #0]
 80099ba:	b938      	cbnz	r0, 80099cc <__pow5mult+0x9c>
 80099bc:	4622      	mov	r2, r4
 80099be:	4621      	mov	r1, r4
 80099c0:	4638      	mov	r0, r7
 80099c2:	f7ff ff13 	bl	80097ec <__multiply>
 80099c6:	6020      	str	r0, [r4, #0]
 80099c8:	f8c0 9000 	str.w	r9, [r0]
 80099cc:	4604      	mov	r4, r0
 80099ce:	e7e4      	b.n	800999a <__pow5mult+0x6a>
 80099d0:	4630      	mov	r0, r6
 80099d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d6:	bf00      	nop
 80099d8:	0800aa30 	.word	0x0800aa30
 80099dc:	0800a8fd 	.word	0x0800a8fd
 80099e0:	0800a97d 	.word	0x0800a97d

080099e4 <__lshift>:
 80099e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e8:	460c      	mov	r4, r1
 80099ea:	6849      	ldr	r1, [r1, #4]
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099f2:	68a3      	ldr	r3, [r4, #8]
 80099f4:	4607      	mov	r7, r0
 80099f6:	4691      	mov	r9, r2
 80099f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099fc:	f108 0601 	add.w	r6, r8, #1
 8009a00:	42b3      	cmp	r3, r6
 8009a02:	db0b      	blt.n	8009a1c <__lshift+0x38>
 8009a04:	4638      	mov	r0, r7
 8009a06:	f7ff fde7 	bl	80095d8 <_Balloc>
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	b948      	cbnz	r0, 8009a22 <__lshift+0x3e>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	4b28      	ldr	r3, [pc, #160]	@ (8009ab4 <__lshift+0xd0>)
 8009a12:	4829      	ldr	r0, [pc, #164]	@ (8009ab8 <__lshift+0xd4>)
 8009a14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a18:	f000 fb86 	bl	800a128 <__assert_func>
 8009a1c:	3101      	adds	r1, #1
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	e7ee      	b.n	8009a00 <__lshift+0x1c>
 8009a22:	2300      	movs	r3, #0
 8009a24:	f100 0114 	add.w	r1, r0, #20
 8009a28:	f100 0210 	add.w	r2, r0, #16
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	4553      	cmp	r3, sl
 8009a30:	db33      	blt.n	8009a9a <__lshift+0xb6>
 8009a32:	6920      	ldr	r0, [r4, #16]
 8009a34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a38:	f104 0314 	add.w	r3, r4, #20
 8009a3c:	f019 091f 	ands.w	r9, r9, #31
 8009a40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a48:	d02b      	beq.n	8009aa2 <__lshift+0xbe>
 8009a4a:	f1c9 0e20 	rsb	lr, r9, #32
 8009a4e:	468a      	mov	sl, r1
 8009a50:	2200      	movs	r2, #0
 8009a52:	6818      	ldr	r0, [r3, #0]
 8009a54:	fa00 f009 	lsl.w	r0, r0, r9
 8009a58:	4310      	orrs	r0, r2
 8009a5a:	f84a 0b04 	str.w	r0, [sl], #4
 8009a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a62:	459c      	cmp	ip, r3
 8009a64:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a68:	d8f3      	bhi.n	8009a52 <__lshift+0x6e>
 8009a6a:	ebac 0304 	sub.w	r3, ip, r4
 8009a6e:	3b15      	subs	r3, #21
 8009a70:	f023 0303 	bic.w	r3, r3, #3
 8009a74:	3304      	adds	r3, #4
 8009a76:	f104 0015 	add.w	r0, r4, #21
 8009a7a:	4560      	cmp	r0, ip
 8009a7c:	bf88      	it	hi
 8009a7e:	2304      	movhi	r3, #4
 8009a80:	50ca      	str	r2, [r1, r3]
 8009a82:	b10a      	cbz	r2, 8009a88 <__lshift+0xa4>
 8009a84:	f108 0602 	add.w	r6, r8, #2
 8009a88:	3e01      	subs	r6, #1
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	612e      	str	r6, [r5, #16]
 8009a8e:	4621      	mov	r1, r4
 8009a90:	f7ff fde2 	bl	8009658 <_Bfree>
 8009a94:	4628      	mov	r0, r5
 8009a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	e7c5      	b.n	8009a2e <__lshift+0x4a>
 8009aa2:	3904      	subs	r1, #4
 8009aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aa8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009aac:	459c      	cmp	ip, r3
 8009aae:	d8f9      	bhi.n	8009aa4 <__lshift+0xc0>
 8009ab0:	e7ea      	b.n	8009a88 <__lshift+0xa4>
 8009ab2:	bf00      	nop
 8009ab4:	0800a96c 	.word	0x0800a96c
 8009ab8:	0800a97d 	.word	0x0800a97d

08009abc <__mcmp>:
 8009abc:	690a      	ldr	r2, [r1, #16]
 8009abe:	4603      	mov	r3, r0
 8009ac0:	6900      	ldr	r0, [r0, #16]
 8009ac2:	1a80      	subs	r0, r0, r2
 8009ac4:	b530      	push	{r4, r5, lr}
 8009ac6:	d10e      	bne.n	8009ae6 <__mcmp+0x2a>
 8009ac8:	3314      	adds	r3, #20
 8009aca:	3114      	adds	r1, #20
 8009acc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ad0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ad4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ad8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009adc:	4295      	cmp	r5, r2
 8009ade:	d003      	beq.n	8009ae8 <__mcmp+0x2c>
 8009ae0:	d205      	bcs.n	8009aee <__mcmp+0x32>
 8009ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae6:	bd30      	pop	{r4, r5, pc}
 8009ae8:	42a3      	cmp	r3, r4
 8009aea:	d3f3      	bcc.n	8009ad4 <__mcmp+0x18>
 8009aec:	e7fb      	b.n	8009ae6 <__mcmp+0x2a>
 8009aee:	2001      	movs	r0, #1
 8009af0:	e7f9      	b.n	8009ae6 <__mcmp+0x2a>
	...

08009af4 <__mdiff>:
 8009af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af8:	4689      	mov	r9, r1
 8009afa:	4606      	mov	r6, r0
 8009afc:	4611      	mov	r1, r2
 8009afe:	4648      	mov	r0, r9
 8009b00:	4614      	mov	r4, r2
 8009b02:	f7ff ffdb 	bl	8009abc <__mcmp>
 8009b06:	1e05      	subs	r5, r0, #0
 8009b08:	d112      	bne.n	8009b30 <__mdiff+0x3c>
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	f7ff fd63 	bl	80095d8 <_Balloc>
 8009b12:	4602      	mov	r2, r0
 8009b14:	b928      	cbnz	r0, 8009b22 <__mdiff+0x2e>
 8009b16:	4b3f      	ldr	r3, [pc, #252]	@ (8009c14 <__mdiff+0x120>)
 8009b18:	f240 2137 	movw	r1, #567	@ 0x237
 8009b1c:	483e      	ldr	r0, [pc, #248]	@ (8009c18 <__mdiff+0x124>)
 8009b1e:	f000 fb03 	bl	800a128 <__assert_func>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b28:	4610      	mov	r0, r2
 8009b2a:	b003      	add	sp, #12
 8009b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b30:	bfbc      	itt	lt
 8009b32:	464b      	movlt	r3, r9
 8009b34:	46a1      	movlt	r9, r4
 8009b36:	4630      	mov	r0, r6
 8009b38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b3c:	bfba      	itte	lt
 8009b3e:	461c      	movlt	r4, r3
 8009b40:	2501      	movlt	r5, #1
 8009b42:	2500      	movge	r5, #0
 8009b44:	f7ff fd48 	bl	80095d8 <_Balloc>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	b918      	cbnz	r0, 8009b54 <__mdiff+0x60>
 8009b4c:	4b31      	ldr	r3, [pc, #196]	@ (8009c14 <__mdiff+0x120>)
 8009b4e:	f240 2145 	movw	r1, #581	@ 0x245
 8009b52:	e7e3      	b.n	8009b1c <__mdiff+0x28>
 8009b54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b58:	6926      	ldr	r6, [r4, #16]
 8009b5a:	60c5      	str	r5, [r0, #12]
 8009b5c:	f109 0310 	add.w	r3, r9, #16
 8009b60:	f109 0514 	add.w	r5, r9, #20
 8009b64:	f104 0e14 	add.w	lr, r4, #20
 8009b68:	f100 0b14 	add.w	fp, r0, #20
 8009b6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	46d9      	mov	r9, fp
 8009b78:	f04f 0c00 	mov.w	ip, #0
 8009b7c:	9b01      	ldr	r3, [sp, #4]
 8009b7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b86:	9301      	str	r3, [sp, #4]
 8009b88:	fa1f f38a 	uxth.w	r3, sl
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	b283      	uxth	r3, r0
 8009b90:	1acb      	subs	r3, r1, r3
 8009b92:	0c00      	lsrs	r0, r0, #16
 8009b94:	4463      	add	r3, ip
 8009b96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ba4:	4576      	cmp	r6, lr
 8009ba6:	f849 3b04 	str.w	r3, [r9], #4
 8009baa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bae:	d8e5      	bhi.n	8009b7c <__mdiff+0x88>
 8009bb0:	1b33      	subs	r3, r6, r4
 8009bb2:	3b15      	subs	r3, #21
 8009bb4:	f023 0303 	bic.w	r3, r3, #3
 8009bb8:	3415      	adds	r4, #21
 8009bba:	3304      	adds	r3, #4
 8009bbc:	42a6      	cmp	r6, r4
 8009bbe:	bf38      	it	cc
 8009bc0:	2304      	movcc	r3, #4
 8009bc2:	441d      	add	r5, r3
 8009bc4:	445b      	add	r3, fp
 8009bc6:	461e      	mov	r6, r3
 8009bc8:	462c      	mov	r4, r5
 8009bca:	4544      	cmp	r4, r8
 8009bcc:	d30e      	bcc.n	8009bec <__mdiff+0xf8>
 8009bce:	f108 0103 	add.w	r1, r8, #3
 8009bd2:	1b49      	subs	r1, r1, r5
 8009bd4:	f021 0103 	bic.w	r1, r1, #3
 8009bd8:	3d03      	subs	r5, #3
 8009bda:	45a8      	cmp	r8, r5
 8009bdc:	bf38      	it	cc
 8009bde:	2100      	movcc	r1, #0
 8009be0:	440b      	add	r3, r1
 8009be2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009be6:	b191      	cbz	r1, 8009c0e <__mdiff+0x11a>
 8009be8:	6117      	str	r7, [r2, #16]
 8009bea:	e79d      	b.n	8009b28 <__mdiff+0x34>
 8009bec:	f854 1b04 	ldr.w	r1, [r4], #4
 8009bf0:	46e6      	mov	lr, ip
 8009bf2:	0c08      	lsrs	r0, r1, #16
 8009bf4:	fa1c fc81 	uxtah	ip, ip, r1
 8009bf8:	4471      	add	r1, lr
 8009bfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009bfe:	b289      	uxth	r1, r1
 8009c00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c04:	f846 1b04 	str.w	r1, [r6], #4
 8009c08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c0c:	e7dd      	b.n	8009bca <__mdiff+0xd6>
 8009c0e:	3f01      	subs	r7, #1
 8009c10:	e7e7      	b.n	8009be2 <__mdiff+0xee>
 8009c12:	bf00      	nop
 8009c14:	0800a96c 	.word	0x0800a96c
 8009c18:	0800a97d 	.word	0x0800a97d

08009c1c <__d2b>:
 8009c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c20:	460f      	mov	r7, r1
 8009c22:	2101      	movs	r1, #1
 8009c24:	ec59 8b10 	vmov	r8, r9, d0
 8009c28:	4616      	mov	r6, r2
 8009c2a:	f7ff fcd5 	bl	80095d8 <_Balloc>
 8009c2e:	4604      	mov	r4, r0
 8009c30:	b930      	cbnz	r0, 8009c40 <__d2b+0x24>
 8009c32:	4602      	mov	r2, r0
 8009c34:	4b23      	ldr	r3, [pc, #140]	@ (8009cc4 <__d2b+0xa8>)
 8009c36:	4824      	ldr	r0, [pc, #144]	@ (8009cc8 <__d2b+0xac>)
 8009c38:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c3c:	f000 fa74 	bl	800a128 <__assert_func>
 8009c40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c48:	b10d      	cbz	r5, 8009c4e <__d2b+0x32>
 8009c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	f1b8 0300 	subs.w	r3, r8, #0
 8009c54:	d023      	beq.n	8009c9e <__d2b+0x82>
 8009c56:	4668      	mov	r0, sp
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	f7ff fd84 	bl	8009766 <__lo0bits>
 8009c5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c62:	b1d0      	cbz	r0, 8009c9a <__d2b+0x7e>
 8009c64:	f1c0 0320 	rsb	r3, r0, #32
 8009c68:	fa02 f303 	lsl.w	r3, r2, r3
 8009c6c:	430b      	orrs	r3, r1
 8009c6e:	40c2      	lsrs	r2, r0
 8009c70:	6163      	str	r3, [r4, #20]
 8009c72:	9201      	str	r2, [sp, #4]
 8009c74:	9b01      	ldr	r3, [sp, #4]
 8009c76:	61a3      	str	r3, [r4, #24]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	bf0c      	ite	eq
 8009c7c:	2201      	moveq	r2, #1
 8009c7e:	2202      	movne	r2, #2
 8009c80:	6122      	str	r2, [r4, #16]
 8009c82:	b1a5      	cbz	r5, 8009cae <__d2b+0x92>
 8009c84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c88:	4405      	add	r5, r0
 8009c8a:	603d      	str	r5, [r7, #0]
 8009c8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c90:	6030      	str	r0, [r6, #0]
 8009c92:	4620      	mov	r0, r4
 8009c94:	b003      	add	sp, #12
 8009c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c9a:	6161      	str	r1, [r4, #20]
 8009c9c:	e7ea      	b.n	8009c74 <__d2b+0x58>
 8009c9e:	a801      	add	r0, sp, #4
 8009ca0:	f7ff fd61 	bl	8009766 <__lo0bits>
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	6163      	str	r3, [r4, #20]
 8009ca8:	3020      	adds	r0, #32
 8009caa:	2201      	movs	r2, #1
 8009cac:	e7e8      	b.n	8009c80 <__d2b+0x64>
 8009cae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009cb6:	6038      	str	r0, [r7, #0]
 8009cb8:	6918      	ldr	r0, [r3, #16]
 8009cba:	f7ff fd35 	bl	8009728 <__hi0bits>
 8009cbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cc2:	e7e5      	b.n	8009c90 <__d2b+0x74>
 8009cc4:	0800a96c 	.word	0x0800a96c
 8009cc8:	0800a97d 	.word	0x0800a97d

08009ccc <__ssputs_r>:
 8009ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd0:	688e      	ldr	r6, [r1, #8]
 8009cd2:	461f      	mov	r7, r3
 8009cd4:	42be      	cmp	r6, r7
 8009cd6:	680b      	ldr	r3, [r1, #0]
 8009cd8:	4682      	mov	sl, r0
 8009cda:	460c      	mov	r4, r1
 8009cdc:	4690      	mov	r8, r2
 8009cde:	d82d      	bhi.n	8009d3c <__ssputs_r+0x70>
 8009ce0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ce4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ce8:	d026      	beq.n	8009d38 <__ssputs_r+0x6c>
 8009cea:	6965      	ldr	r5, [r4, #20]
 8009cec:	6909      	ldr	r1, [r1, #16]
 8009cee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cf2:	eba3 0901 	sub.w	r9, r3, r1
 8009cf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cfa:	1c7b      	adds	r3, r7, #1
 8009cfc:	444b      	add	r3, r9
 8009cfe:	106d      	asrs	r5, r5, #1
 8009d00:	429d      	cmp	r5, r3
 8009d02:	bf38      	it	cc
 8009d04:	461d      	movcc	r5, r3
 8009d06:	0553      	lsls	r3, r2, #21
 8009d08:	d527      	bpl.n	8009d5a <__ssputs_r+0x8e>
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	f7ff fbd8 	bl	80094c0 <_malloc_r>
 8009d10:	4606      	mov	r6, r0
 8009d12:	b360      	cbz	r0, 8009d6e <__ssputs_r+0xa2>
 8009d14:	6921      	ldr	r1, [r4, #16]
 8009d16:	464a      	mov	r2, r9
 8009d18:	f7fe fcf5 	bl	8008706 <memcpy>
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d26:	81a3      	strh	r3, [r4, #12]
 8009d28:	6126      	str	r6, [r4, #16]
 8009d2a:	6165      	str	r5, [r4, #20]
 8009d2c:	444e      	add	r6, r9
 8009d2e:	eba5 0509 	sub.w	r5, r5, r9
 8009d32:	6026      	str	r6, [r4, #0]
 8009d34:	60a5      	str	r5, [r4, #8]
 8009d36:	463e      	mov	r6, r7
 8009d38:	42be      	cmp	r6, r7
 8009d3a:	d900      	bls.n	8009d3e <__ssputs_r+0x72>
 8009d3c:	463e      	mov	r6, r7
 8009d3e:	6820      	ldr	r0, [r4, #0]
 8009d40:	4632      	mov	r2, r6
 8009d42:	4641      	mov	r1, r8
 8009d44:	f000 f9c6 	bl	800a0d4 <memmove>
 8009d48:	68a3      	ldr	r3, [r4, #8]
 8009d4a:	1b9b      	subs	r3, r3, r6
 8009d4c:	60a3      	str	r3, [r4, #8]
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	4433      	add	r3, r6
 8009d52:	6023      	str	r3, [r4, #0]
 8009d54:	2000      	movs	r0, #0
 8009d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	f000 fa28 	bl	800a1b0 <_realloc_r>
 8009d60:	4606      	mov	r6, r0
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d1e0      	bne.n	8009d28 <__ssputs_r+0x5c>
 8009d66:	6921      	ldr	r1, [r4, #16]
 8009d68:	4650      	mov	r0, sl
 8009d6a:	f7ff fb35 	bl	80093d8 <_free_r>
 8009d6e:	230c      	movs	r3, #12
 8009d70:	f8ca 3000 	str.w	r3, [sl]
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d7a:	81a3      	strh	r3, [r4, #12]
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d80:	e7e9      	b.n	8009d56 <__ssputs_r+0x8a>
	...

08009d84 <_svfiprintf_r>:
 8009d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	4698      	mov	r8, r3
 8009d8a:	898b      	ldrh	r3, [r1, #12]
 8009d8c:	061b      	lsls	r3, r3, #24
 8009d8e:	b09d      	sub	sp, #116	@ 0x74
 8009d90:	4607      	mov	r7, r0
 8009d92:	460d      	mov	r5, r1
 8009d94:	4614      	mov	r4, r2
 8009d96:	d510      	bpl.n	8009dba <_svfiprintf_r+0x36>
 8009d98:	690b      	ldr	r3, [r1, #16]
 8009d9a:	b973      	cbnz	r3, 8009dba <_svfiprintf_r+0x36>
 8009d9c:	2140      	movs	r1, #64	@ 0x40
 8009d9e:	f7ff fb8f 	bl	80094c0 <_malloc_r>
 8009da2:	6028      	str	r0, [r5, #0]
 8009da4:	6128      	str	r0, [r5, #16]
 8009da6:	b930      	cbnz	r0, 8009db6 <_svfiprintf_r+0x32>
 8009da8:	230c      	movs	r3, #12
 8009daa:	603b      	str	r3, [r7, #0]
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
 8009db0:	b01d      	add	sp, #116	@ 0x74
 8009db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db6:	2340      	movs	r3, #64	@ 0x40
 8009db8:	616b      	str	r3, [r5, #20]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dbe:	2320      	movs	r3, #32
 8009dc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dc8:	2330      	movs	r3, #48	@ 0x30
 8009dca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f68 <_svfiprintf_r+0x1e4>
 8009dce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dd2:	f04f 0901 	mov.w	r9, #1
 8009dd6:	4623      	mov	r3, r4
 8009dd8:	469a      	mov	sl, r3
 8009dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dde:	b10a      	cbz	r2, 8009de4 <_svfiprintf_r+0x60>
 8009de0:	2a25      	cmp	r2, #37	@ 0x25
 8009de2:	d1f9      	bne.n	8009dd8 <_svfiprintf_r+0x54>
 8009de4:	ebba 0b04 	subs.w	fp, sl, r4
 8009de8:	d00b      	beq.n	8009e02 <_svfiprintf_r+0x7e>
 8009dea:	465b      	mov	r3, fp
 8009dec:	4622      	mov	r2, r4
 8009dee:	4629      	mov	r1, r5
 8009df0:	4638      	mov	r0, r7
 8009df2:	f7ff ff6b 	bl	8009ccc <__ssputs_r>
 8009df6:	3001      	adds	r0, #1
 8009df8:	f000 80a7 	beq.w	8009f4a <_svfiprintf_r+0x1c6>
 8009dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dfe:	445a      	add	r2, fp
 8009e00:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e02:	f89a 3000 	ldrb.w	r3, [sl]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 809f 	beq.w	8009f4a <_svfiprintf_r+0x1c6>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e16:	f10a 0a01 	add.w	sl, sl, #1
 8009e1a:	9304      	str	r3, [sp, #16]
 8009e1c:	9307      	str	r3, [sp, #28]
 8009e1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e22:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e24:	4654      	mov	r4, sl
 8009e26:	2205      	movs	r2, #5
 8009e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2c:	484e      	ldr	r0, [pc, #312]	@ (8009f68 <_svfiprintf_r+0x1e4>)
 8009e2e:	f7f6 f9ef 	bl	8000210 <memchr>
 8009e32:	9a04      	ldr	r2, [sp, #16]
 8009e34:	b9d8      	cbnz	r0, 8009e6e <_svfiprintf_r+0xea>
 8009e36:	06d0      	lsls	r0, r2, #27
 8009e38:	bf44      	itt	mi
 8009e3a:	2320      	movmi	r3, #32
 8009e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e40:	0711      	lsls	r1, r2, #28
 8009e42:	bf44      	itt	mi
 8009e44:	232b      	movmi	r3, #43	@ 0x2b
 8009e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e50:	d015      	beq.n	8009e7e <_svfiprintf_r+0xfa>
 8009e52:	9a07      	ldr	r2, [sp, #28]
 8009e54:	4654      	mov	r4, sl
 8009e56:	2000      	movs	r0, #0
 8009e58:	f04f 0c0a 	mov.w	ip, #10
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e62:	3b30      	subs	r3, #48	@ 0x30
 8009e64:	2b09      	cmp	r3, #9
 8009e66:	d94b      	bls.n	8009f00 <_svfiprintf_r+0x17c>
 8009e68:	b1b0      	cbz	r0, 8009e98 <_svfiprintf_r+0x114>
 8009e6a:	9207      	str	r2, [sp, #28]
 8009e6c:	e014      	b.n	8009e98 <_svfiprintf_r+0x114>
 8009e6e:	eba0 0308 	sub.w	r3, r0, r8
 8009e72:	fa09 f303 	lsl.w	r3, r9, r3
 8009e76:	4313      	orrs	r3, r2
 8009e78:	9304      	str	r3, [sp, #16]
 8009e7a:	46a2      	mov	sl, r4
 8009e7c:	e7d2      	b.n	8009e24 <_svfiprintf_r+0xa0>
 8009e7e:	9b03      	ldr	r3, [sp, #12]
 8009e80:	1d19      	adds	r1, r3, #4
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	9103      	str	r1, [sp, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	bfbb      	ittet	lt
 8009e8a:	425b      	neglt	r3, r3
 8009e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e90:	9307      	strge	r3, [sp, #28]
 8009e92:	9307      	strlt	r3, [sp, #28]
 8009e94:	bfb8      	it	lt
 8009e96:	9204      	strlt	r2, [sp, #16]
 8009e98:	7823      	ldrb	r3, [r4, #0]
 8009e9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e9c:	d10a      	bne.n	8009eb4 <_svfiprintf_r+0x130>
 8009e9e:	7863      	ldrb	r3, [r4, #1]
 8009ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ea2:	d132      	bne.n	8009f0a <_svfiprintf_r+0x186>
 8009ea4:	9b03      	ldr	r3, [sp, #12]
 8009ea6:	1d1a      	adds	r2, r3, #4
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	9203      	str	r2, [sp, #12]
 8009eac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009eb0:	3402      	adds	r4, #2
 8009eb2:	9305      	str	r3, [sp, #20]
 8009eb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f78 <_svfiprintf_r+0x1f4>
 8009eb8:	7821      	ldrb	r1, [r4, #0]
 8009eba:	2203      	movs	r2, #3
 8009ebc:	4650      	mov	r0, sl
 8009ebe:	f7f6 f9a7 	bl	8000210 <memchr>
 8009ec2:	b138      	cbz	r0, 8009ed4 <_svfiprintf_r+0x150>
 8009ec4:	9b04      	ldr	r3, [sp, #16]
 8009ec6:	eba0 000a 	sub.w	r0, r0, sl
 8009eca:	2240      	movs	r2, #64	@ 0x40
 8009ecc:	4082      	lsls	r2, r0
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	3401      	adds	r4, #1
 8009ed2:	9304      	str	r3, [sp, #16]
 8009ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed8:	4824      	ldr	r0, [pc, #144]	@ (8009f6c <_svfiprintf_r+0x1e8>)
 8009eda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ede:	2206      	movs	r2, #6
 8009ee0:	f7f6 f996 	bl	8000210 <memchr>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d036      	beq.n	8009f56 <_svfiprintf_r+0x1d2>
 8009ee8:	4b21      	ldr	r3, [pc, #132]	@ (8009f70 <_svfiprintf_r+0x1ec>)
 8009eea:	bb1b      	cbnz	r3, 8009f34 <_svfiprintf_r+0x1b0>
 8009eec:	9b03      	ldr	r3, [sp, #12]
 8009eee:	3307      	adds	r3, #7
 8009ef0:	f023 0307 	bic.w	r3, r3, #7
 8009ef4:	3308      	adds	r3, #8
 8009ef6:	9303      	str	r3, [sp, #12]
 8009ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009efa:	4433      	add	r3, r6
 8009efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009efe:	e76a      	b.n	8009dd6 <_svfiprintf_r+0x52>
 8009f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f04:	460c      	mov	r4, r1
 8009f06:	2001      	movs	r0, #1
 8009f08:	e7a8      	b.n	8009e5c <_svfiprintf_r+0xd8>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	3401      	adds	r4, #1
 8009f0e:	9305      	str	r3, [sp, #20]
 8009f10:	4619      	mov	r1, r3
 8009f12:	f04f 0c0a 	mov.w	ip, #10
 8009f16:	4620      	mov	r0, r4
 8009f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f1c:	3a30      	subs	r2, #48	@ 0x30
 8009f1e:	2a09      	cmp	r2, #9
 8009f20:	d903      	bls.n	8009f2a <_svfiprintf_r+0x1a6>
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0c6      	beq.n	8009eb4 <_svfiprintf_r+0x130>
 8009f26:	9105      	str	r1, [sp, #20]
 8009f28:	e7c4      	b.n	8009eb4 <_svfiprintf_r+0x130>
 8009f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f2e:	4604      	mov	r4, r0
 8009f30:	2301      	movs	r3, #1
 8009f32:	e7f0      	b.n	8009f16 <_svfiprintf_r+0x192>
 8009f34:	ab03      	add	r3, sp, #12
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	462a      	mov	r2, r5
 8009f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f74 <_svfiprintf_r+0x1f0>)
 8009f3c:	a904      	add	r1, sp, #16
 8009f3e:	4638      	mov	r0, r7
 8009f40:	f7fd fe12 	bl	8007b68 <_printf_float>
 8009f44:	1c42      	adds	r2, r0, #1
 8009f46:	4606      	mov	r6, r0
 8009f48:	d1d6      	bne.n	8009ef8 <_svfiprintf_r+0x174>
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	065b      	lsls	r3, r3, #25
 8009f4e:	f53f af2d 	bmi.w	8009dac <_svfiprintf_r+0x28>
 8009f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f54:	e72c      	b.n	8009db0 <_svfiprintf_r+0x2c>
 8009f56:	ab03      	add	r3, sp, #12
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	462a      	mov	r2, r5
 8009f5c:	4b05      	ldr	r3, [pc, #20]	@ (8009f74 <_svfiprintf_r+0x1f0>)
 8009f5e:	a904      	add	r1, sp, #16
 8009f60:	4638      	mov	r0, r7
 8009f62:	f7fe f899 	bl	8008098 <_printf_i>
 8009f66:	e7ed      	b.n	8009f44 <_svfiprintf_r+0x1c0>
 8009f68:	0800a9d6 	.word	0x0800a9d6
 8009f6c:	0800a9e0 	.word	0x0800a9e0
 8009f70:	08007b69 	.word	0x08007b69
 8009f74:	08009ccd 	.word	0x08009ccd
 8009f78:	0800a9dc 	.word	0x0800a9dc

08009f7c <__sflush_r>:
 8009f7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f84:	0716      	lsls	r6, r2, #28
 8009f86:	4605      	mov	r5, r0
 8009f88:	460c      	mov	r4, r1
 8009f8a:	d454      	bmi.n	800a036 <__sflush_r+0xba>
 8009f8c:	684b      	ldr	r3, [r1, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	dc02      	bgt.n	8009f98 <__sflush_r+0x1c>
 8009f92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dd48      	ble.n	800a02a <__sflush_r+0xae>
 8009f98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f9a:	2e00      	cmp	r6, #0
 8009f9c:	d045      	beq.n	800a02a <__sflush_r+0xae>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fa4:	682f      	ldr	r7, [r5, #0]
 8009fa6:	6a21      	ldr	r1, [r4, #32]
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	d030      	beq.n	800a00e <__sflush_r+0x92>
 8009fac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	0759      	lsls	r1, r3, #29
 8009fb2:	d505      	bpl.n	8009fc0 <__sflush_r+0x44>
 8009fb4:	6863      	ldr	r3, [r4, #4]
 8009fb6:	1ad2      	subs	r2, r2, r3
 8009fb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fba:	b10b      	cbz	r3, 8009fc0 <__sflush_r+0x44>
 8009fbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fbe:	1ad2      	subs	r2, r2, r3
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fc4:	6a21      	ldr	r1, [r4, #32]
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	47b0      	blx	r6
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	d106      	bne.n	8009fde <__sflush_r+0x62>
 8009fd0:	6829      	ldr	r1, [r5, #0]
 8009fd2:	291d      	cmp	r1, #29
 8009fd4:	d82b      	bhi.n	800a02e <__sflush_r+0xb2>
 8009fd6:	4a2a      	ldr	r2, [pc, #168]	@ (800a080 <__sflush_r+0x104>)
 8009fd8:	40ca      	lsrs	r2, r1
 8009fda:	07d6      	lsls	r6, r2, #31
 8009fdc:	d527      	bpl.n	800a02e <__sflush_r+0xb2>
 8009fde:	2200      	movs	r2, #0
 8009fe0:	6062      	str	r2, [r4, #4]
 8009fe2:	04d9      	lsls	r1, r3, #19
 8009fe4:	6922      	ldr	r2, [r4, #16]
 8009fe6:	6022      	str	r2, [r4, #0]
 8009fe8:	d504      	bpl.n	8009ff4 <__sflush_r+0x78>
 8009fea:	1c42      	adds	r2, r0, #1
 8009fec:	d101      	bne.n	8009ff2 <__sflush_r+0x76>
 8009fee:	682b      	ldr	r3, [r5, #0]
 8009ff0:	b903      	cbnz	r3, 8009ff4 <__sflush_r+0x78>
 8009ff2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ff6:	602f      	str	r7, [r5, #0]
 8009ff8:	b1b9      	cbz	r1, 800a02a <__sflush_r+0xae>
 8009ffa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ffe:	4299      	cmp	r1, r3
 800a000:	d002      	beq.n	800a008 <__sflush_r+0x8c>
 800a002:	4628      	mov	r0, r5
 800a004:	f7ff f9e8 	bl	80093d8 <_free_r>
 800a008:	2300      	movs	r3, #0
 800a00a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a00c:	e00d      	b.n	800a02a <__sflush_r+0xae>
 800a00e:	2301      	movs	r3, #1
 800a010:	4628      	mov	r0, r5
 800a012:	47b0      	blx	r6
 800a014:	4602      	mov	r2, r0
 800a016:	1c50      	adds	r0, r2, #1
 800a018:	d1c9      	bne.n	8009fae <__sflush_r+0x32>
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d0c6      	beq.n	8009fae <__sflush_r+0x32>
 800a020:	2b1d      	cmp	r3, #29
 800a022:	d001      	beq.n	800a028 <__sflush_r+0xac>
 800a024:	2b16      	cmp	r3, #22
 800a026:	d11e      	bne.n	800a066 <__sflush_r+0xea>
 800a028:	602f      	str	r7, [r5, #0]
 800a02a:	2000      	movs	r0, #0
 800a02c:	e022      	b.n	800a074 <__sflush_r+0xf8>
 800a02e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a032:	b21b      	sxth	r3, r3
 800a034:	e01b      	b.n	800a06e <__sflush_r+0xf2>
 800a036:	690f      	ldr	r7, [r1, #16]
 800a038:	2f00      	cmp	r7, #0
 800a03a:	d0f6      	beq.n	800a02a <__sflush_r+0xae>
 800a03c:	0793      	lsls	r3, r2, #30
 800a03e:	680e      	ldr	r6, [r1, #0]
 800a040:	bf08      	it	eq
 800a042:	694b      	ldreq	r3, [r1, #20]
 800a044:	600f      	str	r7, [r1, #0]
 800a046:	bf18      	it	ne
 800a048:	2300      	movne	r3, #0
 800a04a:	eba6 0807 	sub.w	r8, r6, r7
 800a04e:	608b      	str	r3, [r1, #8]
 800a050:	f1b8 0f00 	cmp.w	r8, #0
 800a054:	dde9      	ble.n	800a02a <__sflush_r+0xae>
 800a056:	6a21      	ldr	r1, [r4, #32]
 800a058:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a05a:	4643      	mov	r3, r8
 800a05c:	463a      	mov	r2, r7
 800a05e:	4628      	mov	r0, r5
 800a060:	47b0      	blx	r6
 800a062:	2800      	cmp	r0, #0
 800a064:	dc08      	bgt.n	800a078 <__sflush_r+0xfc>
 800a066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a06a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a06e:	81a3      	strh	r3, [r4, #12]
 800a070:	f04f 30ff 	mov.w	r0, #4294967295
 800a074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a078:	4407      	add	r7, r0
 800a07a:	eba8 0800 	sub.w	r8, r8, r0
 800a07e:	e7e7      	b.n	800a050 <__sflush_r+0xd4>
 800a080:	20400001 	.word	0x20400001

0800a084 <_fflush_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	690b      	ldr	r3, [r1, #16]
 800a088:	4605      	mov	r5, r0
 800a08a:	460c      	mov	r4, r1
 800a08c:	b913      	cbnz	r3, 800a094 <_fflush_r+0x10>
 800a08e:	2500      	movs	r5, #0
 800a090:	4628      	mov	r0, r5
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	b118      	cbz	r0, 800a09e <_fflush_r+0x1a>
 800a096:	6a03      	ldr	r3, [r0, #32]
 800a098:	b90b      	cbnz	r3, 800a09e <_fflush_r+0x1a>
 800a09a:	f7fe f9a7 	bl	80083ec <__sinit>
 800a09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0f3      	beq.n	800a08e <_fflush_r+0xa>
 800a0a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0a8:	07d0      	lsls	r0, r2, #31
 800a0aa:	d404      	bmi.n	800a0b6 <_fflush_r+0x32>
 800a0ac:	0599      	lsls	r1, r3, #22
 800a0ae:	d402      	bmi.n	800a0b6 <_fflush_r+0x32>
 800a0b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0b2:	f7fe fb26 	bl	8008702 <__retarget_lock_acquire_recursive>
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	f7ff ff5f 	bl	8009f7c <__sflush_r>
 800a0be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0c0:	07da      	lsls	r2, r3, #31
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	d4e4      	bmi.n	800a090 <_fflush_r+0xc>
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	059b      	lsls	r3, r3, #22
 800a0ca:	d4e1      	bmi.n	800a090 <_fflush_r+0xc>
 800a0cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0ce:	f7fe fb19 	bl	8008704 <__retarget_lock_release_recursive>
 800a0d2:	e7dd      	b.n	800a090 <_fflush_r+0xc>

0800a0d4 <memmove>:
 800a0d4:	4288      	cmp	r0, r1
 800a0d6:	b510      	push	{r4, lr}
 800a0d8:	eb01 0402 	add.w	r4, r1, r2
 800a0dc:	d902      	bls.n	800a0e4 <memmove+0x10>
 800a0de:	4284      	cmp	r4, r0
 800a0e0:	4623      	mov	r3, r4
 800a0e2:	d807      	bhi.n	800a0f4 <memmove+0x20>
 800a0e4:	1e43      	subs	r3, r0, #1
 800a0e6:	42a1      	cmp	r1, r4
 800a0e8:	d008      	beq.n	800a0fc <memmove+0x28>
 800a0ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0f2:	e7f8      	b.n	800a0e6 <memmove+0x12>
 800a0f4:	4402      	add	r2, r0
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	428a      	cmp	r2, r1
 800a0fa:	d100      	bne.n	800a0fe <memmove+0x2a>
 800a0fc:	bd10      	pop	{r4, pc}
 800a0fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a106:	e7f7      	b.n	800a0f8 <memmove+0x24>

0800a108 <_sbrk_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d06      	ldr	r5, [pc, #24]	@ (800a124 <_sbrk_r+0x1c>)
 800a10c:	2300      	movs	r3, #0
 800a10e:	4604      	mov	r4, r0
 800a110:	4608      	mov	r0, r1
 800a112:	602b      	str	r3, [r5, #0]
 800a114:	f7f7 fc18 	bl	8001948 <_sbrk>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_sbrk_r+0x1a>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_sbrk_r+0x1a>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	20004e14 	.word	0x20004e14

0800a128 <__assert_func>:
 800a128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a12a:	4614      	mov	r4, r2
 800a12c:	461a      	mov	r2, r3
 800a12e:	4b09      	ldr	r3, [pc, #36]	@ (800a154 <__assert_func+0x2c>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4605      	mov	r5, r0
 800a134:	68d8      	ldr	r0, [r3, #12]
 800a136:	b14c      	cbz	r4, 800a14c <__assert_func+0x24>
 800a138:	4b07      	ldr	r3, [pc, #28]	@ (800a158 <__assert_func+0x30>)
 800a13a:	9100      	str	r1, [sp, #0]
 800a13c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a140:	4906      	ldr	r1, [pc, #24]	@ (800a15c <__assert_func+0x34>)
 800a142:	462b      	mov	r3, r5
 800a144:	f000 f870 	bl	800a228 <fiprintf>
 800a148:	f000 f880 	bl	800a24c <abort>
 800a14c:	4b04      	ldr	r3, [pc, #16]	@ (800a160 <__assert_func+0x38>)
 800a14e:	461c      	mov	r4, r3
 800a150:	e7f3      	b.n	800a13a <__assert_func+0x12>
 800a152:	bf00      	nop
 800a154:	2000001c 	.word	0x2000001c
 800a158:	0800a9f1 	.word	0x0800a9f1
 800a15c:	0800a9fe 	.word	0x0800a9fe
 800a160:	0800aa2c 	.word	0x0800aa2c

0800a164 <_calloc_r>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	fba1 5402 	umull	r5, r4, r1, r2
 800a16a:	b934      	cbnz	r4, 800a17a <_calloc_r+0x16>
 800a16c:	4629      	mov	r1, r5
 800a16e:	f7ff f9a7 	bl	80094c0 <_malloc_r>
 800a172:	4606      	mov	r6, r0
 800a174:	b928      	cbnz	r0, 800a182 <_calloc_r+0x1e>
 800a176:	4630      	mov	r0, r6
 800a178:	bd70      	pop	{r4, r5, r6, pc}
 800a17a:	220c      	movs	r2, #12
 800a17c:	6002      	str	r2, [r0, #0]
 800a17e:	2600      	movs	r6, #0
 800a180:	e7f9      	b.n	800a176 <_calloc_r+0x12>
 800a182:	462a      	mov	r2, r5
 800a184:	4621      	mov	r1, r4
 800a186:	f7fe f9e0 	bl	800854a <memset>
 800a18a:	e7f4      	b.n	800a176 <_calloc_r+0x12>

0800a18c <__ascii_mbtowc>:
 800a18c:	b082      	sub	sp, #8
 800a18e:	b901      	cbnz	r1, 800a192 <__ascii_mbtowc+0x6>
 800a190:	a901      	add	r1, sp, #4
 800a192:	b142      	cbz	r2, 800a1a6 <__ascii_mbtowc+0x1a>
 800a194:	b14b      	cbz	r3, 800a1aa <__ascii_mbtowc+0x1e>
 800a196:	7813      	ldrb	r3, [r2, #0]
 800a198:	600b      	str	r3, [r1, #0]
 800a19a:	7812      	ldrb	r2, [r2, #0]
 800a19c:	1e10      	subs	r0, r2, #0
 800a19e:	bf18      	it	ne
 800a1a0:	2001      	movne	r0, #1
 800a1a2:	b002      	add	sp, #8
 800a1a4:	4770      	bx	lr
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	e7fb      	b.n	800a1a2 <__ascii_mbtowc+0x16>
 800a1aa:	f06f 0001 	mvn.w	r0, #1
 800a1ae:	e7f8      	b.n	800a1a2 <__ascii_mbtowc+0x16>

0800a1b0 <_realloc_r>:
 800a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b4:	4607      	mov	r7, r0
 800a1b6:	4614      	mov	r4, r2
 800a1b8:	460d      	mov	r5, r1
 800a1ba:	b921      	cbnz	r1, 800a1c6 <_realloc_r+0x16>
 800a1bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	f7ff b97d 	b.w	80094c0 <_malloc_r>
 800a1c6:	b92a      	cbnz	r2, 800a1d4 <_realloc_r+0x24>
 800a1c8:	f7ff f906 	bl	80093d8 <_free_r>
 800a1cc:	4625      	mov	r5, r4
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d4:	f000 f841 	bl	800a25a <_malloc_usable_size_r>
 800a1d8:	4284      	cmp	r4, r0
 800a1da:	4606      	mov	r6, r0
 800a1dc:	d802      	bhi.n	800a1e4 <_realloc_r+0x34>
 800a1de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1e2:	d8f4      	bhi.n	800a1ce <_realloc_r+0x1e>
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	f7ff f96a 	bl	80094c0 <_malloc_r>
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	b908      	cbnz	r0, 800a1f4 <_realloc_r+0x44>
 800a1f0:	4645      	mov	r5, r8
 800a1f2:	e7ec      	b.n	800a1ce <_realloc_r+0x1e>
 800a1f4:	42b4      	cmp	r4, r6
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	bf28      	it	cs
 800a1fc:	4632      	movcs	r2, r6
 800a1fe:	f7fe fa82 	bl	8008706 <memcpy>
 800a202:	4629      	mov	r1, r5
 800a204:	4638      	mov	r0, r7
 800a206:	f7ff f8e7 	bl	80093d8 <_free_r>
 800a20a:	e7f1      	b.n	800a1f0 <_realloc_r+0x40>

0800a20c <__ascii_wctomb>:
 800a20c:	4603      	mov	r3, r0
 800a20e:	4608      	mov	r0, r1
 800a210:	b141      	cbz	r1, 800a224 <__ascii_wctomb+0x18>
 800a212:	2aff      	cmp	r2, #255	@ 0xff
 800a214:	d904      	bls.n	800a220 <__ascii_wctomb+0x14>
 800a216:	228a      	movs	r2, #138	@ 0x8a
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295
 800a21e:	4770      	bx	lr
 800a220:	700a      	strb	r2, [r1, #0]
 800a222:	2001      	movs	r0, #1
 800a224:	4770      	bx	lr
	...

0800a228 <fiprintf>:
 800a228:	b40e      	push	{r1, r2, r3}
 800a22a:	b503      	push	{r0, r1, lr}
 800a22c:	4601      	mov	r1, r0
 800a22e:	ab03      	add	r3, sp, #12
 800a230:	4805      	ldr	r0, [pc, #20]	@ (800a248 <fiprintf+0x20>)
 800a232:	f853 2b04 	ldr.w	r2, [r3], #4
 800a236:	6800      	ldr	r0, [r0, #0]
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	f000 f83f 	bl	800a2bc <_vfiprintf_r>
 800a23e:	b002      	add	sp, #8
 800a240:	f85d eb04 	ldr.w	lr, [sp], #4
 800a244:	b003      	add	sp, #12
 800a246:	4770      	bx	lr
 800a248:	2000001c 	.word	0x2000001c

0800a24c <abort>:
 800a24c:	b508      	push	{r3, lr}
 800a24e:	2006      	movs	r0, #6
 800a250:	f000 fa08 	bl	800a664 <raise>
 800a254:	2001      	movs	r0, #1
 800a256:	f7f7 faff 	bl	8001858 <_exit>

0800a25a <_malloc_usable_size_r>:
 800a25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a25e:	1f18      	subs	r0, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	bfbc      	itt	lt
 800a264:	580b      	ldrlt	r3, [r1, r0]
 800a266:	18c0      	addlt	r0, r0, r3
 800a268:	4770      	bx	lr

0800a26a <__sfputc_r>:
 800a26a:	6893      	ldr	r3, [r2, #8]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	2b00      	cmp	r3, #0
 800a270:	b410      	push	{r4}
 800a272:	6093      	str	r3, [r2, #8]
 800a274:	da08      	bge.n	800a288 <__sfputc_r+0x1e>
 800a276:	6994      	ldr	r4, [r2, #24]
 800a278:	42a3      	cmp	r3, r4
 800a27a:	db01      	blt.n	800a280 <__sfputc_r+0x16>
 800a27c:	290a      	cmp	r1, #10
 800a27e:	d103      	bne.n	800a288 <__sfputc_r+0x1e>
 800a280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a284:	f000 b932 	b.w	800a4ec <__swbuf_r>
 800a288:	6813      	ldr	r3, [r2, #0]
 800a28a:	1c58      	adds	r0, r3, #1
 800a28c:	6010      	str	r0, [r2, #0]
 800a28e:	7019      	strb	r1, [r3, #0]
 800a290:	4608      	mov	r0, r1
 800a292:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <__sfputs_r>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	4614      	mov	r4, r2
 800a2a0:	18d5      	adds	r5, r2, r3
 800a2a2:	42ac      	cmp	r4, r5
 800a2a4:	d101      	bne.n	800a2aa <__sfputs_r+0x12>
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	e007      	b.n	800a2ba <__sfputs_r+0x22>
 800a2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ae:	463a      	mov	r2, r7
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f7ff ffda 	bl	800a26a <__sfputc_r>
 800a2b6:	1c43      	adds	r3, r0, #1
 800a2b8:	d1f3      	bne.n	800a2a2 <__sfputs_r+0xa>
 800a2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2bc <_vfiprintf_r>:
 800a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	460d      	mov	r5, r1
 800a2c2:	b09d      	sub	sp, #116	@ 0x74
 800a2c4:	4614      	mov	r4, r2
 800a2c6:	4698      	mov	r8, r3
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	b118      	cbz	r0, 800a2d4 <_vfiprintf_r+0x18>
 800a2cc:	6a03      	ldr	r3, [r0, #32]
 800a2ce:	b90b      	cbnz	r3, 800a2d4 <_vfiprintf_r+0x18>
 800a2d0:	f7fe f88c 	bl	80083ec <__sinit>
 800a2d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2d6:	07d9      	lsls	r1, r3, #31
 800a2d8:	d405      	bmi.n	800a2e6 <_vfiprintf_r+0x2a>
 800a2da:	89ab      	ldrh	r3, [r5, #12]
 800a2dc:	059a      	lsls	r2, r3, #22
 800a2de:	d402      	bmi.n	800a2e6 <_vfiprintf_r+0x2a>
 800a2e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2e2:	f7fe fa0e 	bl	8008702 <__retarget_lock_acquire_recursive>
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	071b      	lsls	r3, r3, #28
 800a2ea:	d501      	bpl.n	800a2f0 <_vfiprintf_r+0x34>
 800a2ec:	692b      	ldr	r3, [r5, #16]
 800a2ee:	b99b      	cbnz	r3, 800a318 <_vfiprintf_r+0x5c>
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f000 f938 	bl	800a568 <__swsetup_r>
 800a2f8:	b170      	cbz	r0, 800a318 <_vfiprintf_r+0x5c>
 800a2fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2fc:	07dc      	lsls	r4, r3, #31
 800a2fe:	d504      	bpl.n	800a30a <_vfiprintf_r+0x4e>
 800a300:	f04f 30ff 	mov.w	r0, #4294967295
 800a304:	b01d      	add	sp, #116	@ 0x74
 800a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30a:	89ab      	ldrh	r3, [r5, #12]
 800a30c:	0598      	lsls	r0, r3, #22
 800a30e:	d4f7      	bmi.n	800a300 <_vfiprintf_r+0x44>
 800a310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a312:	f7fe f9f7 	bl	8008704 <__retarget_lock_release_recursive>
 800a316:	e7f3      	b.n	800a300 <_vfiprintf_r+0x44>
 800a318:	2300      	movs	r3, #0
 800a31a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a31c:	2320      	movs	r3, #32
 800a31e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a322:	f8cd 800c 	str.w	r8, [sp, #12]
 800a326:	2330      	movs	r3, #48	@ 0x30
 800a328:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a4d8 <_vfiprintf_r+0x21c>
 800a32c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a330:	f04f 0901 	mov.w	r9, #1
 800a334:	4623      	mov	r3, r4
 800a336:	469a      	mov	sl, r3
 800a338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a33c:	b10a      	cbz	r2, 800a342 <_vfiprintf_r+0x86>
 800a33e:	2a25      	cmp	r2, #37	@ 0x25
 800a340:	d1f9      	bne.n	800a336 <_vfiprintf_r+0x7a>
 800a342:	ebba 0b04 	subs.w	fp, sl, r4
 800a346:	d00b      	beq.n	800a360 <_vfiprintf_r+0xa4>
 800a348:	465b      	mov	r3, fp
 800a34a:	4622      	mov	r2, r4
 800a34c:	4629      	mov	r1, r5
 800a34e:	4630      	mov	r0, r6
 800a350:	f7ff ffa2 	bl	800a298 <__sfputs_r>
 800a354:	3001      	adds	r0, #1
 800a356:	f000 80a7 	beq.w	800a4a8 <_vfiprintf_r+0x1ec>
 800a35a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a35c:	445a      	add	r2, fp
 800a35e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a360:	f89a 3000 	ldrb.w	r3, [sl]
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 809f 	beq.w	800a4a8 <_vfiprintf_r+0x1ec>
 800a36a:	2300      	movs	r3, #0
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295
 800a370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a374:	f10a 0a01 	add.w	sl, sl, #1
 800a378:	9304      	str	r3, [sp, #16]
 800a37a:	9307      	str	r3, [sp, #28]
 800a37c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a380:	931a      	str	r3, [sp, #104]	@ 0x68
 800a382:	4654      	mov	r4, sl
 800a384:	2205      	movs	r2, #5
 800a386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38a:	4853      	ldr	r0, [pc, #332]	@ (800a4d8 <_vfiprintf_r+0x21c>)
 800a38c:	f7f5 ff40 	bl	8000210 <memchr>
 800a390:	9a04      	ldr	r2, [sp, #16]
 800a392:	b9d8      	cbnz	r0, 800a3cc <_vfiprintf_r+0x110>
 800a394:	06d1      	lsls	r1, r2, #27
 800a396:	bf44      	itt	mi
 800a398:	2320      	movmi	r3, #32
 800a39a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a39e:	0713      	lsls	r3, r2, #28
 800a3a0:	bf44      	itt	mi
 800a3a2:	232b      	movmi	r3, #43	@ 0x2b
 800a3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ae:	d015      	beq.n	800a3dc <_vfiprintf_r+0x120>
 800a3b0:	9a07      	ldr	r2, [sp, #28]
 800a3b2:	4654      	mov	r4, sl
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f04f 0c0a 	mov.w	ip, #10
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3c0:	3b30      	subs	r3, #48	@ 0x30
 800a3c2:	2b09      	cmp	r3, #9
 800a3c4:	d94b      	bls.n	800a45e <_vfiprintf_r+0x1a2>
 800a3c6:	b1b0      	cbz	r0, 800a3f6 <_vfiprintf_r+0x13a>
 800a3c8:	9207      	str	r2, [sp, #28]
 800a3ca:	e014      	b.n	800a3f6 <_vfiprintf_r+0x13a>
 800a3cc:	eba0 0308 	sub.w	r3, r0, r8
 800a3d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	9304      	str	r3, [sp, #16]
 800a3d8:	46a2      	mov	sl, r4
 800a3da:	e7d2      	b.n	800a382 <_vfiprintf_r+0xc6>
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	1d19      	adds	r1, r3, #4
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	9103      	str	r1, [sp, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	bfbb      	ittet	lt
 800a3e8:	425b      	neglt	r3, r3
 800a3ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a3ee:	9307      	strge	r3, [sp, #28]
 800a3f0:	9307      	strlt	r3, [sp, #28]
 800a3f2:	bfb8      	it	lt
 800a3f4:	9204      	strlt	r2, [sp, #16]
 800a3f6:	7823      	ldrb	r3, [r4, #0]
 800a3f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3fa:	d10a      	bne.n	800a412 <_vfiprintf_r+0x156>
 800a3fc:	7863      	ldrb	r3, [r4, #1]
 800a3fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a400:	d132      	bne.n	800a468 <_vfiprintf_r+0x1ac>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	1d1a      	adds	r2, r3, #4
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	9203      	str	r2, [sp, #12]
 800a40a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a40e:	3402      	adds	r4, #2
 800a410:	9305      	str	r3, [sp, #20]
 800a412:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4e8 <_vfiprintf_r+0x22c>
 800a416:	7821      	ldrb	r1, [r4, #0]
 800a418:	2203      	movs	r2, #3
 800a41a:	4650      	mov	r0, sl
 800a41c:	f7f5 fef8 	bl	8000210 <memchr>
 800a420:	b138      	cbz	r0, 800a432 <_vfiprintf_r+0x176>
 800a422:	9b04      	ldr	r3, [sp, #16]
 800a424:	eba0 000a 	sub.w	r0, r0, sl
 800a428:	2240      	movs	r2, #64	@ 0x40
 800a42a:	4082      	lsls	r2, r0
 800a42c:	4313      	orrs	r3, r2
 800a42e:	3401      	adds	r4, #1
 800a430:	9304      	str	r3, [sp, #16]
 800a432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a436:	4829      	ldr	r0, [pc, #164]	@ (800a4dc <_vfiprintf_r+0x220>)
 800a438:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a43c:	2206      	movs	r2, #6
 800a43e:	f7f5 fee7 	bl	8000210 <memchr>
 800a442:	2800      	cmp	r0, #0
 800a444:	d03f      	beq.n	800a4c6 <_vfiprintf_r+0x20a>
 800a446:	4b26      	ldr	r3, [pc, #152]	@ (800a4e0 <_vfiprintf_r+0x224>)
 800a448:	bb1b      	cbnz	r3, 800a492 <_vfiprintf_r+0x1d6>
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	3307      	adds	r3, #7
 800a44e:	f023 0307 	bic.w	r3, r3, #7
 800a452:	3308      	adds	r3, #8
 800a454:	9303      	str	r3, [sp, #12]
 800a456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a458:	443b      	add	r3, r7
 800a45a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a45c:	e76a      	b.n	800a334 <_vfiprintf_r+0x78>
 800a45e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a462:	460c      	mov	r4, r1
 800a464:	2001      	movs	r0, #1
 800a466:	e7a8      	b.n	800a3ba <_vfiprintf_r+0xfe>
 800a468:	2300      	movs	r3, #0
 800a46a:	3401      	adds	r4, #1
 800a46c:	9305      	str	r3, [sp, #20]
 800a46e:	4619      	mov	r1, r3
 800a470:	f04f 0c0a 	mov.w	ip, #10
 800a474:	4620      	mov	r0, r4
 800a476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a47a:	3a30      	subs	r2, #48	@ 0x30
 800a47c:	2a09      	cmp	r2, #9
 800a47e:	d903      	bls.n	800a488 <_vfiprintf_r+0x1cc>
 800a480:	2b00      	cmp	r3, #0
 800a482:	d0c6      	beq.n	800a412 <_vfiprintf_r+0x156>
 800a484:	9105      	str	r1, [sp, #20]
 800a486:	e7c4      	b.n	800a412 <_vfiprintf_r+0x156>
 800a488:	fb0c 2101 	mla	r1, ip, r1, r2
 800a48c:	4604      	mov	r4, r0
 800a48e:	2301      	movs	r3, #1
 800a490:	e7f0      	b.n	800a474 <_vfiprintf_r+0x1b8>
 800a492:	ab03      	add	r3, sp, #12
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	462a      	mov	r2, r5
 800a498:	4b12      	ldr	r3, [pc, #72]	@ (800a4e4 <_vfiprintf_r+0x228>)
 800a49a:	a904      	add	r1, sp, #16
 800a49c:	4630      	mov	r0, r6
 800a49e:	f7fd fb63 	bl	8007b68 <_printf_float>
 800a4a2:	4607      	mov	r7, r0
 800a4a4:	1c78      	adds	r0, r7, #1
 800a4a6:	d1d6      	bne.n	800a456 <_vfiprintf_r+0x19a>
 800a4a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4aa:	07d9      	lsls	r1, r3, #31
 800a4ac:	d405      	bmi.n	800a4ba <_vfiprintf_r+0x1fe>
 800a4ae:	89ab      	ldrh	r3, [r5, #12]
 800a4b0:	059a      	lsls	r2, r3, #22
 800a4b2:	d402      	bmi.n	800a4ba <_vfiprintf_r+0x1fe>
 800a4b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4b6:	f7fe f925 	bl	8008704 <__retarget_lock_release_recursive>
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	065b      	lsls	r3, r3, #25
 800a4be:	f53f af1f 	bmi.w	800a300 <_vfiprintf_r+0x44>
 800a4c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4c4:	e71e      	b.n	800a304 <_vfiprintf_r+0x48>
 800a4c6:	ab03      	add	r3, sp, #12
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	462a      	mov	r2, r5
 800a4cc:	4b05      	ldr	r3, [pc, #20]	@ (800a4e4 <_vfiprintf_r+0x228>)
 800a4ce:	a904      	add	r1, sp, #16
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7fd fde1 	bl	8008098 <_printf_i>
 800a4d6:	e7e4      	b.n	800a4a2 <_vfiprintf_r+0x1e6>
 800a4d8:	0800a9d6 	.word	0x0800a9d6
 800a4dc:	0800a9e0 	.word	0x0800a9e0
 800a4e0:	08007b69 	.word	0x08007b69
 800a4e4:	0800a299 	.word	0x0800a299
 800a4e8:	0800a9dc 	.word	0x0800a9dc

0800a4ec <__swbuf_r>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	460e      	mov	r6, r1
 800a4f0:	4614      	mov	r4, r2
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	b118      	cbz	r0, 800a4fe <__swbuf_r+0x12>
 800a4f6:	6a03      	ldr	r3, [r0, #32]
 800a4f8:	b90b      	cbnz	r3, 800a4fe <__swbuf_r+0x12>
 800a4fa:	f7fd ff77 	bl	80083ec <__sinit>
 800a4fe:	69a3      	ldr	r3, [r4, #24]
 800a500:	60a3      	str	r3, [r4, #8]
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	071a      	lsls	r2, r3, #28
 800a506:	d501      	bpl.n	800a50c <__swbuf_r+0x20>
 800a508:	6923      	ldr	r3, [r4, #16]
 800a50a:	b943      	cbnz	r3, 800a51e <__swbuf_r+0x32>
 800a50c:	4621      	mov	r1, r4
 800a50e:	4628      	mov	r0, r5
 800a510:	f000 f82a 	bl	800a568 <__swsetup_r>
 800a514:	b118      	cbz	r0, 800a51e <__swbuf_r+0x32>
 800a516:	f04f 37ff 	mov.w	r7, #4294967295
 800a51a:	4638      	mov	r0, r7
 800a51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	6922      	ldr	r2, [r4, #16]
 800a522:	1a98      	subs	r0, r3, r2
 800a524:	6963      	ldr	r3, [r4, #20]
 800a526:	b2f6      	uxtb	r6, r6
 800a528:	4283      	cmp	r3, r0
 800a52a:	4637      	mov	r7, r6
 800a52c:	dc05      	bgt.n	800a53a <__swbuf_r+0x4e>
 800a52e:	4621      	mov	r1, r4
 800a530:	4628      	mov	r0, r5
 800a532:	f7ff fda7 	bl	800a084 <_fflush_r>
 800a536:	2800      	cmp	r0, #0
 800a538:	d1ed      	bne.n	800a516 <__swbuf_r+0x2a>
 800a53a:	68a3      	ldr	r3, [r4, #8]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	60a3      	str	r3, [r4, #8]
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	1c5a      	adds	r2, r3, #1
 800a544:	6022      	str	r2, [r4, #0]
 800a546:	701e      	strb	r6, [r3, #0]
 800a548:	6962      	ldr	r2, [r4, #20]
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d004      	beq.n	800a55a <__swbuf_r+0x6e>
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	07db      	lsls	r3, r3, #31
 800a554:	d5e1      	bpl.n	800a51a <__swbuf_r+0x2e>
 800a556:	2e0a      	cmp	r6, #10
 800a558:	d1df      	bne.n	800a51a <__swbuf_r+0x2e>
 800a55a:	4621      	mov	r1, r4
 800a55c:	4628      	mov	r0, r5
 800a55e:	f7ff fd91 	bl	800a084 <_fflush_r>
 800a562:	2800      	cmp	r0, #0
 800a564:	d0d9      	beq.n	800a51a <__swbuf_r+0x2e>
 800a566:	e7d6      	b.n	800a516 <__swbuf_r+0x2a>

0800a568 <__swsetup_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4b29      	ldr	r3, [pc, #164]	@ (800a610 <__swsetup_r+0xa8>)
 800a56c:	4605      	mov	r5, r0
 800a56e:	6818      	ldr	r0, [r3, #0]
 800a570:	460c      	mov	r4, r1
 800a572:	b118      	cbz	r0, 800a57c <__swsetup_r+0x14>
 800a574:	6a03      	ldr	r3, [r0, #32]
 800a576:	b90b      	cbnz	r3, 800a57c <__swsetup_r+0x14>
 800a578:	f7fd ff38 	bl	80083ec <__sinit>
 800a57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a580:	0719      	lsls	r1, r3, #28
 800a582:	d422      	bmi.n	800a5ca <__swsetup_r+0x62>
 800a584:	06da      	lsls	r2, r3, #27
 800a586:	d407      	bmi.n	800a598 <__swsetup_r+0x30>
 800a588:	2209      	movs	r2, #9
 800a58a:	602a      	str	r2, [r5, #0]
 800a58c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a590:	81a3      	strh	r3, [r4, #12]
 800a592:	f04f 30ff 	mov.w	r0, #4294967295
 800a596:	e033      	b.n	800a600 <__swsetup_r+0x98>
 800a598:	0758      	lsls	r0, r3, #29
 800a59a:	d512      	bpl.n	800a5c2 <__swsetup_r+0x5a>
 800a59c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a59e:	b141      	cbz	r1, 800a5b2 <__swsetup_r+0x4a>
 800a5a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5a4:	4299      	cmp	r1, r3
 800a5a6:	d002      	beq.n	800a5ae <__swsetup_r+0x46>
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	f7fe ff15 	bl	80093d8 <_free_r>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a5b8:	81a3      	strh	r3, [r4, #12]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	6063      	str	r3, [r4, #4]
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	f043 0308 	orr.w	r3, r3, #8
 800a5c8:	81a3      	strh	r3, [r4, #12]
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	b94b      	cbnz	r3, 800a5e2 <__swsetup_r+0x7a>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a5d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5d8:	d003      	beq.n	800a5e2 <__swsetup_r+0x7a>
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4628      	mov	r0, r5
 800a5de:	f000 f883 	bl	800a6e8 <__smakebuf_r>
 800a5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5e6:	f013 0201 	ands.w	r2, r3, #1
 800a5ea:	d00a      	beq.n	800a602 <__swsetup_r+0x9a>
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	60a2      	str	r2, [r4, #8]
 800a5f0:	6962      	ldr	r2, [r4, #20]
 800a5f2:	4252      	negs	r2, r2
 800a5f4:	61a2      	str	r2, [r4, #24]
 800a5f6:	6922      	ldr	r2, [r4, #16]
 800a5f8:	b942      	cbnz	r2, 800a60c <__swsetup_r+0xa4>
 800a5fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5fe:	d1c5      	bne.n	800a58c <__swsetup_r+0x24>
 800a600:	bd38      	pop	{r3, r4, r5, pc}
 800a602:	0799      	lsls	r1, r3, #30
 800a604:	bf58      	it	pl
 800a606:	6962      	ldrpl	r2, [r4, #20]
 800a608:	60a2      	str	r2, [r4, #8]
 800a60a:	e7f4      	b.n	800a5f6 <__swsetup_r+0x8e>
 800a60c:	2000      	movs	r0, #0
 800a60e:	e7f7      	b.n	800a600 <__swsetup_r+0x98>
 800a610:	2000001c 	.word	0x2000001c

0800a614 <_raise_r>:
 800a614:	291f      	cmp	r1, #31
 800a616:	b538      	push	{r3, r4, r5, lr}
 800a618:	4605      	mov	r5, r0
 800a61a:	460c      	mov	r4, r1
 800a61c:	d904      	bls.n	800a628 <_raise_r+0x14>
 800a61e:	2316      	movs	r3, #22
 800a620:	6003      	str	r3, [r0, #0]
 800a622:	f04f 30ff 	mov.w	r0, #4294967295
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a62a:	b112      	cbz	r2, 800a632 <_raise_r+0x1e>
 800a62c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a630:	b94b      	cbnz	r3, 800a646 <_raise_r+0x32>
 800a632:	4628      	mov	r0, r5
 800a634:	f000 f830 	bl	800a698 <_getpid_r>
 800a638:	4622      	mov	r2, r4
 800a63a:	4601      	mov	r1, r0
 800a63c:	4628      	mov	r0, r5
 800a63e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a642:	f000 b817 	b.w	800a674 <_kill_r>
 800a646:	2b01      	cmp	r3, #1
 800a648:	d00a      	beq.n	800a660 <_raise_r+0x4c>
 800a64a:	1c59      	adds	r1, r3, #1
 800a64c:	d103      	bne.n	800a656 <_raise_r+0x42>
 800a64e:	2316      	movs	r3, #22
 800a650:	6003      	str	r3, [r0, #0]
 800a652:	2001      	movs	r0, #1
 800a654:	e7e7      	b.n	800a626 <_raise_r+0x12>
 800a656:	2100      	movs	r1, #0
 800a658:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a65c:	4620      	mov	r0, r4
 800a65e:	4798      	blx	r3
 800a660:	2000      	movs	r0, #0
 800a662:	e7e0      	b.n	800a626 <_raise_r+0x12>

0800a664 <raise>:
 800a664:	4b02      	ldr	r3, [pc, #8]	@ (800a670 <raise+0xc>)
 800a666:	4601      	mov	r1, r0
 800a668:	6818      	ldr	r0, [r3, #0]
 800a66a:	f7ff bfd3 	b.w	800a614 <_raise_r>
 800a66e:	bf00      	nop
 800a670:	2000001c 	.word	0x2000001c

0800a674 <_kill_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d07      	ldr	r5, [pc, #28]	@ (800a694 <_kill_r+0x20>)
 800a678:	2300      	movs	r3, #0
 800a67a:	4604      	mov	r4, r0
 800a67c:	4608      	mov	r0, r1
 800a67e:	4611      	mov	r1, r2
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	f7f7 f8d9 	bl	8001838 <_kill>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	d102      	bne.n	800a690 <_kill_r+0x1c>
 800a68a:	682b      	ldr	r3, [r5, #0]
 800a68c:	b103      	cbz	r3, 800a690 <_kill_r+0x1c>
 800a68e:	6023      	str	r3, [r4, #0]
 800a690:	bd38      	pop	{r3, r4, r5, pc}
 800a692:	bf00      	nop
 800a694:	20004e14 	.word	0x20004e14

0800a698 <_getpid_r>:
 800a698:	f7f7 b8c6 	b.w	8001828 <_getpid>

0800a69c <__swhatbuf_r>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	460c      	mov	r4, r1
 800a6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	b096      	sub	sp, #88	@ 0x58
 800a6a8:	4615      	mov	r5, r2
 800a6aa:	461e      	mov	r6, r3
 800a6ac:	da0d      	bge.n	800a6ca <__swhatbuf_r+0x2e>
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6b4:	f04f 0100 	mov.w	r1, #0
 800a6b8:	bf14      	ite	ne
 800a6ba:	2340      	movne	r3, #64	@ 0x40
 800a6bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	6031      	str	r1, [r6, #0]
 800a6c4:	602b      	str	r3, [r5, #0]
 800a6c6:	b016      	add	sp, #88	@ 0x58
 800a6c8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ca:	466a      	mov	r2, sp
 800a6cc:	f000 f848 	bl	800a760 <_fstat_r>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	dbec      	blt.n	800a6ae <__swhatbuf_r+0x12>
 800a6d4:	9901      	ldr	r1, [sp, #4]
 800a6d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6de:	4259      	negs	r1, r3
 800a6e0:	4159      	adcs	r1, r3
 800a6e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6e6:	e7eb      	b.n	800a6c0 <__swhatbuf_r+0x24>

0800a6e8 <__smakebuf_r>:
 800a6e8:	898b      	ldrh	r3, [r1, #12]
 800a6ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6ec:	079d      	lsls	r5, r3, #30
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	d507      	bpl.n	800a704 <__smakebuf_r+0x1c>
 800a6f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	6123      	str	r3, [r4, #16]
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	6163      	str	r3, [r4, #20]
 800a700:	b003      	add	sp, #12
 800a702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a704:	ab01      	add	r3, sp, #4
 800a706:	466a      	mov	r2, sp
 800a708:	f7ff ffc8 	bl	800a69c <__swhatbuf_r>
 800a70c:	9f00      	ldr	r7, [sp, #0]
 800a70e:	4605      	mov	r5, r0
 800a710:	4639      	mov	r1, r7
 800a712:	4630      	mov	r0, r6
 800a714:	f7fe fed4 	bl	80094c0 <_malloc_r>
 800a718:	b948      	cbnz	r0, 800a72e <__smakebuf_r+0x46>
 800a71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a71e:	059a      	lsls	r2, r3, #22
 800a720:	d4ee      	bmi.n	800a700 <__smakebuf_r+0x18>
 800a722:	f023 0303 	bic.w	r3, r3, #3
 800a726:	f043 0302 	orr.w	r3, r3, #2
 800a72a:	81a3      	strh	r3, [r4, #12]
 800a72c:	e7e2      	b.n	800a6f4 <__smakebuf_r+0xc>
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	6020      	str	r0, [r4, #0]
 800a732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a736:	81a3      	strh	r3, [r4, #12]
 800a738:	9b01      	ldr	r3, [sp, #4]
 800a73a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a73e:	b15b      	cbz	r3, 800a758 <__smakebuf_r+0x70>
 800a740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a744:	4630      	mov	r0, r6
 800a746:	f000 f81d 	bl	800a784 <_isatty_r>
 800a74a:	b128      	cbz	r0, 800a758 <__smakebuf_r+0x70>
 800a74c:	89a3      	ldrh	r3, [r4, #12]
 800a74e:	f023 0303 	bic.w	r3, r3, #3
 800a752:	f043 0301 	orr.w	r3, r3, #1
 800a756:	81a3      	strh	r3, [r4, #12]
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	431d      	orrs	r5, r3
 800a75c:	81a5      	strh	r5, [r4, #12]
 800a75e:	e7cf      	b.n	800a700 <__smakebuf_r+0x18>

0800a760 <_fstat_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	4d07      	ldr	r5, [pc, #28]	@ (800a780 <_fstat_r+0x20>)
 800a764:	2300      	movs	r3, #0
 800a766:	4604      	mov	r4, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	4611      	mov	r1, r2
 800a76c:	602b      	str	r3, [r5, #0]
 800a76e:	f7f7 f8c3 	bl	80018f8 <_fstat>
 800a772:	1c43      	adds	r3, r0, #1
 800a774:	d102      	bne.n	800a77c <_fstat_r+0x1c>
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	b103      	cbz	r3, 800a77c <_fstat_r+0x1c>
 800a77a:	6023      	str	r3, [r4, #0]
 800a77c:	bd38      	pop	{r3, r4, r5, pc}
 800a77e:	bf00      	nop
 800a780:	20004e14 	.word	0x20004e14

0800a784 <_isatty_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4d06      	ldr	r5, [pc, #24]	@ (800a7a0 <_isatty_r+0x1c>)
 800a788:	2300      	movs	r3, #0
 800a78a:	4604      	mov	r4, r0
 800a78c:	4608      	mov	r0, r1
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	f7f7 f8c2 	bl	8001918 <_isatty>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d102      	bne.n	800a79e <_isatty_r+0x1a>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	b103      	cbz	r3, 800a79e <_isatty_r+0x1a>
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	bd38      	pop	{r3, r4, r5, pc}
 800a7a0:	20004e14 	.word	0x20004e14

0800a7a4 <_init>:
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a6:	bf00      	nop
 800a7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7aa:	bc08      	pop	{r3}
 800a7ac:	469e      	mov	lr, r3
 800a7ae:	4770      	bx	lr

0800a7b0 <_fini>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr
