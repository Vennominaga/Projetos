
Atividade_Aula04_Exercicio01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08007004  08007004  00008004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007220  08007220  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007220  08007220  00008220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007228  08007228  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007228  08007228  00008228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800722c  0800722c  0000822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007230  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c00  20000060  08007290  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c60  08007290  00009c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a92  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d1  00000000  00000000  00021b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  000250f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001031  00000000  00000000  000265d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023542  00000000  00000000  00027601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dd3  00000000  00000000  0004ab43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbc08  00000000  00000000  00061916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d51e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cac  00000000  00000000  0013d564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00143210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006fec 	.word	0x08006fec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006fec 	.word	0x08006fec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Delay_us>:

#define CHAR_MAP_SIZE (sizeof(char_map)/sizeof(CharMap))


void Delay_us (int time)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<time; i++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	e00c      	b.n	80005d8 <Delay_us+0x28>
	{
		for (int j=0; j<7; j++)
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	e003      	b.n	80005cc <Delay_us+0x1c>
		{
			__asm__("nop");
 80005c4:	bf00      	nop
		for (int j=0; j<7; j++)
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	ddf8      	ble.n	80005c4 <Delay_us+0x14>
	for (int i=0; i<time; i++)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	3301      	adds	r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbee      	blt.n	80005be <Delay_us+0xe>
		}
	}
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <start>:

void start (void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

	CLK_HIGH();
 80005f4:	2201      	movs	r2, #1
 80005f6:	2101      	movs	r1, #1
 80005f8:	4808      	ldr	r0, [pc, #32]	@ (800061c <start+0x2c>)
 80005fa:	f001 f841 	bl	8001680 <HAL_GPIO_WritePin>
	DATA_HIGH();
 80005fe:	2201      	movs	r2, #1
 8000600:	2102      	movs	r1, #2
 8000602:	4806      	ldr	r0, [pc, #24]	@ (800061c <start+0x2c>)
 8000604:	f001 f83c 	bl	8001680 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff ffd1 	bl	80005b0 <Delay_us>
	DATA_LOW();
 800060e:	2200      	movs	r2, #0
 8000610:	2102      	movs	r1, #2
 8000612:	4802      	ldr	r0, [pc, #8]	@ (800061c <start+0x2c>)
 8000614:	f001 f834 	bl	8001680 <HAL_GPIO_WritePin>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40020000 	.word	0x40020000

08000620 <stop>:

void stop (void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	CLK_LOW();
 8000624:	2200      	movs	r2, #0
 8000626:	2101      	movs	r1, #1
 8000628:	480e      	ldr	r0, [pc, #56]	@ (8000664 <stop+0x44>)
 800062a:	f001 f829 	bl	8001680 <HAL_GPIO_WritePin>
	Delay_us (2);
 800062e:	2002      	movs	r0, #2
 8000630:	f7ff ffbe 	bl	80005b0 <Delay_us>
	DATA_LOW();
 8000634:	2200      	movs	r2, #0
 8000636:	2102      	movs	r1, #2
 8000638:	480a      	ldr	r0, [pc, #40]	@ (8000664 <stop+0x44>)
 800063a:	f001 f821 	bl	8001680 <HAL_GPIO_WritePin>
	Delay_us (2);
 800063e:	2002      	movs	r0, #2
 8000640:	f7ff ffb6 	bl	80005b0 <Delay_us>
	CLK_HIGH();
 8000644:	2201      	movs	r2, #1
 8000646:	2101      	movs	r1, #1
 8000648:	4806      	ldr	r0, [pc, #24]	@ (8000664 <stop+0x44>)
 800064a:	f001 f819 	bl	8001680 <HAL_GPIO_WritePin>
	Delay_us (2);
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff ffae 	bl	80005b0 <Delay_us>
	DATA_HIGH();
 8000654:	2201      	movs	r2, #1
 8000656:	2102      	movs	r1, #2
 8000658:	4802      	ldr	r0, [pc, #8]	@ (8000664 <stop+0x44>)
 800065a:	f001 f811 	bl	8001680 <HAL_GPIO_WritePin>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020000 	.word	0x40020000

08000668 <waitforAck>:

void waitforAck (void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	CLK_LOW();
 800066c:	2200      	movs	r2, #0
 800066e:	2101      	movs	r1, #1
 8000670:	480a      	ldr	r0, [pc, #40]	@ (800069c <waitforAck+0x34>)
 8000672:	f001 f805 	bl	8001680 <HAL_GPIO_WritePin>
	Delay_us (5); // After the falling edge of the eighth clock delay 5us
 8000676:	2005      	movs	r0, #5
 8000678:	f7ff ff9a 	bl	80005b0 <Delay_us>
	              // ACK signals the beginning of judgment
//	while (dio);  // Check the state of the Data pin
	CLK_HIGH();
 800067c:	2201      	movs	r2, #1
 800067e:	2101      	movs	r1, #1
 8000680:	4806      	ldr	r0, [pc, #24]	@ (800069c <waitforAck+0x34>)
 8000682:	f000 fffd 	bl	8001680 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000686:	2002      	movs	r0, #2
 8000688:	f7ff ff92 	bl	80005b0 <Delay_us>
	CLK_LOW();
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	4802      	ldr	r0, [pc, #8]	@ (800069c <waitforAck+0x34>)
 8000692:	f000 fff5 	bl	8001680 <HAL_GPIO_WritePin>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020000 	.word	0x40020000

080006a0 <TM1637_SetBrightness>:




void TM1637_SetBrightness(uint8_t brightness)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    display_brightness = brightness;
 80006aa:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <TM1637_SetBrightness+0x1c>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	7013      	strb	r3, [r2, #0]

}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	2000007c 	.word	0x2000007c

080006c0 <writeByte>:

void writeByte (uint8_t byte)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i = 0; i<8; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e025      	b.n	800071c <writeByte+0x5c>
	{
		CLK_LOW();
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	4815      	ldr	r0, [pc, #84]	@ (800072c <writeByte+0x6c>)
 80006d6:	f000 ffd3 	bl	8001680 <HAL_GPIO_WritePin>
		if (byte & 0x01) // low front
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d005      	beq.n	80006f0 <writeByte+0x30>
		{
			DATA_HIGH();
 80006e4:	2201      	movs	r2, #1
 80006e6:	2102      	movs	r1, #2
 80006e8:	4810      	ldr	r0, [pc, #64]	@ (800072c <writeByte+0x6c>)
 80006ea:	f000 ffc9 	bl	8001680 <HAL_GPIO_WritePin>
 80006ee:	e004      	b.n	80006fa <writeByte+0x3a>
		}
		else
		{
			DATA_LOW();
 80006f0:	2200      	movs	r2, #0
 80006f2:	2102      	movs	r1, #2
 80006f4:	480d      	ldr	r0, [pc, #52]	@ (800072c <writeByte+0x6c>)
 80006f6:	f000 ffc3 	bl	8001680 <HAL_GPIO_WritePin>
		}
		Delay_us (3);
 80006fa:	2003      	movs	r0, #3
 80006fc:	f7ff ff58 	bl	80005b0 <Delay_us>
		byte = byte >> 1;
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	085b      	lsrs	r3, r3, #1
 8000704:	71fb      	strb	r3, [r7, #7]
		CLK_HIGH();
 8000706:	2201      	movs	r2, #1
 8000708:	2101      	movs	r1, #1
 800070a:	4808      	ldr	r0, [pc, #32]	@ (800072c <writeByte+0x6c>)
 800070c:	f000 ffb8 	bl	8001680 <HAL_GPIO_WritePin>
		Delay_us (3);
 8000710:	2003      	movs	r0, #3
 8000712:	f7ff ff4d 	bl	80005b0 <Delay_us>
	for (i = 0; i<8; i++)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3301      	adds	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b07      	cmp	r3, #7
 8000720:	ddd6      	ble.n	80006d0 <writeByte+0x10>
	}
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40020000 	.word	0x40020000

08000730 <find_segments_for_char>:



static uint8_t find_segments_for_char(char character)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0;i<CHAR_MAP_SIZE; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]
 800073e:	e00f      	b.n	8000760 <find_segments_for_char+0x30>
	{
		if(char_map[i].character == character)
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	4a0c      	ldr	r2, [pc, #48]	@ (8000774 <find_segments_for_char+0x44>)
 8000744:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000748:	79fa      	ldrb	r2, [r7, #7]
 800074a:	429a      	cmp	r2, r3
 800074c:	d105      	bne.n	800075a <find_segments_for_char+0x2a>
			return char_map[i].segments;
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <find_segments_for_char+0x44>)
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	e006      	b.n	8000768 <find_segments_for_char+0x38>
	for (uint8_t i = 0;i<CHAR_MAP_SIZE; i++)
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	3301      	adds	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	2b1e      	cmp	r3, #30
 8000764:	d9ec      	bls.n	8000740 <find_segments_for_char+0x10>


	}
	return 0x00;
 8000766:	2300      	movs	r3, #0

}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	080070f4 	.word	0x080070f4

08000778 <TM1637_WriteData>:




void TM1637_WriteData (uint8_t Addr, uint8_t *data, int size)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	73fb      	strb	r3, [r7, #15]
	start();
 8000786:	f7ff ff33 	bl	80005f0 <start>
	writeByte(0x40);
 800078a:	2040      	movs	r0, #64	@ 0x40
 800078c:	f7ff ff98 	bl	80006c0 <writeByte>
	waitforAck();
 8000790:	f7ff ff6a 	bl	8000668 <waitforAck>
	stop();
 8000794:	f7ff ff44 	bl	8000620 <stop>

	start();
 8000798:	f7ff ff2a 	bl	80005f0 <start>
	writeByte(Addr);
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff8e 	bl	80006c0 <writeByte>
	waitforAck();
 80007a4:	f7ff ff60 	bl	8000668 <waitforAck>
	for (int i=0; i<size; i++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	e00b      	b.n	80007c6 <TM1637_WriteData+0x4e>
	{
		writeByte(data[i]);
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	4413      	add	r3, r2
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff82 	bl	80006c0 <writeByte>
		waitforAck();
 80007bc:	f7ff ff54 	bl	8000668 <waitforAck>
	for (int i=0; i<size; i++)
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	3301      	adds	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	dbef      	blt.n	80007ae <TM1637_WriteData+0x36>
	}
	stop();
 80007ce:	f7ff ff27 	bl	8000620 <stop>

	start();
 80007d2:	f7ff ff0d 	bl	80005f0 <start>
	writeByte(TM1637_CMD_DISPLAY_CONTROL | display_brightness );
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <TM1637_WriteData+0x80>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff6d 	bl	80006c0 <writeByte>
	waitforAck();
 80007e6:	f7ff ff3f 	bl	8000668 <waitforAck>
	stop();
 80007ea:	f7ff ff19 	bl	8000620 <stop>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000007c 	.word	0x2000007c

080007fc <TM1637_Init>:



void TM1637_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	TM1637_SetBrightness(TM1637_BRIGHTNESS_DEFAULT);
 8000800:	200a      	movs	r0, #10
 8000802:	f7ff ff4d 	bl	80006a0 <TM1637_SetBrightness>
	TM1637_Clear();
 8000806:	f000 f803 	bl	8000810 <TM1637_Clear>

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <TM1637_Clear>:

void TM1637_Clear(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	uint8_t data_clear[4] = {0x00,0x00,0x00,0x00};
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
	start();
 800081a:	f7ff fee9 	bl	80005f0 <start>
	writeByte(TM1637_CMD_DISPLAY_CONTROL | display_brightness );
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <TM1637_Clear+0x40>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff49 	bl	80006c0 <writeByte>
	waitforAck();
 800082e:	f7ff ff1b 	bl	8000668 <waitforAck>
	stop();
 8000832:	f7ff fef5 	bl	8000620 <stop>

	TM1637_WriteData(TM1637_CMD_SET_ADDRESS,data_clear,4);
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2204      	movs	r2, #4
 800083a:	4619      	mov	r1, r3
 800083c:	20c0      	movs	r0, #192	@ 0xc0
 800083e:	f7ff ff9b 	bl	8000778 <TM1637_WriteData>

	stop();
 8000842:	f7ff feed 	bl	8000620 <stop>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000007c 	.word	0x2000007c

08000854 <TM1637_DisplaySegments>:

void TM1637_DisplaySegments(uint8_t addr, uint8_t segments)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	460a      	mov	r2, r1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	4613      	mov	r3, r2
 8000862:	71bb      	strb	r3, [r7, #6]
	start();
 8000864:	f7ff fec4 	bl	80005f0 <start>
	writeByte(TM1637_CMD_SET_DATA_FIX_ADDRESS);
 8000868:	2044      	movs	r0, #68	@ 0x44
 800086a:	f7ff ff29 	bl	80006c0 <writeByte>
	waitforAck();
 800086e:	f7ff fefb 	bl	8000668 <waitforAck>
    stop();
 8000872:	f7ff fed5 	bl	8000620 <stop>

    start();
 8000876:	f7ff febb 	bl	80005f0 <start>
    writeByte(addr);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff1f 	bl	80006c0 <writeByte>
    waitforAck();
 8000882:	f7ff fef1 	bl	8000668 <waitforAck>
    writeByte(segments);
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff19 	bl	80006c0 <writeByte>
    waitforAck();
 800088e:	f7ff feeb 	bl	8000668 <waitforAck>
    stop();
 8000892:	f7ff fec5 	bl	8000620 <stop>

    start();
 8000896:	f7ff feab 	bl	80005f0 <start>
    writeByte(TM1637_CMD_DISPLAY_CONTROL | display_brightness );
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <TM1637_DisplaySegments+0x68>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff0b 	bl	80006c0 <writeByte>
    waitforAck();
 80008aa:	f7ff fedd 	bl	8000668 <waitforAck>
    stop();
 80008ae:	f7ff feb7 	bl	8000620 <stop>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000007c 	.word	0x2000007c

080008c0 <TM1637_DisplayChar>:

void TM1637_DisplayChar(uint8_t position, char character, uint8_t dot)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	460b      	mov	r3, r1
 80008cc:	71bb      	strb	r3, [r7, #6]
 80008ce:	4613      	mov	r3, r2
 80008d0:	717b      	strb	r3, [r7, #5]
	if(position > TM1637_ADDR_POS3) return;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2bc3      	cmp	r3, #195	@ 0xc3
 80008d6:	d813      	bhi.n	8000900 <TM1637_DisplayChar+0x40>

	uint8_t segment = find_segments_for_char(character);
 80008d8:	79bb      	ldrb	r3, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff28 	bl	8000730 <find_segments_for_char>
 80008e0:	4603      	mov	r3, r0
 80008e2:	73fb      	strb	r3, [r7, #15]

	if(dot) segment |= 0b10000000;
 80008e4:	797b      	ldrb	r3, [r7, #5]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <TM1637_DisplayChar+0x32>
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008f0:	73fb      	strb	r3, [r7, #15]

	TM1637_DisplaySegments(position, segment);
 80008f2:	7bfa      	ldrb	r2, [r7, #15]
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffab 	bl	8000854 <TM1637_DisplaySegments>
 80008fe:	e000      	b.n	8000902 <TM1637_DisplayChar+0x42>
	if(position > TM1637_ADDR_POS3) return;
 8000900:	bf00      	nop


}
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <TM1637_DisplayString>:

void TM1637_DisplayString(const char *str,uint8_t position)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
	uint8_t dot = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = position;i<=TM1637_ADDR_POS3;i++,str++)
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	73bb      	strb	r3, [r7, #14]
 800091c:	e014      	b.n	8000948 <TM1637_DisplayString+0x40>
	{
		if(*str == '.') dot = 1;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b2e      	cmp	r3, #46	@ 0x2e
 8000924:	d101      	bne.n	800092a <TM1637_DisplayString+0x22>
 8000926:	2301      	movs	r3, #1
 8000928:	73fb      	strb	r3, [r7, #15]
		TM1637_DisplayChar(i,*str, dot);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7819      	ldrb	r1, [r3, #0]
 800092e:	7bfa      	ldrb	r2, [r7, #15]
 8000930:	7bbb      	ldrb	r3, [r7, #14]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffc4 	bl	80008c0 <TM1637_DisplayChar>
		dot = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = position;i<=TM1637_ADDR_POS3;i++,str++)
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	3301      	adds	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3301      	adds	r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	7bbb      	ldrb	r3, [r7, #14]
 800094a:	2bc3      	cmp	r3, #195	@ 0xc3
 800094c:	d9e7      	bls.n	800091e <TM1637_DisplayString+0x16>

	}


}
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095c:	f000 fbd8 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000960:	f000 f84e 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000964:	f000 f8e4 	bl	8000b30 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000968:	f000 f8b8 	bl	8000adc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800096c:	f002 fba8 	bl	80030c0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CountingSem01 */
  CountingSem01Handle = osSemaphoreNew(2, 2, &CountingSem01_attributes);
 8000970:	4a15      	ldr	r2, [pc, #84]	@ (80009c8 <main+0x70>)
 8000972:	2102      	movs	r1, #2
 8000974:	2002      	movs	r0, #2
 8000976:	f002 fc9a 	bl	80032ae <osSemaphoreNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a13      	ldr	r2, [pc, #76]	@ (80009cc <main+0x74>)
 800097e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000980:	4a13      	ldr	r2, [pc, #76]	@ (80009d0 <main+0x78>)
 8000982:	2100      	movs	r1, #0
 8000984:	4813      	ldr	r0, [pc, #76]	@ (80009d4 <main+0x7c>)
 8000986:	f002 fbe5 	bl	8003154 <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <main+0x80>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000990:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <main+0x84>)
 8000992:	2100      	movs	r1, #0
 8000994:	4812      	ldr	r0, [pc, #72]	@ (80009e0 <main+0x88>)
 8000996:	f002 fbdd 	bl	8003154 <osThreadNew>
 800099a:	4603      	mov	r3, r0
 800099c:	4a11      	ldr	r2, [pc, #68]	@ (80009e4 <main+0x8c>)
 800099e:	6013      	str	r3, [r2, #0]

  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartInitTask, NULL, &InitTask_attributes);
 80009a0:	4a11      	ldr	r2, [pc, #68]	@ (80009e8 <main+0x90>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4811      	ldr	r0, [pc, #68]	@ (80009ec <main+0x94>)
 80009a6:	f002 fbd5 	bl	8003154 <osThreadNew>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <main+0x98>)
 80009ae:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80009b0:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <main+0x9c>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4810      	ldr	r0, [pc, #64]	@ (80009f8 <main+0xa0>)
 80009b6:	f002 fbcd 	bl	8003154 <osThreadNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <main+0xa4>)
 80009be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009c0:	f002 fba2 	bl	8003108 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <main+0x6c>
 80009c8:	080071c4 	.word	0x080071c4
 80009cc:	200000d8 	.word	0x200000d8
 80009d0:	08007134 	.word	0x08007134
 80009d4:	08000bb5 	.word	0x08000bb5
 80009d8:	200000c8 	.word	0x200000c8
 80009dc:	08007158 	.word	0x08007158
 80009e0:	08000c8d 	.word	0x08000c8d
 80009e4:	200000cc 	.word	0x200000cc
 80009e8:	0800717c 	.word	0x0800717c
 80009ec:	08000d65 	.word	0x08000d65
 80009f0:	200000d0 	.word	0x200000d0
 80009f4:	080071a0 	.word	0x080071a0
 80009f8:	08000d79 	.word	0x08000d79
 80009fc:	200000d4 	.word	0x200000d4

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	@ 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2234      	movs	r2, #52	@ 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f005 fe16 	bl	8006640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <SystemClock_Config+0xd4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	4a29      	ldr	r2, [pc, #164]	@ (8000ad4 <SystemClock_Config+0xd4>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a34:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <SystemClock_Config+0xd4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <SystemClock_Config+0xd8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a4c:	4a22      	ldr	r2, [pc, #136]	@ (8000ad8 <SystemClock_Config+0xd8>)
 8000a4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <SystemClock_Config+0xd8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	2301      	movs	r3, #1
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a70:	2300      	movs	r3, #0
 8000a72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a74:	2310      	movs	r3, #16
 8000a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a78:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f98c 	bl	8001dac <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a9a:	f000 f9ab 	bl	8000df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fdfa 	bl	80016b4 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ac6:	f000 f995 	bl	8000df4 <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3750      	adds	r7, #80	@ 0x50
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <MX_USART1_UART_Init+0x50>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_USART1_UART_Init+0x4c>)
 8000b14:	f001 fe84 	bl	8002820 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f000 f969 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000080 	.word	0x20000080
 8000b2c:	40011000 	.word	0x40011000

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_GPIO_Init+0x7c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <MX_GPIO_Init+0x7c>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_GPIO_Init+0x7c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_GPIO_Init+0x7c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a10      	ldr	r2, [pc, #64]	@ (8000bac <MX_GPIO_Init+0x7c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_GPIO_Init+0x7c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DATA_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2103      	movs	r1, #3
 8000b82:	480b      	ldr	r0, [pc, #44]	@ (8000bb0 <MX_GPIO_Init+0x80>)
 8000b84:	f000 fd7c 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <MX_GPIO_Init+0x80>)
 8000ba0:	f000 fbda 	bl	8001358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	@ 0x50
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char *msg = "Task01 Adquirindo um Semaforo";
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <StartTask01+0xbc>)
 8000bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Infinite loop */
  for(;;)
  {

	  cont =osSemaphoreGetCount(CountingSem01Handle);
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <StartTask01+0xc0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 fc4d 	bl	8003464 <osSemaphoreGetCount>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8000c78 <StartTask01+0xc4>)
 8000bce:	6013      	str	r3, [r2, #0]
	  snprintf(buffer,64,"o Contador(Initial) : %lu ",cont);
 8000bd0:	4b29      	ldr	r3, [pc, #164]	@ (8000c78 <StartTask01+0xc4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f107 000c 	add.w	r0, r7, #12
 8000bd8:	4a28      	ldr	r2, [pc, #160]	@ (8000c7c <StartTask01+0xc8>)
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	f005 fcfc 	bl	80065d8 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer,strlen(buffer),100);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fb13 	bl	8000210 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	f107 010c 	add.w	r1, r7, #12
 8000bf2:	2364      	movs	r3, #100	@ 0x64
 8000bf4:	4822      	ldr	r0, [pc, #136]	@ (8000c80 <StartTask01+0xcc>)
 8000bf6:	f001 fe63 	bl	80028c0 <HAL_UART_Transmit>

	  osSemaphoreAcquire(CountingSem01Handle,osWaitForever);
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <StartTask01+0xc0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 fbdc 	bl	80033c0 <osSemaphoreAcquire>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg,strlen(msg),100);
 8000c08:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000c0a:	f7ff fb01 	bl	8000210 <strlen>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	2364      	movs	r3, #100	@ 0x64
 8000c14:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000c16:	481a      	ldr	r0, [pc, #104]	@ (8000c80 <StartTask01+0xcc>)
 8000c18:	f001 fe52 	bl	80028c0 <HAL_UART_Transmit>

	  TM1637_DisplayString("A.01", TM1637_ADDR_POS0);
 8000c1c:	21c0      	movs	r1, #192	@ 0xc0
 8000c1e:	4819      	ldr	r0, [pc, #100]	@ (8000c84 <StartTask01+0xd0>)
 8000c20:	f7ff fe72 	bl	8000908 <TM1637_DisplayString>
	  osDelay(1000);
 8000c24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c28:	f002 fb26 	bl	8003278 <osDelay>

	  cont =osSemaphoreGetCount(CountingSem01Handle);
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <StartTask01+0xc0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 fc17 	bl	8003464 <osSemaphoreGetCount>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <StartTask01+0xc4>)
 8000c3a:	6013      	str	r3, [r2, #0]
	  snprintf(buffer,64,"o Contador(End) : %lu ",cont);
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <StartTask01+0xc4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f107 000c 	add.w	r0, r7, #12
 8000c44:	4a10      	ldr	r2, [pc, #64]	@ (8000c88 <StartTask01+0xd4>)
 8000c46:	2140      	movs	r1, #64	@ 0x40
 8000c48:	f005 fcc6 	bl	80065d8 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer,strlen(buffer),100);
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fadd 	bl	8000210 <strlen>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	f107 010c 	add.w	r1, r7, #12
 8000c5e:	2364      	movs	r3, #100	@ 0x64
 8000c60:	4807      	ldr	r0, [pc, #28]	@ (8000c80 <StartTask01+0xcc>)
 8000c62:	f001 fe2d 	bl	80028c0 <HAL_UART_Transmit>


      osDelay(100);
 8000c66:	2064      	movs	r0, #100	@ 0x64
 8000c68:	f002 fb06 	bl	8003278 <osDelay>
	  cont =osSemaphoreGetCount(CountingSem01Handle);
 8000c6c:	bf00      	nop
 8000c6e:	e7a7      	b.n	8000bc0 <StartTask01+0xc>
 8000c70:	08007038 	.word	0x08007038
 8000c74:	200000d8 	.word	0x200000d8
 8000c78:	200000dc 	.word	0x200000dc
 8000c7c:	08007058 	.word	0x08007058
 8000c80:	20000080 	.word	0x20000080
 8000c84:	08007074 	.word	0x08007074
 8000c88:	0800707c 	.word	0x0800707c

08000c8c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	@ 0x50
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  char *msg = "Task02 Adquirindo um Semafaro ";
 8000c94:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <StartTask02+0xbc>)
 8000c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  char buffer[64];
  /* Infinite loop */
  for(;;)
  {
	      cont =osSemaphoreGetCount(CountingSem01Handle);
 8000c98:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <StartTask02+0xc0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fbe1 	bl	8003464 <osSemaphoreGetCount>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8000d50 <StartTask02+0xc4>)
 8000ca6:	6013      	str	r3, [r2, #0]
	  	  snprintf(buffer,64,"o Contador(Initial) : %lu ",cont);
 8000ca8:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <StartTask02+0xc4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f107 000c 	add.w	r0, r7, #12
 8000cb0:	4a28      	ldr	r2, [pc, #160]	@ (8000d54 <StartTask02+0xc8>)
 8000cb2:	2140      	movs	r1, #64	@ 0x40
 8000cb4:	f005 fc90 	bl	80065d8 <sniprintf>
	  	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer,strlen(buffer),100);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff faa7 	bl	8000210 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f107 010c 	add.w	r1, r7, #12
 8000cca:	2364      	movs	r3, #100	@ 0x64
 8000ccc:	4822      	ldr	r0, [pc, #136]	@ (8000d58 <StartTask02+0xcc>)
 8000cce:	f001 fdf7 	bl	80028c0 <HAL_UART_Transmit>


	  	  osSemaphoreAcquire(CountingSem01Handle,osWaitForever);
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <StartTask02+0xc0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 fb70 	bl	80033c0 <osSemaphoreAcquire>
	  	  HAL_UART_Transmit(&huart1, (uint8_t*)msg,strlen(msg),100);
 8000ce0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000ce2:	f7ff fa95 	bl	8000210 <strlen>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	2364      	movs	r3, #100	@ 0x64
 8000cec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000cee:	481a      	ldr	r0, [pc, #104]	@ (8000d58 <StartTask02+0xcc>)
 8000cf0:	f001 fde6 	bl	80028c0 <HAL_UART_Transmit>
	  	  osDelay(1000);
 8000cf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf8:	f002 fabe 	bl	8003278 <osDelay>
	  	  TM1637_DisplayString("A.02", TM1637_ADDR_POS0);
 8000cfc:	21c0      	movs	r1, #192	@ 0xc0
 8000cfe:	4817      	ldr	r0, [pc, #92]	@ (8000d5c <StartTask02+0xd0>)
 8000d00:	f7ff fe02 	bl	8000908 <TM1637_DisplayString>


	  	  cont =osSemaphoreGetCount(CountingSem01Handle);
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <StartTask02+0xc0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 fbab 	bl	8003464 <osSemaphoreGetCount>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <StartTask02+0xc4>)
 8000d12:	6013      	str	r3, [r2, #0]
	  	  snprintf(buffer,64,"o Contador(End) : %lu ",cont);
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <StartTask02+0xc4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f107 000c 	add.w	r0, r7, #12
 8000d1c:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <StartTask02+0xd4>)
 8000d1e:	2140      	movs	r1, #64	@ 0x40
 8000d20:	f005 fc5a 	bl	80065d8 <sniprintf>
	  	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer,strlen(buffer),100);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fa71 	bl	8000210 <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	f107 010c 	add.w	r1, r7, #12
 8000d36:	2364      	movs	r3, #100	@ 0x64
 8000d38:	4807      	ldr	r0, [pc, #28]	@ (8000d58 <StartTask02+0xcc>)
 8000d3a:	f001 fdc1 	bl	80028c0 <HAL_UART_Transmit>

	  osDelay(100);
 8000d3e:	2064      	movs	r0, #100	@ 0x64
 8000d40:	f002 fa9a 	bl	8003278 <osDelay>
	      cont =osSemaphoreGetCount(CountingSem01Handle);
 8000d44:	bf00      	nop
 8000d46:	e7a7      	b.n	8000c98 <StartTask02+0xc>
 8000d48:	08007094 	.word	0x08007094
 8000d4c:	200000d8 	.word	0x200000d8
 8000d50:	200000dc 	.word	0x200000dc
 8000d54:	08007058 	.word	0x08007058
 8000d58:	20000080 	.word	0x20000080
 8000d5c:	080070b4 	.word	0x080070b4
 8000d60:	0800707c 	.word	0x0800707c

08000d64 <StartInitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInitTask */
  /* Infinite loop */
	TM1637_Init();
 8000d6c:	f7ff fd46 	bl	80007fc <TM1637_Init>
		  osDelay(500);
	  }*/



	  osDelay(100);
 8000d70:	2064      	movs	r0, #100	@ 0x64
 8000d72:	f002 fa81 	bl	8003278 <osDelay>
 8000d76:	e7fb      	b.n	8000d70 <StartInitTask+0xc>

08000d78 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  char *msg = "Task03 Adquirindo um Semafaro";
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <StartTask03+0x48>)
 8000d82:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(CountingSem01Handle,2000);
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <StartTask03+0x4c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 fb17 	bl	80033c0 <osSemaphoreAcquire>
	cont = osSemaphoreGetCount(CountingSem01Handle);
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <StartTask03+0x4c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fb64 	bl	8003464 <osSemaphoreGetCount>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <StartTask03+0x50>)
 8000da0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100);
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f7ff fa34 	bl	8000210 <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	2364      	movs	r3, #100	@ 0x64
 8000dae:	68f9      	ldr	r1, [r7, #12]
 8000db0:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <StartTask03+0x54>)
 8000db2:	f001 fd85 	bl	80028c0 <HAL_UART_Transmit>

    osDelay(100);
 8000db6:	2064      	movs	r0, #100	@ 0x64
 8000db8:	f002 fa5e 	bl	8003278 <osDelay>
	osSemaphoreAcquire(CountingSem01Handle,2000);
 8000dbc:	bf00      	nop
 8000dbe:	e7e1      	b.n	8000d84 <StartTask03+0xc>
 8000dc0:	080070bc 	.word	0x080070bc
 8000dc4:	200000d8 	.word	0x200000d8
 8000dc8:	200000dc 	.word	0x200000dc
 8000dcc:	20000080 	.word	0x20000080

08000dd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000de2:	f000 f9b7 	bl	8001154 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40001000 	.word	0x40001000

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <Error_Handler+0x8>

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_MspInit+0x54>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	4a11      	ldr	r2, [pc, #68]	@ (8000e54 <HAL_MspInit+0x54>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <HAL_MspInit+0x54>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <HAL_MspInit+0x54>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <HAL_MspInit+0x54>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <HAL_MspInit+0x54>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	210f      	movs	r1, #15
 8000e42:	f06f 0001 	mvn.w	r0, #1
 8000e46:	f000 fa5d 	bl	8001304 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a19      	ldr	r2, [pc, #100]	@ (8000edc <HAL_UART_MspInit+0x84>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d12c      	bne.n	8000ed4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	4a17      	ldr	r2, [pc, #92]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e84:	f043 0310 	orr.w	r3, r3, #16
 8000e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	f003 0310 	and.w	r3, r3, #16
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eb2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <HAL_UART_MspInit+0x8c>)
 8000ed0:	f000 fa42 	bl	8001358 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	@ 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	@ 0x38
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <HAL_InitTick+0xe4>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	4a32      	ldr	r2, [pc, #200]	@ (8000fcc <HAL_InitTick+0xe4>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f08:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <HAL_InitTick+0xe4>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f14:	f107 0210 	add.w	r2, r7, #16
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fce2 	bl	80018e8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d103      	bne.n	8000f36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f2e:	f000 fcb3 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
 8000f32:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f34:	e004      	b.n	8000f40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f36:	f000 fcaf 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f42:	4a23      	ldr	r2, [pc, #140]	@ (8000fd0 <HAL_InitTick+0xe8>)
 8000f44:	fba2 2303 	umull	r2, r3, r2, r3
 8000f48:	0c9b      	lsrs	r3, r3, #18
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <HAL_InitTick+0xec>)
 8000f50:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <HAL_InitTick+0xf0>)
 8000f52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <HAL_InitTick+0xec>)
 8000f56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <HAL_InitTick+0xec>)
 8000f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <HAL_InitTick+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_InitTick+0xec>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_InitTick+0xec>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f74:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <HAL_InitTick+0xec>)
 8000f76:	f001 f9b7 	bl	80022e8 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d11b      	bne.n	8000fc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f88:	4812      	ldr	r0, [pc, #72]	@ (8000fd4 <HAL_InitTick+0xec>)
 8000f8a:	f001 fa07 	bl	800239c <HAL_TIM_Base_Start_IT>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d111      	bne.n	8000fc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f9c:	2036      	movs	r0, #54	@ 0x36
 8000f9e:	f000 f9cd 	bl	800133c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d808      	bhi.n	8000fba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	2036      	movs	r0, #54	@ 0x36
 8000fae:	f000 f9a9 	bl	8001304 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_InitTick+0xf4>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e002      	b.n	8000fc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3738      	adds	r7, #56	@ 0x38
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	431bde83 	.word	0x431bde83
 8000fd4:	200000e0 	.word	0x200000e0
 8000fd8:	40001000 	.word	0x40001000
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <TIM6_DAC_IRQHandler+0x10>)
 800101e:	f001 fa2d 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000e0 	.word	0x200000e0

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f005 fb4e 	bl	80066fc <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20020000 	.word	0x20020000
 800108c:	00000400 	.word	0x00000400
 8001090:	20000128 	.word	0x20000128
 8001094:	20004c60 	.word	0x20004c60

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010c0:	f7ff ffea 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	@ (80010fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010ea:	f005 fb0d 	bl	8006708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff fc33 	bl	8000958 <main>
  bx  lr    
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001100:	08007230 	.word	0x08007230
  ldr r2, =_sbss
 8001104:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001108:	20004c60 	.word	0x20004c60

0800110c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001114:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <HAL_Init+0x40>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800111e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001120:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <HAL_Init+0x40>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800112a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	@ (8001150 <HAL_Init+0x40>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f8d8 	bl	80012ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	200f      	movs	r0, #15
 8001140:	f7ff fed2 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff fe5c 	bl	8000e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023c00 	.word	0x40023c00

08001154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_IncTick+0x20>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_IncTick+0x24>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <HAL_IncTick+0x24>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008
 8001178:	2000012c 	.word	0x2000012c

0800117c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <HAL_GetTick+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	2000012c 	.word	0x2000012c

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	@ (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff4c 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001316:	f7ff ff61 	bl	80011dc <__NVIC_GetPriorityGrouping>
 800131a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f7ff ffb1 	bl	8001288 <NVIC_EncodePriority>
 8001326:	4602      	mov	r2, r0
 8001328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff80 	bl	8001234 <__NVIC_SetPriority>
}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff54 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e165      	b.n	8001640 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8154 	bne.w	800163a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d005      	beq.n	80013aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d130      	bne.n	800140c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 0201 	and.w	r2, r3, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b03      	cmp	r3, #3
 8001416:	d017      	beq.n	8001448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d123      	bne.n	800149c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80ae 	beq.w	800163a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001658 <HAL_GPIO_Init+0x300>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001658 <HAL_GPIO_Init+0x300>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001658 <HAL_GPIO_Init+0x300>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fa:	4a58      	ldr	r2, [pc, #352]	@ (800165c <HAL_GPIO_Init+0x304>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4f      	ldr	r2, [pc, #316]	@ (8001660 <HAL_GPIO_Init+0x308>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d025      	beq.n	8001572 <HAL_GPIO_Init+0x21a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4e      	ldr	r2, [pc, #312]	@ (8001664 <HAL_GPIO_Init+0x30c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01f      	beq.n	800156e <HAL_GPIO_Init+0x216>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4d      	ldr	r2, [pc, #308]	@ (8001668 <HAL_GPIO_Init+0x310>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x212>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4c      	ldr	r2, [pc, #304]	@ (800166c <HAL_GPIO_Init+0x314>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x20e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4b      	ldr	r2, [pc, #300]	@ (8001670 <HAL_GPIO_Init+0x318>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x20a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4a      	ldr	r2, [pc, #296]	@ (8001674 <HAL_GPIO_Init+0x31c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x206>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a49      	ldr	r2, [pc, #292]	@ (8001678 <HAL_GPIO_Init+0x320>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x202>
 8001556:	2306      	movs	r3, #6
 8001558:	e00c      	b.n	8001574 <HAL_GPIO_Init+0x21c>
 800155a:	2307      	movs	r3, #7
 800155c:	e00a      	b.n	8001574 <HAL_GPIO_Init+0x21c>
 800155e:	2305      	movs	r3, #5
 8001560:	e008      	b.n	8001574 <HAL_GPIO_Init+0x21c>
 8001562:	2304      	movs	r3, #4
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x21c>
 8001566:	2303      	movs	r3, #3
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x21c>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x21c>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x21c>
 8001572:	2300      	movs	r3, #0
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001584:	4935      	ldr	r1, [pc, #212]	@ (800165c <HAL_GPIO_Init+0x304>)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001592:	4b3a      	ldr	r3, [pc, #232]	@ (800167c <HAL_GPIO_Init+0x324>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b6:	4a31      	ldr	r2, [pc, #196]	@ (800167c <HAL_GPIO_Init+0x324>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015bc:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <HAL_GPIO_Init+0x324>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e0:	4a26      	ldr	r2, [pc, #152]	@ (800167c <HAL_GPIO_Init+0x324>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015e6:	4b25      	ldr	r3, [pc, #148]	@ (800167c <HAL_GPIO_Init+0x324>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800160a:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <HAL_GPIO_Init+0x324>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <HAL_GPIO_Init+0x324>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001634:	4a11      	ldr	r2, [pc, #68]	@ (800167c <HAL_GPIO_Init+0x324>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3301      	adds	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	f67f ae96 	bls.w	8001374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40013800 	.word	0x40013800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400
 8001668:	40020800 	.word	0x40020800
 800166c:	40020c00 	.word	0x40020c00
 8001670:	40021000 	.word	0x40021000
 8001674:	40021400 	.word	0x40021400
 8001678:	40021800 	.word	0x40021800
 800167c:	40013c00 	.word	0x40013c00

08001680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800169c:	e003      	b.n	80016a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	041a      	lsls	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	619a      	str	r2, [r3, #24]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0cc      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c8:	4b68      	ldr	r3, [pc, #416]	@ (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d90c      	bls.n	80016f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b65      	ldr	r3, [pc, #404]	@ (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b63      	ldr	r3, [pc, #396]	@ (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0b8      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001708:	4b59      	ldr	r3, [pc, #356]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a58      	ldr	r2, [pc, #352]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001712:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001720:	4b53      	ldr	r3, [pc, #332]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a52      	ldr	r2, [pc, #328]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800172a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800172c:	4b50      	ldr	r3, [pc, #320]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	494d      	ldr	r1, [pc, #308]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d044      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d119      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e07f      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d003      	beq.n	8001772 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	2b03      	cmp	r3, #3
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001772:	4b3f      	ldr	r3, [pc, #252]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e06f      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001782:	4b3b      	ldr	r3, [pc, #236]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e067      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001792:	4b37      	ldr	r3, [pc, #220]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f023 0203 	bic.w	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4934      	ldr	r1, [pc, #208]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a4:	f7ff fcea 	bl	800117c <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7ff fce6 	bl	800117c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e04f      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 020c 	and.w	r2, r3, #12
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d1eb      	bne.n	80017ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d4:	4b25      	ldr	r3, [pc, #148]	@ (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d20c      	bcs.n	80017fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b22      	ldr	r3, [pc, #136]	@ (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b20      	ldr	r3, [pc, #128]	@ (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e032      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4916      	ldr	r1, [pc, #88]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001826:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	490e      	ldr	r1, [pc, #56]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800183a:	f000 f887 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800183e:	4602      	mov	r2, r0
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	490a      	ldr	r1, [pc, #40]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	5ccb      	ldrb	r3, [r1, r3]
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	4a09      	ldr	r2, [pc, #36]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <HAL_RCC_ClockConfig+0x1c8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fb44 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00
 8001870:	40023800 	.word	0x40023800
 8001874:	080071d4 	.word	0x080071d4
 8001878:	20000000 	.word	0x20000000
 800187c:	20000004 	.word	0x20000004

08001880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001884:	4b03      	ldr	r3, [pc, #12]	@ (8001894 <HAL_RCC_GetHCLKFreq+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000000 	.word	0x20000000

08001898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800189c:	f7ff fff0 	bl	8001880 <HAL_RCC_GetHCLKFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	0a9b      	lsrs	r3, r3, #10
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	4903      	ldr	r1, [pc, #12]	@ (80018bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	080071e4 	.word	0x080071e4

080018c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018c4:	f7ff ffdc 	bl	8001880 <HAL_RCC_GetHCLKFreq>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	0b5b      	lsrs	r3, r3, #13
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	4903      	ldr	r1, [pc, #12]	@ (80018e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018d6:	5ccb      	ldrb	r3, [r1, r3]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	080071e4 	.word	0x080071e4

080018e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	220f      	movs	r2, #15
 80018f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_RCC_GetClockConfig+0x5c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0203 	and.w	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_RCC_GetClockConfig+0x5c>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <HAL_RCC_GetClockConfig+0x5c>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_RCC_GetClockConfig+0x5c>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800192a:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <HAL_RCC_GetClockConfig+0x60>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 020f 	and.w	r2, r3, #15
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	601a      	str	r2, [r3, #0]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40023c00 	.word	0x40023c00

0800194c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001950:	b0ae      	sub	sp, #184	@ 0xb8
 8001952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001972:	4bcb      	ldr	r3, [pc, #812]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b0c      	cmp	r3, #12
 800197c:	f200 8206 	bhi.w	8001d8c <HAL_RCC_GetSysClockFreq+0x440>
 8001980:	a201      	add	r2, pc, #4	@ (adr r2, 8001988 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	080019bd 	.word	0x080019bd
 800198c:	08001d8d 	.word	0x08001d8d
 8001990:	08001d8d 	.word	0x08001d8d
 8001994:	08001d8d 	.word	0x08001d8d
 8001998:	080019c5 	.word	0x080019c5
 800199c:	08001d8d 	.word	0x08001d8d
 80019a0:	08001d8d 	.word	0x08001d8d
 80019a4:	08001d8d 	.word	0x08001d8d
 80019a8:	080019cd 	.word	0x080019cd
 80019ac:	08001d8d 	.word	0x08001d8d
 80019b0:	08001d8d 	.word	0x08001d8d
 80019b4:	08001d8d 	.word	0x08001d8d
 80019b8:	08001bbd 	.word	0x08001bbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4bb9      	ldr	r3, [pc, #740]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x358>)
 80019be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019c2:	e1e7      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c4:	4bb8      	ldr	r3, [pc, #736]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019ca:	e1e3      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019cc:	4bb4      	ldr	r3, [pc, #720]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d8:	4bb1      	ldr	r3, [pc, #708]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d071      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e4:	4bae      	ldr	r3, [pc, #696]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	2200      	movs	r2, #0
 80019ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80019f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80019f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001a0a:	4622      	mov	r2, r4
 8001a0c:	462b      	mov	r3, r5
 8001a0e:	f04f 0000 	mov.w	r0, #0
 8001a12:	f04f 0100 	mov.w	r1, #0
 8001a16:	0159      	lsls	r1, r3, #5
 8001a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a1c:	0150      	lsls	r0, r2, #5
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4621      	mov	r1, r4
 8001a24:	1a51      	subs	r1, r2, r1
 8001a26:	6439      	str	r1, [r7, #64]	@ 0x40
 8001a28:	4629      	mov	r1, r5
 8001a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001a3c:	4649      	mov	r1, r9
 8001a3e:	018b      	lsls	r3, r1, #6
 8001a40:	4641      	mov	r1, r8
 8001a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a46:	4641      	mov	r1, r8
 8001a48:	018a      	lsls	r2, r1, #6
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	1a51      	subs	r1, r2, r1
 8001a4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001a50:	4649      	mov	r1, r9
 8001a52:	eb63 0301 	sbc.w	r3, r3, r1
 8001a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001a64:	4649      	mov	r1, r9
 8001a66:	00cb      	lsls	r3, r1, #3
 8001a68:	4641      	mov	r1, r8
 8001a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a6e:	4641      	mov	r1, r8
 8001a70:	00ca      	lsls	r2, r1, #3
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	4622      	mov	r2, r4
 8001a7a:	189b      	adds	r3, r3, r2
 8001a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a7e:	462b      	mov	r3, r5
 8001a80:	460a      	mov	r2, r1
 8001a82:	eb42 0303 	adc.w	r3, r2, r3
 8001a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a94:	4629      	mov	r1, r5
 8001a96:	024b      	lsls	r3, r1, #9
 8001a98:	4621      	mov	r1, r4
 8001a9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	024a      	lsls	r2, r1, #9
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ab0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ab4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ab8:	f7fe fc02 	bl	80002c0 <__aeabi_uldivmod>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ac6:	e067      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac8:	4b75      	ldr	r3, [pc, #468]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	099b      	lsrs	r3, r3, #6
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ad4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ae6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001aea:	4622      	mov	r2, r4
 8001aec:	462b      	mov	r3, r5
 8001aee:	f04f 0000 	mov.w	r0, #0
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	0159      	lsls	r1, r3, #5
 8001af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afc:	0150      	lsls	r0, r2, #5
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4621      	mov	r1, r4
 8001b04:	1a51      	subs	r1, r2, r1
 8001b06:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001b08:	4629      	mov	r1, r5
 8001b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	018b      	lsls	r3, r1, #6
 8001b20:	4641      	mov	r1, r8
 8001b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b26:	4641      	mov	r1, r8
 8001b28:	018a      	lsls	r2, r1, #6
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b30:	4649      	mov	r1, r9
 8001b32:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b4a:	4692      	mov	sl, r2
 8001b4c:	469b      	mov	fp, r3
 8001b4e:	4623      	mov	r3, r4
 8001b50:	eb1a 0303 	adds.w	r3, sl, r3
 8001b54:	623b      	str	r3, [r7, #32]
 8001b56:	462b      	mov	r3, r5
 8001b58:	eb4b 0303 	adc.w	r3, fp, r3
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	028b      	lsls	r3, r1, #10
 8001b6e:	4621      	mov	r1, r4
 8001b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b74:	4621      	mov	r1, r4
 8001b76:	028a      	lsls	r2, r1, #10
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b80:	2200      	movs	r2, #0
 8001b82:	673b      	str	r3, [r7, #112]	@ 0x70
 8001b84:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001b8a:	f7fe fb99 	bl	80002c0 <__aeabi_uldivmod>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4613      	mov	r3, r2
 8001b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b98:	4b41      	ldr	r3, [pc, #260]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	0c1b      	lsrs	r3, r3, #16
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bba:	e0eb      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bbc:	4b38      	ldr	r3, [pc, #224]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc8:	4b35      	ldr	r3, [pc, #212]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d06b      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd4:	4b32      	ldr	r3, [pc, #200]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	2200      	movs	r2, #0
 8001bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001bde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001be0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001be8:	2300      	movs	r3, #0
 8001bea:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	462b      	mov	r3, r5
 8001bf4:	f04f 0000 	mov.w	r0, #0
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	0159      	lsls	r1, r3, #5
 8001bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c02:	0150      	lsls	r0, r2, #5
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4621      	mov	r1, r4
 8001c0a:	1a51      	subs	r1, r2, r1
 8001c0c:	61b9      	str	r1, [r7, #24]
 8001c0e:	4629      	mov	r1, r5
 8001c10:	eb63 0301 	sbc.w	r3, r3, r1
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c22:	4659      	mov	r1, fp
 8001c24:	018b      	lsls	r3, r1, #6
 8001c26:	4651      	mov	r1, sl
 8001c28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c2c:	4651      	mov	r1, sl
 8001c2e:	018a      	lsls	r2, r1, #6
 8001c30:	4651      	mov	r1, sl
 8001c32:	ebb2 0801 	subs.w	r8, r2, r1
 8001c36:	4659      	mov	r1, fp
 8001c38:	eb63 0901 	sbc.w	r9, r3, r1
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c50:	4690      	mov	r8, r2
 8001c52:	4699      	mov	r9, r3
 8001c54:	4623      	mov	r3, r4
 8001c56:	eb18 0303 	adds.w	r3, r8, r3
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	eb49 0303 	adc.w	r3, r9, r3
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c70:	4629      	mov	r1, r5
 8001c72:	024b      	lsls	r3, r1, #9
 8001c74:	4621      	mov	r1, r4
 8001c76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	024a      	lsls	r2, r1, #9
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c86:	2200      	movs	r2, #0
 8001c88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c8a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001c8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c90:	f7fe fb16 	bl	80002c0 <__aeabi_uldivmod>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c9e:	e065      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x420>
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	00f42400 	.word	0x00f42400
 8001ca8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cac:	4b3d      	ldr	r3, [pc, #244]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cc2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001cc6:	4642      	mov	r2, r8
 8001cc8:	464b      	mov	r3, r9
 8001cca:	f04f 0000 	mov.w	r0, #0
 8001cce:	f04f 0100 	mov.w	r1, #0
 8001cd2:	0159      	lsls	r1, r3, #5
 8001cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd8:	0150      	lsls	r0, r2, #5
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4641      	mov	r1, r8
 8001ce0:	1a51      	subs	r1, r2, r1
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	4649      	mov	r1, r9
 8001ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001cf8:	4659      	mov	r1, fp
 8001cfa:	018b      	lsls	r3, r1, #6
 8001cfc:	4651      	mov	r1, sl
 8001cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d02:	4651      	mov	r1, sl
 8001d04:	018a      	lsls	r2, r1, #6
 8001d06:	4651      	mov	r1, sl
 8001d08:	1a54      	subs	r4, r2, r1
 8001d0a:	4659      	mov	r1, fp
 8001d0c:	eb63 0501 	sbc.w	r5, r3, r1
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	00eb      	lsls	r3, r5, #3
 8001d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d1e:	00e2      	lsls	r2, r4, #3
 8001d20:	4614      	mov	r4, r2
 8001d22:	461d      	mov	r5, r3
 8001d24:	4643      	mov	r3, r8
 8001d26:	18e3      	adds	r3, r4, r3
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	eb45 0303 	adc.w	r3, r5, r3
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d3e:	4629      	mov	r1, r5
 8001d40:	028b      	lsls	r3, r1, #10
 8001d42:	4621      	mov	r1, r4
 8001d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d48:	4621      	mov	r1, r4
 8001d4a:	028a      	lsls	r2, r1, #10
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d54:	2200      	movs	r2, #0
 8001d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d58:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001d5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d5e:	f7fe faaf 	bl	80002c0 <__aeabi_uldivmod>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4613      	mov	r3, r2
 8001d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	0f1b      	lsrs	r3, r3, #28
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d8a:	e003      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	37b8      	adds	r7, #184	@ 0xb8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	00f42400 	.word	0x00f42400

08001dac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e28d      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8083 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001dcc:	4b94      	ldr	r3, [pc, #592]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d019      	beq.n	8001e0c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001dd8:	4b91      	ldr	r3, [pc, #580]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
        || \
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001de4:	4b8e      	ldr	r3, [pc, #568]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001df0:	d00c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df2:	4b8b      	ldr	r3, [pc, #556]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfe:	4b88      	ldr	r3, [pc, #544]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e0a:	d10b      	bne.n	8001e24 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	4b84      	ldr	r3, [pc, #528]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d05b      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x124>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d157      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e25a      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e2c:	d106      	bne.n	8001e3c <HAL_RCC_OscConfig+0x90>
 8001e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7b      	ldr	r2, [pc, #492]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e01d      	b.n	8001e78 <HAL_RCC_OscConfig+0xcc>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0xb4>
 8001e46:	4b76      	ldr	r3, [pc, #472]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a75      	ldr	r2, [pc, #468]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b73      	ldr	r3, [pc, #460]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a72      	ldr	r2, [pc, #456]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0xcc>
 8001e60:	4b6f      	ldr	r3, [pc, #444]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a6e      	ldr	r2, [pc, #440]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6b      	ldr	r2, [pc, #428]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff f97c 	bl	800117c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff f978 	bl	800117c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	@ 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e21f      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	4b61      	ldr	r3, [pc, #388]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0xdc>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f968 	bl	800117c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff f964 	bl	800117c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	@ 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e20b      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	4b57      	ldr	r3, [pc, #348]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x104>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d06f      	beq.n	8001fbe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ede:	4b50      	ldr	r3, [pc, #320]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d017      	beq.n	8001f1a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001eea:	4b4d      	ldr	r3, [pc, #308]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f02:	4b47      	ldr	r3, [pc, #284]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d11c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f0e:	4b44      	ldr	r3, [pc, #272]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d116      	bne.n	8001f48 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	4b41      	ldr	r3, [pc, #260]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x186>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e1d3      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b3b      	ldr	r3, [pc, #236]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4937      	ldr	r1, [pc, #220]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	e03a      	b.n	8001fbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	4b34      	ldr	r3, [pc, #208]	@ (8002024 <HAL_RCC_OscConfig+0x278>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7ff f911 	bl	800117c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7ff f90d 	bl	800117c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1b4      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	4b2b      	ldr	r3, [pc, #172]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b28      	ldr	r3, [pc, #160]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4925      	ldr	r1, [pc, #148]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
 8001f90:	e015      	b.n	8001fbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f92:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <HAL_RCC_OscConfig+0x278>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff f8f0 	bl	800117c <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f8ec 	bl	800117c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e193      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d036      	beq.n	8002038 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d016      	beq.n	8002000 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <HAL_RCC_OscConfig+0x27c>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7ff f8d0 	bl	800117c <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7ff f8cc 	bl	800117c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e173      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x234>
 8001ffe:	e01b      	b.n	8002038 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002000:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_RCC_OscConfig+0x27c>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7ff f8b9 	bl	800117c <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	e00e      	b.n	800202c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200e:	f7ff f8b5 	bl	800117c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d907      	bls.n	800202c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e15c      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
 8002020:	40023800 	.word	0x40023800
 8002024:	42470000 	.word	0x42470000
 8002028:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	4b8a      	ldr	r3, [pc, #552]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 800202e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ea      	bne.n	800200e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8097 	beq.w	8002174 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204a:	4b83      	ldr	r3, [pc, #524]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10f      	bne.n	8002076 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	4b7f      	ldr	r3, [pc, #508]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	4a7e      	ldr	r2, [pc, #504]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002064:	6413      	str	r3, [r2, #64]	@ 0x40
 8002066:	4b7c      	ldr	r3, [pc, #496]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b79      	ldr	r3, [pc, #484]	@ (800225c <HAL_RCC_OscConfig+0x4b0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002082:	4b76      	ldr	r3, [pc, #472]	@ (800225c <HAL_RCC_OscConfig+0x4b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a75      	ldr	r2, [pc, #468]	@ (800225c <HAL_RCC_OscConfig+0x4b0>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208e:	f7ff f875 	bl	800117c <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7ff f871 	bl	800117c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e118      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b6c      	ldr	r3, [pc, #432]	@ (800225c <HAL_RCC_OscConfig+0x4b0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x31e>
 80020bc:	4b66      	ldr	r3, [pc, #408]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c0:	4a65      	ldr	r2, [pc, #404]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c8:	e01c      	b.n	8002104 <HAL_RCC_OscConfig+0x358>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x340>
 80020d2:	4b61      	ldr	r3, [pc, #388]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d6:	4a60      	ldr	r2, [pc, #384]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80020de:	4b5e      	ldr	r3, [pc, #376]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e2:	4a5d      	ldr	r2, [pc, #372]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0x358>
 80020ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f0:	4a59      	ldr	r2, [pc, #356]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f8:	4b57      	ldr	r3, [pc, #348]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fc:	4a56      	ldr	r2, [pc, #344]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80020fe:	f023 0304 	bic.w	r3, r3, #4
 8002102:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d015      	beq.n	8002138 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7ff f836 	bl	800117c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002112:	e00a      	b.n	800212a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002114:	f7ff f832 	bl	800117c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e0d7      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212a:	4b4b      	ldr	r3, [pc, #300]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0ee      	beq.n	8002114 <HAL_RCC_OscConfig+0x368>
 8002136:	e014      	b.n	8002162 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7ff f820 	bl	800117c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7ff f81c 	bl	800117c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0c1      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002156:	4b40      	ldr	r3, [pc, #256]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1ee      	bne.n	8002140 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002168:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	4a3a      	ldr	r2, [pc, #232]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 800216e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002172:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80ad 	beq.w	80022d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800217e:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b08      	cmp	r3, #8
 8002188:	d060      	beq.n	800224c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d145      	bne.n	800221e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002192:	4b33      	ldr	r3, [pc, #204]	@ (8002260 <HAL_RCC_OscConfig+0x4b4>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fff0 	bl	800117c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe ffec 	bl	800117c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e093      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	4b29      	ldr	r3, [pc, #164]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	019b      	lsls	r3, r3, #6
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	3b01      	subs	r3, #1
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e0:	061b      	lsls	r3, r3, #24
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	071b      	lsls	r3, r3, #28
 80021ea:	491b      	ldr	r1, [pc, #108]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_RCC_OscConfig+0x4b4>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7fe ffc1 	bl	800117c <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe ffbd 	bl	800117c <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e064      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x452>
 800221c:	e05c      	b.n	80022d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <HAL_RCC_OscConfig+0x4b4>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe ffaa 	bl	800117c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe ffa6 	bl	800117c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e04d      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <HAL_RCC_OscConfig+0x4ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x480>
 800224a:	e045      	b.n	80022d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d107      	bne.n	8002264 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e040      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
 8002258:	40023800 	.word	0x40023800
 800225c:	40007000 	.word	0x40007000
 8002260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002264:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <HAL_RCC_OscConfig+0x538>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d030      	beq.n	80022d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d129      	bne.n	80022d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d122      	bne.n	80022d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002294:	4013      	ands	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800229a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800229c:	4293      	cmp	r3, r2
 800229e:	d119      	bne.n	80022d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	3b01      	subs	r3, #1
 80022ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d10f      	bne.n	80022d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e041      	b.n	800237e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f839 	bl	8002386 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f000 f9c0 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d001      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e04e      	b.n	8002452 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a23      	ldr	r2, [pc, #140]	@ (8002460 <HAL_TIM_Base_Start_IT+0xc4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d022      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x80>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023de:	d01d      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x80>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002464 <HAL_TIM_Base_Start_IT+0xc8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d018      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x80>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002468 <HAL_TIM_Base_Start_IT+0xcc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d013      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x80>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <HAL_TIM_Base_Start_IT+0xd0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00e      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x80>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1b      	ldr	r2, [pc, #108]	@ (8002470 <HAL_TIM_Base_Start_IT+0xd4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x80>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a19      	ldr	r2, [pc, #100]	@ (8002474 <HAL_TIM_Base_Start_IT+0xd8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x80>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a18      	ldr	r2, [pc, #96]	@ (8002478 <HAL_TIM_Base_Start_IT+0xdc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d111      	bne.n	8002440 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b06      	cmp	r3, #6
 800242c:	d010      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243e:	e007      	b.n	8002450 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40010000 	.word	0x40010000
 8002464:	40000400 	.word	0x40000400
 8002468:	40000800 	.word	0x40000800
 800246c:	40000c00 	.word	0x40000c00
 8002470:	40010400 	.word	0x40010400
 8002474:	40014000 	.word	0x40014000
 8002478:	40001800 	.word	0x40001800

0800247c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d020      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01b      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0202 	mvn.w	r2, #2
 80024b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8d2 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
 80024cc:	e005      	b.n	80024da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f8c4 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f8d5 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d020      	beq.n	800252c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01b      	beq.n	800252c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0204 	mvn.w	r2, #4
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f8ac 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f89e 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8af 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d020      	beq.n	8002578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0208 	mvn.w	r2, #8
 8002548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2204      	movs	r2, #4
 800254e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f886 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f878 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f889 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d020      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01b      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0210 	mvn.w	r2, #16
 8002594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2208      	movs	r2, #8
 800259a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f860 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
 80025b0:	e005      	b.n	80025be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f852 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f863 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00c      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0201 	mvn.w	r2, #1
 80025e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fbf4 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00c      	beq.n	800260c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f900 	bl	800280c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f834 	bl	8002698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00c      	beq.n	8002654 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0220 	mvn.w	r2, #32
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f8d2 	bl	80027f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a43      	ldr	r2, [pc, #268]	@ (80027cc <TIM_Base_SetConfig+0x120>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d013      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ca:	d00f      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a40      	ldr	r2, [pc, #256]	@ (80027d0 <TIM_Base_SetConfig+0x124>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00b      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a3f      	ldr	r2, [pc, #252]	@ (80027d4 <TIM_Base_SetConfig+0x128>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d007      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a3e      	ldr	r2, [pc, #248]	@ (80027d8 <TIM_Base_SetConfig+0x12c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a3d      	ldr	r2, [pc, #244]	@ (80027dc <TIM_Base_SetConfig+0x130>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d108      	bne.n	80026fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a32      	ldr	r2, [pc, #200]	@ (80027cc <TIM_Base_SetConfig+0x120>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02b      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800270c:	d027      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a2f      	ldr	r2, [pc, #188]	@ (80027d0 <TIM_Base_SetConfig+0x124>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d023      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a2e      	ldr	r2, [pc, #184]	@ (80027d4 <TIM_Base_SetConfig+0x128>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01f      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a2d      	ldr	r2, [pc, #180]	@ (80027d8 <TIM_Base_SetConfig+0x12c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01b      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a2c      	ldr	r2, [pc, #176]	@ (80027dc <TIM_Base_SetConfig+0x130>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d017      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2b      	ldr	r2, [pc, #172]	@ (80027e0 <TIM_Base_SetConfig+0x134>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2a      	ldr	r2, [pc, #168]	@ (80027e4 <TIM_Base_SetConfig+0x138>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00f      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a29      	ldr	r2, [pc, #164]	@ (80027e8 <TIM_Base_SetConfig+0x13c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00b      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a28      	ldr	r2, [pc, #160]	@ (80027ec <TIM_Base_SetConfig+0x140>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a27      	ldr	r2, [pc, #156]	@ (80027f0 <TIM_Base_SetConfig+0x144>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d003      	beq.n	800275e <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a26      	ldr	r2, [pc, #152]	@ (80027f4 <TIM_Base_SetConfig+0x148>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d108      	bne.n	8002770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a0e      	ldr	r2, [pc, #56]	@ (80027cc <TIM_Base_SetConfig+0x120>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d003      	beq.n	800279e <TIM_Base_SetConfig+0xf2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a10      	ldr	r2, [pc, #64]	@ (80027dc <TIM_Base_SetConfig+0x130>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d103      	bne.n	80027a6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f043 0204 	orr.w	r2, r3, #4
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	601a      	str	r2, [r3, #0]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800
 80027d8:	40000c00 	.word	0x40000c00
 80027dc:	40010400 	.word	0x40010400
 80027e0:	40014000 	.word	0x40014000
 80027e4:	40014400 	.word	0x40014400
 80027e8:	40014800 	.word	0x40014800
 80027ec:	40001800 	.word	0x40001800
 80027f0:	40001c00 	.word	0x40001c00
 80027f4:	40002000 	.word	0x40002000

080027f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e042      	b.n	80028b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe fb06 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	@ 0x24
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f973 	bl	8002b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	@ 0x28
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d175      	bne.n	80029cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_UART_Transmit+0x2c>
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e06e      	b.n	80029ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2221      	movs	r2, #33	@ 0x21
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028fe:	f7fe fc3d 	bl	800117c <HAL_GetTick>
 8002902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	88fa      	ldrh	r2, [r7, #6]
 8002908:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	88fa      	ldrh	r2, [r7, #6]
 800290e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002918:	d108      	bne.n	800292c <HAL_UART_Transmit+0x6c>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	e003      	b.n	8002934 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002934:	e02e      	b.n	8002994 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	2180      	movs	r1, #128	@ 0x80
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f848 	bl	80029d6 <UART_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e03a      	b.n	80029ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800296c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	3302      	adds	r3, #2
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	e007      	b.n	8002986 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	3301      	adds	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1cb      	bne.n	8002936 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2140      	movs	r1, #64	@ 0x40
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f814 	bl	80029d6 <UART_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e006      	b.n	80029ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e6:	e03b      	b.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029ee:	d037      	beq.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f0:	f7fe fbc4 	bl	800117c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	6a3a      	ldr	r2, [r7, #32]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d302      	bcc.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e03a      	b.n	8002a80 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d023      	beq.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b80      	cmp	r3, #128	@ 0x80
 8002a1c:	d020      	beq.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b40      	cmp	r3, #64	@ 0x40
 8002a22:	d01d      	beq.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d116      	bne.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f81d 	bl	8002a88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2208      	movs	r2, #8
 8002a52:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e00f      	b.n	8002a80 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d0b4      	beq.n	80029e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b095      	sub	sp, #84	@ 0x54
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ab0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ab6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ab8:	e841 2300 	strex	r3, r2, [r1]
 8002abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e5      	bne.n	8002a90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3314      	adds	r3, #20
 8002aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	e853 3f00 	ldrex	r3, [r3]
 8002ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aec:	e841 2300 	strex	r3, r2, [r1]
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e5      	bne.n	8002ac4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d119      	bne.n	8002b34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	e853 3f00 	ldrex	r3, [r3]
 8002b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f023 0310 	bic.w	r3, r3, #16
 8002b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b20:	61ba      	str	r2, [r7, #24]
 8002b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	6979      	ldr	r1, [r7, #20]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e5      	bne.n	8002b00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b42:	bf00      	nop
 8002b44:	3754      	adds	r7, #84	@ 0x54
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b0c0      	sub	sp, #256	@ 0x100
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6c:	68d9      	ldr	r1, [r3, #12]
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	ea40 0301 	orr.w	r3, r0, r1
 8002b78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ba8:	f021 010c 	bic.w	r1, r1, #12
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bca:	6999      	ldr	r1, [r3, #24]
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	ea40 0301 	orr.w	r3, r0, r1
 8002bd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b8f      	ldr	r3, [pc, #572]	@ (8002e1c <UART_SetConfig+0x2cc>)
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d005      	beq.n	8002bf0 <UART_SetConfig+0xa0>
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b8d      	ldr	r3, [pc, #564]	@ (8002e20 <UART_SetConfig+0x2d0>)
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d104      	bne.n	8002bfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7fe fe66 	bl	80018c0 <HAL_RCC_GetPCLK2Freq>
 8002bf4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002bf8:	e003      	b.n	8002c02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bfa:	f7fe fe4d 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
 8002bfe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c0c:	f040 810c 	bne.w	8002e28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c22:	4622      	mov	r2, r4
 8002c24:	462b      	mov	r3, r5
 8002c26:	1891      	adds	r1, r2, r2
 8002c28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c2a:	415b      	adcs	r3, r3
 8002c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c32:	4621      	mov	r1, r4
 8002c34:	eb12 0801 	adds.w	r8, r2, r1
 8002c38:	4629      	mov	r1, r5
 8002c3a:	eb43 0901 	adc.w	r9, r3, r1
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c52:	4690      	mov	r8, r2
 8002c54:	4699      	mov	r9, r3
 8002c56:	4623      	mov	r3, r4
 8002c58:	eb18 0303 	adds.w	r3, r8, r3
 8002c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c60:	462b      	mov	r3, r5
 8002c62:	eb49 0303 	adc.w	r3, r9, r3
 8002c66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c7e:	460b      	mov	r3, r1
 8002c80:	18db      	adds	r3, r3, r3
 8002c82:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c84:	4613      	mov	r3, r2
 8002c86:	eb42 0303 	adc.w	r3, r2, r3
 8002c8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c94:	f7fd fb14 	bl	80002c0 <__aeabi_uldivmod>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4b61      	ldr	r3, [pc, #388]	@ (8002e24 <UART_SetConfig+0x2d4>)
 8002c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	011c      	lsls	r4, r3, #4
 8002ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cb0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002cb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002cb8:	4642      	mov	r2, r8
 8002cba:	464b      	mov	r3, r9
 8002cbc:	1891      	adds	r1, r2, r2
 8002cbe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002cc0:	415b      	adcs	r3, r3
 8002cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cc8:	4641      	mov	r1, r8
 8002cca:	eb12 0a01 	adds.w	sl, r2, r1
 8002cce:	4649      	mov	r1, r9
 8002cd0:	eb43 0b01 	adc.w	fp, r3, r1
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ce0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce8:	4692      	mov	sl, r2
 8002cea:	469b      	mov	fp, r3
 8002cec:	4643      	mov	r3, r8
 8002cee:	eb1a 0303 	adds.w	r3, sl, r3
 8002cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8002cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d14:	460b      	mov	r3, r1
 8002d16:	18db      	adds	r3, r3, r3
 8002d18:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	eb42 0303 	adc.w	r3, r2, r3
 8002d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d2a:	f7fd fac9 	bl	80002c0 <__aeabi_uldivmod>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	4b3b      	ldr	r3, [pc, #236]	@ (8002e24 <UART_SetConfig+0x2d4>)
 8002d36:	fba3 2301 	umull	r2, r3, r3, r1
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	2264      	movs	r2, #100	@ 0x64
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	1acb      	subs	r3, r1, r3
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d4a:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <UART_SetConfig+0x2d4>)
 8002d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d58:	441c      	add	r4, r3
 8002d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	1891      	adds	r1, r2, r2
 8002d72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d74:	415b      	adcs	r3, r3
 8002d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	1851      	adds	r1, r2, r1
 8002d80:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d82:	4649      	mov	r1, r9
 8002d84:	414b      	adcs	r3, r1
 8002d86:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d94:	4659      	mov	r1, fp
 8002d96:	00cb      	lsls	r3, r1, #3
 8002d98:	4651      	mov	r1, sl
 8002d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d9e:	4651      	mov	r1, sl
 8002da0:	00ca      	lsls	r2, r1, #3
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	4603      	mov	r3, r0
 8002da8:	4642      	mov	r2, r8
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002db0:	464b      	mov	r3, r9
 8002db2:	460a      	mov	r2, r1
 8002db4:	eb42 0303 	adc.w	r3, r2, r3
 8002db8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002dc8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002dcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	18db      	adds	r3, r3, r3
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	eb42 0303 	adc.w	r3, r2, r3
 8002ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002de2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002de6:	f7fd fa6b 	bl	80002c0 <__aeabi_uldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <UART_SetConfig+0x2d4>)
 8002df0:	fba3 1302 	umull	r1, r3, r3, r2
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	2164      	movs	r1, #100	@ 0x64
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	3332      	adds	r3, #50	@ 0x32
 8002e02:	4a08      	ldr	r2, [pc, #32]	@ (8002e24 <UART_SetConfig+0x2d4>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	f003 0207 	and.w	r2, r3, #7
 8002e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4422      	add	r2, r4
 8002e16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e18:	e106      	b.n	8003028 <UART_SetConfig+0x4d8>
 8002e1a:	bf00      	nop
 8002e1c:	40011000 	.word	0x40011000
 8002e20:	40011400 	.word	0x40011400
 8002e24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e3a:	4642      	mov	r2, r8
 8002e3c:	464b      	mov	r3, r9
 8002e3e:	1891      	adds	r1, r2, r2
 8002e40:	6239      	str	r1, [r7, #32]
 8002e42:	415b      	adcs	r3, r3
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e4a:	4641      	mov	r1, r8
 8002e4c:	1854      	adds	r4, r2, r1
 8002e4e:	4649      	mov	r1, r9
 8002e50:	eb43 0501 	adc.w	r5, r3, r1
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	00eb      	lsls	r3, r5, #3
 8002e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e62:	00e2      	lsls	r2, r4, #3
 8002e64:	4614      	mov	r4, r2
 8002e66:	461d      	mov	r5, r3
 8002e68:	4643      	mov	r3, r8
 8002e6a:	18e3      	adds	r3, r4, r3
 8002e6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e70:	464b      	mov	r3, r9
 8002e72:	eb45 0303 	adc.w	r3, r5, r3
 8002e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e96:	4629      	mov	r1, r5
 8002e98:	008b      	lsls	r3, r1, #2
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	008a      	lsls	r2, r1, #2
 8002ea4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ea8:	f7fd fa0a 	bl	80002c0 <__aeabi_uldivmod>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4b60      	ldr	r3, [pc, #384]	@ (8003034 <UART_SetConfig+0x4e4>)
 8002eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	011c      	lsls	r4, r3, #4
 8002eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ec4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ec8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ecc:	4642      	mov	r2, r8
 8002ece:	464b      	mov	r3, r9
 8002ed0:	1891      	adds	r1, r2, r2
 8002ed2:	61b9      	str	r1, [r7, #24]
 8002ed4:	415b      	adcs	r3, r3
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002edc:	4641      	mov	r1, r8
 8002ede:	1851      	adds	r1, r2, r1
 8002ee0:	6139      	str	r1, [r7, #16]
 8002ee2:	4649      	mov	r1, r9
 8002ee4:	414b      	adcs	r3, r1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	00cb      	lsls	r3, r1, #3
 8002ef8:	4651      	mov	r1, sl
 8002efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002efe:	4651      	mov	r1, sl
 8002f00:	00ca      	lsls	r2, r1, #3
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	4642      	mov	r2, r8
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f10:	464b      	mov	r3, r9
 8002f12:	460a      	mov	r2, r1
 8002f14:	eb42 0303 	adc.w	r3, r2, r3
 8002f18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f34:	4649      	mov	r1, r9
 8002f36:	008b      	lsls	r3, r1, #2
 8002f38:	4641      	mov	r1, r8
 8002f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f3e:	4641      	mov	r1, r8
 8002f40:	008a      	lsls	r2, r1, #2
 8002f42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f46:	f7fd f9bb 	bl	80002c0 <__aeabi_uldivmod>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4b38      	ldr	r3, [pc, #224]	@ (8003034 <UART_SetConfig+0x4e4>)
 8002f52:	fba3 2301 	umull	r2, r3, r3, r1
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	2264      	movs	r2, #100	@ 0x64
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	1acb      	subs	r3, r1, r3
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	3332      	adds	r3, #50	@ 0x32
 8002f64:	4a33      	ldr	r2, [pc, #204]	@ (8003034 <UART_SetConfig+0x4e4>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f70:	441c      	add	r4, r3
 8002f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f76:	2200      	movs	r2, #0
 8002f78:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f80:	4642      	mov	r2, r8
 8002f82:	464b      	mov	r3, r9
 8002f84:	1891      	adds	r1, r2, r2
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	415b      	adcs	r3, r3
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f90:	4641      	mov	r1, r8
 8002f92:	1851      	adds	r1, r2, r1
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	4649      	mov	r1, r9
 8002f98:	414b      	adcs	r3, r1
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fa8:	4659      	mov	r1, fp
 8002faa:	00cb      	lsls	r3, r1, #3
 8002fac:	4651      	mov	r1, sl
 8002fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	00ca      	lsls	r2, r1, #3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4642      	mov	r2, r8
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	eb42 0303 	adc.w	r3, r2, r3
 8002fca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fd6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	008b      	lsls	r3, r1, #2
 8002fe8:	4641      	mov	r1, r8
 8002fea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fee:	4641      	mov	r1, r8
 8002ff0:	008a      	lsls	r2, r1, #2
 8002ff2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ff6:	f7fd f963 	bl	80002c0 <__aeabi_uldivmod>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <UART_SetConfig+0x4e4>)
 8003000:	fba3 1302 	umull	r1, r3, r3, r2
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	2164      	movs	r1, #100	@ 0x64
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	3332      	adds	r3, #50	@ 0x32
 8003012:	4a08      	ldr	r2, [pc, #32]	@ (8003034 <UART_SetConfig+0x4e4>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	f003 020f 	and.w	r2, r3, #15
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4422      	add	r2, r4
 8003026:	609a      	str	r2, [r3, #8]
}
 8003028:	bf00      	nop
 800302a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800302e:	46bd      	mov	sp, r7
 8003030:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003034:	51eb851f 	.word	0x51eb851f

08003038 <__NVIC_SetPriority>:
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db0a      	blt.n	8003062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	490c      	ldr	r1, [pc, #48]	@ (8003084 <__NVIC_SetPriority+0x4c>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	0112      	lsls	r2, r2, #4
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	440b      	add	r3, r1
 800305c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003060:	e00a      	b.n	8003078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4908      	ldr	r1, [pc, #32]	@ (8003088 <__NVIC_SetPriority+0x50>)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	3b04      	subs	r3, #4
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	440b      	add	r3, r1
 8003076:	761a      	strb	r2, [r3, #24]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000e100 	.word	0xe000e100
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <SysTick_Handler+0x1c>)
 8003092:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003094:	f002 f920 	bl	80052d8 <xTaskGetSchedulerState>
 8003098:	4603      	mov	r3, r0
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800309e:	f003 f81b 	bl	80060d8 <xPortSysTickHandler>
  }
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	e000e010 	.word	0xe000e010

080030ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80030b0:	2100      	movs	r1, #0
 80030b2:	f06f 0004 	mvn.w	r0, #4
 80030b6:	f7ff ffbf 	bl	8003038 <__NVIC_SetPriority>
#endif
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030c6:	f3ef 8305 	mrs	r3, IPSR
 80030ca:	603b      	str	r3, [r7, #0]
  return(result);
 80030cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80030d2:	f06f 0305 	mvn.w	r3, #5
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	e00c      	b.n	80030f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030da:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <osKernelInitialize+0x44>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80030e2:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <osKernelInitialize+0x44>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	e002      	b.n	80030f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030f4:	687b      	ldr	r3, [r7, #4]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000130 	.word	0x20000130

08003108 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800310e:	f3ef 8305 	mrs	r3, IPSR
 8003112:	603b      	str	r3, [r7, #0]
  return(result);
 8003114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <osKernelStart+0x1a>
    stat = osErrorISR;
 800311a:	f06f 0305 	mvn.w	r3, #5
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	e010      	b.n	8003144 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003122:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <osKernelStart+0x48>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d109      	bne.n	800313e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800312a:	f7ff ffbf 	bl	80030ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800312e:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <osKernelStart+0x48>)
 8003130:	2202      	movs	r2, #2
 8003132:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003134:	f001 fc6c 	bl	8004a10 <vTaskStartScheduler>
      stat = osOK;
 8003138:	2300      	movs	r3, #0
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	e002      	b.n	8003144 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800313e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003142:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003144:	687b      	ldr	r3, [r7, #4]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000130 	.word	0x20000130

08003154 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	@ 0x38
 8003158:	af04      	add	r7, sp, #16
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003164:	f3ef 8305 	mrs	r3, IPSR
 8003168:	617b      	str	r3, [r7, #20]
  return(result);
 800316a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800316c:	2b00      	cmp	r3, #0
 800316e:	d17e      	bne.n	800326e <osThreadNew+0x11a>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d07b      	beq.n	800326e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003176:	2380      	movs	r3, #128	@ 0x80
 8003178:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800317a:	2318      	movs	r3, #24
 800317c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003186:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d045      	beq.n	800321a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <osThreadNew+0x48>
        name = attr->name;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <osThreadNew+0x6e>
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b38      	cmp	r3, #56	@ 0x38
 80031b4:	d805      	bhi.n	80031c2 <osThreadNew+0x6e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <osThreadNew+0x72>
        return (NULL);
 80031c2:	2300      	movs	r3, #0
 80031c4:	e054      	b.n	8003270 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	089b      	lsrs	r3, r3, #2
 80031d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00e      	beq.n	80031fc <osThreadNew+0xa8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2ba7      	cmp	r3, #167	@ 0xa7
 80031e4:	d90a      	bls.n	80031fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <osThreadNew+0xa8>
        mem = 1;
 80031f6:	2301      	movs	r3, #1
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	e010      	b.n	800321e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10c      	bne.n	800321e <osThreadNew+0xca>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d108      	bne.n	800321e <osThreadNew+0xca>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <osThreadNew+0xca>
          mem = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	e001      	b.n	800321e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d110      	bne.n	8003246 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800322c:	9202      	str	r2, [sp, #8]
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6a3a      	ldr	r2, [r7, #32]
 8003238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f001 f9f4 	bl	8004628 <xTaskCreateStatic>
 8003240:	4603      	mov	r3, r0
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	e013      	b.n	800326e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d110      	bne.n	800326e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	b29a      	uxth	r2, r3
 8003250:	f107 0310 	add.w	r3, r7, #16
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f001 fa42 	bl	80046e8 <xTaskCreate>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d001      	beq.n	800326e <osThreadNew+0x11a>
            hTask = NULL;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800326e:	693b      	ldr	r3, [r7, #16]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3728      	adds	r7, #40	@ 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003280:	f3ef 8305 	mrs	r3, IPSR
 8003284:	60bb      	str	r3, [r7, #8]
  return(result);
 8003286:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <osDelay+0x1c>
    stat = osErrorISR;
 800328c:	f06f 0305 	mvn.w	r3, #5
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e007      	b.n	80032a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f001 fb80 	bl	80049a4 <vTaskDelay>
    }
  }

  return (stat);
 80032a4:	68fb      	ldr	r3, [r7, #12]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b08a      	sub	sp, #40	@ 0x28
 80032b2:	af02      	add	r7, sp, #8
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032be:	f3ef 8305 	mrs	r3, IPSR
 80032c2:	613b      	str	r3, [r7, #16]
  return(result);
 80032c4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d175      	bne.n	80033b6 <osSemaphoreNew+0x108>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d072      	beq.n	80033b6 <osSemaphoreNew+0x108>
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d86e      	bhi.n	80033b6 <osSemaphoreNew+0x108>
    mem = -1;
 80032d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d015      	beq.n	8003310 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <osSemaphoreNew+0x4c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b4f      	cmp	r3, #79	@ 0x4f
 80032f2:	d902      	bls.n	80032fa <osSemaphoreNew+0x4c>
        mem = 1;
 80032f4:	2301      	movs	r3, #1
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	e00c      	b.n	8003314 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d108      	bne.n	8003314 <osSemaphoreNew+0x66>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <osSemaphoreNew+0x66>
          mem = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	e001      	b.n	8003314 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800331a:	d04c      	beq.n	80033b6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d128      	bne.n	8003374 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d10a      	bne.n	800333e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2203      	movs	r2, #3
 800332e:	9200      	str	r2, [sp, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	2100      	movs	r1, #0
 8003334:	2001      	movs	r0, #1
 8003336:	f000 fa07 	bl	8003748 <xQueueGenericCreateStatic>
 800333a:	61f8      	str	r0, [r7, #28]
 800333c:	e005      	b.n	800334a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800333e:	2203      	movs	r2, #3
 8003340:	2100      	movs	r1, #0
 8003342:	2001      	movs	r0, #1
 8003344:	f000 fa7d 	bl	8003842 <xQueueGenericCreate>
 8003348:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d022      	beq.n	8003396 <osSemaphoreNew+0xe8>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01f      	beq.n	8003396 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003356:	2300      	movs	r3, #0
 8003358:	2200      	movs	r2, #0
 800335a:	2100      	movs	r1, #0
 800335c:	69f8      	ldr	r0, [r7, #28]
 800335e:	f000 fb3d 	bl	80039dc <xQueueGenericSend>
 8003362:	4603      	mov	r3, r0
 8003364:	2b01      	cmp	r3, #1
 8003366:	d016      	beq.n	8003396 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003368:	69f8      	ldr	r0, [r7, #28]
 800336a:	f000 ff89 	bl	8004280 <vQueueDelete>
            hSemaphore = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	e010      	b.n	8003396 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d108      	bne.n	800338c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	461a      	mov	r2, r3
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fabb 	bl	80038fe <xQueueCreateCountingSemaphoreStatic>
 8003388:	61f8      	str	r0, [r7, #28]
 800338a:	e004      	b.n	8003396 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 faee 	bl	8003970 <xQueueCreateCountingSemaphore>
 8003394:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00c      	beq.n	80033b6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <osSemaphoreNew+0xfc>
          name = attr->name;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e001      	b.n	80033ae <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80033ae:	6979      	ldr	r1, [r7, #20]
 80033b0:	69f8      	ldr	r0, [r7, #28]
 80033b2:	f001 f8b1 	bl	8004518 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80033b6:	69fb      	ldr	r3, [r7, #28]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80033d8:	f06f 0303 	mvn.w	r3, #3
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e039      	b.n	8003454 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033e0:	f3ef 8305 	mrs	r3, IPSR
 80033e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80033e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d022      	beq.n	8003432 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80033f2:	f06f 0303 	mvn.w	r3, #3
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e02c      	b.n	8003454 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80033fe:	f107 0308 	add.w	r3, r7, #8
 8003402:	461a      	mov	r2, r3
 8003404:	2100      	movs	r1, #0
 8003406:	6938      	ldr	r0, [r7, #16]
 8003408:	f000 fe7a 	bl	8004100 <xQueueReceiveFromISR>
 800340c:	4603      	mov	r3, r0
 800340e:	2b01      	cmp	r3, #1
 8003410:	d003      	beq.n	800341a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003412:	f06f 0302 	mvn.w	r3, #2
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e01c      	b.n	8003454 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d019      	beq.n	8003454 <osSemaphoreAcquire+0x94>
 8003420:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <osSemaphoreAcquire+0xa0>)
 8003422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	e010      	b.n	8003454 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	6938      	ldr	r0, [r7, #16]
 8003436:	f000 fd53 	bl	8003ee0 <xQueueSemaphoreTake>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d009      	beq.n	8003454 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003446:	f06f 0301 	mvn.w	r3, #1
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	e002      	b.n	8003454 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800344e:	f06f 0302 	mvn.w	r3, #2
 8003452:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003454:	697b      	ldr	r3, [r7, #20]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	e000ed04 	.word	0xe000ed04

08003464 <osSemaphoreGetCount>:
  }

  return (stat);
}

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <osSemaphoreGetCount+0x18>
    count = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e00e      	b.n	800349a <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800347c:	f3ef 8305 	mrs	r3, IPSR
 8003480:	60fb      	str	r3, [r7, #12]
  return(result);
 8003482:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003484:	2b00      	cmp	r3, #0
 8003486:	d004      	beq.n	8003492 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8003488:	6938      	ldr	r0, [r7, #16]
 800348a:	f000 feda 	bl	8004242 <uxQueueMessagesWaitingFromISR>
 800348e:	6178      	str	r0, [r7, #20]
 8003490:	e003      	b.n	800349a <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8003492:	6938      	ldr	r0, [r7, #16]
 8003494:	f000 feb6 	bl	8004204 <uxQueueMessagesWaiting>
 8003498:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800349a:	697b      	ldr	r3, [r7, #20]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a07      	ldr	r2, [pc, #28]	@ (80034d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80034b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a06      	ldr	r2, [pc, #24]	@ (80034d4 <vApplicationGetIdleTaskMemory+0x30>)
 80034ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2280      	movs	r2, #128	@ 0x80
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000134 	.word	0x20000134
 80034d4:	200001dc 	.word	0x200001dc

080034d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a07      	ldr	r2, [pc, #28]	@ (8003504 <vApplicationGetTimerTaskMemory+0x2c>)
 80034e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4a06      	ldr	r2, [pc, #24]	@ (8003508 <vApplicationGetTimerTaskMemory+0x30>)
 80034ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034f6:	601a      	str	r2, [r3, #0]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	200003dc 	.word	0x200003dc
 8003508:	20000484 	.word	0x20000484

0800350c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f103 0208 	add.w	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f103 0208 	add.w	r2, r3, #8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f103 0208 	add.w	r2, r3, #8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c4:	d103      	bne.n	80035ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e00c      	b.n	80035e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3308      	adds	r3, #8
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e002      	b.n	80035dc <vListInsert+0x2e>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d2f6      	bcs.n	80035d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6892      	ldr	r2, [r2, #8]
 8003636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6852      	ldr	r2, [r2, #4]
 8003640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d103      	bne.n	8003654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	e7fd      	b.n	800369c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036a0:	f002 fc8a 	bl	8005fb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ac:	68f9      	ldr	r1, [r7, #12]
 80036ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	441a      	add	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d0:	3b01      	subs	r3, #1
 80036d2:	68f9      	ldr	r1, [r7, #12]
 80036d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	441a      	add	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	22ff      	movs	r2, #255	@ 0xff
 80036e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	22ff      	movs	r2, #255	@ 0xff
 80036ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d114      	bne.n	8003720 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01a      	beq.n	8003734 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3310      	adds	r3, #16
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fc22 	bl	8004f4c <xTaskRemoveFromEventList>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d012      	beq.n	8003734 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800370e:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <xQueueGenericReset+0xd0>)
 8003710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	e009      	b.n	8003734 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3310      	adds	r3, #16
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fef1 	bl	800350c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3324      	adds	r3, #36	@ 0x24
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff feec 	bl	800350c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003734:	f002 fc72 	bl	800601c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003738:	2301      	movs	r3, #1
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	e000ed04 	.word	0xe000ed04

08003748 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08e      	sub	sp, #56	@ 0x38
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	e7fd      	b.n	8003770 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	e7fd      	b.n	800378e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <xQueueGenericCreateStatic+0x56>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <xQueueGenericCreateStatic+0x5a>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <xQueueGenericCreateStatic+0x5c>
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	623b      	str	r3, [r7, #32]
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	e7fd      	b.n	80037bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <xQueueGenericCreateStatic+0x84>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <xQueueGenericCreateStatic+0x88>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <xQueueGenericCreateStatic+0x8a>
 80037d0:	2300      	movs	r3, #0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	61fb      	str	r3, [r7, #28]
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	e7fd      	b.n	80037ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037ee:	2350      	movs	r3, #80	@ 0x50
 80037f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b50      	cmp	r3, #80	@ 0x50
 80037f6:	d00b      	beq.n	8003810 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	61bb      	str	r3, [r7, #24]
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003810:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003824:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f840 	bl	80038b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800383a:	4618      	mov	r0, r3
 800383c:	3730      	adds	r7, #48	@ 0x30
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003842:	b580      	push	{r7, lr}
 8003844:	b08a      	sub	sp, #40	@ 0x28
 8003846:	af02      	add	r7, sp, #8
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	4613      	mov	r3, r2
 800384e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <xQueueGenericCreate+0x2c>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	613b      	str	r3, [r7, #16]
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	e7fd      	b.n	800386a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	3350      	adds	r3, #80	@ 0x50
 800387c:	4618      	mov	r0, r3
 800387e:	f002 fcbd 	bl	80061fc <pvPortMalloc>
 8003882:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d011      	beq.n	80038ae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3350      	adds	r3, #80	@ 0x50
 8003892:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800389c:	79fa      	ldrb	r2, [r7, #7]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	4613      	mov	r3, r2
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f805 	bl	80038b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80038ae:	69bb      	ldr	r3, [r7, #24]
	}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d103      	bne.n	80038d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e002      	b.n	80038da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038e6:	2101      	movs	r1, #1
 80038e8:	69b8      	ldr	r0, [r7, #24]
 80038ea:	f7ff fec3 	bl	8003674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b08a      	sub	sp, #40	@ 0x28
 8003902:	af02      	add	r7, sp, #8
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	61bb      	str	r3, [r7, #24]
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d90b      	bls.n	8003948 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	617b      	str	r3, [r7, #20]
}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003948:	2302      	movs	r3, #2
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	2100      	movs	r1, #0
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff fef8 	bl	8003748 <xQueueGenericCreateStatic>
 8003958:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003966:	69fb      	ldr	r3, [r7, #28]
	}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	613b      	str	r3, [r7, #16]
}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	429a      	cmp	r2, r3
 800399e:	d90b      	bls.n	80039b8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80039b8:	2202      	movs	r2, #2
 80039ba:	2100      	movs	r1, #0
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff40 	bl	8003842 <xQueueGenericCreate>
 80039c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80039d0:	697b      	ldr	r3, [r7, #20]
	}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	@ 0x38
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039ea:	2300      	movs	r3, #0
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <xQueueGenericSend+0x34>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	e7fd      	b.n	8003a0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <xQueueGenericSend+0x42>
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <xQueueGenericSend+0x46>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <xQueueGenericSend+0x48>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <xQueueGenericSend+0x64>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d103      	bne.n	8003a4e <xQueueGenericSend+0x72>
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <xQueueGenericSend+0x76>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <xQueueGenericSend+0x78>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <xQueueGenericSend+0x94>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	623b      	str	r3, [r7, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
 8003a6e:	e7fd      	b.n	8003a6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a70:	f001 fc32 	bl	80052d8 <xTaskGetSchedulerState>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <xQueueGenericSend+0xa4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <xQueueGenericSend+0xa8>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <xQueueGenericSend+0xaa>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	61fb      	str	r3, [r7, #28]
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	e7fd      	b.n	8003a9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003aa2:	f002 fa89 	bl	8005fb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <xQueueGenericSend+0xdc>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d129      	bne.n	8003b0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003abe:	f000 fc1b 	bl	80042f8 <prvCopyDataToQueue>
 8003ac2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d010      	beq.n	8003aee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	3324      	adds	r3, #36	@ 0x24
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 fa3b 	bl	8004f4c <xTaskRemoveFromEventList>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003adc:	4b3f      	ldr	r3, [pc, #252]	@ (8003bdc <xQueueGenericSend+0x200>)
 8003ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	e00a      	b.n	8003b04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003af4:	4b39      	ldr	r3, [pc, #228]	@ (8003bdc <xQueueGenericSend+0x200>)
 8003af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b04:	f002 fa8a 	bl	800601c <vPortExitCritical>
				return pdPASS;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e063      	b.n	8003bd4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b12:	f002 fa83 	bl	800601c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e05c      	b.n	8003bd4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 fa75 	bl	8005014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b2e:	f002 fa75 	bl	800601c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b32:	f000 ffdd 	bl	8004af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b36:	f002 fa3f 	bl	8005fb8 <vPortEnterCritical>
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b40:	b25b      	sxtb	r3, r3
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b46:	d103      	bne.n	8003b50 <xQueueGenericSend+0x174>
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b5c:	d103      	bne.n	8003b66 <xQueueGenericSend+0x18a>
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b66:	f002 fa59 	bl	800601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b6a:	1d3a      	adds	r2, r7, #4
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fa64 	bl	8005040 <xTaskCheckForTimeOut>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d124      	bne.n	8003bc8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b80:	f000 fcb2 	bl	80044e8 <prvIsQueueFull>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d018      	beq.n	8003bbc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	3310      	adds	r3, #16
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 f988 	bl	8004ea8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b9a:	f000 fc3d 	bl	8004418 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b9e:	f000 ffb5 	bl	8004b0c <xTaskResumeAll>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f47f af7c 	bne.w	8003aa2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003baa:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <xQueueGenericSend+0x200>)
 8003bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	e772      	b.n	8003aa2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bbe:	f000 fc2b 	bl	8004418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bc2:	f000 ffa3 	bl	8004b0c <xTaskResumeAll>
 8003bc6:	e76c      	b.n	8003aa2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bca:	f000 fc25 	bl	8004418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bce:	f000 ff9d 	bl	8004b0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3738      	adds	r7, #56	@ 0x38
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b090      	sub	sp, #64	@ 0x40
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <xQueueGenericSendFromISR+0x3e>
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <xQueueGenericSendFromISR+0x42>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <xQueueGenericSendFromISR+0x44>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c3a:	bf00      	nop
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d103      	bne.n	8003c4e <xQueueGenericSendFromISR+0x6e>
 8003c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <xQueueGenericSendFromISR+0x72>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <xQueueGenericSendFromISR+0x74>
 8003c52:	2300      	movs	r3, #0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	623b      	str	r3, [r7, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	e7fd      	b.n	8003c6c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c70:	f002 fa82 	bl	8006178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c74:	f3ef 8211 	mrs	r2, BASEPRI
 8003c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	61fa      	str	r2, [r7, #28]
 8003c8a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c8e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <xQueueGenericSendFromISR+0xc2>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d12f      	bne.n	8003d02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ca8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003cb8:	f000 fb1e 	bl	80042f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cbc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc4:	d112      	bne.n	8003cec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d016      	beq.n	8003cfc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd0:	3324      	adds	r3, #36	@ 0x24
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f93a 	bl	8004f4c <xTaskRemoveFromEventList>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00e      	beq.n	8003cfc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e007      	b.n	8003cfc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	b25a      	sxtb	r2, r3
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003d00:	e001      	b.n	8003d06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3740      	adds	r7, #64	@ 0x40
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08c      	sub	sp, #48	@ 0x30
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <xQueueReceive+0x32>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	623b      	str	r3, [r7, #32]
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	e7fd      	b.n	8003d4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d103      	bne.n	8003d5c <xQueueReceive+0x40>
 8003d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <xQueueReceive+0x44>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <xQueueReceive+0x46>
 8003d60:	2300      	movs	r3, #0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <xQueueReceive+0x62>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	61fb      	str	r3, [r7, #28]
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	e7fd      	b.n	8003d7a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d7e:	f001 faab 	bl	80052d8 <xTaskGetSchedulerState>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <xQueueReceive+0x72>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <xQueueReceive+0x76>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <xQueueReceive+0x78>
 8003d92:	2300      	movs	r3, #0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10b      	bne.n	8003db0 <xQueueReceive+0x94>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	61bb      	str	r3, [r7, #24]
}
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003db0:	f002 f902 	bl	8005fb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01f      	beq.n	8003e00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dc4:	f000 fb02 	bl	80043cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	1e5a      	subs	r2, r3, #1
 8003dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00f      	beq.n	8003df8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	3310      	adds	r3, #16
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 f8b5 	bl	8004f4c <xTaskRemoveFromEventList>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003de8:	4b3c      	ldr	r3, [pc, #240]	@ (8003edc <xQueueReceive+0x1c0>)
 8003dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003df8:	f002 f910 	bl	800601c <vPortExitCritical>
				return pdPASS;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e069      	b.n	8003ed4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d103      	bne.n	8003e0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e06:	f002 f909 	bl	800601c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e062      	b.n	8003ed4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e14:	f107 0310 	add.w	r3, r7, #16
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 f8fb 	bl	8005014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e22:	f002 f8fb 	bl	800601c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e26:	f000 fe63 	bl	8004af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e2a:	f002 f8c5 	bl	8005fb8 <vPortEnterCritical>
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e34:	b25b      	sxtb	r3, r3
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e3a:	d103      	bne.n	8003e44 <xQueueReceive+0x128>
 8003e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e50:	d103      	bne.n	8003e5a <xQueueReceive+0x13e>
 8003e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e5a:	f002 f8df 	bl	800601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e5e:	1d3a      	adds	r2, r7, #4
 8003e60:	f107 0310 	add.w	r3, r7, #16
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 f8ea 	bl	8005040 <xTaskCheckForTimeOut>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d123      	bne.n	8003eba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e74:	f000 fb22 	bl	80044bc <prvIsQueueEmpty>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d017      	beq.n	8003eae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	3324      	adds	r3, #36	@ 0x24
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	4611      	mov	r1, r2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 f80e 	bl	8004ea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e8e:	f000 fac3 	bl	8004418 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e92:	f000 fe3b 	bl	8004b0c <xTaskResumeAll>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d189      	bne.n	8003db0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003edc <xQueueReceive+0x1c0>)
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	e780      	b.n	8003db0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eb0:	f000 fab2 	bl	8004418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eb4:	f000 fe2a 	bl	8004b0c <xTaskResumeAll>
 8003eb8:	e77a      	b.n	8003db0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ebc:	f000 faac 	bl	8004418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ec0:	f000 fe24 	bl	8004b0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ec6:	f000 faf9 	bl	80044bc <prvIsQueueEmpty>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f43f af6f 	beq.w	8003db0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ed2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3730      	adds	r7, #48	@ 0x30
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	e000ed04 	.word	0xe000ed04

08003ee0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08e      	sub	sp, #56	@ 0x38
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	623b      	str	r3, [r7, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	bf00      	nop
 8003f12:	e7fd      	b.n	8003f10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	61fb      	str	r3, [r7, #28]
}
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
 8003f32:	e7fd      	b.n	8003f30 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f34:	f001 f9d0 	bl	80052d8 <xTaskGetSchedulerState>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d102      	bne.n	8003f44 <xQueueSemaphoreTake+0x64>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <xQueueSemaphoreTake+0x68>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <xQueueSemaphoreTake+0x6a>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	61bb      	str	r3, [r7, #24]
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	e7fd      	b.n	8003f62 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f66:	f002 f827 	bl	8005fb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d024      	beq.n	8003fc0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	1e5a      	subs	r2, r3, #1
 8003f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003f86:	f001 fb21 	bl	80055cc <pvTaskIncrementMutexHeldCount>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00f      	beq.n	8003fb8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9a:	3310      	adds	r3, #16
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 ffd5 	bl	8004f4c <xTaskRemoveFromEventList>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fa8:	4b54      	ldr	r3, [pc, #336]	@ (80040fc <xQueueSemaphoreTake+0x21c>)
 8003faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fb8:	f002 f830 	bl	800601c <vPortExitCritical>
				return pdPASS;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e098      	b.n	80040f2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d112      	bne.n	8003fec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	617b      	str	r3, [r7, #20]
}
 8003fde:	bf00      	nop
 8003fe0:	bf00      	nop
 8003fe2:	e7fd      	b.n	8003fe0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003fe4:	f002 f81a 	bl	800601c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e082      	b.n	80040f2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ff2:	f107 030c 	add.w	r3, r7, #12
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 f80c 	bl	8005014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004000:	f002 f80c 	bl	800601c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004004:	f000 fd74 	bl	8004af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004008:	f001 ffd6 	bl	8005fb8 <vPortEnterCritical>
 800400c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004012:	b25b      	sxtb	r3, r3
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004018:	d103      	bne.n	8004022 <xQueueSemaphoreTake+0x142>
 800401a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004024:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004028:	b25b      	sxtb	r3, r3
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800402e:	d103      	bne.n	8004038 <xQueueSemaphoreTake+0x158>
 8004030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004038:	f001 fff0 	bl	800601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800403c:	463a      	mov	r2, r7
 800403e:	f107 030c 	add.w	r3, r7, #12
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fffb 	bl	8005040 <xTaskCheckForTimeOut>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d132      	bne.n	80040b6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004050:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004052:	f000 fa33 	bl	80044bc <prvIsQueueEmpty>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d026      	beq.n	80040aa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800405c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004064:	f001 ffa8 	bl	8005fb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f001 f951 	bl	8005314 <xTaskPriorityInherit>
 8004072:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004074:	f001 ffd2 	bl	800601c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407a:	3324      	adds	r3, #36	@ 0x24
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 ff11 	bl	8004ea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004086:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004088:	f000 f9c6 	bl	8004418 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800408c:	f000 fd3e 	bl	8004b0c <xTaskResumeAll>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	f47f af67 	bne.w	8003f66 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004098:	4b18      	ldr	r3, [pc, #96]	@ (80040fc <xQueueSemaphoreTake+0x21c>)
 800409a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	e75d      	b.n	8003f66 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80040aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040ac:	f000 f9b4 	bl	8004418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040b0:	f000 fd2c 	bl	8004b0c <xTaskResumeAll>
 80040b4:	e757      	b.n	8003f66 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80040b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040b8:	f000 f9ae 	bl	8004418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040bc:	f000 fd26 	bl	8004b0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040c2:	f000 f9fb 	bl	80044bc <prvIsQueueEmpty>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f43f af4c 	beq.w	8003f66 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80040d4:	f001 ff70 	bl	8005fb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80040d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80040da:	f000 f8f5 	bl	80042c8 <prvGetDisinheritPriorityAfterTimeout>
 80040de:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80040e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 f9ec 	bl	80054c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80040ec:	f001 ff96 	bl	800601c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3738      	adds	r7, #56	@ 0x38
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08e      	sub	sp, #56	@ 0x38
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	623b      	str	r3, [r7, #32]
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	e7fd      	b.n	800412a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d103      	bne.n	800413c <xQueueReceiveFromISR+0x3c>
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <xQueueReceiveFromISR+0x40>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <xQueueReceiveFromISR+0x42>
 8004140:	2300      	movs	r3, #0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	61fb      	str	r3, [r7, #28]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800415e:	f002 f80b 	bl	8006178 <vPortValidateInterruptPriority>
	__asm volatile
 8004162:	f3ef 8211 	mrs	r2, BASEPRI
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	61ba      	str	r2, [r7, #24]
 8004178:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800417a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004182:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d02f      	beq.n	80041ea <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004198:	f000 f918 	bl	80043cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	1e5a      	subs	r2, r3, #1
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80041a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041ac:	d112      	bne.n	80041d4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b8:	3310      	adds	r3, #16
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fec6 	bl	8004f4c <xTaskRemoveFromEventList>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00e      	beq.n	80041e4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e007      	b.n	80041e4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80041d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041d8:	3301      	adds	r3, #1
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	b25a      	sxtb	r2, r3
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80041e4:	2301      	movs	r3, #1
 80041e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e8:	e001      	b.n	80041ee <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f383 8811 	msr	BASEPRI, r3
}
 80041f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3738      	adds	r7, #56	@ 0x38
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	60bb      	str	r3, [r7, #8]
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	e7fd      	b.n	8004226 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800422a:	f001 fec5 	bl	8005fb8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004234:	f001 fef2 	bl	800601c <vPortExitCritical>

	return uxReturn;
 8004238:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004242:	b480      	push	{r7}
 8004244:	b087      	sub	sp, #28
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	60fb      	str	r3, [r7, #12]
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8004272:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004274:	4618      	mov	r0, r3
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <vQueueDelete+0x2a>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	60bb      	str	r3, [r7, #8]
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	e7fd      	b.n	80042a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f95e 	bl	800456c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f002 f86c 	bl	8006398 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d006      	beq.n	80042e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e001      	b.n	80042ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80042ea:	68fb      	ldr	r3, [r7, #12]
	}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d14d      	bne.n	80043ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	4618      	mov	r0, r3
 8004324:	f001 f85e 	bl	80053e4 <xTaskPriorityDisinherit>
 8004328:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	e043      	b.n	80043ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d119      	bne.n	800436c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6858      	ldr	r0, [r3, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	461a      	mov	r2, r3
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	f002 fa06 	bl	8006754 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d32b      	bcc.n	80043ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	e026      	b.n	80043ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68d8      	ldr	r0, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	461a      	mov	r2, r3
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	f002 f9ec 	bl	8006754 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	425b      	negs	r3, r3
 8004386:	441a      	add	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d207      	bcs.n	80043a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	425b      	negs	r3, r3
 80043a2:	441a      	add	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d105      	bne.n	80043ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80043c2:	697b      	ldr	r3, [r7, #20]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d018      	beq.n	8004410 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	441a      	add	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d303      	bcc.n	8004400 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68d9      	ldr	r1, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	461a      	mov	r2, r3
 800440a:	6838      	ldr	r0, [r7, #0]
 800440c:	f002 f9a2 	bl	8006754 <memcpy>
	}
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004420:	f001 fdca 	bl	8005fb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800442a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800442c:	e011      	b.n	8004452 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	d012      	beq.n	800445c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3324      	adds	r3, #36	@ 0x24
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fd86 	bl	8004f4c <xTaskRemoveFromEventList>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004446:	f000 fe5f 	bl	8005108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	3b01      	subs	r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004456:	2b00      	cmp	r3, #0
 8004458:	dce9      	bgt.n	800442e <prvUnlockQueue+0x16>
 800445a:	e000      	b.n	800445e <prvUnlockQueue+0x46>
					break;
 800445c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	22ff      	movs	r2, #255	@ 0xff
 8004462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004466:	f001 fdd9 	bl	800601c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800446a:	f001 fda5 	bl	8005fb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004474:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004476:	e011      	b.n	800449c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3310      	adds	r3, #16
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fd61 	bl	8004f4c <xTaskRemoveFromEventList>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004490:	f000 fe3a 	bl	8005108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004494:	7bbb      	ldrb	r3, [r7, #14]
 8004496:	3b01      	subs	r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800449c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	dce9      	bgt.n	8004478 <prvUnlockQueue+0x60>
 80044a4:	e000      	b.n	80044a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	22ff      	movs	r2, #255	@ 0xff
 80044ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80044b0:	f001 fdb4 	bl	800601c <vPortExitCritical>
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044c4:	f001 fd78 	bl	8005fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	e001      	b.n	80044da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044da:	f001 fd9f 	bl	800601c <vPortExitCritical>

	return xReturn;
 80044de:	68fb      	ldr	r3, [r7, #12]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044f0:	f001 fd62 	bl	8005fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d102      	bne.n	8004506 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e001      	b.n	800450a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800450a:	f001 fd87 	bl	800601c <vPortExitCritical>

	return xReturn;
 800450e:	68fb      	ldr	r3, [r7, #12]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e014      	b.n	8004552 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004528:	4a0f      	ldr	r2, [pc, #60]	@ (8004568 <vQueueAddToRegistry+0x50>)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004534:	490c      	ldr	r1, [pc, #48]	@ (8004568 <vQueueAddToRegistry+0x50>)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800453e:	4a0a      	ldr	r2, [pc, #40]	@ (8004568 <vQueueAddToRegistry+0x50>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4413      	add	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800454a:	e006      	b.n	800455a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3301      	adds	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b07      	cmp	r3, #7
 8004556:	d9e7      	bls.n	8004528 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000884 	.word	0x20000884

0800456c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e016      	b.n	80045a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800457a:	4a10      	ldr	r2, [pc, #64]	@ (80045bc <vQueueUnregisterQueue+0x50>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	429a      	cmp	r2, r3
 8004588:	d10b      	bne.n	80045a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800458a:	4a0c      	ldr	r2, [pc, #48]	@ (80045bc <vQueueUnregisterQueue+0x50>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2100      	movs	r1, #0
 8004590:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004594:	4a09      	ldr	r2, [pc, #36]	@ (80045bc <vQueueUnregisterQueue+0x50>)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4413      	add	r3, r2
 800459c:	2200      	movs	r2, #0
 800459e:	605a      	str	r2, [r3, #4]
				break;
 80045a0:	e006      	b.n	80045b0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b07      	cmp	r3, #7
 80045ac:	d9e5      	bls.n	800457a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80045ae:	bf00      	nop
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20000884 	.word	0x20000884

080045c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80045d0:	f001 fcf2 	bl	8005fb8 <vPortEnterCritical>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045da:	b25b      	sxtb	r3, r3
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045e0:	d103      	bne.n	80045ea <vQueueWaitForMessageRestricted+0x2a>
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045f0:	b25b      	sxtb	r3, r3
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045f6:	d103      	bne.n	8004600 <vQueueWaitForMessageRestricted+0x40>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004600:	f001 fd0c 	bl	800601c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	3324      	adds	r3, #36	@ 0x24
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fc6d 	bl	8004ef4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	f7ff fefc 	bl	8004418 <prvUnlockQueue>
	}
 8004620:	bf00      	nop
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08e      	sub	sp, #56	@ 0x38
 800462c:	af04      	add	r7, sp, #16
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <xTaskCreateStatic+0x2c>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	623b      	str	r3, [r7, #32]
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	e7fd      	b.n	8004650 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10b      	bne.n	8004672 <xTaskCreateStatic+0x4a>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	61fb      	str	r3, [r7, #28]
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	e7fd      	b.n	800466e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004672:	23a8      	movs	r3, #168	@ 0xa8
 8004674:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2ba8      	cmp	r3, #168	@ 0xa8
 800467a:	d00b      	beq.n	8004694 <xTaskCreateStatic+0x6c>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	61bb      	str	r3, [r7, #24]
}
 800468e:	bf00      	nop
 8004690:	bf00      	nop
 8004692:	e7fd      	b.n	8004690 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004694:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01e      	beq.n	80046da <xTaskCreateStatic+0xb2>
 800469c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01b      	beq.n	80046da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046b4:	2300      	movs	r3, #0
 80046b6:	9303      	str	r3, [sp, #12]
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	9302      	str	r3, [sp, #8]
 80046bc:	f107 0314 	add.w	r3, r7, #20
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f851 	bl	8004774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046d4:	f000 f8f6 	bl	80048c4 <prvAddNewTaskToReadyList>
 80046d8:	e001      	b.n	80046de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046de:	697b      	ldr	r3, [r7, #20]
	}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3728      	adds	r7, #40	@ 0x28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08c      	sub	sp, #48	@ 0x30
 80046ec:	af04      	add	r7, sp, #16
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 fd7d 	bl	80061fc <pvPortMalloc>
 8004702:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00e      	beq.n	8004728 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800470a:	20a8      	movs	r0, #168	@ 0xa8
 800470c:	f001 fd76 	bl	80061fc <pvPortMalloc>
 8004710:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30
 800471e:	e005      	b.n	800472c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004720:	6978      	ldr	r0, [r7, #20]
 8004722:	f001 fe39 	bl	8006398 <vPortFree>
 8004726:	e001      	b.n	800472c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d017      	beq.n	8004762 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800473a:	88fa      	ldrh	r2, [r7, #6]
 800473c:	2300      	movs	r3, #0
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	9302      	str	r3, [sp, #8]
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f80f 	bl	8004774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004756:	69f8      	ldr	r0, [r7, #28]
 8004758:	f000 f8b4 	bl	80048c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800475c:	2301      	movs	r3, #1
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e002      	b.n	8004768 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004766:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004768:	69bb      	ldr	r3, [r7, #24]
	}
 800476a:	4618      	mov	r0, r3
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004784:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	461a      	mov	r2, r3
 800478c:	21a5      	movs	r1, #165	@ 0xa5
 800478e:	f001 ff57 	bl	8006640 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800479c:	3b01      	subs	r3, #1
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f023 0307 	bic.w	r3, r3, #7
 80047aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	617b      	str	r3, [r7, #20]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01f      	beq.n	8004814 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	e012      	b.n	8004800 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	7819      	ldrb	r1, [r3, #0]
 80047e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	4413      	add	r3, r2
 80047e8:	3334      	adds	r3, #52	@ 0x34
 80047ea:	460a      	mov	r2, r1
 80047ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	4413      	add	r3, r2
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d006      	beq.n	8004808 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	3301      	adds	r3, #1
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b0f      	cmp	r3, #15
 8004804:	d9e9      	bls.n	80047da <prvInitialiseNewTask+0x66>
 8004806:	e000      	b.n	800480a <prvInitialiseNewTask+0x96>
			{
				break;
 8004808:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004812:	e003      	b.n	800481c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	2b37      	cmp	r3, #55	@ 0x37
 8004820:	d901      	bls.n	8004826 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004822:	2337      	movs	r3, #55	@ 0x37
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800482a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800482c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004830:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	2200      	movs	r2, #0
 8004836:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	3304      	adds	r3, #4
 800483c:	4618      	mov	r0, r3
 800483e:	f7fe fe85 	bl	800354c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004844:	3318      	adds	r3, #24
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fe80 	bl	800354c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004850:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004854:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004860:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	2200      	movs	r2, #0
 8004866:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	2200      	movs	r2, #0
 800486e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	3354      	adds	r3, #84	@ 0x54
 8004876:	224c      	movs	r2, #76	@ 0x4c
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fee0 	bl	8006640 <memset>
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	4a0d      	ldr	r2, [pc, #52]	@ (80048b8 <prvInitialiseNewTask+0x144>)
 8004884:	659a      	str	r2, [r3, #88]	@ 0x58
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	4a0c      	ldr	r2, [pc, #48]	@ (80048bc <prvInitialiseNewTask+0x148>)
 800488a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	4a0c      	ldr	r2, [pc, #48]	@ (80048c0 <prvInitialiseNewTask+0x14c>)
 8004890:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	68f9      	ldr	r1, [r7, #12]
 8004896:	69b8      	ldr	r0, [r7, #24]
 8004898:	f001 fa5a 	bl	8005d50 <pxPortInitialiseStack>
 800489c:	4602      	mov	r2, r0
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ae:	bf00      	nop
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20004b18 	.word	0x20004b18
 80048bc:	20004b80 	.word	0x20004b80
 80048c0:	20004be8 	.word	0x20004be8

080048c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048cc:	f001 fb74 	bl	8005fb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004988 <prvAddNewTaskToReadyList+0xc4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004988 <prvAddNewTaskToReadyList+0xc4>)
 80048d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048da:	4b2c      	ldr	r3, [pc, #176]	@ (800498c <prvAddNewTaskToReadyList+0xc8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048e2:	4a2a      	ldr	r2, [pc, #168]	@ (800498c <prvAddNewTaskToReadyList+0xc8>)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048e8:	4b27      	ldr	r3, [pc, #156]	@ (8004988 <prvAddNewTaskToReadyList+0xc4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d110      	bne.n	8004912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048f0:	f000 fc2e 	bl	8005150 <prvInitialiseTaskLists>
 80048f4:	e00d      	b.n	8004912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048f6:	4b26      	ldr	r3, [pc, #152]	@ (8004990 <prvAddNewTaskToReadyList+0xcc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048fe:	4b23      	ldr	r3, [pc, #140]	@ (800498c <prvAddNewTaskToReadyList+0xc8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004908:	429a      	cmp	r2, r3
 800490a:	d802      	bhi.n	8004912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800490c:	4a1f      	ldr	r2, [pc, #124]	@ (800498c <prvAddNewTaskToReadyList+0xc8>)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004912:	4b20      	ldr	r3, [pc, #128]	@ (8004994 <prvAddNewTaskToReadyList+0xd0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	4a1e      	ldr	r2, [pc, #120]	@ (8004994 <prvAddNewTaskToReadyList+0xd0>)
 800491a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800491c:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <prvAddNewTaskToReadyList+0xd0>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004928:	4b1b      	ldr	r3, [pc, #108]	@ (8004998 <prvAddNewTaskToReadyList+0xd4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d903      	bls.n	8004938 <prvAddNewTaskToReadyList+0x74>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	4a18      	ldr	r2, [pc, #96]	@ (8004998 <prvAddNewTaskToReadyList+0xd4>)
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4a15      	ldr	r2, [pc, #84]	@ (800499c <prvAddNewTaskToReadyList+0xd8>)
 8004946:	441a      	add	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f7fe fe09 	bl	8003566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004954:	f001 fb62 	bl	800601c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004958:	4b0d      	ldr	r3, [pc, #52]	@ (8004990 <prvAddNewTaskToReadyList+0xcc>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00e      	beq.n	800497e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004960:	4b0a      	ldr	r3, [pc, #40]	@ (800498c <prvAddNewTaskToReadyList+0xc8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496a:	429a      	cmp	r2, r3
 800496c:	d207      	bcs.n	800497e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800496e:	4b0c      	ldr	r3, [pc, #48]	@ (80049a0 <prvAddNewTaskToReadyList+0xdc>)
 8004970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000d98 	.word	0x20000d98
 800498c:	200008c4 	.word	0x200008c4
 8004990:	20000da4 	.word	0x20000da4
 8004994:	20000db4 	.word	0x20000db4
 8004998:	20000da0 	.word	0x20000da0
 800499c:	200008c8 	.word	0x200008c8
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d018      	beq.n	80049e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049b6:	4b14      	ldr	r3, [pc, #80]	@ (8004a08 <vTaskDelay+0x64>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <vTaskDelay+0x32>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	60bb      	str	r3, [r7, #8]
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	e7fd      	b.n	80049d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049d6:	f000 f88b 	bl	8004af0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049da:	2100      	movs	r1, #0
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fe09 	bl	80055f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049e2:	f000 f893 	bl	8004b0c <xTaskResumeAll>
 80049e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d107      	bne.n	80049fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80049ee:	4b07      	ldr	r3, [pc, #28]	@ (8004a0c <vTaskDelay+0x68>)
 80049f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000dc0 	.word	0x20000dc0
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	@ 0x28
 8004a14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a1e:	463a      	mov	r2, r7
 8004a20:	1d39      	adds	r1, r7, #4
 8004a22:	f107 0308 	add.w	r3, r7, #8
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe fd3c 	bl	80034a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	9202      	str	r2, [sp, #8]
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	460a      	mov	r2, r1
 8004a3e:	4924      	ldr	r1, [pc, #144]	@ (8004ad0 <vTaskStartScheduler+0xc0>)
 8004a40:	4824      	ldr	r0, [pc, #144]	@ (8004ad4 <vTaskStartScheduler+0xc4>)
 8004a42:	f7ff fdf1 	bl	8004628 <xTaskCreateStatic>
 8004a46:	4603      	mov	r3, r0
 8004a48:	4a23      	ldr	r2, [pc, #140]	@ (8004ad8 <vTaskStartScheduler+0xc8>)
 8004a4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a4c:	4b22      	ldr	r3, [pc, #136]	@ (8004ad8 <vTaskStartScheduler+0xc8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a54:	2301      	movs	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e001      	b.n	8004a5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d102      	bne.n	8004a6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a64:	f000 fe1a 	bl	800569c <xTimerCreateTimerTask>
 8004a68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d11b      	bne.n	8004aa8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	613b      	str	r3, [r7, #16]
}
 8004a82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a84:	4b15      	ldr	r3, [pc, #84]	@ (8004adc <vTaskStartScheduler+0xcc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3354      	adds	r3, #84	@ 0x54
 8004a8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ae0 <vTaskStartScheduler+0xd0>)
 8004a8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ae4 <vTaskStartScheduler+0xd4>)
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a96:	4b14      	ldr	r3, [pc, #80]	@ (8004ae8 <vTaskStartScheduler+0xd8>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a9c:	4b13      	ldr	r3, [pc, #76]	@ (8004aec <vTaskStartScheduler+0xdc>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004aa2:	f001 f9e5 	bl	8005e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004aa6:	e00f      	b.n	8004ac8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aae:	d10b      	bne.n	8004ac8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60fb      	str	r3, [r7, #12]
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	e7fd      	b.n	8004ac4 <vTaskStartScheduler+0xb4>
}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	080070dc 	.word	0x080070dc
 8004ad4:	08005121 	.word	0x08005121
 8004ad8:	20000dbc 	.word	0x20000dbc
 8004adc:	200008c4 	.word	0x200008c4
 8004ae0:	20000010 	.word	0x20000010
 8004ae4:	20000db8 	.word	0x20000db8
 8004ae8:	20000da4 	.word	0x20000da4
 8004aec:	20000d9c 	.word	0x20000d9c

08004af0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004af4:	4b04      	ldr	r3, [pc, #16]	@ (8004b08 <vTaskSuspendAll+0x18>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	4a03      	ldr	r2, [pc, #12]	@ (8004b08 <vTaskSuspendAll+0x18>)
 8004afc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004afe:	bf00      	nop
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000dc0 	.word	0x20000dc0

08004b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b1a:	4b42      	ldr	r3, [pc, #264]	@ (8004c24 <xTaskResumeAll+0x118>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <xTaskResumeAll+0x2e>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	603b      	str	r3, [r7, #0]
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	e7fd      	b.n	8004b36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b3a:	f001 fa3d 	bl	8005fb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b3e:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <xTaskResumeAll+0x118>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	4a37      	ldr	r2, [pc, #220]	@ (8004c24 <xTaskResumeAll+0x118>)
 8004b46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b48:	4b36      	ldr	r3, [pc, #216]	@ (8004c24 <xTaskResumeAll+0x118>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d162      	bne.n	8004c16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b50:	4b35      	ldr	r3, [pc, #212]	@ (8004c28 <xTaskResumeAll+0x11c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d05e      	beq.n	8004c16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b58:	e02f      	b.n	8004bba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b5a:	4b34      	ldr	r3, [pc, #208]	@ (8004c2c <xTaskResumeAll+0x120>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3318      	adds	r3, #24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fd5a 	bl	8003620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fd55 	bl	8003620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8004c30 <xTaskResumeAll+0x124>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d903      	bls.n	8004b8a <xTaskResumeAll+0x7e>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	4a2a      	ldr	r2, [pc, #168]	@ (8004c30 <xTaskResumeAll+0x124>)
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a27      	ldr	r2, [pc, #156]	@ (8004c34 <xTaskResumeAll+0x128>)
 8004b98:	441a      	add	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fe fce0 	bl	8003566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004baa:	4b23      	ldr	r3, [pc, #140]	@ (8004c38 <xTaskResumeAll+0x12c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d302      	bcc.n	8004bba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004bb4:	4b21      	ldr	r3, [pc, #132]	@ (8004c3c <xTaskResumeAll+0x130>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bba:	4b1c      	ldr	r3, [pc, #112]	@ (8004c2c <xTaskResumeAll+0x120>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1cb      	bne.n	8004b5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bc8:	f000 fb66 	bl	8005298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8004c40 <xTaskResumeAll+0x134>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d010      	beq.n	8004bfa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bd8:	f000 f846 	bl	8004c68 <xTaskIncrementTick>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004be2:	4b16      	ldr	r3, [pc, #88]	@ (8004c3c <xTaskResumeAll+0x130>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f1      	bne.n	8004bd8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004bf4:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <xTaskResumeAll+0x134>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bfa:	4b10      	ldr	r3, [pc, #64]	@ (8004c3c <xTaskResumeAll+0x130>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c02:	2301      	movs	r3, #1
 8004c04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c06:	4b0f      	ldr	r3, [pc, #60]	@ (8004c44 <xTaskResumeAll+0x138>)
 8004c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c16:	f001 fa01 	bl	800601c <vPortExitCritical>

	return xAlreadyYielded;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20000dc0 	.word	0x20000dc0
 8004c28:	20000d98 	.word	0x20000d98
 8004c2c:	20000d58 	.word	0x20000d58
 8004c30:	20000da0 	.word	0x20000da0
 8004c34:	200008c8 	.word	0x200008c8
 8004c38:	200008c4 	.word	0x200008c4
 8004c3c:	20000dac 	.word	0x20000dac
 8004c40:	20000da8 	.word	0x20000da8
 8004c44:	e000ed04 	.word	0xe000ed04

08004c48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c4e:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <xTaskGetTickCount+0x1c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c54:	687b      	ldr	r3, [r7, #4]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000d9c 	.word	0x20000d9c

08004c68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c72:	4b4f      	ldr	r3, [pc, #316]	@ (8004db0 <xTaskIncrementTick+0x148>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 8090 	bne.w	8004d9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004db4 <xTaskIncrementTick+0x14c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3301      	adds	r3, #1
 8004c82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c84:	4a4b      	ldr	r2, [pc, #300]	@ (8004db4 <xTaskIncrementTick+0x14c>)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d121      	bne.n	8004cd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c90:	4b49      	ldr	r3, [pc, #292]	@ (8004db8 <xTaskIncrementTick+0x150>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	603b      	str	r3, [r7, #0]
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <xTaskIncrementTick+0x46>
 8004cb2:	4b41      	ldr	r3, [pc, #260]	@ (8004db8 <xTaskIncrementTick+0x150>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	4b40      	ldr	r3, [pc, #256]	@ (8004dbc <xTaskIncrementTick+0x154>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8004db8 <xTaskIncrementTick+0x150>)
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	4a3e      	ldr	r2, [pc, #248]	@ (8004dbc <xTaskIncrementTick+0x154>)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004dc0 <xTaskIncrementTick+0x158>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8004dc0 <xTaskIncrementTick+0x158>)
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	f000 fae2 	bl	8005298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc4 <xTaskIncrementTick+0x15c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d349      	bcc.n	8004d72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cde:	4b36      	ldr	r3, [pc, #216]	@ (8004db8 <xTaskIncrementTick+0x150>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce8:	4b36      	ldr	r3, [pc, #216]	@ (8004dc4 <xTaskIncrementTick+0x15c>)
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cee:	601a      	str	r2, [r3, #0]
					break;
 8004cf0:	e03f      	b.n	8004d72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf2:	4b31      	ldr	r3, [pc, #196]	@ (8004db8 <xTaskIncrementTick+0x150>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d203      	bcs.n	8004d12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc4 <xTaskIncrementTick+0x15c>)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d10:	e02f      	b.n	8004d72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe fc82 	bl	8003620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	3318      	adds	r3, #24
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe fc79 	bl	8003620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d32:	4b25      	ldr	r3, [pc, #148]	@ (8004dc8 <xTaskIncrementTick+0x160>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d903      	bls.n	8004d42 <xTaskIncrementTick+0xda>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	4a22      	ldr	r2, [pc, #136]	@ (8004dc8 <xTaskIncrementTick+0x160>)
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dcc <xTaskIncrementTick+0x164>)
 8004d50:	441a      	add	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f7fe fc04 	bl	8003566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d62:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd0 <xTaskIncrementTick+0x168>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d3b8      	bcc.n	8004cde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d70:	e7b5      	b.n	8004cde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d72:	4b17      	ldr	r3, [pc, #92]	@ (8004dd0 <xTaskIncrementTick+0x168>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d78:	4914      	ldr	r1, [pc, #80]	@ (8004dcc <xTaskIncrementTick+0x164>)
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d901      	bls.n	8004d8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d8e:	4b11      	ldr	r3, [pc, #68]	@ (8004dd4 <xTaskIncrementTick+0x16c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e004      	b.n	8004da6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd8 <xTaskIncrementTick+0x170>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	4a0d      	ldr	r2, [pc, #52]	@ (8004dd8 <xTaskIncrementTick+0x170>)
 8004da4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004da6:	697b      	ldr	r3, [r7, #20]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000dc0 	.word	0x20000dc0
 8004db4:	20000d9c 	.word	0x20000d9c
 8004db8:	20000d50 	.word	0x20000d50
 8004dbc:	20000d54 	.word	0x20000d54
 8004dc0:	20000db0 	.word	0x20000db0
 8004dc4:	20000db8 	.word	0x20000db8
 8004dc8:	20000da0 	.word	0x20000da0
 8004dcc:	200008c8 	.word	0x200008c8
 8004dd0:	200008c4 	.word	0x200008c4
 8004dd4:	20000dac 	.word	0x20000dac
 8004dd8:	20000da8 	.word	0x20000da8

08004ddc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004de2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e90 <vTaskSwitchContext+0xb4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dea:	4b2a      	ldr	r3, [pc, #168]	@ (8004e94 <vTaskSwitchContext+0xb8>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004df0:	e047      	b.n	8004e82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004df2:	4b28      	ldr	r3, [pc, #160]	@ (8004e94 <vTaskSwitchContext+0xb8>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df8:	4b27      	ldr	r3, [pc, #156]	@ (8004e98 <vTaskSwitchContext+0xbc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e011      	b.n	8004e24 <vTaskSwitchContext+0x48>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <vTaskSwitchContext+0x42>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	607b      	str	r3, [r7, #4]
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <vTaskSwitchContext+0x3e>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	491d      	ldr	r1, [pc, #116]	@ (8004e9c <vTaskSwitchContext+0xc0>)
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0e3      	beq.n	8004e00 <vTaskSwitchContext+0x24>
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a16      	ldr	r2, [pc, #88]	@ (8004e9c <vTaskSwitchContext+0xc0>)
 8004e44:	4413      	add	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	3308      	adds	r3, #8
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d104      	bne.n	8004e68 <vTaskSwitchContext+0x8c>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	605a      	str	r2, [r3, #4]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ea0 <vTaskSwitchContext+0xc4>)
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4a09      	ldr	r2, [pc, #36]	@ (8004e98 <vTaskSwitchContext+0xbc>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e78:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <vTaskSwitchContext+0xc4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3354      	adds	r3, #84	@ 0x54
 8004e7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ea4 <vTaskSwitchContext+0xc8>)
 8004e80:	6013      	str	r3, [r2, #0]
}
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000dc0 	.word	0x20000dc0
 8004e94:	20000dac 	.word	0x20000dac
 8004e98:	20000da0 	.word	0x20000da0
 8004e9c:	200008c8 	.word	0x200008c8
 8004ea0:	200008c4 	.word	0x200008c4
 8004ea4:	20000010 	.word	0x20000010

08004ea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10b      	bne.n	8004ed0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	60fb      	str	r3, [r7, #12]
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ed0:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <vTaskPlaceOnEventList+0x48>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3318      	adds	r3, #24
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fe fb68 	bl	80035ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ede:	2101      	movs	r1, #1
 8004ee0:	6838      	ldr	r0, [r7, #0]
 8004ee2:	f000 fb87 	bl	80055f4 <prvAddCurrentTaskToDelayedList>
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200008c4 	.word	0x200008c4

08004ef4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	617b      	str	r3, [r7, #20]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3318      	adds	r3, #24
 8004f24:	4619      	mov	r1, r3
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7fe fb1d 	bl	8003566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	68b8      	ldr	r0, [r7, #8]
 8004f3c:	f000 fb5a 	bl	80055f4 <prvAddCurrentTaskToDelayedList>
	}
 8004f40:	bf00      	nop
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	200008c4 	.word	0x200008c4

08004f4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	60fb      	str	r3, [r7, #12]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3318      	adds	r3, #24
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe fb4e 	bl	8003620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f84:	4b1d      	ldr	r3, [pc, #116]	@ (8004ffc <xTaskRemoveFromEventList+0xb0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d11d      	bne.n	8004fc8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fe fb45 	bl	8003620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9a:	4b19      	ldr	r3, [pc, #100]	@ (8005000 <xTaskRemoveFromEventList+0xb4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d903      	bls.n	8004faa <xTaskRemoveFromEventList+0x5e>
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	4a16      	ldr	r2, [pc, #88]	@ (8005000 <xTaskRemoveFromEventList+0xb4>)
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4a13      	ldr	r2, [pc, #76]	@ (8005004 <xTaskRemoveFromEventList+0xb8>)
 8004fb8:	441a      	add	r2, r3
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f7fe fad0 	bl	8003566 <vListInsertEnd>
 8004fc6:	e005      	b.n	8004fd4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	3318      	adds	r3, #24
 8004fcc:	4619      	mov	r1, r3
 8004fce:	480e      	ldr	r0, [pc, #56]	@ (8005008 <xTaskRemoveFromEventList+0xbc>)
 8004fd0:	f7fe fac9 	bl	8003566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800500c <xTaskRemoveFromEventList+0xc0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d905      	bls.n	8004fee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <xTaskRemoveFromEventList+0xc4>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e001      	b.n	8004ff2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ff2:	697b      	ldr	r3, [r7, #20]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000dc0 	.word	0x20000dc0
 8005000:	20000da0 	.word	0x20000da0
 8005004:	200008c8 	.word	0x200008c8
 8005008:	20000d58 	.word	0x20000d58
 800500c:	200008c4 	.word	0x200008c4
 8005010:	20000dac 	.word	0x20000dac

08005014 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800501c:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <vTaskInternalSetTimeOutState+0x24>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005024:	4b05      	ldr	r3, [pc, #20]	@ (800503c <vTaskInternalSetTimeOutState+0x28>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20000db0 	.word	0x20000db0
 800503c:	20000d9c 	.word	0x20000d9c

08005040 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	613b      	str	r3, [r7, #16]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	60fb      	str	r3, [r7, #12]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005086:	f000 ff97 	bl	8005fb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800508a:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <xTaskCheckForTimeOut+0xc0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050a2:	d102      	bne.n	80050aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	e023      	b.n	80050f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <xTaskCheckForTimeOut+0xc4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d007      	beq.n	80050c6 <xTaskCheckForTimeOut+0x86>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	e015      	b.n	80050f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d20b      	bcs.n	80050e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff ff99 	bl	8005014 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e004      	b.n	80050f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050ee:	2301      	movs	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050f2:	f000 ff93 	bl	800601c <vPortExitCritical>

	return xReturn;
 80050f6:	69fb      	ldr	r3, [r7, #28]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20000d9c 	.word	0x20000d9c
 8005104:	20000db0 	.word	0x20000db0

08005108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800510c:	4b03      	ldr	r3, [pc, #12]	@ (800511c <vTaskMissedYield+0x14>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000dac 	.word	0x20000dac

08005120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005128:	f000 f852 	bl	80051d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800512c:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <prvIdleTask+0x28>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d9f9      	bls.n	8005128 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <prvIdleTask+0x2c>)
 8005136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005144:	e7f0      	b.n	8005128 <prvIdleTask+0x8>
 8005146:	bf00      	nop
 8005148:	200008c8 	.word	0x200008c8
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	e00c      	b.n	8005176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4a12      	ldr	r2, [pc, #72]	@ (80051b0 <prvInitialiseTaskLists+0x60>)
 8005168:	4413      	add	r3, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f7fe f9ce 	bl	800350c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3301      	adds	r3, #1
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b37      	cmp	r3, #55	@ 0x37
 800517a:	d9ef      	bls.n	800515c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800517c:	480d      	ldr	r0, [pc, #52]	@ (80051b4 <prvInitialiseTaskLists+0x64>)
 800517e:	f7fe f9c5 	bl	800350c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005182:	480d      	ldr	r0, [pc, #52]	@ (80051b8 <prvInitialiseTaskLists+0x68>)
 8005184:	f7fe f9c2 	bl	800350c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005188:	480c      	ldr	r0, [pc, #48]	@ (80051bc <prvInitialiseTaskLists+0x6c>)
 800518a:	f7fe f9bf 	bl	800350c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800518e:	480c      	ldr	r0, [pc, #48]	@ (80051c0 <prvInitialiseTaskLists+0x70>)
 8005190:	f7fe f9bc 	bl	800350c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005194:	480b      	ldr	r0, [pc, #44]	@ (80051c4 <prvInitialiseTaskLists+0x74>)
 8005196:	f7fe f9b9 	bl	800350c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800519a:	4b0b      	ldr	r3, [pc, #44]	@ (80051c8 <prvInitialiseTaskLists+0x78>)
 800519c:	4a05      	ldr	r2, [pc, #20]	@ (80051b4 <prvInitialiseTaskLists+0x64>)
 800519e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051a0:	4b0a      	ldr	r3, [pc, #40]	@ (80051cc <prvInitialiseTaskLists+0x7c>)
 80051a2:	4a05      	ldr	r2, [pc, #20]	@ (80051b8 <prvInitialiseTaskLists+0x68>)
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	200008c8 	.word	0x200008c8
 80051b4:	20000d28 	.word	0x20000d28
 80051b8:	20000d3c 	.word	0x20000d3c
 80051bc:	20000d58 	.word	0x20000d58
 80051c0:	20000d6c 	.word	0x20000d6c
 80051c4:	20000d84 	.word	0x20000d84
 80051c8:	20000d50 	.word	0x20000d50
 80051cc:	20000d54 	.word	0x20000d54

080051d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051d6:	e019      	b.n	800520c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051d8:	f000 feee 	bl	8005fb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051dc:	4b10      	ldr	r3, [pc, #64]	@ (8005220 <prvCheckTasksWaitingTermination+0x50>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fe fa19 	bl	8003620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <prvCheckTasksWaitingTermination+0x54>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005224 <prvCheckTasksWaitingTermination+0x54>)
 80051f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <prvCheckTasksWaitingTermination+0x58>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005228 <prvCheckTasksWaitingTermination+0x58>)
 8005200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005202:	f000 ff0b 	bl	800601c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f810 	bl	800522c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <prvCheckTasksWaitingTermination+0x58>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e1      	bne.n	80051d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000d6c 	.word	0x20000d6c
 8005224:	20000d98 	.word	0x20000d98
 8005228:	20000d80 	.word	0x20000d80

0800522c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3354      	adds	r3, #84	@ 0x54
 8005238:	4618      	mov	r0, r3
 800523a:	f001 fa09 	bl	8006650 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005244:	2b00      	cmp	r3, #0
 8005246:	d108      	bne.n	800525a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524c:	4618      	mov	r0, r3
 800524e:	f001 f8a3 	bl	8006398 <vPortFree>
				vPortFree( pxTCB );
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f001 f8a0 	bl	8006398 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005258:	e019      	b.n	800528e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005260:	2b01      	cmp	r3, #1
 8005262:	d103      	bne.n	800526c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f001 f897 	bl	8006398 <vPortFree>
	}
 800526a:	e010      	b.n	800528e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005272:	2b02      	cmp	r3, #2
 8005274:	d00b      	beq.n	800528e <prvDeleteTCB+0x62>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60fb      	str	r3, [r7, #12]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <prvDeleteTCB+0x5e>
	}
 800528e:	bf00      	nop
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800529e:	4b0c      	ldr	r3, [pc, #48]	@ (80052d0 <prvResetNextTaskUnblockTime+0x38>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052a8:	4b0a      	ldr	r3, [pc, #40]	@ (80052d4 <prvResetNextTaskUnblockTime+0x3c>)
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052b0:	e008      	b.n	80052c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b2:	4b07      	ldr	r3, [pc, #28]	@ (80052d0 <prvResetNextTaskUnblockTime+0x38>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4a04      	ldr	r2, [pc, #16]	@ (80052d4 <prvResetNextTaskUnblockTime+0x3c>)
 80052c2:	6013      	str	r3, [r2, #0]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	20000d50 	.word	0x20000d50
 80052d4:	20000db8 	.word	0x20000db8

080052d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052de:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <xTaskGetSchedulerState+0x34>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052e6:	2301      	movs	r3, #1
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	e008      	b.n	80052fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ec:	4b08      	ldr	r3, [pc, #32]	@ (8005310 <xTaskGetSchedulerState+0x38>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052f4:	2302      	movs	r3, #2
 80052f6:	607b      	str	r3, [r7, #4]
 80052f8:	e001      	b.n	80052fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052fa:	2300      	movs	r3, #0
 80052fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052fe:	687b      	ldr	r3, [r7, #4]
	}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	20000da4 	.word	0x20000da4
 8005310:	20000dc0 	.word	0x20000dc0

08005314 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d051      	beq.n	80053ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800532e:	4b2a      	ldr	r3, [pc, #168]	@ (80053d8 <xTaskPriorityInherit+0xc4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005334:	429a      	cmp	r2, r3
 8005336:	d241      	bcs.n	80053bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	db06      	blt.n	800534e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005340:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <xTaskPriorityInherit+0xc4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005346:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6959      	ldr	r1, [r3, #20]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4a1f      	ldr	r2, [pc, #124]	@ (80053dc <xTaskPriorityInherit+0xc8>)
 8005360:	4413      	add	r3, r2
 8005362:	4299      	cmp	r1, r3
 8005364:	d122      	bne.n	80053ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3304      	adds	r3, #4
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe f958 	bl	8003620 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005370:	4b19      	ldr	r3, [pc, #100]	@ (80053d8 <xTaskPriorityInherit+0xc4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537e:	4b18      	ldr	r3, [pc, #96]	@ (80053e0 <xTaskPriorityInherit+0xcc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d903      	bls.n	800538e <xTaskPriorityInherit+0x7a>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	4a15      	ldr	r2, [pc, #84]	@ (80053e0 <xTaskPriorityInherit+0xcc>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4a10      	ldr	r2, [pc, #64]	@ (80053dc <xTaskPriorityInherit+0xc8>)
 800539c:	441a      	add	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f7fe f8de 	bl	8003566 <vListInsertEnd>
 80053aa:	e004      	b.n	80053b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <xTaskPriorityInherit+0xc4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e008      	b.n	80053ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053c0:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <xTaskPriorityInherit+0xc4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d201      	bcs.n	80053ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80053ca:	2301      	movs	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053ce:	68fb      	ldr	r3, [r7, #12]
	}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	200008c4 	.word	0x200008c4
 80053dc:	200008c8 	.word	0x200008c8
 80053e0:	20000da0 	.word	0x20000da0

080053e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d058      	beq.n	80054ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053fa:	4b2f      	ldr	r3, [pc, #188]	@ (80054b8 <xTaskPriorityDisinherit+0xd4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	429a      	cmp	r2, r3
 8005402:	d00b      	beq.n	800541c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	60bb      	str	r3, [r7, #8]
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005440:	1e5a      	subs	r2, r3, #1
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	429a      	cmp	r2, r3
 8005450:	d02c      	beq.n	80054ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005456:	2b00      	cmp	r3, #0
 8005458:	d128      	bne.n	80054ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	3304      	adds	r3, #4
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe f8de 	bl	8003620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005470:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547c:	4b0f      	ldr	r3, [pc, #60]	@ (80054bc <xTaskPriorityDisinherit+0xd8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d903      	bls.n	800548c <xTaskPriorityDisinherit+0xa8>
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005488:	4a0c      	ldr	r2, [pc, #48]	@ (80054bc <xTaskPriorityDisinherit+0xd8>)
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4a09      	ldr	r2, [pc, #36]	@ (80054c0 <xTaskPriorityDisinherit+0xdc>)
 800549a:	441a      	add	r2, r3
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	3304      	adds	r3, #4
 80054a0:	4619      	mov	r1, r3
 80054a2:	4610      	mov	r0, r2
 80054a4:	f7fe f85f 	bl	8003566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054ac:	697b      	ldr	r3, [r7, #20]
	}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	200008c4 	.word	0x200008c4
 80054bc:	20000da0 	.word	0x20000da0
 80054c0:	200008c8 	.word	0x200008c8

080054c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80054d2:	2301      	movs	r3, #1
 80054d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d06c      	beq.n	80055b6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	60fb      	str	r3, [r7, #12]
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d902      	bls.n	800550c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	e002      	b.n	8005512 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005510:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	429a      	cmp	r2, r3
 800551a:	d04c      	beq.n	80055b6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	429a      	cmp	r2, r3
 8005524:	d147      	bne.n	80055b6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005526:	4b26      	ldr	r3, [pc, #152]	@ (80055c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	429a      	cmp	r2, r3
 800552e:	d10b      	bne.n	8005548 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	60bb      	str	r3, [r7, #8]
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	e7fd      	b.n	8005544 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	db04      	blt.n	8005566 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	6959      	ldr	r1, [r3, #20]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4a13      	ldr	r2, [pc, #76]	@ (80055c4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005576:	4413      	add	r3, r2
 8005578:	4299      	cmp	r1, r3
 800557a:	d11c      	bne.n	80055b6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	3304      	adds	r3, #4
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe f84d 	bl	8003620 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558a:	4b0f      	ldr	r3, [pc, #60]	@ (80055c8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d903      	bls.n	800559a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005596:	4a0c      	ldr	r2, [pc, #48]	@ (80055c8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4a07      	ldr	r2, [pc, #28]	@ (80055c4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80055a8:	441a      	add	r2, r3
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f7fd ffd8 	bl	8003566 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055b6:	bf00      	nop
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	200008c4 	.word	0x200008c4
 80055c4:	200008c8 	.word	0x200008c8
 80055c8:	20000da0 	.word	0x20000da0

080055cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80055d0:	4b07      	ldr	r3, [pc, #28]	@ (80055f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80055d8:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055de:	3201      	adds	r2, #1
 80055e0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80055e2:	4b03      	ldr	r3, [pc, #12]	@ (80055f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80055e4:	681b      	ldr	r3, [r3, #0]
	}
 80055e6:	4618      	mov	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	200008c4 	.word	0x200008c4

080055f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055fe:	4b21      	ldr	r3, [pc, #132]	@ (8005684 <prvAddCurrentTaskToDelayedList+0x90>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005604:	4b20      	ldr	r3, [pc, #128]	@ (8005688 <prvAddCurrentTaskToDelayedList+0x94>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3304      	adds	r3, #4
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe f808 	bl	8003620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005616:	d10a      	bne.n	800562e <prvAddCurrentTaskToDelayedList+0x3a>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800561e:	4b1a      	ldr	r3, [pc, #104]	@ (8005688 <prvAddCurrentTaskToDelayedList+0x94>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3304      	adds	r3, #4
 8005624:	4619      	mov	r1, r3
 8005626:	4819      	ldr	r0, [pc, #100]	@ (800568c <prvAddCurrentTaskToDelayedList+0x98>)
 8005628:	f7fd ff9d 	bl	8003566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800562c:	e026      	b.n	800567c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005636:	4b14      	ldr	r3, [pc, #80]	@ (8005688 <prvAddCurrentTaskToDelayedList+0x94>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	429a      	cmp	r2, r3
 8005644:	d209      	bcs.n	800565a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005646:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4b0f      	ldr	r3, [pc, #60]	@ (8005688 <prvAddCurrentTaskToDelayedList+0x94>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3304      	adds	r3, #4
 8005650:	4619      	mov	r1, r3
 8005652:	4610      	mov	r0, r2
 8005654:	f7fd ffab 	bl	80035ae <vListInsert>
}
 8005658:	e010      	b.n	800567c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800565a:	4b0e      	ldr	r3, [pc, #56]	@ (8005694 <prvAddCurrentTaskToDelayedList+0xa0>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <prvAddCurrentTaskToDelayedList+0x94>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f7fd ffa1 	bl	80035ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800566c:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <prvAddCurrentTaskToDelayedList+0xa4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	d202      	bcs.n	800567c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005676:	4a08      	ldr	r2, [pc, #32]	@ (8005698 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6013      	str	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20000d9c 	.word	0x20000d9c
 8005688:	200008c4 	.word	0x200008c4
 800568c:	20000d84 	.word	0x20000d84
 8005690:	20000d54 	.word	0x20000d54
 8005694:	20000d50 	.word	0x20000d50
 8005698:	20000db8 	.word	0x20000db8

0800569c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	@ 0x28
 80056a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80056a6:	f000 fb13 	bl	8005cd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80056aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005720 <xTimerCreateTimerTask+0x84>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d021      	beq.n	80056f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056ba:	1d3a      	adds	r2, r7, #4
 80056bc:	f107 0108 	add.w	r1, r7, #8
 80056c0:	f107 030c 	add.w	r3, r7, #12
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fd ff07 	bl	80034d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	9202      	str	r2, [sp, #8]
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	2302      	movs	r3, #2
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	2300      	movs	r3, #0
 80056da:	460a      	mov	r2, r1
 80056dc:	4911      	ldr	r1, [pc, #68]	@ (8005724 <xTimerCreateTimerTask+0x88>)
 80056de:	4812      	ldr	r0, [pc, #72]	@ (8005728 <xTimerCreateTimerTask+0x8c>)
 80056e0:	f7fe ffa2 	bl	8004628 <xTaskCreateStatic>
 80056e4:	4603      	mov	r3, r0
 80056e6:	4a11      	ldr	r2, [pc, #68]	@ (800572c <xTimerCreateTimerTask+0x90>)
 80056e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80056ea:	4b10      	ldr	r3, [pc, #64]	@ (800572c <xTimerCreateTimerTask+0x90>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80056f2:	2301      	movs	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	613b      	str	r3, [r7, #16]
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	e7fd      	b.n	8005710 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005714:	697b      	ldr	r3, [r7, #20]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000df4 	.word	0x20000df4
 8005724:	080070e4 	.word	0x080070e4
 8005728:	08005869 	.word	0x08005869
 800572c:	20000df8 	.word	0x20000df8

08005730 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08a      	sub	sp, #40	@ 0x28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <xTimerGenericCommand+0x30>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	623b      	str	r3, [r7, #32]
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	e7fd      	b.n	800575c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005760:	4b19      	ldr	r3, [pc, #100]	@ (80057c8 <xTimerGenericCommand+0x98>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d02a      	beq.n	80057be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b05      	cmp	r3, #5
 8005778:	dc18      	bgt.n	80057ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800577a:	f7ff fdad 	bl	80052d8 <xTaskGetSchedulerState>
 800577e:	4603      	mov	r3, r0
 8005780:	2b02      	cmp	r3, #2
 8005782:	d109      	bne.n	8005798 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005784:	4b10      	ldr	r3, [pc, #64]	@ (80057c8 <xTimerGenericCommand+0x98>)
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	f107 0110 	add.w	r1, r7, #16
 800578c:	2300      	movs	r3, #0
 800578e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005790:	f7fe f924 	bl	80039dc <xQueueGenericSend>
 8005794:	6278      	str	r0, [r7, #36]	@ 0x24
 8005796:	e012      	b.n	80057be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005798:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <xTimerGenericCommand+0x98>)
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	f107 0110 	add.w	r1, r7, #16
 80057a0:	2300      	movs	r3, #0
 80057a2:	2200      	movs	r2, #0
 80057a4:	f7fe f91a 	bl	80039dc <xQueueGenericSend>
 80057a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80057aa:	e008      	b.n	80057be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057ac:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <xTimerGenericCommand+0x98>)
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	f107 0110 	add.w	r1, r7, #16
 80057b4:	2300      	movs	r3, #0
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	f7fe fa12 	bl	8003be0 <xQueueGenericSendFromISR>
 80057bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3728      	adds	r7, #40	@ 0x28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20000df4 	.word	0x20000df4

080057cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d6:	4b23      	ldr	r3, [pc, #140]	@ (8005864 <prvProcessExpiredTimer+0x98>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fd ff1b 	bl	8003620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d023      	beq.n	8005840 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	699a      	ldr	r2, [r3, #24]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	18d1      	adds	r1, r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	6978      	ldr	r0, [r7, #20]
 8005806:	f000 f8d5 	bl	80059b4 <prvInsertTimerInActiveList>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d020      	beq.n	8005852 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005810:	2300      	movs	r3, #0
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	2100      	movs	r1, #0
 800581a:	6978      	ldr	r0, [r7, #20]
 800581c:	f7ff ff88 	bl	8005730 <xTimerGenericCommand>
 8005820:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d114      	bne.n	8005852 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	60fb      	str	r3, [r7, #12]
}
 800583a:	bf00      	nop
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	b2da      	uxtb	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	6978      	ldr	r0, [r7, #20]
 8005858:	4798      	blx	r3
}
 800585a:	bf00      	nop
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000dec 	.word	0x20000dec

08005868 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005870:	f107 0308 	add.w	r3, r7, #8
 8005874:	4618      	mov	r0, r3
 8005876:	f000 f859 	bl	800592c <prvGetNextExpireTime>
 800587a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4619      	mov	r1, r3
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f805 	bl	8005890 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005886:	f000 f8d7 	bl	8005a38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800588a:	bf00      	nop
 800588c:	e7f0      	b.n	8005870 <prvTimerTask+0x8>
	...

08005890 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800589a:	f7ff f929 	bl	8004af0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800589e:	f107 0308 	add.w	r3, r7, #8
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f866 	bl	8005974 <prvSampleTimeNow>
 80058a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d130      	bne.n	8005912 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <prvProcessTimerOrBlockTask+0x3c>
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d806      	bhi.n	80058cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058be:	f7ff f925 	bl	8004b0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff ff81 	bl	80057cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058ca:	e024      	b.n	8005916 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058d2:	4b13      	ldr	r3, [pc, #76]	@ (8005920 <prvProcessTimerOrBlockTask+0x90>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <prvProcessTimerOrBlockTask+0x50>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <prvProcessTimerOrBlockTask+0x52>
 80058e0:	2300      	movs	r3, #0
 80058e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005924 <prvProcessTimerOrBlockTask+0x94>)
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	4619      	mov	r1, r3
 80058f2:	f7fe fe65 	bl	80045c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80058f6:	f7ff f909 	bl	8004b0c <xTaskResumeAll>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10a      	bne.n	8005916 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005900:	4b09      	ldr	r3, [pc, #36]	@ (8005928 <prvProcessTimerOrBlockTask+0x98>)
 8005902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
}
 8005910:	e001      	b.n	8005916 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005912:	f7ff f8fb 	bl	8004b0c <xTaskResumeAll>
}
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000df0 	.word	0x20000df0
 8005924:	20000df4 	.word	0x20000df4
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005934:	4b0e      	ldr	r3, [pc, #56]	@ (8005970 <prvGetNextExpireTime+0x44>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <prvGetNextExpireTime+0x16>
 800593e:	2201      	movs	r2, #1
 8005940:	e000      	b.n	8005944 <prvGetNextExpireTime+0x18>
 8005942:	2200      	movs	r2, #0
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d105      	bne.n	800595c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005950:	4b07      	ldr	r3, [pc, #28]	@ (8005970 <prvGetNextExpireTime+0x44>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	e001      	b.n	8005960 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005960:	68fb      	ldr	r3, [r7, #12]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000dec 	.word	0x20000dec

08005974 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800597c:	f7ff f964 	bl	8004c48 <xTaskGetTickCount>
 8005980:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005982:	4b0b      	ldr	r3, [pc, #44]	@ (80059b0 <prvSampleTimeNow+0x3c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	429a      	cmp	r2, r3
 800598a:	d205      	bcs.n	8005998 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800598c:	f000 f93a 	bl	8005c04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	e002      	b.n	800599e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800599e:	4a04      	ldr	r2, [pc, #16]	@ (80059b0 <prvSampleTimeNow+0x3c>)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80059a4:	68fb      	ldr	r3, [r7, #12]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000dfc 	.word	0x20000dfc

080059b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d812      	bhi.n	8005a00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	1ad2      	subs	r2, r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d302      	bcc.n	80059ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80059e8:	2301      	movs	r3, #1
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e01b      	b.n	8005a26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059ee:	4b10      	ldr	r3, [pc, #64]	@ (8005a30 <prvInsertTimerInActiveList+0x7c>)
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f7fd fdd8 	bl	80035ae <vListInsert>
 80059fe:	e012      	b.n	8005a26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d206      	bcs.n	8005a16 <prvInsertTimerInActiveList+0x62>
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d302      	bcc.n	8005a16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e007      	b.n	8005a26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a16:	4b07      	ldr	r3, [pc, #28]	@ (8005a34 <prvInsertTimerInActiveList+0x80>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f7fd fdc4 	bl	80035ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a26:	697b      	ldr	r3, [r7, #20]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20000df0 	.word	0x20000df0
 8005a34:	20000dec 	.word	0x20000dec

08005a38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08e      	sub	sp, #56	@ 0x38
 8005a3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a3e:	e0ce      	b.n	8005bde <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da19      	bge.n	8005a7a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	3304      	adds	r3, #4
 8005a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10b      	bne.n	8005a6a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	61fb      	str	r3, [r7, #28]
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	e7fd      	b.n	8005a66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a70:	6850      	ldr	r0, [r2, #4]
 8005a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a74:	6892      	ldr	r2, [r2, #8]
 8005a76:	4611      	mov	r1, r2
 8005a78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f2c0 80ae 	blt.w	8005bde <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d004      	beq.n	8005a98 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a90:	3304      	adds	r3, #4
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fd fdc4 	bl	8003620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a98:	463b      	mov	r3, r7
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ff6a 	bl	8005974 <prvSampleTimeNow>
 8005aa0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b09      	cmp	r3, #9
 8005aa6:	f200 8097 	bhi.w	8005bd8 <prvProcessReceivedCommands+0x1a0>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <prvProcessReceivedCommands+0x78>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005ad9 	.word	0x08005ad9
 8005abc:	08005b4f 	.word	0x08005b4f
 8005ac0:	08005b63 	.word	0x08005b63
 8005ac4:	08005baf 	.word	0x08005baf
 8005ac8:	08005ad9 	.word	0x08005ad9
 8005acc:	08005ad9 	.word	0x08005ad9
 8005ad0:	08005b4f 	.word	0x08005b4f
 8005ad4:	08005b63 	.word	0x08005b63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	18d1      	adds	r1, r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af8:	f7ff ff5c 	bl	80059b4 <prvInsertTimerInActiveList>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d06c      	beq.n	8005bdc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d061      	beq.n	8005bdc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	441a      	add	r2, r3
 8005b20:	2300      	movs	r3, #0
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	2300      	movs	r3, #0
 8005b26:	2100      	movs	r1, #0
 8005b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b2a:	f7ff fe01 	bl	8005730 <xTimerGenericCommand>
 8005b2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d152      	bne.n	8005bdc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	61bb      	str	r3, [r7, #24]
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	e7fd      	b.n	8005b4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b60:	e03d      	b.n	8005bde <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	617b      	str	r3, [r7, #20]
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	18d1      	adds	r1, r2, r3
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ba8:	f7ff ff04 	bl	80059b4 <prvInsertTimerInActiveList>
					break;
 8005bac:	e017      	b.n	8005bde <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d103      	bne.n	8005bc4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005bbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bbe:	f000 fbeb 	bl	8006398 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005bc2:	e00c      	b.n	8005bde <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bca:	f023 0301 	bic.w	r3, r3, #1
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005bd6:	e002      	b.n	8005bde <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005bd8:	bf00      	nop
 8005bda:	e000      	b.n	8005bde <prvProcessReceivedCommands+0x1a6>
					break;
 8005bdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bde:	4b08      	ldr	r3, [pc, #32]	@ (8005c00 <prvProcessReceivedCommands+0x1c8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	1d39      	adds	r1, r7, #4
 8005be4:	2200      	movs	r2, #0
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe f898 	bl	8003d1c <xQueueReceive>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f47f af26 	bne.w	8005a40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	3730      	adds	r7, #48	@ 0x30
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000df4 	.word	0x20000df4

08005c04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c0a:	e049      	b.n	8005ca0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc8 <prvSwitchTimerLists+0xc4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c16:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc8 <prvSwitchTimerLists+0xc4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fd fcfb 	bl	8003620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d02f      	beq.n	8005ca0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d90e      	bls.n	8005c70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc8 <prvSwitchTimerLists+0xc4>)
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f7fd fca0 	bl	80035ae <vListInsert>
 8005c6e:	e017      	b.n	8005ca0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c70:	2300      	movs	r3, #0
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	2100      	movs	r1, #0
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7ff fd58 	bl	8005730 <xTimerGenericCommand>
 8005c80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	603b      	str	r3, [r7, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ca0:	4b09      	ldr	r3, [pc, #36]	@ (8005cc8 <prvSwitchTimerLists+0xc4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1b0      	bne.n	8005c0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005caa:	4b07      	ldr	r3, [pc, #28]	@ (8005cc8 <prvSwitchTimerLists+0xc4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005cb0:	4b06      	ldr	r3, [pc, #24]	@ (8005ccc <prvSwitchTimerLists+0xc8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a04      	ldr	r2, [pc, #16]	@ (8005cc8 <prvSwitchTimerLists+0xc4>)
 8005cb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005cb8:	4a04      	ldr	r2, [pc, #16]	@ (8005ccc <prvSwitchTimerLists+0xc8>)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	6013      	str	r3, [r2, #0]
}
 8005cbe:	bf00      	nop
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000dec 	.word	0x20000dec
 8005ccc:	20000df0 	.word	0x20000df0

08005cd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005cd6:	f000 f96f 	bl	8005fb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005cda:	4b15      	ldr	r3, [pc, #84]	@ (8005d30 <prvCheckForValidListAndQueue+0x60>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d120      	bne.n	8005d24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ce2:	4814      	ldr	r0, [pc, #80]	@ (8005d34 <prvCheckForValidListAndQueue+0x64>)
 8005ce4:	f7fd fc12 	bl	800350c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ce8:	4813      	ldr	r0, [pc, #76]	@ (8005d38 <prvCheckForValidListAndQueue+0x68>)
 8005cea:	f7fd fc0f 	bl	800350c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005cee:	4b13      	ldr	r3, [pc, #76]	@ (8005d3c <prvCheckForValidListAndQueue+0x6c>)
 8005cf0:	4a10      	ldr	r2, [pc, #64]	@ (8005d34 <prvCheckForValidListAndQueue+0x64>)
 8005cf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005cf4:	4b12      	ldr	r3, [pc, #72]	@ (8005d40 <prvCheckForValidListAndQueue+0x70>)
 8005cf6:	4a10      	ldr	r2, [pc, #64]	@ (8005d38 <prvCheckForValidListAndQueue+0x68>)
 8005cf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4b11      	ldr	r3, [pc, #68]	@ (8005d44 <prvCheckForValidListAndQueue+0x74>)
 8005d00:	4a11      	ldr	r2, [pc, #68]	@ (8005d48 <prvCheckForValidListAndQueue+0x78>)
 8005d02:	2110      	movs	r1, #16
 8005d04:	200a      	movs	r0, #10
 8005d06:	f7fd fd1f 	bl	8003748 <xQueueGenericCreateStatic>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	4a08      	ldr	r2, [pc, #32]	@ (8005d30 <prvCheckForValidListAndQueue+0x60>)
 8005d0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d10:	4b07      	ldr	r3, [pc, #28]	@ (8005d30 <prvCheckForValidListAndQueue+0x60>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d18:	4b05      	ldr	r3, [pc, #20]	@ (8005d30 <prvCheckForValidListAndQueue+0x60>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	490b      	ldr	r1, [pc, #44]	@ (8005d4c <prvCheckForValidListAndQueue+0x7c>)
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fe fbfa 	bl	8004518 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d24:	f000 f97a 	bl	800601c <vPortExitCritical>
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000df4 	.word	0x20000df4
 8005d34:	20000dc4 	.word	0x20000dc4
 8005d38:	20000dd8 	.word	0x20000dd8
 8005d3c:	20000dec 	.word	0x20000dec
 8005d40:	20000df0 	.word	0x20000df0
 8005d44:	20000ea0 	.word	0x20000ea0
 8005d48:	20000e00 	.word	0x20000e00
 8005d4c:	080070ec 	.word	0x080070ec

08005d50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3b04      	subs	r3, #4
 8005d60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3b04      	subs	r3, #4
 8005d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f023 0201 	bic.w	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3b04      	subs	r3, #4
 8005d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d80:	4a0c      	ldr	r2, [pc, #48]	@ (8005db4 <pxPortInitialiseStack+0x64>)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3b14      	subs	r3, #20
 8005d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3b04      	subs	r3, #4
 8005d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f06f 0202 	mvn.w	r2, #2
 8005d9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3b20      	subs	r3, #32
 8005da4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005da6:	68fb      	ldr	r3, [r7, #12]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	08005db9 	.word	0x08005db9

08005db8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dc2:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <prvTaskExitError+0x58>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dca:	d00b      	beq.n	8005de4 <prvTaskExitError+0x2c>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	60fb      	str	r3, [r7, #12]
}
 8005dde:	bf00      	nop
 8005de0:	bf00      	nop
 8005de2:	e7fd      	b.n	8005de0 <prvTaskExitError+0x28>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	60bb      	str	r3, [r7, #8]
}
 8005df6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005df8:	bf00      	nop
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0fc      	beq.n	8005dfa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	2000000c 	.word	0x2000000c
	...

08005e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e20:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <pxCurrentTCBConst2>)
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	6808      	ldr	r0, [r1, #0]
 8005e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2a:	f380 8809 	msr	PSP, r0
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8811 	msr	BASEPRI, r0
 8005e3a:	4770      	bx	lr
 8005e3c:	f3af 8000 	nop.w

08005e40 <pxCurrentTCBConst2>:
 8005e40:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e48:	4808      	ldr	r0, [pc, #32]	@ (8005e6c <prvPortStartFirstTask+0x24>)
 8005e4a:	6800      	ldr	r0, [r0, #0]
 8005e4c:	6800      	ldr	r0, [r0, #0]
 8005e4e:	f380 8808 	msr	MSP, r0
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f380 8814 	msr	CONTROL, r0
 8005e5a:	b662      	cpsie	i
 8005e5c:	b661      	cpsie	f
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	df00      	svc	0
 8005e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e6a:	bf00      	nop
 8005e6c:	e000ed08 	.word	0xe000ed08

08005e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e76:	4b47      	ldr	r3, [pc, #284]	@ (8005f94 <xPortStartScheduler+0x124>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a47      	ldr	r2, [pc, #284]	@ (8005f98 <xPortStartScheduler+0x128>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10b      	bne.n	8005e98 <xPortStartScheduler+0x28>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	613b      	str	r3, [r7, #16]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e98:	4b3e      	ldr	r3, [pc, #248]	@ (8005f94 <xPortStartScheduler+0x124>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f9c <xPortStartScheduler+0x12c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10b      	bne.n	8005eba <xPortStartScheduler+0x4a>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60fb      	str	r3, [r7, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eba:	4b39      	ldr	r3, [pc, #228]	@ (8005fa0 <xPortStartScheduler+0x130>)
 8005ebc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	22ff      	movs	r2, #255	@ 0xff
 8005eca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	4b31      	ldr	r3, [pc, #196]	@ (8005fa4 <xPortStartScheduler+0x134>)
 8005ee0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ee2:	4b31      	ldr	r3, [pc, #196]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005ee4:	2207      	movs	r2, #7
 8005ee6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ee8:	e009      	b.n	8005efe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005eea:	4b2f      	ldr	r3, [pc, #188]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005ef2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f06:	2b80      	cmp	r3, #128	@ 0x80
 8005f08:	d0ef      	beq.n	8005eea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f0a:	4b27      	ldr	r3, [pc, #156]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f1c3 0307 	rsb	r3, r3, #7
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d00b      	beq.n	8005f2e <xPortStartScheduler+0xbe>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	60bb      	str	r3, [r7, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f38:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f40:	4a19      	ldr	r2, [pc, #100]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f4c:	4b17      	ldr	r3, [pc, #92]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f58:	4b14      	ldr	r3, [pc, #80]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a13      	ldr	r2, [pc, #76]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f64:	f000 f8da 	bl	800611c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f68:	4b11      	ldr	r3, [pc, #68]	@ (8005fb0 <xPortStartScheduler+0x140>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f6e:	f000 f8f9 	bl	8006164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <xPortStartScheduler+0x144>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a0f      	ldr	r2, [pc, #60]	@ (8005fb4 <xPortStartScheduler+0x144>)
 8005f78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f7e:	f7ff ff63 	bl	8005e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f82:	f7fe ff2b 	bl	8004ddc <vTaskSwitchContext>
	prvTaskExitError();
 8005f86:	f7ff ff17 	bl	8005db8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	e000ed00 	.word	0xe000ed00
 8005f98:	410fc271 	.word	0x410fc271
 8005f9c:	410fc270 	.word	0x410fc270
 8005fa0:	e000e400 	.word	0xe000e400
 8005fa4:	20000ef0 	.word	0x20000ef0
 8005fa8:	20000ef4 	.word	0x20000ef4
 8005fac:	e000ed20 	.word	0xe000ed20
 8005fb0:	2000000c 	.word	0x2000000c
 8005fb4:	e000ef34 	.word	0xe000ef34

08005fb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fd2:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d110      	bne.n	8006006 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <vPortEnterCritical+0x60>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <vPortEnterCritical+0x4e>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	603b      	str	r3, [r7, #0]
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	e7fd      	b.n	8006002 <vPortEnterCritical+0x4a>
	}
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	2000000c 	.word	0x2000000c
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006022:	4b12      	ldr	r3, [pc, #72]	@ (800606c <vPortExitCritical+0x50>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <vPortExitCritical+0x26>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006042:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <vPortExitCritical+0x50>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3b01      	subs	r3, #1
 8006048:	4a08      	ldr	r2, [pc, #32]	@ (800606c <vPortExitCritical+0x50>)
 800604a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800604c:	4b07      	ldr	r3, [pc, #28]	@ (800606c <vPortExitCritical+0x50>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <vPortExitCritical+0x44>
 8006054:	2300      	movs	r3, #0
 8006056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f383 8811 	msr	BASEPRI, r3
}
 800605e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	2000000c 	.word	0x2000000c

08006070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006070:	f3ef 8009 	mrs	r0, PSP
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4b15      	ldr	r3, [pc, #84]	@ (80060d0 <pxCurrentTCBConst>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	f01e 0f10 	tst.w	lr, #16
 8006080:	bf08      	it	eq
 8006082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	6010      	str	r0, [r2, #0]
 800608c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006094:	f380 8811 	msr	BASEPRI, r0
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f7fe fe9c 	bl	8004ddc <vTaskSwitchContext>
 80060a4:	f04f 0000 	mov.w	r0, #0
 80060a8:	f380 8811 	msr	BASEPRI, r0
 80060ac:	bc09      	pop	{r0, r3}
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	6808      	ldr	r0, [r1, #0]
 80060b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b6:	f01e 0f10 	tst.w	lr, #16
 80060ba:	bf08      	it	eq
 80060bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060c0:	f380 8809 	msr	PSP, r0
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	f3af 8000 	nop.w

080060d0 <pxCurrentTCBConst>:
 80060d0:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop

080060d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	607b      	str	r3, [r7, #4]
}
 80060f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060f2:	f7fe fdb9 	bl	8004c68 <xTaskIncrementTick>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <xPortSysTickHandler+0x40>)
 80060fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	f383 8811 	msr	BASEPRI, r3
}
 800610e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006120:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006126:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <vPortSetupTimerInterrupt+0x38>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800612c:	4b0a      	ldr	r3, [pc, #40]	@ (8006158 <vPortSetupTimerInterrupt+0x3c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0a      	ldr	r2, [pc, #40]	@ (800615c <vPortSetupTimerInterrupt+0x40>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	4a09      	ldr	r2, [pc, #36]	@ (8006160 <vPortSetupTimerInterrupt+0x44>)
 800613a:	3b01      	subs	r3, #1
 800613c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800613e:	4b04      	ldr	r3, [pc, #16]	@ (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006140:	2207      	movs	r2, #7
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	e000e010 	.word	0xe000e010
 8006154:	e000e018 	.word	0xe000e018
 8006158:	20000000 	.word	0x20000000
 800615c:	10624dd3 	.word	0x10624dd3
 8006160:	e000e014 	.word	0xe000e014

08006164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006164:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006174 <vPortEnableVFP+0x10>
 8006168:	6801      	ldr	r1, [r0, #0]
 800616a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800616e:	6001      	str	r1, [r0, #0]
 8006170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006172:	bf00      	nop
 8006174:	e000ed88 	.word	0xe000ed88

08006178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800617e:	f3ef 8305 	mrs	r3, IPSR
 8006182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b0f      	cmp	r3, #15
 8006188:	d915      	bls.n	80061b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800618a:	4a18      	ldr	r2, [pc, #96]	@ (80061ec <vPortValidateInterruptPriority+0x74>)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006194:	4b16      	ldr	r3, [pc, #88]	@ (80061f0 <vPortValidateInterruptPriority+0x78>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	7afa      	ldrb	r2, [r7, #11]
 800619a:	429a      	cmp	r2, r3
 800619c:	d20b      	bcs.n	80061b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	607b      	str	r3, [r7, #4]
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	e7fd      	b.n	80061b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061b6:	4b0f      	ldr	r3, [pc, #60]	@ (80061f4 <vPortValidateInterruptPriority+0x7c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061be:	4b0e      	ldr	r3, [pc, #56]	@ (80061f8 <vPortValidateInterruptPriority+0x80>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d90b      	bls.n	80061de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	603b      	str	r3, [r7, #0]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <vPortValidateInterruptPriority+0x62>
	}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	e000e3f0 	.word	0xe000e3f0
 80061f0:	20000ef0 	.word	0x20000ef0
 80061f4:	e000ed0c 	.word	0xe000ed0c
 80061f8:	20000ef4 	.word	0x20000ef4

080061fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	@ 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006204:	2300      	movs	r3, #0
 8006206:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006208:	f7fe fc72 	bl	8004af0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800620c:	4b5c      	ldr	r3, [pc, #368]	@ (8006380 <pvPortMalloc+0x184>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006214:	f000 f924 	bl	8006460 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006218:	4b5a      	ldr	r3, [pc, #360]	@ (8006384 <pvPortMalloc+0x188>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 8095 	bne.w	8006350 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01e      	beq.n	800626a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800622c:	2208      	movs	r2, #8
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4413      	add	r3, r2
 8006232:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b00      	cmp	r3, #0
 800623c:	d015      	beq.n	800626a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f023 0307 	bic.w	r3, r3, #7
 8006244:	3308      	adds	r3, #8
 8006246:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00b      	beq.n	800626a <pvPortMalloc+0x6e>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	617b      	str	r3, [r7, #20]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d06f      	beq.n	8006350 <pvPortMalloc+0x154>
 8006270:	4b45      	ldr	r3, [pc, #276]	@ (8006388 <pvPortMalloc+0x18c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	429a      	cmp	r2, r3
 8006278:	d86a      	bhi.n	8006350 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800627a:	4b44      	ldr	r3, [pc, #272]	@ (800638c <pvPortMalloc+0x190>)
 800627c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800627e:	4b43      	ldr	r3, [pc, #268]	@ (800638c <pvPortMalloc+0x190>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006284:	e004      	b.n	8006290 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	d903      	bls.n	80062a2 <pvPortMalloc+0xa6>
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f1      	bne.n	8006286 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062a2:	4b37      	ldr	r3, [pc, #220]	@ (8006380 <pvPortMalloc+0x184>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d051      	beq.n	8006350 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2208      	movs	r2, #8
 80062b2:	4413      	add	r3, r2
 80062b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	1ad2      	subs	r2, r2, r3
 80062c6:	2308      	movs	r3, #8
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d920      	bls.n	8006310 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4413      	add	r3, r2
 80062d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <pvPortMalloc+0xfc>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	e7fd      	b.n	80062f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	1ad2      	subs	r2, r2, r3
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800630a:	69b8      	ldr	r0, [r7, #24]
 800630c:	f000 f90a 	bl	8006524 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006310:	4b1d      	ldr	r3, [pc, #116]	@ (8006388 <pvPortMalloc+0x18c>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	4a1b      	ldr	r2, [pc, #108]	@ (8006388 <pvPortMalloc+0x18c>)
 800631c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800631e:	4b1a      	ldr	r3, [pc, #104]	@ (8006388 <pvPortMalloc+0x18c>)
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b1b      	ldr	r3, [pc, #108]	@ (8006390 <pvPortMalloc+0x194>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d203      	bcs.n	8006332 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800632a:	4b17      	ldr	r3, [pc, #92]	@ (8006388 <pvPortMalloc+0x18c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a18      	ldr	r2, [pc, #96]	@ (8006390 <pvPortMalloc+0x194>)
 8006330:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	4b13      	ldr	r3, [pc, #76]	@ (8006384 <pvPortMalloc+0x188>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	431a      	orrs	r2, r3
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006346:	4b13      	ldr	r3, [pc, #76]	@ (8006394 <pvPortMalloc+0x198>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3301      	adds	r3, #1
 800634c:	4a11      	ldr	r2, [pc, #68]	@ (8006394 <pvPortMalloc+0x198>)
 800634e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006350:	f7fe fbdc 	bl	8004b0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00b      	beq.n	8006376 <pvPortMalloc+0x17a>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	60fb      	str	r3, [r7, #12]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <pvPortMalloc+0x176>
	return pvReturn;
 8006376:	69fb      	ldr	r3, [r7, #28]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3728      	adds	r7, #40	@ 0x28
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20004b00 	.word	0x20004b00
 8006384:	20004b14 	.word	0x20004b14
 8006388:	20004b04 	.word	0x20004b04
 800638c:	20004af8 	.word	0x20004af8
 8006390:	20004b08 	.word	0x20004b08
 8006394:	20004b0c 	.word	0x20004b0c

08006398 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d04f      	beq.n	800644a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063aa:	2308      	movs	r3, #8
 80063ac:	425b      	negs	r3, r3
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4413      	add	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	4b25      	ldr	r3, [pc, #148]	@ (8006454 <vPortFree+0xbc>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <vPortFree+0x46>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60fb      	str	r3, [r7, #12]
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	e7fd      	b.n	80063da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00b      	beq.n	80063fe <vPortFree+0x66>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60bb      	str	r3, [r7, #8]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	4b14      	ldr	r3, [pc, #80]	@ (8006454 <vPortFree+0xbc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4013      	ands	r3, r2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01e      	beq.n	800644a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11a      	bne.n	800644a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	4b0e      	ldr	r3, [pc, #56]	@ (8006454 <vPortFree+0xbc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	43db      	mvns	r3, r3
 800641e:	401a      	ands	r2, r3
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006424:	f7fe fb64 	bl	8004af0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <vPortFree+0xc0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4413      	add	r3, r2
 8006432:	4a09      	ldr	r2, [pc, #36]	@ (8006458 <vPortFree+0xc0>)
 8006434:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006436:	6938      	ldr	r0, [r7, #16]
 8006438:	f000 f874 	bl	8006524 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800643c:	4b07      	ldr	r3, [pc, #28]	@ (800645c <vPortFree+0xc4>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3301      	adds	r3, #1
 8006442:	4a06      	ldr	r2, [pc, #24]	@ (800645c <vPortFree+0xc4>)
 8006444:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006446:	f7fe fb61 	bl	8004b0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800644a:	bf00      	nop
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20004b14 	.word	0x20004b14
 8006458:	20004b04 	.word	0x20004b04
 800645c:	20004b10 	.word	0x20004b10

08006460 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006466:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800646a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800646c:	4b27      	ldr	r3, [pc, #156]	@ (800650c <prvHeapInit+0xac>)
 800646e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00c      	beq.n	8006494 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3307      	adds	r3, #7
 800647e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0307 	bic.w	r3, r3, #7
 8006486:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	4a1f      	ldr	r2, [pc, #124]	@ (800650c <prvHeapInit+0xac>)
 8006490:	4413      	add	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006498:	4a1d      	ldr	r2, [pc, #116]	@ (8006510 <prvHeapInit+0xb0>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800649e:	4b1c      	ldr	r3, [pc, #112]	@ (8006510 <prvHeapInit+0xb0>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	4413      	add	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064ac:	2208      	movs	r2, #8
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0307 	bic.w	r3, r3, #7
 80064ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a15      	ldr	r2, [pc, #84]	@ (8006514 <prvHeapInit+0xb4>)
 80064c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064c2:	4b14      	ldr	r3, [pc, #80]	@ (8006514 <prvHeapInit+0xb4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2200      	movs	r2, #0
 80064c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064ca:	4b12      	ldr	r3, [pc, #72]	@ (8006514 <prvHeapInit+0xb4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006514 <prvHeapInit+0xb4>)
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006518 <prvHeapInit+0xb8>)
 80064ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	4a09      	ldr	r2, [pc, #36]	@ (800651c <prvHeapInit+0xbc>)
 80064f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064f8:	4b09      	ldr	r3, [pc, #36]	@ (8006520 <prvHeapInit+0xc0>)
 80064fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064fe:	601a      	str	r2, [r3, #0]
}
 8006500:	bf00      	nop
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	20000ef8 	.word	0x20000ef8
 8006510:	20004af8 	.word	0x20004af8
 8006514:	20004b00 	.word	0x20004b00
 8006518:	20004b08 	.word	0x20004b08
 800651c:	20004b04 	.word	0x20004b04
 8006520:	20004b14 	.word	0x20004b14

08006524 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800652c:	4b28      	ldr	r3, [pc, #160]	@ (80065d0 <prvInsertBlockIntoFreeList+0xac>)
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e002      	b.n	8006538 <prvInsertBlockIntoFreeList+0x14>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	d8f7      	bhi.n	8006532 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	4413      	add	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	d108      	bne.n	8006566 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	441a      	add	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	441a      	add	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d118      	bne.n	80065ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b15      	ldr	r3, [pc, #84]	@ (80065d4 <prvInsertBlockIntoFreeList+0xb0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d00d      	beq.n	80065a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	441a      	add	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e008      	b.n	80065b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065a2:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <prvInsertBlockIntoFreeList+0xb0>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e003      	b.n	80065b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d002      	beq.n	80065c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20004af8 	.word	0x20004af8
 80065d4:	20004b00 	.word	0x20004b00

080065d8 <sniprintf>:
 80065d8:	b40c      	push	{r2, r3}
 80065da:	b530      	push	{r4, r5, lr}
 80065dc:	4b17      	ldr	r3, [pc, #92]	@ (800663c <sniprintf+0x64>)
 80065de:	1e0c      	subs	r4, r1, #0
 80065e0:	681d      	ldr	r5, [r3, #0]
 80065e2:	b09d      	sub	sp, #116	@ 0x74
 80065e4:	da08      	bge.n	80065f8 <sniprintf+0x20>
 80065e6:	238b      	movs	r3, #139	@ 0x8b
 80065e8:	602b      	str	r3, [r5, #0]
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065ee:	b01d      	add	sp, #116	@ 0x74
 80065f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065f4:	b002      	add	sp, #8
 80065f6:	4770      	bx	lr
 80065f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80065fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006600:	bf14      	ite	ne
 8006602:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006606:	4623      	moveq	r3, r4
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	9307      	str	r3, [sp, #28]
 800660c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006610:	9002      	str	r0, [sp, #8]
 8006612:	9006      	str	r0, [sp, #24]
 8006614:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006618:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800661a:	ab21      	add	r3, sp, #132	@ 0x84
 800661c:	a902      	add	r1, sp, #8
 800661e:	4628      	mov	r0, r5
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	f000 f9f9 	bl	8006a18 <_svfiprintf_r>
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	bfbc      	itt	lt
 800662a:	238b      	movlt	r3, #139	@ 0x8b
 800662c:	602b      	strlt	r3, [r5, #0]
 800662e:	2c00      	cmp	r4, #0
 8006630:	d0dd      	beq.n	80065ee <sniprintf+0x16>
 8006632:	9b02      	ldr	r3, [sp, #8]
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e7d9      	b.n	80065ee <sniprintf+0x16>
 800663a:	bf00      	nop
 800663c:	20000010 	.word	0x20000010

08006640 <memset>:
 8006640:	4402      	add	r2, r0
 8006642:	4603      	mov	r3, r0
 8006644:	4293      	cmp	r3, r2
 8006646:	d100      	bne.n	800664a <memset+0xa>
 8006648:	4770      	bx	lr
 800664a:	f803 1b01 	strb.w	r1, [r3], #1
 800664e:	e7f9      	b.n	8006644 <memset+0x4>

08006650 <_reclaim_reent>:
 8006650:	4b29      	ldr	r3, [pc, #164]	@ (80066f8 <_reclaim_reent+0xa8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4283      	cmp	r3, r0
 8006656:	b570      	push	{r4, r5, r6, lr}
 8006658:	4604      	mov	r4, r0
 800665a:	d04b      	beq.n	80066f4 <_reclaim_reent+0xa4>
 800665c:	69c3      	ldr	r3, [r0, #28]
 800665e:	b1ab      	cbz	r3, 800668c <_reclaim_reent+0x3c>
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	b16b      	cbz	r3, 8006680 <_reclaim_reent+0x30>
 8006664:	2500      	movs	r5, #0
 8006666:	69e3      	ldr	r3, [r4, #28]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	5959      	ldr	r1, [r3, r5]
 800666c:	2900      	cmp	r1, #0
 800666e:	d13b      	bne.n	80066e8 <_reclaim_reent+0x98>
 8006670:	3504      	adds	r5, #4
 8006672:	2d80      	cmp	r5, #128	@ 0x80
 8006674:	d1f7      	bne.n	8006666 <_reclaim_reent+0x16>
 8006676:	69e3      	ldr	r3, [r4, #28]
 8006678:	4620      	mov	r0, r4
 800667a:	68d9      	ldr	r1, [r3, #12]
 800667c:	f000 f878 	bl	8006770 <_free_r>
 8006680:	69e3      	ldr	r3, [r4, #28]
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	b111      	cbz	r1, 800668c <_reclaim_reent+0x3c>
 8006686:	4620      	mov	r0, r4
 8006688:	f000 f872 	bl	8006770 <_free_r>
 800668c:	6961      	ldr	r1, [r4, #20]
 800668e:	b111      	cbz	r1, 8006696 <_reclaim_reent+0x46>
 8006690:	4620      	mov	r0, r4
 8006692:	f000 f86d 	bl	8006770 <_free_r>
 8006696:	69e1      	ldr	r1, [r4, #28]
 8006698:	b111      	cbz	r1, 80066a0 <_reclaim_reent+0x50>
 800669a:	4620      	mov	r0, r4
 800669c:	f000 f868 	bl	8006770 <_free_r>
 80066a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80066a2:	b111      	cbz	r1, 80066aa <_reclaim_reent+0x5a>
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 f863 	bl	8006770 <_free_r>
 80066aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066ac:	b111      	cbz	r1, 80066b4 <_reclaim_reent+0x64>
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 f85e 	bl	8006770 <_free_r>
 80066b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80066b6:	b111      	cbz	r1, 80066be <_reclaim_reent+0x6e>
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 f859 	bl	8006770 <_free_r>
 80066be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80066c0:	b111      	cbz	r1, 80066c8 <_reclaim_reent+0x78>
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 f854 	bl	8006770 <_free_r>
 80066c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80066ca:	b111      	cbz	r1, 80066d2 <_reclaim_reent+0x82>
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 f84f 	bl	8006770 <_free_r>
 80066d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80066d4:	b111      	cbz	r1, 80066dc <_reclaim_reent+0x8c>
 80066d6:	4620      	mov	r0, r4
 80066d8:	f000 f84a 	bl	8006770 <_free_r>
 80066dc:	6a23      	ldr	r3, [r4, #32]
 80066de:	b14b      	cbz	r3, 80066f4 <_reclaim_reent+0xa4>
 80066e0:	4620      	mov	r0, r4
 80066e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066e6:	4718      	bx	r3
 80066e8:	680e      	ldr	r6, [r1, #0]
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 f840 	bl	8006770 <_free_r>
 80066f0:	4631      	mov	r1, r6
 80066f2:	e7bb      	b.n	800666c <_reclaim_reent+0x1c>
 80066f4:	bd70      	pop	{r4, r5, r6, pc}
 80066f6:	bf00      	nop
 80066f8:	20000010 	.word	0x20000010

080066fc <__errno>:
 80066fc:	4b01      	ldr	r3, [pc, #4]	@ (8006704 <__errno+0x8>)
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20000010 	.word	0x20000010

08006708 <__libc_init_array>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	4d0d      	ldr	r5, [pc, #52]	@ (8006740 <__libc_init_array+0x38>)
 800670c:	4c0d      	ldr	r4, [pc, #52]	@ (8006744 <__libc_init_array+0x3c>)
 800670e:	1b64      	subs	r4, r4, r5
 8006710:	10a4      	asrs	r4, r4, #2
 8006712:	2600      	movs	r6, #0
 8006714:	42a6      	cmp	r6, r4
 8006716:	d109      	bne.n	800672c <__libc_init_array+0x24>
 8006718:	4d0b      	ldr	r5, [pc, #44]	@ (8006748 <__libc_init_array+0x40>)
 800671a:	4c0c      	ldr	r4, [pc, #48]	@ (800674c <__libc_init_array+0x44>)
 800671c:	f000 fc66 	bl	8006fec <_init>
 8006720:	1b64      	subs	r4, r4, r5
 8006722:	10a4      	asrs	r4, r4, #2
 8006724:	2600      	movs	r6, #0
 8006726:	42a6      	cmp	r6, r4
 8006728:	d105      	bne.n	8006736 <__libc_init_array+0x2e>
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006730:	4798      	blx	r3
 8006732:	3601      	adds	r6, #1
 8006734:	e7ee      	b.n	8006714 <__libc_init_array+0xc>
 8006736:	f855 3b04 	ldr.w	r3, [r5], #4
 800673a:	4798      	blx	r3
 800673c:	3601      	adds	r6, #1
 800673e:	e7f2      	b.n	8006726 <__libc_init_array+0x1e>
 8006740:	08007228 	.word	0x08007228
 8006744:	08007228 	.word	0x08007228
 8006748:	08007228 	.word	0x08007228
 800674c:	0800722c 	.word	0x0800722c

08006750 <__retarget_lock_acquire_recursive>:
 8006750:	4770      	bx	lr

08006752 <__retarget_lock_release_recursive>:
 8006752:	4770      	bx	lr

08006754 <memcpy>:
 8006754:	440a      	add	r2, r1
 8006756:	4291      	cmp	r1, r2
 8006758:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800675c:	d100      	bne.n	8006760 <memcpy+0xc>
 800675e:	4770      	bx	lr
 8006760:	b510      	push	{r4, lr}
 8006762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800676a:	4291      	cmp	r1, r2
 800676c:	d1f9      	bne.n	8006762 <memcpy+0xe>
 800676e:	bd10      	pop	{r4, pc}

08006770 <_free_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4605      	mov	r5, r0
 8006774:	2900      	cmp	r1, #0
 8006776:	d041      	beq.n	80067fc <_free_r+0x8c>
 8006778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800677c:	1f0c      	subs	r4, r1, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	bfb8      	it	lt
 8006782:	18e4      	addlt	r4, r4, r3
 8006784:	f000 f8e0 	bl	8006948 <__malloc_lock>
 8006788:	4a1d      	ldr	r2, [pc, #116]	@ (8006800 <_free_r+0x90>)
 800678a:	6813      	ldr	r3, [r2, #0]
 800678c:	b933      	cbnz	r3, 800679c <_free_r+0x2c>
 800678e:	6063      	str	r3, [r4, #4]
 8006790:	6014      	str	r4, [r2, #0]
 8006792:	4628      	mov	r0, r5
 8006794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006798:	f000 b8dc 	b.w	8006954 <__malloc_unlock>
 800679c:	42a3      	cmp	r3, r4
 800679e:	d908      	bls.n	80067b2 <_free_r+0x42>
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	1821      	adds	r1, r4, r0
 80067a4:	428b      	cmp	r3, r1
 80067a6:	bf01      	itttt	eq
 80067a8:	6819      	ldreq	r1, [r3, #0]
 80067aa:	685b      	ldreq	r3, [r3, #4]
 80067ac:	1809      	addeq	r1, r1, r0
 80067ae:	6021      	streq	r1, [r4, #0]
 80067b0:	e7ed      	b.n	800678e <_free_r+0x1e>
 80067b2:	461a      	mov	r2, r3
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	b10b      	cbz	r3, 80067bc <_free_r+0x4c>
 80067b8:	42a3      	cmp	r3, r4
 80067ba:	d9fa      	bls.n	80067b2 <_free_r+0x42>
 80067bc:	6811      	ldr	r1, [r2, #0]
 80067be:	1850      	adds	r0, r2, r1
 80067c0:	42a0      	cmp	r0, r4
 80067c2:	d10b      	bne.n	80067dc <_free_r+0x6c>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	4401      	add	r1, r0
 80067c8:	1850      	adds	r0, r2, r1
 80067ca:	4283      	cmp	r3, r0
 80067cc:	6011      	str	r1, [r2, #0]
 80067ce:	d1e0      	bne.n	8006792 <_free_r+0x22>
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	6053      	str	r3, [r2, #4]
 80067d6:	4408      	add	r0, r1
 80067d8:	6010      	str	r0, [r2, #0]
 80067da:	e7da      	b.n	8006792 <_free_r+0x22>
 80067dc:	d902      	bls.n	80067e4 <_free_r+0x74>
 80067de:	230c      	movs	r3, #12
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	e7d6      	b.n	8006792 <_free_r+0x22>
 80067e4:	6820      	ldr	r0, [r4, #0]
 80067e6:	1821      	adds	r1, r4, r0
 80067e8:	428b      	cmp	r3, r1
 80067ea:	bf04      	itt	eq
 80067ec:	6819      	ldreq	r1, [r3, #0]
 80067ee:	685b      	ldreq	r3, [r3, #4]
 80067f0:	6063      	str	r3, [r4, #4]
 80067f2:	bf04      	itt	eq
 80067f4:	1809      	addeq	r1, r1, r0
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	6054      	str	r4, [r2, #4]
 80067fa:	e7ca      	b.n	8006792 <_free_r+0x22>
 80067fc:	bd38      	pop	{r3, r4, r5, pc}
 80067fe:	bf00      	nop
 8006800:	20004c5c 	.word	0x20004c5c

08006804 <sbrk_aligned>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	4e0f      	ldr	r6, [pc, #60]	@ (8006844 <sbrk_aligned+0x40>)
 8006808:	460c      	mov	r4, r1
 800680a:	6831      	ldr	r1, [r6, #0]
 800680c:	4605      	mov	r5, r0
 800680e:	b911      	cbnz	r1, 8006816 <sbrk_aligned+0x12>
 8006810:	f000 fba6 	bl	8006f60 <_sbrk_r>
 8006814:	6030      	str	r0, [r6, #0]
 8006816:	4621      	mov	r1, r4
 8006818:	4628      	mov	r0, r5
 800681a:	f000 fba1 	bl	8006f60 <_sbrk_r>
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	d103      	bne.n	800682a <sbrk_aligned+0x26>
 8006822:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006826:	4620      	mov	r0, r4
 8006828:	bd70      	pop	{r4, r5, r6, pc}
 800682a:	1cc4      	adds	r4, r0, #3
 800682c:	f024 0403 	bic.w	r4, r4, #3
 8006830:	42a0      	cmp	r0, r4
 8006832:	d0f8      	beq.n	8006826 <sbrk_aligned+0x22>
 8006834:	1a21      	subs	r1, r4, r0
 8006836:	4628      	mov	r0, r5
 8006838:	f000 fb92 	bl	8006f60 <_sbrk_r>
 800683c:	3001      	adds	r0, #1
 800683e:	d1f2      	bne.n	8006826 <sbrk_aligned+0x22>
 8006840:	e7ef      	b.n	8006822 <sbrk_aligned+0x1e>
 8006842:	bf00      	nop
 8006844:	20004c58 	.word	0x20004c58

08006848 <_malloc_r>:
 8006848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800684c:	1ccd      	adds	r5, r1, #3
 800684e:	f025 0503 	bic.w	r5, r5, #3
 8006852:	3508      	adds	r5, #8
 8006854:	2d0c      	cmp	r5, #12
 8006856:	bf38      	it	cc
 8006858:	250c      	movcc	r5, #12
 800685a:	2d00      	cmp	r5, #0
 800685c:	4606      	mov	r6, r0
 800685e:	db01      	blt.n	8006864 <_malloc_r+0x1c>
 8006860:	42a9      	cmp	r1, r5
 8006862:	d904      	bls.n	800686e <_malloc_r+0x26>
 8006864:	230c      	movs	r3, #12
 8006866:	6033      	str	r3, [r6, #0]
 8006868:	2000      	movs	r0, #0
 800686a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800686e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006944 <_malloc_r+0xfc>
 8006872:	f000 f869 	bl	8006948 <__malloc_lock>
 8006876:	f8d8 3000 	ldr.w	r3, [r8]
 800687a:	461c      	mov	r4, r3
 800687c:	bb44      	cbnz	r4, 80068d0 <_malloc_r+0x88>
 800687e:	4629      	mov	r1, r5
 8006880:	4630      	mov	r0, r6
 8006882:	f7ff ffbf 	bl	8006804 <sbrk_aligned>
 8006886:	1c43      	adds	r3, r0, #1
 8006888:	4604      	mov	r4, r0
 800688a:	d158      	bne.n	800693e <_malloc_r+0xf6>
 800688c:	f8d8 4000 	ldr.w	r4, [r8]
 8006890:	4627      	mov	r7, r4
 8006892:	2f00      	cmp	r7, #0
 8006894:	d143      	bne.n	800691e <_malloc_r+0xd6>
 8006896:	2c00      	cmp	r4, #0
 8006898:	d04b      	beq.n	8006932 <_malloc_r+0xea>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	4639      	mov	r1, r7
 800689e:	4630      	mov	r0, r6
 80068a0:	eb04 0903 	add.w	r9, r4, r3
 80068a4:	f000 fb5c 	bl	8006f60 <_sbrk_r>
 80068a8:	4581      	cmp	r9, r0
 80068aa:	d142      	bne.n	8006932 <_malloc_r+0xea>
 80068ac:	6821      	ldr	r1, [r4, #0]
 80068ae:	1a6d      	subs	r5, r5, r1
 80068b0:	4629      	mov	r1, r5
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ffa6 	bl	8006804 <sbrk_aligned>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d03a      	beq.n	8006932 <_malloc_r+0xea>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	442b      	add	r3, r5
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	f8d8 3000 	ldr.w	r3, [r8]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	bb62      	cbnz	r2, 8006924 <_malloc_r+0xdc>
 80068ca:	f8c8 7000 	str.w	r7, [r8]
 80068ce:	e00f      	b.n	80068f0 <_malloc_r+0xa8>
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	1b52      	subs	r2, r2, r5
 80068d4:	d420      	bmi.n	8006918 <_malloc_r+0xd0>
 80068d6:	2a0b      	cmp	r2, #11
 80068d8:	d917      	bls.n	800690a <_malloc_r+0xc2>
 80068da:	1961      	adds	r1, r4, r5
 80068dc:	42a3      	cmp	r3, r4
 80068de:	6025      	str	r5, [r4, #0]
 80068e0:	bf18      	it	ne
 80068e2:	6059      	strne	r1, [r3, #4]
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	bf08      	it	eq
 80068e8:	f8c8 1000 	streq.w	r1, [r8]
 80068ec:	5162      	str	r2, [r4, r5]
 80068ee:	604b      	str	r3, [r1, #4]
 80068f0:	4630      	mov	r0, r6
 80068f2:	f000 f82f 	bl	8006954 <__malloc_unlock>
 80068f6:	f104 000b 	add.w	r0, r4, #11
 80068fa:	1d23      	adds	r3, r4, #4
 80068fc:	f020 0007 	bic.w	r0, r0, #7
 8006900:	1ac2      	subs	r2, r0, r3
 8006902:	bf1c      	itt	ne
 8006904:	1a1b      	subne	r3, r3, r0
 8006906:	50a3      	strne	r3, [r4, r2]
 8006908:	e7af      	b.n	800686a <_malloc_r+0x22>
 800690a:	6862      	ldr	r2, [r4, #4]
 800690c:	42a3      	cmp	r3, r4
 800690e:	bf0c      	ite	eq
 8006910:	f8c8 2000 	streq.w	r2, [r8]
 8006914:	605a      	strne	r2, [r3, #4]
 8006916:	e7eb      	b.n	80068f0 <_malloc_r+0xa8>
 8006918:	4623      	mov	r3, r4
 800691a:	6864      	ldr	r4, [r4, #4]
 800691c:	e7ae      	b.n	800687c <_malloc_r+0x34>
 800691e:	463c      	mov	r4, r7
 8006920:	687f      	ldr	r7, [r7, #4]
 8006922:	e7b6      	b.n	8006892 <_malloc_r+0x4a>
 8006924:	461a      	mov	r2, r3
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	42a3      	cmp	r3, r4
 800692a:	d1fb      	bne.n	8006924 <_malloc_r+0xdc>
 800692c:	2300      	movs	r3, #0
 800692e:	6053      	str	r3, [r2, #4]
 8006930:	e7de      	b.n	80068f0 <_malloc_r+0xa8>
 8006932:	230c      	movs	r3, #12
 8006934:	6033      	str	r3, [r6, #0]
 8006936:	4630      	mov	r0, r6
 8006938:	f000 f80c 	bl	8006954 <__malloc_unlock>
 800693c:	e794      	b.n	8006868 <_malloc_r+0x20>
 800693e:	6005      	str	r5, [r0, #0]
 8006940:	e7d6      	b.n	80068f0 <_malloc_r+0xa8>
 8006942:	bf00      	nop
 8006944:	20004c5c 	.word	0x20004c5c

08006948 <__malloc_lock>:
 8006948:	4801      	ldr	r0, [pc, #4]	@ (8006950 <__malloc_lock+0x8>)
 800694a:	f7ff bf01 	b.w	8006750 <__retarget_lock_acquire_recursive>
 800694e:	bf00      	nop
 8006950:	20004c54 	.word	0x20004c54

08006954 <__malloc_unlock>:
 8006954:	4801      	ldr	r0, [pc, #4]	@ (800695c <__malloc_unlock+0x8>)
 8006956:	f7ff befc 	b.w	8006752 <__retarget_lock_release_recursive>
 800695a:	bf00      	nop
 800695c:	20004c54 	.word	0x20004c54

08006960 <__ssputs_r>:
 8006960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	688e      	ldr	r6, [r1, #8]
 8006966:	461f      	mov	r7, r3
 8006968:	42be      	cmp	r6, r7
 800696a:	680b      	ldr	r3, [r1, #0]
 800696c:	4682      	mov	sl, r0
 800696e:	460c      	mov	r4, r1
 8006970:	4690      	mov	r8, r2
 8006972:	d82d      	bhi.n	80069d0 <__ssputs_r+0x70>
 8006974:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006978:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800697c:	d026      	beq.n	80069cc <__ssputs_r+0x6c>
 800697e:	6965      	ldr	r5, [r4, #20]
 8006980:	6909      	ldr	r1, [r1, #16]
 8006982:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006986:	eba3 0901 	sub.w	r9, r3, r1
 800698a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800698e:	1c7b      	adds	r3, r7, #1
 8006990:	444b      	add	r3, r9
 8006992:	106d      	asrs	r5, r5, #1
 8006994:	429d      	cmp	r5, r3
 8006996:	bf38      	it	cc
 8006998:	461d      	movcc	r5, r3
 800699a:	0553      	lsls	r3, r2, #21
 800699c:	d527      	bpl.n	80069ee <__ssputs_r+0x8e>
 800699e:	4629      	mov	r1, r5
 80069a0:	f7ff ff52 	bl	8006848 <_malloc_r>
 80069a4:	4606      	mov	r6, r0
 80069a6:	b360      	cbz	r0, 8006a02 <__ssputs_r+0xa2>
 80069a8:	6921      	ldr	r1, [r4, #16]
 80069aa:	464a      	mov	r2, r9
 80069ac:	f7ff fed2 	bl	8006754 <memcpy>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80069b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ba:	81a3      	strh	r3, [r4, #12]
 80069bc:	6126      	str	r6, [r4, #16]
 80069be:	6165      	str	r5, [r4, #20]
 80069c0:	444e      	add	r6, r9
 80069c2:	eba5 0509 	sub.w	r5, r5, r9
 80069c6:	6026      	str	r6, [r4, #0]
 80069c8:	60a5      	str	r5, [r4, #8]
 80069ca:	463e      	mov	r6, r7
 80069cc:	42be      	cmp	r6, r7
 80069ce:	d900      	bls.n	80069d2 <__ssputs_r+0x72>
 80069d0:	463e      	mov	r6, r7
 80069d2:	6820      	ldr	r0, [r4, #0]
 80069d4:	4632      	mov	r2, r6
 80069d6:	4641      	mov	r1, r8
 80069d8:	f000 faa8 	bl	8006f2c <memmove>
 80069dc:	68a3      	ldr	r3, [r4, #8]
 80069de:	1b9b      	subs	r3, r3, r6
 80069e0:	60a3      	str	r3, [r4, #8]
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	4433      	add	r3, r6
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	2000      	movs	r0, #0
 80069ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ee:	462a      	mov	r2, r5
 80069f0:	f000 fac6 	bl	8006f80 <_realloc_r>
 80069f4:	4606      	mov	r6, r0
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d1e0      	bne.n	80069bc <__ssputs_r+0x5c>
 80069fa:	6921      	ldr	r1, [r4, #16]
 80069fc:	4650      	mov	r0, sl
 80069fe:	f7ff feb7 	bl	8006770 <_free_r>
 8006a02:	230c      	movs	r3, #12
 8006a04:	f8ca 3000 	str.w	r3, [sl]
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a0e:	81a3      	strh	r3, [r4, #12]
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a14:	e7e9      	b.n	80069ea <__ssputs_r+0x8a>
	...

08006a18 <_svfiprintf_r>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	4698      	mov	r8, r3
 8006a1e:	898b      	ldrh	r3, [r1, #12]
 8006a20:	061b      	lsls	r3, r3, #24
 8006a22:	b09d      	sub	sp, #116	@ 0x74
 8006a24:	4607      	mov	r7, r0
 8006a26:	460d      	mov	r5, r1
 8006a28:	4614      	mov	r4, r2
 8006a2a:	d510      	bpl.n	8006a4e <_svfiprintf_r+0x36>
 8006a2c:	690b      	ldr	r3, [r1, #16]
 8006a2e:	b973      	cbnz	r3, 8006a4e <_svfiprintf_r+0x36>
 8006a30:	2140      	movs	r1, #64	@ 0x40
 8006a32:	f7ff ff09 	bl	8006848 <_malloc_r>
 8006a36:	6028      	str	r0, [r5, #0]
 8006a38:	6128      	str	r0, [r5, #16]
 8006a3a:	b930      	cbnz	r0, 8006a4a <_svfiprintf_r+0x32>
 8006a3c:	230c      	movs	r3, #12
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a44:	b01d      	add	sp, #116	@ 0x74
 8006a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4a:	2340      	movs	r3, #64	@ 0x40
 8006a4c:	616b      	str	r3, [r5, #20]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a52:	2320      	movs	r3, #32
 8006a54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a5c:	2330      	movs	r3, #48	@ 0x30
 8006a5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006bfc <_svfiprintf_r+0x1e4>
 8006a62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a66:	f04f 0901 	mov.w	r9, #1
 8006a6a:	4623      	mov	r3, r4
 8006a6c:	469a      	mov	sl, r3
 8006a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a72:	b10a      	cbz	r2, 8006a78 <_svfiprintf_r+0x60>
 8006a74:	2a25      	cmp	r2, #37	@ 0x25
 8006a76:	d1f9      	bne.n	8006a6c <_svfiprintf_r+0x54>
 8006a78:	ebba 0b04 	subs.w	fp, sl, r4
 8006a7c:	d00b      	beq.n	8006a96 <_svfiprintf_r+0x7e>
 8006a7e:	465b      	mov	r3, fp
 8006a80:	4622      	mov	r2, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	4638      	mov	r0, r7
 8006a86:	f7ff ff6b 	bl	8006960 <__ssputs_r>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	f000 80a7 	beq.w	8006bde <_svfiprintf_r+0x1c6>
 8006a90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a92:	445a      	add	r2, fp
 8006a94:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a96:	f89a 3000 	ldrb.w	r3, [sl]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 809f 	beq.w	8006bde <_svfiprintf_r+0x1c6>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aaa:	f10a 0a01 	add.w	sl, sl, #1
 8006aae:	9304      	str	r3, [sp, #16]
 8006ab0:	9307      	str	r3, [sp, #28]
 8006ab2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ab6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ab8:	4654      	mov	r4, sl
 8006aba:	2205      	movs	r2, #5
 8006abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac0:	484e      	ldr	r0, [pc, #312]	@ (8006bfc <_svfiprintf_r+0x1e4>)
 8006ac2:	f7f9 fbad 	bl	8000220 <memchr>
 8006ac6:	9a04      	ldr	r2, [sp, #16]
 8006ac8:	b9d8      	cbnz	r0, 8006b02 <_svfiprintf_r+0xea>
 8006aca:	06d0      	lsls	r0, r2, #27
 8006acc:	bf44      	itt	mi
 8006ace:	2320      	movmi	r3, #32
 8006ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ad4:	0711      	lsls	r1, r2, #28
 8006ad6:	bf44      	itt	mi
 8006ad8:	232b      	movmi	r3, #43	@ 0x2b
 8006ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ade:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ae4:	d015      	beq.n	8006b12 <_svfiprintf_r+0xfa>
 8006ae6:	9a07      	ldr	r2, [sp, #28]
 8006ae8:	4654      	mov	r4, sl
 8006aea:	2000      	movs	r0, #0
 8006aec:	f04f 0c0a 	mov.w	ip, #10
 8006af0:	4621      	mov	r1, r4
 8006af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006af6:	3b30      	subs	r3, #48	@ 0x30
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	d94b      	bls.n	8006b94 <_svfiprintf_r+0x17c>
 8006afc:	b1b0      	cbz	r0, 8006b2c <_svfiprintf_r+0x114>
 8006afe:	9207      	str	r2, [sp, #28]
 8006b00:	e014      	b.n	8006b2c <_svfiprintf_r+0x114>
 8006b02:	eba0 0308 	sub.w	r3, r0, r8
 8006b06:	fa09 f303 	lsl.w	r3, r9, r3
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	9304      	str	r3, [sp, #16]
 8006b0e:	46a2      	mov	sl, r4
 8006b10:	e7d2      	b.n	8006ab8 <_svfiprintf_r+0xa0>
 8006b12:	9b03      	ldr	r3, [sp, #12]
 8006b14:	1d19      	adds	r1, r3, #4
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	9103      	str	r1, [sp, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bfbb      	ittet	lt
 8006b1e:	425b      	neglt	r3, r3
 8006b20:	f042 0202 	orrlt.w	r2, r2, #2
 8006b24:	9307      	strge	r3, [sp, #28]
 8006b26:	9307      	strlt	r3, [sp, #28]
 8006b28:	bfb8      	it	lt
 8006b2a:	9204      	strlt	r2, [sp, #16]
 8006b2c:	7823      	ldrb	r3, [r4, #0]
 8006b2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b30:	d10a      	bne.n	8006b48 <_svfiprintf_r+0x130>
 8006b32:	7863      	ldrb	r3, [r4, #1]
 8006b34:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b36:	d132      	bne.n	8006b9e <_svfiprintf_r+0x186>
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	9203      	str	r2, [sp, #12]
 8006b40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b44:	3402      	adds	r4, #2
 8006b46:	9305      	str	r3, [sp, #20]
 8006b48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c0c <_svfiprintf_r+0x1f4>
 8006b4c:	7821      	ldrb	r1, [r4, #0]
 8006b4e:	2203      	movs	r2, #3
 8006b50:	4650      	mov	r0, sl
 8006b52:	f7f9 fb65 	bl	8000220 <memchr>
 8006b56:	b138      	cbz	r0, 8006b68 <_svfiprintf_r+0x150>
 8006b58:	9b04      	ldr	r3, [sp, #16]
 8006b5a:	eba0 000a 	sub.w	r0, r0, sl
 8006b5e:	2240      	movs	r2, #64	@ 0x40
 8006b60:	4082      	lsls	r2, r0
 8006b62:	4313      	orrs	r3, r2
 8006b64:	3401      	adds	r4, #1
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6c:	4824      	ldr	r0, [pc, #144]	@ (8006c00 <_svfiprintf_r+0x1e8>)
 8006b6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b72:	2206      	movs	r2, #6
 8006b74:	f7f9 fb54 	bl	8000220 <memchr>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d036      	beq.n	8006bea <_svfiprintf_r+0x1d2>
 8006b7c:	4b21      	ldr	r3, [pc, #132]	@ (8006c04 <_svfiprintf_r+0x1ec>)
 8006b7e:	bb1b      	cbnz	r3, 8006bc8 <_svfiprintf_r+0x1b0>
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	3307      	adds	r3, #7
 8006b84:	f023 0307 	bic.w	r3, r3, #7
 8006b88:	3308      	adds	r3, #8
 8006b8a:	9303      	str	r3, [sp, #12]
 8006b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8e:	4433      	add	r3, r6
 8006b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b92:	e76a      	b.n	8006a6a <_svfiprintf_r+0x52>
 8006b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b98:	460c      	mov	r4, r1
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	e7a8      	b.n	8006af0 <_svfiprintf_r+0xd8>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	3401      	adds	r4, #1
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f04f 0c0a 	mov.w	ip, #10
 8006baa:	4620      	mov	r0, r4
 8006bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bb0:	3a30      	subs	r2, #48	@ 0x30
 8006bb2:	2a09      	cmp	r2, #9
 8006bb4:	d903      	bls.n	8006bbe <_svfiprintf_r+0x1a6>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0c6      	beq.n	8006b48 <_svfiprintf_r+0x130>
 8006bba:	9105      	str	r1, [sp, #20]
 8006bbc:	e7c4      	b.n	8006b48 <_svfiprintf_r+0x130>
 8006bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e7f0      	b.n	8006baa <_svfiprintf_r+0x192>
 8006bc8:	ab03      	add	r3, sp, #12
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	462a      	mov	r2, r5
 8006bce:	4b0e      	ldr	r3, [pc, #56]	@ (8006c08 <_svfiprintf_r+0x1f0>)
 8006bd0:	a904      	add	r1, sp, #16
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	f3af 8000 	nop.w
 8006bd8:	1c42      	adds	r2, r0, #1
 8006bda:	4606      	mov	r6, r0
 8006bdc:	d1d6      	bne.n	8006b8c <_svfiprintf_r+0x174>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	065b      	lsls	r3, r3, #25
 8006be2:	f53f af2d 	bmi.w	8006a40 <_svfiprintf_r+0x28>
 8006be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006be8:	e72c      	b.n	8006a44 <_svfiprintf_r+0x2c>
 8006bea:	ab03      	add	r3, sp, #12
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	462a      	mov	r2, r5
 8006bf0:	4b05      	ldr	r3, [pc, #20]	@ (8006c08 <_svfiprintf_r+0x1f0>)
 8006bf2:	a904      	add	r1, sp, #16
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f000 f879 	bl	8006cec <_printf_i>
 8006bfa:	e7ed      	b.n	8006bd8 <_svfiprintf_r+0x1c0>
 8006bfc:	080071ec 	.word	0x080071ec
 8006c00:	080071f6 	.word	0x080071f6
 8006c04:	00000000 	.word	0x00000000
 8006c08:	08006961 	.word	0x08006961
 8006c0c:	080071f2 	.word	0x080071f2

08006c10 <_printf_common>:
 8006c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c14:	4616      	mov	r6, r2
 8006c16:	4698      	mov	r8, r3
 8006c18:	688a      	ldr	r2, [r1, #8]
 8006c1a:	690b      	ldr	r3, [r1, #16]
 8006c1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c20:	4293      	cmp	r3, r2
 8006c22:	bfb8      	it	lt
 8006c24:	4613      	movlt	r3, r2
 8006c26:	6033      	str	r3, [r6, #0]
 8006c28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	b10a      	cbz	r2, 8006c36 <_printf_common+0x26>
 8006c32:	3301      	adds	r3, #1
 8006c34:	6033      	str	r3, [r6, #0]
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	0699      	lsls	r1, r3, #26
 8006c3a:	bf42      	ittt	mi
 8006c3c:	6833      	ldrmi	r3, [r6, #0]
 8006c3e:	3302      	addmi	r3, #2
 8006c40:	6033      	strmi	r3, [r6, #0]
 8006c42:	6825      	ldr	r5, [r4, #0]
 8006c44:	f015 0506 	ands.w	r5, r5, #6
 8006c48:	d106      	bne.n	8006c58 <_printf_common+0x48>
 8006c4a:	f104 0a19 	add.w	sl, r4, #25
 8006c4e:	68e3      	ldr	r3, [r4, #12]
 8006c50:	6832      	ldr	r2, [r6, #0]
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dc26      	bgt.n	8006ca6 <_printf_common+0x96>
 8006c58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c5c:	6822      	ldr	r2, [r4, #0]
 8006c5e:	3b00      	subs	r3, #0
 8006c60:	bf18      	it	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	0692      	lsls	r2, r2, #26
 8006c66:	d42b      	bmi.n	8006cc0 <_printf_common+0xb0>
 8006c68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c6c:	4641      	mov	r1, r8
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c8      	blx	r9
 8006c72:	3001      	adds	r0, #1
 8006c74:	d01e      	beq.n	8006cb4 <_printf_common+0xa4>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	6922      	ldr	r2, [r4, #16]
 8006c7a:	f003 0306 	and.w	r3, r3, #6
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	bf02      	ittt	eq
 8006c82:	68e5      	ldreq	r5, [r4, #12]
 8006c84:	6833      	ldreq	r3, [r6, #0]
 8006c86:	1aed      	subeq	r5, r5, r3
 8006c88:	68a3      	ldr	r3, [r4, #8]
 8006c8a:	bf0c      	ite	eq
 8006c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c90:	2500      	movne	r5, #0
 8006c92:	4293      	cmp	r3, r2
 8006c94:	bfc4      	itt	gt
 8006c96:	1a9b      	subgt	r3, r3, r2
 8006c98:	18ed      	addgt	r5, r5, r3
 8006c9a:	2600      	movs	r6, #0
 8006c9c:	341a      	adds	r4, #26
 8006c9e:	42b5      	cmp	r5, r6
 8006ca0:	d11a      	bne.n	8006cd8 <_printf_common+0xc8>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e008      	b.n	8006cb8 <_printf_common+0xa8>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4652      	mov	r2, sl
 8006caa:	4641      	mov	r1, r8
 8006cac:	4638      	mov	r0, r7
 8006cae:	47c8      	blx	r9
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d103      	bne.n	8006cbc <_printf_common+0xac>
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	e7c6      	b.n	8006c4e <_printf_common+0x3e>
 8006cc0:	18e1      	adds	r1, r4, r3
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	2030      	movs	r0, #48	@ 0x30
 8006cc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cca:	4422      	add	r2, r4
 8006ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	e7c7      	b.n	8006c68 <_printf_common+0x58>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4622      	mov	r2, r4
 8006cdc:	4641      	mov	r1, r8
 8006cde:	4638      	mov	r0, r7
 8006ce0:	47c8      	blx	r9
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d0e6      	beq.n	8006cb4 <_printf_common+0xa4>
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7d9      	b.n	8006c9e <_printf_common+0x8e>
	...

08006cec <_printf_i>:
 8006cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	7e0f      	ldrb	r7, [r1, #24]
 8006cf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cf4:	2f78      	cmp	r7, #120	@ 0x78
 8006cf6:	4691      	mov	r9, r2
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	469a      	mov	sl, r3
 8006cfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d02:	d807      	bhi.n	8006d14 <_printf_i+0x28>
 8006d04:	2f62      	cmp	r7, #98	@ 0x62
 8006d06:	d80a      	bhi.n	8006d1e <_printf_i+0x32>
 8006d08:	2f00      	cmp	r7, #0
 8006d0a:	f000 80d2 	beq.w	8006eb2 <_printf_i+0x1c6>
 8006d0e:	2f58      	cmp	r7, #88	@ 0x58
 8006d10:	f000 80b9 	beq.w	8006e86 <_printf_i+0x19a>
 8006d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d1c:	e03a      	b.n	8006d94 <_printf_i+0xa8>
 8006d1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d22:	2b15      	cmp	r3, #21
 8006d24:	d8f6      	bhi.n	8006d14 <_printf_i+0x28>
 8006d26:	a101      	add	r1, pc, #4	@ (adr r1, 8006d2c <_printf_i+0x40>)
 8006d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d99 	.word	0x08006d99
 8006d34:	08006d15 	.word	0x08006d15
 8006d38:	08006d15 	.word	0x08006d15
 8006d3c:	08006d15 	.word	0x08006d15
 8006d40:	08006d15 	.word	0x08006d15
 8006d44:	08006d99 	.word	0x08006d99
 8006d48:	08006d15 	.word	0x08006d15
 8006d4c:	08006d15 	.word	0x08006d15
 8006d50:	08006d15 	.word	0x08006d15
 8006d54:	08006d15 	.word	0x08006d15
 8006d58:	08006e99 	.word	0x08006e99
 8006d5c:	08006dc3 	.word	0x08006dc3
 8006d60:	08006e53 	.word	0x08006e53
 8006d64:	08006d15 	.word	0x08006d15
 8006d68:	08006d15 	.word	0x08006d15
 8006d6c:	08006ebb 	.word	0x08006ebb
 8006d70:	08006d15 	.word	0x08006d15
 8006d74:	08006dc3 	.word	0x08006dc3
 8006d78:	08006d15 	.word	0x08006d15
 8006d7c:	08006d15 	.word	0x08006d15
 8006d80:	08006e5b 	.word	0x08006e5b
 8006d84:	6833      	ldr	r3, [r6, #0]
 8006d86:	1d1a      	adds	r2, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6032      	str	r2, [r6, #0]
 8006d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d94:	2301      	movs	r3, #1
 8006d96:	e09d      	b.n	8006ed4 <_printf_i+0x1e8>
 8006d98:	6833      	ldr	r3, [r6, #0]
 8006d9a:	6820      	ldr	r0, [r4, #0]
 8006d9c:	1d19      	adds	r1, r3, #4
 8006d9e:	6031      	str	r1, [r6, #0]
 8006da0:	0606      	lsls	r6, r0, #24
 8006da2:	d501      	bpl.n	8006da8 <_printf_i+0xbc>
 8006da4:	681d      	ldr	r5, [r3, #0]
 8006da6:	e003      	b.n	8006db0 <_printf_i+0xc4>
 8006da8:	0645      	lsls	r5, r0, #25
 8006daa:	d5fb      	bpl.n	8006da4 <_printf_i+0xb8>
 8006dac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	da03      	bge.n	8006dbc <_printf_i+0xd0>
 8006db4:	232d      	movs	r3, #45	@ 0x2d
 8006db6:	426d      	negs	r5, r5
 8006db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dbc:	4859      	ldr	r0, [pc, #356]	@ (8006f24 <_printf_i+0x238>)
 8006dbe:	230a      	movs	r3, #10
 8006dc0:	e011      	b.n	8006de6 <_printf_i+0xfa>
 8006dc2:	6821      	ldr	r1, [r4, #0]
 8006dc4:	6833      	ldr	r3, [r6, #0]
 8006dc6:	0608      	lsls	r0, r1, #24
 8006dc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006dcc:	d402      	bmi.n	8006dd4 <_printf_i+0xe8>
 8006dce:	0649      	lsls	r1, r1, #25
 8006dd0:	bf48      	it	mi
 8006dd2:	b2ad      	uxthmi	r5, r5
 8006dd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dd6:	4853      	ldr	r0, [pc, #332]	@ (8006f24 <_printf_i+0x238>)
 8006dd8:	6033      	str	r3, [r6, #0]
 8006dda:	bf14      	ite	ne
 8006ddc:	230a      	movne	r3, #10
 8006dde:	2308      	moveq	r3, #8
 8006de0:	2100      	movs	r1, #0
 8006de2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006de6:	6866      	ldr	r6, [r4, #4]
 8006de8:	60a6      	str	r6, [r4, #8]
 8006dea:	2e00      	cmp	r6, #0
 8006dec:	bfa2      	ittt	ge
 8006dee:	6821      	ldrge	r1, [r4, #0]
 8006df0:	f021 0104 	bicge.w	r1, r1, #4
 8006df4:	6021      	strge	r1, [r4, #0]
 8006df6:	b90d      	cbnz	r5, 8006dfc <_printf_i+0x110>
 8006df8:	2e00      	cmp	r6, #0
 8006dfa:	d04b      	beq.n	8006e94 <_printf_i+0x1a8>
 8006dfc:	4616      	mov	r6, r2
 8006dfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e02:	fb03 5711 	mls	r7, r3, r1, r5
 8006e06:	5dc7      	ldrb	r7, [r0, r7]
 8006e08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e0c:	462f      	mov	r7, r5
 8006e0e:	42bb      	cmp	r3, r7
 8006e10:	460d      	mov	r5, r1
 8006e12:	d9f4      	bls.n	8006dfe <_printf_i+0x112>
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d10b      	bne.n	8006e30 <_printf_i+0x144>
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	07df      	lsls	r7, r3, #31
 8006e1c:	d508      	bpl.n	8006e30 <_printf_i+0x144>
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	6861      	ldr	r1, [r4, #4]
 8006e22:	4299      	cmp	r1, r3
 8006e24:	bfde      	ittt	le
 8006e26:	2330      	movle	r3, #48	@ 0x30
 8006e28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e2c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006e30:	1b92      	subs	r2, r2, r6
 8006e32:	6122      	str	r2, [r4, #16]
 8006e34:	f8cd a000 	str.w	sl, [sp]
 8006e38:	464b      	mov	r3, r9
 8006e3a:	aa03      	add	r2, sp, #12
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	4640      	mov	r0, r8
 8006e40:	f7ff fee6 	bl	8006c10 <_printf_common>
 8006e44:	3001      	adds	r0, #1
 8006e46:	d14a      	bne.n	8006ede <_printf_i+0x1f2>
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e4c:	b004      	add	sp, #16
 8006e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	f043 0320 	orr.w	r3, r3, #32
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	4833      	ldr	r0, [pc, #204]	@ (8006f28 <_printf_i+0x23c>)
 8006e5c:	2778      	movs	r7, #120	@ 0x78
 8006e5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	6831      	ldr	r1, [r6, #0]
 8006e66:	061f      	lsls	r7, r3, #24
 8006e68:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e6c:	d402      	bmi.n	8006e74 <_printf_i+0x188>
 8006e6e:	065f      	lsls	r7, r3, #25
 8006e70:	bf48      	it	mi
 8006e72:	b2ad      	uxthmi	r5, r5
 8006e74:	6031      	str	r1, [r6, #0]
 8006e76:	07d9      	lsls	r1, r3, #31
 8006e78:	bf44      	itt	mi
 8006e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e7e:	6023      	strmi	r3, [r4, #0]
 8006e80:	b11d      	cbz	r5, 8006e8a <_printf_i+0x19e>
 8006e82:	2310      	movs	r3, #16
 8006e84:	e7ac      	b.n	8006de0 <_printf_i+0xf4>
 8006e86:	4827      	ldr	r0, [pc, #156]	@ (8006f24 <_printf_i+0x238>)
 8006e88:	e7e9      	b.n	8006e5e <_printf_i+0x172>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	f023 0320 	bic.w	r3, r3, #32
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	e7f6      	b.n	8006e82 <_printf_i+0x196>
 8006e94:	4616      	mov	r6, r2
 8006e96:	e7bd      	b.n	8006e14 <_printf_i+0x128>
 8006e98:	6833      	ldr	r3, [r6, #0]
 8006e9a:	6825      	ldr	r5, [r4, #0]
 8006e9c:	6961      	ldr	r1, [r4, #20]
 8006e9e:	1d18      	adds	r0, r3, #4
 8006ea0:	6030      	str	r0, [r6, #0]
 8006ea2:	062e      	lsls	r6, r5, #24
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	d501      	bpl.n	8006eac <_printf_i+0x1c0>
 8006ea8:	6019      	str	r1, [r3, #0]
 8006eaa:	e002      	b.n	8006eb2 <_printf_i+0x1c6>
 8006eac:	0668      	lsls	r0, r5, #25
 8006eae:	d5fb      	bpl.n	8006ea8 <_printf_i+0x1bc>
 8006eb0:	8019      	strh	r1, [r3, #0]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	6123      	str	r3, [r4, #16]
 8006eb6:	4616      	mov	r6, r2
 8006eb8:	e7bc      	b.n	8006e34 <_printf_i+0x148>
 8006eba:	6833      	ldr	r3, [r6, #0]
 8006ebc:	1d1a      	adds	r2, r3, #4
 8006ebe:	6032      	str	r2, [r6, #0]
 8006ec0:	681e      	ldr	r6, [r3, #0]
 8006ec2:	6862      	ldr	r2, [r4, #4]
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f7f9 f9aa 	bl	8000220 <memchr>
 8006ecc:	b108      	cbz	r0, 8006ed2 <_printf_i+0x1e6>
 8006ece:	1b80      	subs	r0, r0, r6
 8006ed0:	6060      	str	r0, [r4, #4]
 8006ed2:	6863      	ldr	r3, [r4, #4]
 8006ed4:	6123      	str	r3, [r4, #16]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006edc:	e7aa      	b.n	8006e34 <_printf_i+0x148>
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	4632      	mov	r2, r6
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	47d0      	blx	sl
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d0ad      	beq.n	8006e48 <_printf_i+0x15c>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	079b      	lsls	r3, r3, #30
 8006ef0:	d413      	bmi.n	8006f1a <_printf_i+0x22e>
 8006ef2:	68e0      	ldr	r0, [r4, #12]
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	4298      	cmp	r0, r3
 8006ef8:	bfb8      	it	lt
 8006efa:	4618      	movlt	r0, r3
 8006efc:	e7a6      	b.n	8006e4c <_printf_i+0x160>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4632      	mov	r2, r6
 8006f02:	4649      	mov	r1, r9
 8006f04:	4640      	mov	r0, r8
 8006f06:	47d0      	blx	sl
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d09d      	beq.n	8006e48 <_printf_i+0x15c>
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	68e3      	ldr	r3, [r4, #12]
 8006f10:	9903      	ldr	r1, [sp, #12]
 8006f12:	1a5b      	subs	r3, r3, r1
 8006f14:	42ab      	cmp	r3, r5
 8006f16:	dcf2      	bgt.n	8006efe <_printf_i+0x212>
 8006f18:	e7eb      	b.n	8006ef2 <_printf_i+0x206>
 8006f1a:	2500      	movs	r5, #0
 8006f1c:	f104 0619 	add.w	r6, r4, #25
 8006f20:	e7f5      	b.n	8006f0e <_printf_i+0x222>
 8006f22:	bf00      	nop
 8006f24:	080071fd 	.word	0x080071fd
 8006f28:	0800720e 	.word	0x0800720e

08006f2c <memmove>:
 8006f2c:	4288      	cmp	r0, r1
 8006f2e:	b510      	push	{r4, lr}
 8006f30:	eb01 0402 	add.w	r4, r1, r2
 8006f34:	d902      	bls.n	8006f3c <memmove+0x10>
 8006f36:	4284      	cmp	r4, r0
 8006f38:	4623      	mov	r3, r4
 8006f3a:	d807      	bhi.n	8006f4c <memmove+0x20>
 8006f3c:	1e43      	subs	r3, r0, #1
 8006f3e:	42a1      	cmp	r1, r4
 8006f40:	d008      	beq.n	8006f54 <memmove+0x28>
 8006f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f4a:	e7f8      	b.n	8006f3e <memmove+0x12>
 8006f4c:	4402      	add	r2, r0
 8006f4e:	4601      	mov	r1, r0
 8006f50:	428a      	cmp	r2, r1
 8006f52:	d100      	bne.n	8006f56 <memmove+0x2a>
 8006f54:	bd10      	pop	{r4, pc}
 8006f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f5e:	e7f7      	b.n	8006f50 <memmove+0x24>

08006f60 <_sbrk_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d06      	ldr	r5, [pc, #24]	@ (8006f7c <_sbrk_r+0x1c>)
 8006f64:	2300      	movs	r3, #0
 8006f66:	4604      	mov	r4, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	602b      	str	r3, [r5, #0]
 8006f6c:	f7fa f85e 	bl	800102c <_sbrk>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_sbrk_r+0x1a>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_sbrk_r+0x1a>
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	20004c50 	.word	0x20004c50

08006f80 <_realloc_r>:
 8006f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f84:	4680      	mov	r8, r0
 8006f86:	4615      	mov	r5, r2
 8006f88:	460c      	mov	r4, r1
 8006f8a:	b921      	cbnz	r1, 8006f96 <_realloc_r+0x16>
 8006f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f90:	4611      	mov	r1, r2
 8006f92:	f7ff bc59 	b.w	8006848 <_malloc_r>
 8006f96:	b92a      	cbnz	r2, 8006fa4 <_realloc_r+0x24>
 8006f98:	f7ff fbea 	bl	8006770 <_free_r>
 8006f9c:	2400      	movs	r4, #0
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa4:	f000 f81a 	bl	8006fdc <_malloc_usable_size_r>
 8006fa8:	4285      	cmp	r5, r0
 8006faa:	4606      	mov	r6, r0
 8006fac:	d802      	bhi.n	8006fb4 <_realloc_r+0x34>
 8006fae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006fb2:	d8f4      	bhi.n	8006f9e <_realloc_r+0x1e>
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	f7ff fc46 	bl	8006848 <_malloc_r>
 8006fbc:	4607      	mov	r7, r0
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d0ec      	beq.n	8006f9c <_realloc_r+0x1c>
 8006fc2:	42b5      	cmp	r5, r6
 8006fc4:	462a      	mov	r2, r5
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	bf28      	it	cs
 8006fca:	4632      	movcs	r2, r6
 8006fcc:	f7ff fbc2 	bl	8006754 <memcpy>
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	f7ff fbcc 	bl	8006770 <_free_r>
 8006fd8:	463c      	mov	r4, r7
 8006fda:	e7e0      	b.n	8006f9e <_realloc_r+0x1e>

08006fdc <_malloc_usable_size_r>:
 8006fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fe0:	1f18      	subs	r0, r3, #4
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	bfbc      	itt	lt
 8006fe6:	580b      	ldrlt	r3, [r1, r0]
 8006fe8:	18c0      	addlt	r0, r0, r3
 8006fea:	4770      	bx	lr

08006fec <_init>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	bf00      	nop
 8006ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff2:	bc08      	pop	{r3}
 8006ff4:	469e      	mov	lr, r3
 8006ff6:	4770      	bx	lr

08006ff8 <_fini>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	bf00      	nop
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr
