
Atividade_Aula04_Exercicio02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006150  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006320  08006320  00007320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006408  08006408  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006408  08006408  00007408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006410  08006410  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006410  08006410  00007410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006414  08006414  00007414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006418  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000060  08006478  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c44  08006478  00008c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018670  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003364  00000000  00000000  00020700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00023a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbf  00000000  00000000  00024ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003507  00000000  00000000  00025e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f41  00000000  00000000  00029366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daf13  00000000  00000000  0003f2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a1ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000586c  00000000  00000000  0011a200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0011fa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006308 	.word	0x08006308

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006308 	.word	0x08006308

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000520:	d10d      	bne.n	800053e <HAL_GPIO_EXTI_Callback+0x2e>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000522:	2120      	movs	r1, #32
 8000524:	4808      	ldr	r0, [pc, #32]	@ (8000548 <HAL_GPIO_EXTI_Callback+0x38>)
 8000526:	f000 fdd2 	bl	80010ce <HAL_GPIO_TogglePin>
		osSemaphoreRelease(CountingSem01Handle);
 800052a:	4b08      	ldr	r3, [pc, #32]	@ (800054c <HAL_GPIO_EXTI_Callback+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fcd8 	bl	8002ee4 <osSemaphoreRelease>
		osSemaphoreRelease(CountingSem01Handle);
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f002 fcd3 	bl	8002ee4 <osSemaphoreRelease>


	}

}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40020000 	.word	0x40020000
 800054c:	200000cc 	.word	0x200000cc

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 faea 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f832 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8c8 	bl	80006f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000560:	f000 f89c 	bl	800069c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000564:	f002 faec 	bl	8002b40 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CountingSem01 */
  CountingSem01Handle = osSemaphoreNew(2, 0, &CountingSem01_attributes);
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <main+0x50>)
 800056a:	2100      	movs	r1, #0
 800056c:	2002      	movs	r0, #2
 800056e:	f002 fbde 	bl	8002d2e <osSemaphoreNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0b      	ldr	r2, [pc, #44]	@ (80005a4 <main+0x54>)
 8000576:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000578:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <main+0x58>)
 800057a:	2100      	movs	r1, #0
 800057c:	480b      	ldr	r0, [pc, #44]	@ (80005ac <main+0x5c>)
 800057e:	f002 fb29 	bl	8002bd4 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <main+0x60>)
 8000586:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000588:	4a0a      	ldr	r2, [pc, #40]	@ (80005b4 <main+0x64>)
 800058a:	2100      	movs	r1, #0
 800058c:	480a      	ldr	r0, [pc, #40]	@ (80005b8 <main+0x68>)
 800058e:	f002 fb21 	bl	8002bd4 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a09      	ldr	r2, [pc, #36]	@ (80005bc <main+0x6c>)
 8000596:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000598:	f002 faf6 	bl	8002b88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <main+0x4c>
 80005a0:	080063e0 	.word	0x080063e0
 80005a4:	200000cc 	.word	0x200000cc
 80005a8:	08006398 	.word	0x08006398
 80005ac:	080007c1 	.word	0x080007c1
 80005b0:	200000c4 	.word	0x200000c4
 80005b4:	080063bc 	.word	0x080063bc
 80005b8:	08000805 	.word	0x08000805
 80005bc:	200000c8 	.word	0x200000c8

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2234      	movs	r2, #52	@ 0x34
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 fdb2 	bl	8006138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000694 <SystemClock_Config+0xd4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a29      	ldr	r2, [pc, #164]	@ (8000694 <SystemClock_Config+0xd4>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f4:	4b27      	ldr	r3, [pc, #156]	@ (8000694 <SystemClock_Config+0xd4>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000600:	2300      	movs	r3, #0
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <SystemClock_Config+0xd8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800060c:	4a22      	ldr	r2, [pc, #136]	@ (8000698 <SystemClock_Config+0xd8>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <SystemClock_Config+0xd8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000634:	2310      	movs	r3, #16
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000638:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800063c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800063e:	2304      	movs	r3, #4
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000646:	2302      	movs	r3, #2
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4618      	mov	r0, r3
 8000650:	f001 f8ec 	bl	800182c <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800065a:	f000 f907 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2102      	movs	r1, #2
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fd5a 	bl	8001134 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000686:	f000 f8f1 	bl	800086c <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <MX_USART1_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a6:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006d4:	f001 fde4 	bl	80022a0 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f8c5 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	40011000 	.word	0x40011000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a22      	ldr	r2, [pc, #136]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a1b      	ldr	r2, [pc, #108]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2120      	movs	r1, #32
 800075e:	4816      	ldr	r0, [pc, #88]	@ (80007b8 <MX_GPIO_Init+0xc8>)
 8000760:	f000 fc9c 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4810      	ldr	r0, [pc, #64]	@ (80007bc <MX_GPIO_Init+0xcc>)
 800077c:	f000 fafa 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000780:	2320      	movs	r3, #32
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <MX_GPIO_Init+0xc8>)
 8000798:	f000 faec 	bl	8000d74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2105      	movs	r1, #5
 80007a0:	2028      	movs	r0, #40	@ 0x28
 80007a2:	f000 fabd 	bl	8000d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a6:	2028      	movs	r0, #40	@ 0x28
 80007a8:	f000 fad6 	bl	8000d58 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40020800 	.word	0x40020800

080007c0 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  char *str = "Mensagem Enviada pela Task01";
 80007c8:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <StartTask01+0x38>)
 80007ca:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  osSemaphoreAcquire(CountingSem01Handle, osWaitForever);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <StartTask01+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fb33 	bl	8002e40 <osSemaphoreAcquire>
	  HAL_UART_Transmit(&huart1, (uint8_t *)str,strlen(str),100);
 80007da:	68f8      	ldr	r0, [r7, #12]
 80007dc:	f7ff fd18 	bl	8000210 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	2364      	movs	r3, #100	@ 0x64
 80007e6:	68f9      	ldr	r1, [r7, #12]
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <StartTask01+0x40>)
 80007ea:	f001 fda9 	bl	8002340 <HAL_UART_Transmit>
      osDelay(100);
 80007ee:	2064      	movs	r0, #100	@ 0x64
 80007f0:	f002 fa82 	bl	8002cf8 <osDelay>
	  osSemaphoreAcquire(CountingSem01Handle, osWaitForever);
 80007f4:	bf00      	nop
 80007f6:	e7e9      	b.n	80007cc <StartTask01+0xc>
 80007f8:	08006340 	.word	0x08006340
 80007fc:	200000cc 	.word	0x200000cc
 8000800:	2000007c 	.word	0x2000007c

08000804 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  char *str = "Mensagem Enviada pela Task02";
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <StartTask02+0x38>)
 800080e:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  osSemaphoreAcquire(CountingSem01Handle, osWaitForever);
 8000810:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <StartTask02+0x3c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fb11 	bl	8002e40 <osSemaphoreAcquire>
	  HAL_UART_Transmit(&huart1, (uint8_t *)str,strlen(str),100);
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f7ff fcf6 	bl	8000210 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	68f9      	ldr	r1, [r7, #12]
 800082c:	4805      	ldr	r0, [pc, #20]	@ (8000844 <StartTask02+0x40>)
 800082e:	f001 fd87 	bl	8002340 <HAL_UART_Transmit>
      osDelay(100);
 8000832:	2064      	movs	r0, #100	@ 0x64
 8000834:	f002 fa60 	bl	8002cf8 <osDelay>
	  osSemaphoreAcquire(CountingSem01Handle, osWaitForever);
 8000838:	bf00      	nop
 800083a:	e7e9      	b.n	8000810 <StartTask02+0xc>
 800083c:	08006360 	.word	0x08006360
 8000840:	200000cc 	.word	0x200000cc
 8000844:	2000007c 	.word	0x2000007c

08000848 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d101      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085a:	f000 f989 	bl	8000b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40001000 	.word	0x40001000

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <Error_Handler+0x8>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_MspInit+0x54>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	4a11      	ldr	r2, [pc, #68]	@ (80008cc <HAL_MspInit+0x54>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088c:	6453      	str	r3, [r2, #68]	@ 0x44
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_MspInit+0x54>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <HAL_MspInit+0x54>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <HAL_MspInit+0x54>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <HAL_MspInit+0x54>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	210f      	movs	r1, #15
 80008ba:	f06f 0001 	mvn.w	r0, #1
 80008be:	f000 fa2f 	bl	8000d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <HAL_UART_MspInit+0x84>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d12c      	bne.n	800094c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <HAL_UART_MspInit+0x88>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	4a17      	ldr	r2, [pc, #92]	@ (8000958 <HAL_UART_MspInit+0x88>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6453      	str	r3, [r2, #68]	@ 0x44
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <HAL_UART_MspInit+0x88>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <HAL_UART_MspInit+0x88>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <HAL_UART_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800092a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800093c:	2307      	movs	r3, #7
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <HAL_UART_MspInit+0x8c>)
 8000948:	f000 fa14 	bl	8000d74 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40011000 	.word	0x40011000
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000

08000960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	@ 0x38
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	4b33      	ldr	r3, [pc, #204]	@ (8000a44 <HAL_InitTick+0xe4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	4a32      	ldr	r2, [pc, #200]	@ (8000a44 <HAL_InitTick+0xe4>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000980:	4b30      	ldr	r3, [pc, #192]	@ (8000a44 <HAL_InitTick+0xe4>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	f003 0310 	and.w	r3, r3, #16
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800098c:	f107 0210 	add.w	r2, r7, #16
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fce6 	bl	8001368 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d103      	bne.n	80009ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009a6:	f000 fcb7 	bl	8001318 <HAL_RCC_GetPCLK1Freq>
 80009aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80009ac:	e004      	b.n	80009b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ae:	f000 fcb3 	bl	8001318 <HAL_RCC_GetPCLK1Freq>
 80009b2:	4603      	mov	r3, r0
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009ba:	4a23      	ldr	r2, [pc, #140]	@ (8000a48 <HAL_InitTick+0xe8>)
 80009bc:	fba2 2303 	umull	r2, r3, r2, r3
 80009c0:	0c9b      	lsrs	r3, r3, #18
 80009c2:	3b01      	subs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009c6:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <HAL_InitTick+0xec>)
 80009c8:	4a21      	ldr	r2, [pc, #132]	@ (8000a50 <HAL_InitTick+0xf0>)
 80009ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <HAL_InitTick+0xec>)
 80009ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009d4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <HAL_InitTick+0xec>)
 80009d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009da:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <HAL_InitTick+0xec>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <HAL_InitTick+0xec>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <HAL_InitTick+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009ec:	4817      	ldr	r0, [pc, #92]	@ (8000a4c <HAL_InitTick+0xec>)
 80009ee:	f001 f9bb 	bl	8001d68 <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d11b      	bne.n	8000a38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a00:	4812      	ldr	r0, [pc, #72]	@ (8000a4c <HAL_InitTick+0xec>)
 8000a02:	f001 fa0b 	bl	8001e1c <HAL_TIM_Base_Start_IT>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d111      	bne.n	8000a38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a14:	2036      	movs	r0, #54	@ 0x36
 8000a16:	f000 f99f 	bl	8000d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d808      	bhi.n	8000a32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2036      	movs	r0, #54	@ 0x36
 8000a26:	f000 f97b 	bl	8000d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <HAL_InitTick+0xf4>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	e002      	b.n	8000a38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3738      	adds	r7, #56	@ 0x38
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	431bde83 	.word	0x431bde83
 8000a4c:	200000d0 	.word	0x200000d0
 8000a50:	40001000 	.word	0x40001000
 8000a54:	20000004 	.word	0x20000004

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <NMI_Handler+0x4>

08000a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a92:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a96:	f000 fb35 	bl	8001104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <TIM6_DAC_IRQHandler+0x10>)
 8000aa6:	f001 fa29 	bl	8001efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000d0 	.word	0x200000d0

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000adc:	f7ff ffea 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f005 fb75 	bl	80061f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fd21 	bl	8000550 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b1c:	08006418 	.word	0x08006418
  ldr r2, =_sbss
 8000b20:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b24:	20004c44 	.word	0x20004c44

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f8d8 	bl	8000d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f7ff ff00 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fe8a 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000118 	.word	0x20000118

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000118 	.word	0x20000118

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	@ (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff4c 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d32:	f7ff ff61 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffb1 	bl	8000ca4 <NVIC_EncodePriority>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff80 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e165      	b.n	800105c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8154 	bne.w	8001056 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d130      	bne.n	8000e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d017      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80ae 	beq.w	8001056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b5d      	ldr	r3, [pc, #372]	@ (8001074 <HAL_GPIO_Init+0x300>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	4a5c      	ldr	r2, [pc, #368]	@ (8001074 <HAL_GPIO_Init+0x300>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001074 <HAL_GPIO_Init+0x300>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a58      	ldr	r2, [pc, #352]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800107c <HAL_GPIO_Init+0x308>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d025      	beq.n	8000f8e <HAL_GPIO_Init+0x21a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4e      	ldr	r2, [pc, #312]	@ (8001080 <HAL_GPIO_Init+0x30c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d01f      	beq.n	8000f8a <HAL_GPIO_Init+0x216>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001084 <HAL_GPIO_Init+0x310>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4c      	ldr	r2, [pc, #304]	@ (8001088 <HAL_GPIO_Init+0x314>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x20e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800108c <HAL_GPIO_Init+0x318>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x20a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	@ (8001090 <HAL_GPIO_Init+0x31c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x206>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a49      	ldr	r2, [pc, #292]	@ (8001094 <HAL_GPIO_Init+0x320>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x202>
 8000f72:	2306      	movs	r3, #6
 8000f74:	e00c      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00a      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	f002 0203 	and.w	r2, r2, #3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa0:	4935      	ldr	r1, [pc, #212]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fae:	4b3a      	ldr	r3, [pc, #232]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd2:	4a31      	ldr	r2, [pc, #196]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ffc:	4a26      	ldr	r2, [pc, #152]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001002:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001026:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102c:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <HAL_GPIO_Init+0x324>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001050:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	f67f ae96 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40013800 	.word	0x40013800
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40021000 	.word	0x40021000
 8001090:	40021400 	.word	0x40021400
 8001094:	40021800 	.word	0x40021800
 8001098:	40013c00 	.word	0x40013c00

0800109c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b8:	e003      	b.n	80010c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	619a      	str	r2, [r3, #24]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010e0:	887a      	ldrh	r2, [r7, #2]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4013      	ands	r3, r2
 80010e6:	041a      	lsls	r2, r3, #16
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	400b      	ands	r3, r1
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	619a      	str	r2, [r3, #24]
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	4013      	ands	r3, r2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9f4 	bl	8000510 <HAL_GPIO_EXTI_Callback>
  }
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0cc      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001148:	4b68      	ldr	r3, [pc, #416]	@ (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d90c      	bls.n	8001170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001156:	4b65      	ldr	r3, [pc, #404]	@ (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115e:	4b63      	ldr	r3, [pc, #396]	@ (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d001      	beq.n	8001170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e0b8      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d020      	beq.n	80011be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001188:	4b59      	ldr	r3, [pc, #356]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4a58      	ldr	r2, [pc, #352]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001192:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a0:	4b53      	ldr	r3, [pc, #332]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	4a52      	ldr	r2, [pc, #328]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ac:	4b50      	ldr	r3, [pc, #320]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	494d      	ldr	r1, [pc, #308]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d044      	beq.n	8001254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b47      	ldr	r3, [pc, #284]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d119      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e07f      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d003      	beq.n	80011f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f2:	4b3f      	ldr	r3, [pc, #252]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e06f      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e067      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001212:	4b37      	ldr	r3, [pc, #220]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f023 0203 	bic.w	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4934      	ldr	r1, [pc, #208]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	4313      	orrs	r3, r2
 8001222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001224:	f7ff fcb8 	bl	8000b98 <HAL_GetTick>
 8001228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122a:	e00a      	b.n	8001242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800122c:	f7ff fcb4 	bl	8000b98 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800123a:	4293      	cmp	r3, r2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e04f      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 020c 	and.w	r2, r3, #12
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	429a      	cmp	r2, r3
 8001252:	d1eb      	bne.n	800122c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d20c      	bcs.n	800127c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001262:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800126a:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d001      	beq.n	800127c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e032      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4916      	ldr	r1, [pc, #88]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	4313      	orrs	r3, r2
 8001298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d009      	beq.n	80012ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	490e      	ldr	r1, [pc, #56]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ba:	f000 f887 	bl	80013cc <HAL_RCC_GetSysClockFreq>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	490a      	ldr	r1, [pc, #40]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	5ccb      	ldrb	r3, [r1, r3]
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	4a09      	ldr	r2, [pc, #36]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <HAL_RCC_ClockConfig+0x1c8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fb40 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00
 80012f0:	40023800 	.word	0x40023800
 80012f4:	080063f0 	.word	0x080063f0
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000004 	.word	0x20000004

08001300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001304:	4b03      	ldr	r3, [pc, #12]	@ (8001314 <HAL_RCC_GetHCLKFreq+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000000 	.word	0x20000000

08001318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800131c:	f7ff fff0 	bl	8001300 <HAL_RCC_GetHCLKFreq>
 8001320:	4602      	mov	r2, r0
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	0a9b      	lsrs	r3, r3, #10
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	4903      	ldr	r1, [pc, #12]	@ (800133c <HAL_RCC_GetPCLK1Freq+0x24>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	08006400 	.word	0x08006400

08001340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001344:	f7ff ffdc 	bl	8001300 <HAL_RCC_GetHCLKFreq>
 8001348:	4602      	mov	r2, r0
 800134a:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	0b5b      	lsrs	r3, r3, #13
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	4903      	ldr	r1, [pc, #12]	@ (8001364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001356:	5ccb      	ldrb	r3, [r1, r3]
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800135c:	4618      	mov	r0, r3
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	08006400 	.word	0x08006400

08001368 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	220f      	movs	r2, #15
 8001376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_RCC_GetClockConfig+0x5c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0203 	and.w	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <HAL_RCC_GetClockConfig+0x5c>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <HAL_RCC_GetClockConfig+0x60>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 020f 	and.w	r2, r3, #15
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	601a      	str	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40023c00 	.word	0x40023c00

080013cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d0:	b0ae      	sub	sp, #184	@ 0xb8
 80013d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013f2:	4bcb      	ldr	r3, [pc, #812]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	f200 8206 	bhi.w	800180c <HAL_RCC_GetSysClockFreq+0x440>
 8001400:	a201      	add	r2, pc, #4	@ (adr r2, 8001408 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001406:	bf00      	nop
 8001408:	0800143d 	.word	0x0800143d
 800140c:	0800180d 	.word	0x0800180d
 8001410:	0800180d 	.word	0x0800180d
 8001414:	0800180d 	.word	0x0800180d
 8001418:	08001445 	.word	0x08001445
 800141c:	0800180d 	.word	0x0800180d
 8001420:	0800180d 	.word	0x0800180d
 8001424:	0800180d 	.word	0x0800180d
 8001428:	0800144d 	.word	0x0800144d
 800142c:	0800180d 	.word	0x0800180d
 8001430:	0800180d 	.word	0x0800180d
 8001434:	0800180d 	.word	0x0800180d
 8001438:	0800163d 	.word	0x0800163d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800143c:	4bb9      	ldr	r3, [pc, #740]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x358>)
 800143e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001442:	e1e7      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001444:	4bb8      	ldr	r3, [pc, #736]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001446:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800144a:	e1e3      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800144c:	4bb4      	ldr	r3, [pc, #720]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001454:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001458:	4bb1      	ldr	r3, [pc, #708]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d071      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001464:	4bae      	ldr	r3, [pc, #696]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	099b      	lsrs	r3, r3, #6
 800146a:	2200      	movs	r2, #0
 800146c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001470:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800147c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800148a:	4622      	mov	r2, r4
 800148c:	462b      	mov	r3, r5
 800148e:	f04f 0000 	mov.w	r0, #0
 8001492:	f04f 0100 	mov.w	r1, #0
 8001496:	0159      	lsls	r1, r3, #5
 8001498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800149c:	0150      	lsls	r0, r2, #5
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4621      	mov	r1, r4
 80014a4:	1a51      	subs	r1, r2, r1
 80014a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80014a8:	4629      	mov	r1, r5
 80014aa:	eb63 0301 	sbc.w	r3, r3, r1
 80014ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014bc:	4649      	mov	r1, r9
 80014be:	018b      	lsls	r3, r1, #6
 80014c0:	4641      	mov	r1, r8
 80014c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014c6:	4641      	mov	r1, r8
 80014c8:	018a      	lsls	r2, r1, #6
 80014ca:	4641      	mov	r1, r8
 80014cc:	1a51      	subs	r1, r2, r1
 80014ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014d0:	4649      	mov	r1, r9
 80014d2:	eb63 0301 	sbc.w	r3, r3, r1
 80014d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014e4:	4649      	mov	r1, r9
 80014e6:	00cb      	lsls	r3, r1, #3
 80014e8:	4641      	mov	r1, r8
 80014ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ee:	4641      	mov	r1, r8
 80014f0:	00ca      	lsls	r2, r1, #3
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	4622      	mov	r2, r4
 80014fa:	189b      	adds	r3, r3, r2
 80014fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80014fe:	462b      	mov	r3, r5
 8001500:	460a      	mov	r2, r1
 8001502:	eb42 0303 	adc.w	r3, r2, r3
 8001506:	637b      	str	r3, [r7, #52]	@ 0x34
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001514:	4629      	mov	r1, r5
 8001516:	024b      	lsls	r3, r1, #9
 8001518:	4621      	mov	r1, r4
 800151a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800151e:	4621      	mov	r1, r4
 8001520:	024a      	lsls	r2, r1, #9
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800152a:	2200      	movs	r2, #0
 800152c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001530:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001534:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001538:	f7fe fe72 	bl	8000220 <__aeabi_uldivmod>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4613      	mov	r3, r2
 8001542:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001546:	e067      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001548:	4b75      	ldr	r3, [pc, #468]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	2200      	movs	r2, #0
 8001550:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001554:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001558:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800155c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001560:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001562:	2300      	movs	r3, #0
 8001564:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001566:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800156a:	4622      	mov	r2, r4
 800156c:	462b      	mov	r3, r5
 800156e:	f04f 0000 	mov.w	r0, #0
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	0159      	lsls	r1, r3, #5
 8001578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800157c:	0150      	lsls	r0, r2, #5
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4621      	mov	r1, r4
 8001584:	1a51      	subs	r1, r2, r1
 8001586:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001588:	4629      	mov	r1, r5
 800158a:	eb63 0301 	sbc.w	r3, r3, r1
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800159c:	4649      	mov	r1, r9
 800159e:	018b      	lsls	r3, r1, #6
 80015a0:	4641      	mov	r1, r8
 80015a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015a6:	4641      	mov	r1, r8
 80015a8:	018a      	lsls	r2, r1, #6
 80015aa:	4641      	mov	r1, r8
 80015ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80015b0:	4649      	mov	r1, r9
 80015b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015ca:	4692      	mov	sl, r2
 80015cc:	469b      	mov	fp, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	eb1a 0303 	adds.w	r3, sl, r3
 80015d4:	623b      	str	r3, [r7, #32]
 80015d6:	462b      	mov	r3, r5
 80015d8:	eb4b 0303 	adc.w	r3, fp, r3
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015ea:	4629      	mov	r1, r5
 80015ec:	028b      	lsls	r3, r1, #10
 80015ee:	4621      	mov	r1, r4
 80015f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015f4:	4621      	mov	r1, r4
 80015f6:	028a      	lsls	r2, r1, #10
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001600:	2200      	movs	r2, #0
 8001602:	673b      	str	r3, [r7, #112]	@ 0x70
 8001604:	677a      	str	r2, [r7, #116]	@ 0x74
 8001606:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800160a:	f7fe fe09 	bl	8000220 <__aeabi_uldivmod>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4613      	mov	r3, r2
 8001614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001618:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	3301      	adds	r3, #1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800162a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800162e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800163a:	e0eb      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163c:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001648:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d06b      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001654:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	2200      	movs	r2, #0
 800165c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800165e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001666:	663b      	str	r3, [r7, #96]	@ 0x60
 8001668:	2300      	movs	r3, #0
 800166a:	667b      	str	r3, [r7, #100]	@ 0x64
 800166c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001670:	4622      	mov	r2, r4
 8001672:	462b      	mov	r3, r5
 8001674:	f04f 0000 	mov.w	r0, #0
 8001678:	f04f 0100 	mov.w	r1, #0
 800167c:	0159      	lsls	r1, r3, #5
 800167e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001682:	0150      	lsls	r0, r2, #5
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4621      	mov	r1, r4
 800168a:	1a51      	subs	r1, r2, r1
 800168c:	61b9      	str	r1, [r7, #24]
 800168e:	4629      	mov	r1, r5
 8001690:	eb63 0301 	sbc.w	r3, r3, r1
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016a2:	4659      	mov	r1, fp
 80016a4:	018b      	lsls	r3, r1, #6
 80016a6:	4651      	mov	r1, sl
 80016a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ac:	4651      	mov	r1, sl
 80016ae:	018a      	lsls	r2, r1, #6
 80016b0:	4651      	mov	r1, sl
 80016b2:	ebb2 0801 	subs.w	r8, r2, r1
 80016b6:	4659      	mov	r1, fp
 80016b8:	eb63 0901 	sbc.w	r9, r3, r1
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016d0:	4690      	mov	r8, r2
 80016d2:	4699      	mov	r9, r3
 80016d4:	4623      	mov	r3, r4
 80016d6:	eb18 0303 	adds.w	r3, r8, r3
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	462b      	mov	r3, r5
 80016de:	eb49 0303 	adc.w	r3, r9, r3
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016f0:	4629      	mov	r1, r5
 80016f2:	024b      	lsls	r3, r1, #9
 80016f4:	4621      	mov	r1, r4
 80016f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016fa:	4621      	mov	r1, r4
 80016fc:	024a      	lsls	r2, r1, #9
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001706:	2200      	movs	r2, #0
 8001708:	65bb      	str	r3, [r7, #88]	@ 0x58
 800170a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800170c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001710:	f7fe fd86 	bl	8000220 <__aeabi_uldivmod>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4613      	mov	r3, r2
 800171a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800171e:	e065      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x420>
 8001720:	40023800 	.word	0x40023800
 8001724:	00f42400 	.word	0x00f42400
 8001728:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172c:	4b3d      	ldr	r3, [pc, #244]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x458>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	2200      	movs	r2, #0
 8001734:	4618      	mov	r0, r3
 8001736:	4611      	mov	r1, r2
 8001738:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800173c:	653b      	str	r3, [r7, #80]	@ 0x50
 800173e:	2300      	movs	r3, #0
 8001740:	657b      	str	r3, [r7, #84]	@ 0x54
 8001742:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001746:	4642      	mov	r2, r8
 8001748:	464b      	mov	r3, r9
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	0159      	lsls	r1, r3, #5
 8001754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001758:	0150      	lsls	r0, r2, #5
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4641      	mov	r1, r8
 8001760:	1a51      	subs	r1, r2, r1
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	4649      	mov	r1, r9
 8001766:	eb63 0301 	sbc.w	r3, r3, r1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001778:	4659      	mov	r1, fp
 800177a:	018b      	lsls	r3, r1, #6
 800177c:	4651      	mov	r1, sl
 800177e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001782:	4651      	mov	r1, sl
 8001784:	018a      	lsls	r2, r1, #6
 8001786:	4651      	mov	r1, sl
 8001788:	1a54      	subs	r4, r2, r1
 800178a:	4659      	mov	r1, fp
 800178c:	eb63 0501 	sbc.w	r5, r3, r1
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	00eb      	lsls	r3, r5, #3
 800179a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800179e:	00e2      	lsls	r2, r4, #3
 80017a0:	4614      	mov	r4, r2
 80017a2:	461d      	mov	r5, r3
 80017a4:	4643      	mov	r3, r8
 80017a6:	18e3      	adds	r3, r4, r3
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	464b      	mov	r3, r9
 80017ac:	eb45 0303 	adc.w	r3, r5, r3
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017be:	4629      	mov	r1, r5
 80017c0:	028b      	lsls	r3, r1, #10
 80017c2:	4621      	mov	r1, r4
 80017c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017c8:	4621      	mov	r1, r4
 80017ca:	028a      	lsls	r2, r1, #10
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017d4:	2200      	movs	r2, #0
 80017d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017de:	f7fe fd1f 	bl	8000220 <__aeabi_uldivmod>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4613      	mov	r3, r2
 80017e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	0f1b      	lsrs	r3, r3, #28
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800180a:	e003      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x45c>)
 800180e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001812:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001814:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001818:	4618      	mov	r0, r3
 800181a:	37b8      	adds	r7, #184	@ 0xb8
 800181c:	46bd      	mov	sp, r7
 800181e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	00f42400 	.word	0x00f42400

0800182c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e28d      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8083 	beq.w	8001952 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800184c:	4b94      	ldr	r3, [pc, #592]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b04      	cmp	r3, #4
 8001856:	d019      	beq.n	800188c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001858:	4b91      	ldr	r3, [pc, #580]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001860:	2b08      	cmp	r3, #8
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001864:	4b8e      	ldr	r3, [pc, #568]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001870:	d00c      	beq.n	800188c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001872:	4b8b      	ldr	r3, [pc, #556]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d112      	bne.n	80018a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4b88      	ldr	r3, [pc, #544]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800188a:	d10b      	bne.n	80018a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	4b84      	ldr	r3, [pc, #528]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d05b      	beq.n	8001950 <HAL_RCC_OscConfig+0x124>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d157      	bne.n	8001950 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e25a      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x90>
 80018ae:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7b      	ldr	r2, [pc, #492]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0xcc>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0xb4>
 80018c6:	4b76      	ldr	r3, [pc, #472]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a75      	ldr	r2, [pc, #468]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b73      	ldr	r3, [pc, #460]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a72      	ldr	r2, [pc, #456]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0xcc>
 80018e0:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff f94a 	bl	8000b98 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f946 	bl	8000b98 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e21f      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b61      	ldr	r3, [pc, #388]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0xdc>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff f936 	bl	8000b98 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff f932 	bl	8000b98 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	@ 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e20b      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001942:	4b57      	ldr	r3, [pc, #348]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x104>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d06f      	beq.n	8001a3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800195e:	4b50      	ldr	r3, [pc, #320]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b00      	cmp	r3, #0
 8001968:	d017      	beq.n	800199a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800196a:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001972:	2b08      	cmp	r3, #8
 8001974:	d105      	bne.n	8001982 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001976:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b47      	ldr	r3, [pc, #284]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d11c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198e:	4b44      	ldr	r3, [pc, #272]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d116      	bne.n	80019c8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	4b41      	ldr	r3, [pc, #260]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x186>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1d3      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4937      	ldr	r1, [pc, #220]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	e03a      	b.n	8001a3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <HAL_RCC_OscConfig+0x278>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f8df 	bl	8000b98 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff f8db 	bl	8000b98 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1b4      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b28      	ldr	r3, [pc, #160]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4925      	ldr	r1, [pc, #148]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e015      	b.n	8001a3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_RCC_OscConfig+0x278>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff f8be 	bl	8000b98 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a20:	f7ff f8ba 	bl	8000b98 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e193      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d036      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff f89e 	bl	8000b98 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff f89a 	bl	8000b98 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e173      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x234>
 8001a7e:	e01b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a86:	f7ff f887 	bl	8000b98 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	e00e      	b.n	8001aac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f883 	bl	8000b98 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d907      	bls.n	8001aac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e15c      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	42470000 	.word	0x42470000
 8001aa8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	4b8a      	ldr	r3, [pc, #552]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ea      	bne.n	8001a8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8097 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b83      	ldr	r3, [pc, #524]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b7f      	ldr	r3, [pc, #508]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	4a7e      	ldr	r2, [pc, #504]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af2:	2301      	movs	r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af6:	4b79      	ldr	r3, [pc, #484]	@ (8001cdc <HAL_RCC_OscConfig+0x4b0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b02:	4b76      	ldr	r3, [pc, #472]	@ (8001cdc <HAL_RCC_OscConfig+0x4b0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a75      	ldr	r2, [pc, #468]	@ (8001cdc <HAL_RCC_OscConfig+0x4b0>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f843 	bl	8000b98 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7ff f83f 	bl	8000b98 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e118      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	4b6c      	ldr	r3, [pc, #432]	@ (8001cdc <HAL_RCC_OscConfig+0x4b0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x31e>
 8001b3c:	4b66      	ldr	r3, [pc, #408]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b40:	4a65      	ldr	r2, [pc, #404]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x358>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x340>
 8001b52:	4b61      	ldr	r3, [pc, #388]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b56:	4a60      	ldr	r2, [pc, #384]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b5e:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b62:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0x358>
 8001b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b70:	4a59      	ldr	r2, [pc, #356]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b78:	4b57      	ldr	r3, [pc, #348]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7c:	4a56      	ldr	r2, [pc, #344]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b7e:	f023 0304 	bic.w	r3, r3, #4
 8001b82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d015      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f804 	bl	8000b98 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff f800 	bl	8000b98 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0d7      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0ee      	beq.n	8001b94 <HAL_RCC_OscConfig+0x368>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7fe ffee 	bl	8000b98 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7fe ffea 	bl	8000b98 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e0c1      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	4b40      	ldr	r3, [pc, #256]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	4a3a      	ldr	r2, [pc, #232]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80ad 	beq.w	8001d58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bfe:	4b36      	ldr	r3, [pc, #216]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d060      	beq.n	8001ccc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d145      	bne.n	8001c9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b33      	ldr	r3, [pc, #204]	@ (8001ce0 <HAL_RCC_OscConfig+0x4b4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe ffbe 	bl	8000b98 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe ffba 	bl	8000b98 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e093      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	4b29      	ldr	r3, [pc, #164]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	019b      	lsls	r3, r3, #6
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	3b01      	subs	r3, #1
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	071b      	lsls	r3, r3, #28
 8001c6a:	491b      	ldr	r1, [pc, #108]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <HAL_RCC_OscConfig+0x4b4>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7fe ff8f 	bl	8000b98 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7fe ff8b 	bl	8000b98 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e064      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x452>
 8001c9c:	e05c      	b.n	8001d58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ce0 <HAL_RCC_OscConfig+0x4b4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7fe ff78 	bl	8000b98 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7fe ff74 	bl	8000b98 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e04d      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x480>
 8001cca:	e045      	b.n	8001d58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e040      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_RCC_OscConfig+0x538>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d030      	beq.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d129      	bne.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d122      	bne.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d119      	bne.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d10f      	bne.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e041      	b.n	8001dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f839 	bl	8001e06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f000 f9c0 	bl	800212c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d001      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e04e      	b.n	8001ed2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a23      	ldr	r2, [pc, #140]	@ (8001ee0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d022      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5e:	d01d      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d018      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1c      	ldr	r2, [pc, #112]	@ (8001eec <HAL_TIM_Base_Start_IT+0xd0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00e      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d009      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	@ (8001ef4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d004      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a18      	ldr	r2, [pc, #96]	@ (8001ef8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d111      	bne.n	8001ec0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d010      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ebe:	e007      	b.n	8001ed0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	40000800 	.word	0x40000800
 8001eec:	40000c00 	.word	0x40000c00
 8001ef0:	40010400 	.word	0x40010400
 8001ef4:	40014000 	.word	0x40014000
 8001ef8:	40001800 	.word	0x40001800

08001efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d020      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0202 	mvn.w	r2, #2
 8001f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8d2 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8c4 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8d5 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d020      	beq.n	8001fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01b      	beq.n	8001fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0204 	mvn.w	r2, #4
 8001f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8ac 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f89e 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f8af 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d020      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01b      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0208 	mvn.w	r2, #8
 8001fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f886 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f878 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f889 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d020      	beq.n	8002044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01b      	beq.n	8002044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0210 	mvn.w	r2, #16
 8002014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2208      	movs	r2, #8
 800201a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f860 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8002030:	e005      	b.n	800203e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f852 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f863 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00c      	beq.n	8002068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0201 	mvn.w	r2, #1
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fbf0 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00c      	beq.n	800208c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f900 	bl	800228c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f834 	bl	8002118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00c      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0220 	mvn.w	r2, #32
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8d2 	bl	8002278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a43      	ldr	r2, [pc, #268]	@ (800224c <TIM_Base_SetConfig+0x120>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214a:	d00f      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a40      	ldr	r2, [pc, #256]	@ (8002250 <TIM_Base_SetConfig+0x124>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00b      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3f      	ldr	r2, [pc, #252]	@ (8002254 <TIM_Base_SetConfig+0x128>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3e      	ldr	r2, [pc, #248]	@ (8002258 <TIM_Base_SetConfig+0x12c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3d      	ldr	r2, [pc, #244]	@ (800225c <TIM_Base_SetConfig+0x130>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d108      	bne.n	800217e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a32      	ldr	r2, [pc, #200]	@ (800224c <TIM_Base_SetConfig+0x120>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800218c:	d027      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2f      	ldr	r2, [pc, #188]	@ (8002250 <TIM_Base_SetConfig+0x124>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d023      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2e      	ldr	r2, [pc, #184]	@ (8002254 <TIM_Base_SetConfig+0x128>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002258 <TIM_Base_SetConfig+0x12c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2c      	ldr	r2, [pc, #176]	@ (800225c <TIM_Base_SetConfig+0x130>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d017      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002260 <TIM_Base_SetConfig+0x134>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002264 <TIM_Base_SetConfig+0x138>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00f      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a29      	ldr	r2, [pc, #164]	@ (8002268 <TIM_Base_SetConfig+0x13c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a28      	ldr	r2, [pc, #160]	@ (800226c <TIM_Base_SetConfig+0x140>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a27      	ldr	r2, [pc, #156]	@ (8002270 <TIM_Base_SetConfig+0x144>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d003      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a26      	ldr	r2, [pc, #152]	@ (8002274 <TIM_Base_SetConfig+0x148>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d108      	bne.n	80021f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a0e      	ldr	r2, [pc, #56]	@ (800224c <TIM_Base_SetConfig+0x120>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d003      	beq.n	800221e <TIM_Base_SetConfig+0xf2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a10      	ldr	r2, [pc, #64]	@ (800225c <TIM_Base_SetConfig+0x130>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d103      	bne.n	8002226 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f043 0204 	orr.w	r2, r3, #4
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40010400 	.word	0x40010400
 8002260:	40014000 	.word	0x40014000
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800
 800226c:	40001800 	.word	0x40001800
 8002270:	40001c00 	.word	0x40001c00
 8002274:	40002000 	.word	0x40002000

08002278 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e042      	b.n	8002338 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fb02 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2224      	movs	r2, #36	@ 0x24
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f973 	bl	80025d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	@ 0x28
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b20      	cmp	r3, #32
 800235e:	d175      	bne.n	800244c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_UART_Transmit+0x2c>
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e06e      	b.n	800244e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2221      	movs	r2, #33	@ 0x21
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800237e:	f7fe fc0b 	bl	8000b98 <HAL_GetTick>
 8002382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	88fa      	ldrh	r2, [r7, #6]
 8002388:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	88fa      	ldrh	r2, [r7, #6]
 800238e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002398:	d108      	bne.n	80023ac <HAL_UART_Transmit+0x6c>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	e003      	b.n	80023b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023b4:	e02e      	b.n	8002414 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2180      	movs	r1, #128	@ 0x80
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f848 	bl	8002456 <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e03a      	b.n	800244e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10b      	bne.n	80023f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3302      	adds	r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	e007      	b.n	8002406 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	3301      	adds	r3, #1
 8002404:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1cb      	bne.n	80023b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2200      	movs	r2, #0
 8002426:	2140      	movs	r1, #64	@ 0x40
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f814 	bl	8002456 <UART_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002466:	e03b      	b.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800246e:	d037      	beq.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002470:	f7fe fb92 	bl	8000b98 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	6a3a      	ldr	r2, [r7, #32]
 800247c:	429a      	cmp	r2, r3
 800247e:	d302      	bcc.n	8002486 <UART_WaitOnFlagUntilTimeout+0x30>
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e03a      	b.n	8002500 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d023      	beq.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b80      	cmp	r3, #128	@ 0x80
 800249c:	d020      	beq.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b40      	cmp	r3, #64	@ 0x40
 80024a2:	d01d      	beq.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d116      	bne.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f81d 	bl	8002508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2208      	movs	r2, #8
 80024d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e00f      	b.n	8002500 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4013      	ands	r3, r2
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d0b4      	beq.n	8002468 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002508:	b480      	push	{r7}
 800250a:	b095      	sub	sp, #84	@ 0x54
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251a:	e853 3f00 	ldrex	r3, [r3]
 800251e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002522:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	330c      	adds	r3, #12
 800252e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002530:	643a      	str	r2, [r7, #64]	@ 0x40
 8002532:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002534:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002536:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002538:	e841 2300 	strex	r3, r2, [r1]
 800253c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800253e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e5      	bne.n	8002510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3314      	adds	r3, #20
 800254a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	e853 3f00 	ldrex	r3, [r3]
 8002552:	61fb      	str	r3, [r7, #28]
   return(result);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3314      	adds	r3, #20
 8002562:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002564:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002566:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800256a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800256c:	e841 2300 	strex	r3, r2, [r1]
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e5      	bne.n	8002544 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	2b01      	cmp	r3, #1
 800257e:	d119      	bne.n	80025b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	e853 3f00 	ldrex	r3, [r3]
 800258e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f023 0310 	bic.w	r3, r3, #16
 8002596:	647b      	str	r3, [r7, #68]	@ 0x44
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025a0:	61ba      	str	r2, [r7, #24]
 80025a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a4:	6979      	ldr	r1, [r7, #20]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	e841 2300 	strex	r3, r2, [r1]
 80025ac:	613b      	str	r3, [r7, #16]
   return(result);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e5      	bne.n	8002580 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025c2:	bf00      	nop
 80025c4:	3754      	adds	r7, #84	@ 0x54
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d4:	b0c0      	sub	sp, #256	@ 0x100
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ec:	68d9      	ldr	r1, [r3, #12]
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	ea40 0301 	orr.w	r3, r0, r1
 80025f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	431a      	orrs	r2, r3
 8002608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	431a      	orrs	r2, r3
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002628:	f021 010c 	bic.w	r1, r1, #12
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002636:	430b      	orrs	r3, r1
 8002638:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264a:	6999      	ldr	r1, [r3, #24]
 800264c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	ea40 0301 	orr.w	r3, r0, r1
 8002656:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b8f      	ldr	r3, [pc, #572]	@ (800289c <UART_SetConfig+0x2cc>)
 8002660:	429a      	cmp	r2, r3
 8002662:	d005      	beq.n	8002670 <UART_SetConfig+0xa0>
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b8d      	ldr	r3, [pc, #564]	@ (80028a0 <UART_SetConfig+0x2d0>)
 800266c:	429a      	cmp	r2, r3
 800266e:	d104      	bne.n	800267a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002670:	f7fe fe66 	bl	8001340 <HAL_RCC_GetPCLK2Freq>
 8002674:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002678:	e003      	b.n	8002682 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800267a:	f7fe fe4d 	bl	8001318 <HAL_RCC_GetPCLK1Freq>
 800267e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800268c:	f040 810c 	bne.w	80028a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002694:	2200      	movs	r2, #0
 8002696:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800269a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800269e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026a2:	4622      	mov	r2, r4
 80026a4:	462b      	mov	r3, r5
 80026a6:	1891      	adds	r1, r2, r2
 80026a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026aa:	415b      	adcs	r3, r3
 80026ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026b2:	4621      	mov	r1, r4
 80026b4:	eb12 0801 	adds.w	r8, r2, r1
 80026b8:	4629      	mov	r1, r5
 80026ba:	eb43 0901 	adc.w	r9, r3, r1
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d2:	4690      	mov	r8, r2
 80026d4:	4699      	mov	r9, r3
 80026d6:	4623      	mov	r3, r4
 80026d8:	eb18 0303 	adds.w	r3, r8, r3
 80026dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026e0:	462b      	mov	r3, r5
 80026e2:	eb49 0303 	adc.w	r3, r9, r3
 80026e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026fe:	460b      	mov	r3, r1
 8002700:	18db      	adds	r3, r3, r3
 8002702:	653b      	str	r3, [r7, #80]	@ 0x50
 8002704:	4613      	mov	r3, r2
 8002706:	eb42 0303 	adc.w	r3, r2, r3
 800270a:	657b      	str	r3, [r7, #84]	@ 0x54
 800270c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002710:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002714:	f7fd fd84 	bl	8000220 <__aeabi_uldivmod>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4b61      	ldr	r3, [pc, #388]	@ (80028a4 <UART_SetConfig+0x2d4>)
 800271e:	fba3 2302 	umull	r2, r3, r3, r2
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	011c      	lsls	r4, r3, #4
 8002726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800272a:	2200      	movs	r2, #0
 800272c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002730:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002734:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002738:	4642      	mov	r2, r8
 800273a:	464b      	mov	r3, r9
 800273c:	1891      	adds	r1, r2, r2
 800273e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002740:	415b      	adcs	r3, r3
 8002742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002744:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002748:	4641      	mov	r1, r8
 800274a:	eb12 0a01 	adds.w	sl, r2, r1
 800274e:	4649      	mov	r1, r9
 8002750:	eb43 0b01 	adc.w	fp, r3, r1
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002760:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002764:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002768:	4692      	mov	sl, r2
 800276a:	469b      	mov	fp, r3
 800276c:	4643      	mov	r3, r8
 800276e:	eb1a 0303 	adds.w	r3, sl, r3
 8002772:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002776:	464b      	mov	r3, r9
 8002778:	eb4b 0303 	adc.w	r3, fp, r3
 800277c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800278c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002790:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002794:	460b      	mov	r3, r1
 8002796:	18db      	adds	r3, r3, r3
 8002798:	643b      	str	r3, [r7, #64]	@ 0x40
 800279a:	4613      	mov	r3, r2
 800279c:	eb42 0303 	adc.w	r3, r2, r3
 80027a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80027a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027aa:	f7fd fd39 	bl	8000220 <__aeabi_uldivmod>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4611      	mov	r1, r2
 80027b4:	4b3b      	ldr	r3, [pc, #236]	@ (80028a4 <UART_SetConfig+0x2d4>)
 80027b6:	fba3 2301 	umull	r2, r3, r3, r1
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2264      	movs	r2, #100	@ 0x64
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	1acb      	subs	r3, r1, r3
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027ca:	4b36      	ldr	r3, [pc, #216]	@ (80028a4 <UART_SetConfig+0x2d4>)
 80027cc:	fba3 2302 	umull	r2, r3, r3, r2
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027d8:	441c      	add	r4, r3
 80027da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027de:	2200      	movs	r2, #0
 80027e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027ec:	4642      	mov	r2, r8
 80027ee:	464b      	mov	r3, r9
 80027f0:	1891      	adds	r1, r2, r2
 80027f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027f4:	415b      	adcs	r3, r3
 80027f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027fc:	4641      	mov	r1, r8
 80027fe:	1851      	adds	r1, r2, r1
 8002800:	6339      	str	r1, [r7, #48]	@ 0x30
 8002802:	4649      	mov	r1, r9
 8002804:	414b      	adcs	r3, r1
 8002806:	637b      	str	r3, [r7, #52]	@ 0x34
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002814:	4659      	mov	r1, fp
 8002816:	00cb      	lsls	r3, r1, #3
 8002818:	4651      	mov	r1, sl
 800281a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800281e:	4651      	mov	r1, sl
 8002820:	00ca      	lsls	r2, r1, #3
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	4603      	mov	r3, r0
 8002828:	4642      	mov	r2, r8
 800282a:	189b      	adds	r3, r3, r2
 800282c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002830:	464b      	mov	r3, r9
 8002832:	460a      	mov	r2, r1
 8002834:	eb42 0303 	adc.w	r3, r2, r3
 8002838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002848:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800284c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002850:	460b      	mov	r3, r1
 8002852:	18db      	adds	r3, r3, r3
 8002854:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002856:	4613      	mov	r3, r2
 8002858:	eb42 0303 	adc.w	r3, r2, r3
 800285c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800285e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002862:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002866:	f7fd fcdb 	bl	8000220 <__aeabi_uldivmod>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <UART_SetConfig+0x2d4>)
 8002870:	fba3 1302 	umull	r1, r3, r3, r2
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	2164      	movs	r1, #100	@ 0x64
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	3332      	adds	r3, #50	@ 0x32
 8002882:	4a08      	ldr	r2, [pc, #32]	@ (80028a4 <UART_SetConfig+0x2d4>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	f003 0207 	and.w	r2, r3, #7
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4422      	add	r2, r4
 8002896:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002898:	e106      	b.n	8002aa8 <UART_SetConfig+0x4d8>
 800289a:	bf00      	nop
 800289c:	40011000 	.word	0x40011000
 80028a0:	40011400 	.word	0x40011400
 80028a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ac:	2200      	movs	r2, #0
 80028ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028ba:	4642      	mov	r2, r8
 80028bc:	464b      	mov	r3, r9
 80028be:	1891      	adds	r1, r2, r2
 80028c0:	6239      	str	r1, [r7, #32]
 80028c2:	415b      	adcs	r3, r3
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028ca:	4641      	mov	r1, r8
 80028cc:	1854      	adds	r4, r2, r1
 80028ce:	4649      	mov	r1, r9
 80028d0:	eb43 0501 	adc.w	r5, r3, r1
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	00eb      	lsls	r3, r5, #3
 80028de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028e2:	00e2      	lsls	r2, r4, #3
 80028e4:	4614      	mov	r4, r2
 80028e6:	461d      	mov	r5, r3
 80028e8:	4643      	mov	r3, r8
 80028ea:	18e3      	adds	r3, r4, r3
 80028ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028f0:	464b      	mov	r3, r9
 80028f2:	eb45 0303 	adc.w	r3, r5, r3
 80028f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002906:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002916:	4629      	mov	r1, r5
 8002918:	008b      	lsls	r3, r1, #2
 800291a:	4621      	mov	r1, r4
 800291c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002920:	4621      	mov	r1, r4
 8002922:	008a      	lsls	r2, r1, #2
 8002924:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002928:	f7fd fc7a 	bl	8000220 <__aeabi_uldivmod>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4b60      	ldr	r3, [pc, #384]	@ (8002ab4 <UART_SetConfig+0x4e4>)
 8002932:	fba3 2302 	umull	r2, r3, r3, r2
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	011c      	lsls	r4, r3, #4
 800293a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800293e:	2200      	movs	r2, #0
 8002940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002944:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002948:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800294c:	4642      	mov	r2, r8
 800294e:	464b      	mov	r3, r9
 8002950:	1891      	adds	r1, r2, r2
 8002952:	61b9      	str	r1, [r7, #24]
 8002954:	415b      	adcs	r3, r3
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800295c:	4641      	mov	r1, r8
 800295e:	1851      	adds	r1, r2, r1
 8002960:	6139      	str	r1, [r7, #16]
 8002962:	4649      	mov	r1, r9
 8002964:	414b      	adcs	r3, r1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002974:	4659      	mov	r1, fp
 8002976:	00cb      	lsls	r3, r1, #3
 8002978:	4651      	mov	r1, sl
 800297a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800297e:	4651      	mov	r1, sl
 8002980:	00ca      	lsls	r2, r1, #3
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	4603      	mov	r3, r0
 8002988:	4642      	mov	r2, r8
 800298a:	189b      	adds	r3, r3, r2
 800298c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002990:	464b      	mov	r3, r9
 8002992:	460a      	mov	r2, r1
 8002994:	eb42 0303 	adc.w	r3, r2, r3
 8002998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029b4:	4649      	mov	r1, r9
 80029b6:	008b      	lsls	r3, r1, #2
 80029b8:	4641      	mov	r1, r8
 80029ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029be:	4641      	mov	r1, r8
 80029c0:	008a      	lsls	r2, r1, #2
 80029c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029c6:	f7fd fc2b 	bl	8000220 <__aeabi_uldivmod>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	4b38      	ldr	r3, [pc, #224]	@ (8002ab4 <UART_SetConfig+0x4e4>)
 80029d2:	fba3 2301 	umull	r2, r3, r3, r1
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2264      	movs	r2, #100	@ 0x64
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	1acb      	subs	r3, r1, r3
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	3332      	adds	r3, #50	@ 0x32
 80029e4:	4a33      	ldr	r2, [pc, #204]	@ (8002ab4 <UART_SetConfig+0x4e4>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029f0:	441c      	add	r4, r3
 80029f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029f6:	2200      	movs	r2, #0
 80029f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80029fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80029fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a00:	4642      	mov	r2, r8
 8002a02:	464b      	mov	r3, r9
 8002a04:	1891      	adds	r1, r2, r2
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	415b      	adcs	r3, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a10:	4641      	mov	r1, r8
 8002a12:	1851      	adds	r1, r2, r1
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	4649      	mov	r1, r9
 8002a18:	414b      	adcs	r3, r1
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a28:	4659      	mov	r1, fp
 8002a2a:	00cb      	lsls	r3, r1, #3
 8002a2c:	4651      	mov	r1, sl
 8002a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a32:	4651      	mov	r1, sl
 8002a34:	00ca      	lsls	r2, r1, #3
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	189b      	adds	r3, r3, r2
 8002a40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a42:	464b      	mov	r3, r9
 8002a44:	460a      	mov	r2, r1
 8002a46:	eb42 0303 	adc.w	r3, r2, r3
 8002a4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a56:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a64:	4649      	mov	r1, r9
 8002a66:	008b      	lsls	r3, r1, #2
 8002a68:	4641      	mov	r1, r8
 8002a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a6e:	4641      	mov	r1, r8
 8002a70:	008a      	lsls	r2, r1, #2
 8002a72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a76:	f7fd fbd3 	bl	8000220 <__aeabi_uldivmod>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <UART_SetConfig+0x4e4>)
 8002a80:	fba3 1302 	umull	r1, r3, r3, r2
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	2164      	movs	r1, #100	@ 0x64
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	3332      	adds	r3, #50	@ 0x32
 8002a92:	4a08      	ldr	r2, [pc, #32]	@ (8002ab4 <UART_SetConfig+0x4e4>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4422      	add	r2, r4
 8002aa6:	609a      	str	r2, [r3, #8]
}
 8002aa8:	bf00      	nop
 8002aaa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab4:	51eb851f 	.word	0x51eb851f

08002ab8 <__NVIC_SetPriority>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	@ (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	@ (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <SysTick_Handler+0x1c>)
 8002b12:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002b14:	f002 f996 	bl	8004e44 <xTaskGetSchedulerState>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002b1e:	f003 f88b 	bl	8005c38 <xPortSysTickHandler>
  }
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	e000e010 	.word	0xe000e010

08002b2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002b30:	2100      	movs	r1, #0
 8002b32:	f06f 0004 	mvn.w	r0, #4
 8002b36:	f7ff ffbf 	bl	8002ab8 <__NVIC_SetPriority>
#endif
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b46:	f3ef 8305 	mrs	r3, IPSR
 8002b4a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b52:	f06f 0305 	mvn.w	r3, #5
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	e00c      	b.n	8002b74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <osKernelInitialize+0x44>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b62:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <osKernelInitialize+0x44>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	e002      	b.n	8002b74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b74:	687b      	ldr	r3, [r7, #4]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	2000011c 	.word	0x2000011c

08002b88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b8e:	f3ef 8305 	mrs	r3, IPSR
 8002b92:	603b      	str	r3, [r7, #0]
  return(result);
 8002b94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b9a:	f06f 0305 	mvn.w	r3, #5
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	e010      	b.n	8002bc4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <osKernelStart+0x48>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d109      	bne.n	8002bbe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002baa:	f7ff ffbf 	bl	8002b2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002bae:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <osKernelStart+0x48>)
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002bb4:	f001 fce2 	bl	800457c <vTaskStartScheduler>
      stat = osOK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	e002      	b.n	8002bc4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bc4:	687b      	ldr	r3, [r7, #4]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	2000011c 	.word	0x2000011c

08002bd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	@ 0x38
 8002bd8:	af04      	add	r7, sp, #16
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002be4:	f3ef 8305 	mrs	r3, IPSR
 8002be8:	617b      	str	r3, [r7, #20]
  return(result);
 8002bea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d17e      	bne.n	8002cee <osThreadNew+0x11a>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d07b      	beq.n	8002cee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002bfa:	2318      	movs	r3, #24
 8002bfc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d045      	beq.n	8002c9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <osThreadNew+0x48>
        name = attr->name;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <osThreadNew+0x6e>
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b38      	cmp	r3, #56	@ 0x38
 8002c34:	d805      	bhi.n	8002c42 <osThreadNew+0x6e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <osThreadNew+0x72>
        return (NULL);
 8002c42:	2300      	movs	r3, #0
 8002c44:	e054      	b.n	8002cf0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00e      	beq.n	8002c7c <osThreadNew+0xa8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2ba7      	cmp	r3, #167	@ 0xa7
 8002c64:	d90a      	bls.n	8002c7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <osThreadNew+0xa8>
        mem = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	e010      	b.n	8002c9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10c      	bne.n	8002c9e <osThreadNew+0xca>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d108      	bne.n	8002c9e <osThreadNew+0xca>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <osThreadNew+0xca>
          mem = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	e001      	b.n	8002c9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d110      	bne.n	8002cc6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cac:	9202      	str	r2, [sp, #8]
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6a3a      	ldr	r2, [r7, #32]
 8002cb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f001 fa6a 	bl	8004194 <xTaskCreateStatic>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	e013      	b.n	8002cee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d110      	bne.n	8002cee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	f107 0310 	add.w	r3, r7, #16
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f001 fab8 	bl	8004254 <xTaskCreate>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <osThreadNew+0x11a>
            hTask = NULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002cee:	693b      	ldr	r3, [r7, #16]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3728      	adds	r7, #40	@ 0x28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d00:	f3ef 8305 	mrs	r3, IPSR
 8002d04:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <osDelay+0x1c>
    stat = osErrorISR;
 8002d0c:	f06f 0305 	mvn.w	r3, #5
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	e007      	b.n	8002d24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f001 fbf6 	bl	8004510 <vTaskDelay>
    }
  }

  return (stat);
 8002d24:	68fb      	ldr	r3, [r7, #12]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b08a      	sub	sp, #40	@ 0x28
 8002d32:	af02      	add	r7, sp, #8
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d3e:	f3ef 8305 	mrs	r3, IPSR
 8002d42:	613b      	str	r3, [r7, #16]
  return(result);
 8002d44:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d175      	bne.n	8002e36 <osSemaphoreNew+0x108>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d072      	beq.n	8002e36 <osSemaphoreNew+0x108>
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d86e      	bhi.n	8002e36 <osSemaphoreNew+0x108>
    mem = -1;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d015      	beq.n	8002d90 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <osSemaphoreNew+0x4c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b4f      	cmp	r3, #79	@ 0x4f
 8002d72:	d902      	bls.n	8002d7a <osSemaphoreNew+0x4c>
        mem = 1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	e00c      	b.n	8002d94 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <osSemaphoreNew+0x66>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <osSemaphoreNew+0x66>
          mem = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	e001      	b.n	8002d94 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d9a:	d04c      	beq.n	8002e36 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d128      	bne.n	8002df4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d10a      	bne.n	8002dbe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2203      	movs	r2, #3
 8002dae:	9200      	str	r2, [sp, #0]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2100      	movs	r1, #0
 8002db4:	2001      	movs	r0, #1
 8002db6:	f000 fa2b 	bl	8003210 <xQueueGenericCreateStatic>
 8002dba:	61f8      	str	r0, [r7, #28]
 8002dbc:	e005      	b.n	8002dca <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f000 faa1 	bl	800330a <xQueueGenericCreate>
 8002dc8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d022      	beq.n	8002e16 <osSemaphoreNew+0xe8>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01f      	beq.n	8002e16 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	69f8      	ldr	r0, [r7, #28]
 8002dde:	f000 fb61 	bl	80034a4 <xQueueGenericSend>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d016      	beq.n	8002e16 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002de8:	69f8      	ldr	r0, [r7, #28]
 8002dea:	f000 ffff 	bl	8003dec <vQueueDelete>
            hSemaphore = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e010      	b.n	8002e16 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d108      	bne.n	8002e0c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fadf 	bl	80033c6 <xQueueCreateCountingSemaphoreStatic>
 8002e08:	61f8      	str	r0, [r7, #28]
 8002e0a:	e004      	b.n	8002e16 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fb12 	bl	8003438 <xQueueCreateCountingSemaphore>
 8002e14:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00c      	beq.n	8002e36 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <osSemaphoreNew+0xfc>
          name = attr->name;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	e001      	b.n	8002e2e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002e2e:	6979      	ldr	r1, [r7, #20]
 8002e30:	69f8      	ldr	r0, [r7, #28]
 8002e32:	f001 f927 	bl	8004084 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002e36:	69fb      	ldr	r3, [r7, #28]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d103      	bne.n	8002e60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002e58:	f06f 0303 	mvn.w	r3, #3
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e039      	b.n	8002ed4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e60:	f3ef 8305 	mrs	r3, IPSR
 8002e64:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e66:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d022      	beq.n	8002eb2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002e72:	f06f 0303 	mvn.w	r3, #3
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e02c      	b.n	8002ed4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	461a      	mov	r2, r3
 8002e84:	2100      	movs	r1, #0
 8002e86:	6938      	ldr	r0, [r7, #16]
 8002e88:	f000 ff2e 	bl	8003ce8 <xQueueReceiveFromISR>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d003      	beq.n	8002e9a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002e92:	f06f 0302 	mvn.w	r3, #2
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e01c      	b.n	8002ed4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d019      	beq.n	8002ed4 <osSemaphoreAcquire+0x94>
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <osSemaphoreAcquire+0xa0>)
 8002ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	e010      	b.n	8002ed4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002eb2:	6839      	ldr	r1, [r7, #0]
 8002eb4:	6938      	ldr	r0, [r7, #16]
 8002eb6:	f000 fe07 	bl	8003ac8 <xQueueSemaphoreTake>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d009      	beq.n	8002ed4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002ec6:	f06f 0301 	mvn.w	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	e002      	b.n	8002ed4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002ece:	f06f 0302 	mvn.w	r3, #2
 8002ed2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002ed4:	697b      	ldr	r3, [r7, #20]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002efa:	f06f 0303 	mvn.w	r3, #3
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e02c      	b.n	8002f5c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f02:	f3ef 8305 	mrs	r3, IPSR
 8002f06:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f08:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01a      	beq.n	8002f44 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	4619      	mov	r1, r3
 8002f18:	6938      	ldr	r0, [r7, #16]
 8002f1a:	f000 fc63 	bl	80037e4 <xQueueGiveFromISR>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d003      	beq.n	8002f2c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002f24:	f06f 0302 	mvn.w	r3, #2
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e017      	b.n	8002f5c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d014      	beq.n	8002f5c <osSemaphoreRelease+0x78>
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <osSemaphoreRelease+0x84>)
 8002f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	e00b      	b.n	8002f5c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002f44:	2300      	movs	r3, #0
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	6938      	ldr	r0, [r7, #16]
 8002f4c:	f000 faaa 	bl	80034a4 <xQueueGenericSend>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d002      	beq.n	8002f5c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002f56:	f06f 0302 	mvn.w	r3, #2
 8002f5a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002f5c:	697b      	ldr	r3, [r7, #20]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a07      	ldr	r2, [pc, #28]	@ (8002f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4a06      	ldr	r2, [pc, #24]	@ (8002f9c <vApplicationGetIdleTaskMemory+0x30>)
 8002f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2280      	movs	r2, #128	@ 0x80
 8002f88:	601a      	str	r2, [r3, #0]
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000120 	.word	0x20000120
 8002f9c:	200001c8 	.word	0x200001c8

08002fa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4a07      	ldr	r2, [pc, #28]	@ (8002fcc <vApplicationGetTimerTaskMemory+0x2c>)
 8002fb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4a06      	ldr	r2, [pc, #24]	@ (8002fd0 <vApplicationGetTimerTaskMemory+0x30>)
 8002fb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fbe:	601a      	str	r2, [r3, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	200003c8 	.word	0x200003c8
 8002fd0:	20000470 	.word	0x20000470

08002fd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f103 0208 	add.w	r2, r3, #8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f103 0208 	add.w	r2, r3, #8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f103 0208 	add.w	r2, r3, #8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	601a      	str	r2, [r3, #0]
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800308c:	d103      	bne.n	8003096 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e00c      	b.n	80030b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3308      	adds	r3, #8
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	e002      	b.n	80030a4 <vListInsert+0x2e>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d2f6      	bcs.n	800309e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	601a      	str	r2, [r3, #0]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6892      	ldr	r2, [r2, #8]
 80030fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6852      	ldr	r2, [r2, #4]
 8003108:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d103      	bne.n	800311c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	1e5a      	subs	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003168:	f002 fcd6 	bl	8005b18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	68f9      	ldr	r1, [r7, #12]
 8003176:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	441a      	add	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003198:	3b01      	subs	r3, #1
 800319a:	68f9      	ldr	r1, [r7, #12]
 800319c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	441a      	add	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	22ff      	movs	r2, #255	@ 0xff
 80031ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	22ff      	movs	r2, #255	@ 0xff
 80031b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d114      	bne.n	80031e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01a      	beq.n	80031fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3310      	adds	r3, #16
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 fc74 	bl	8004ab8 <xTaskRemoveFromEventList>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d012      	beq.n	80031fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031d6:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <xQueueGenericReset+0xd0>)
 80031d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	e009      	b.n	80031fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3310      	adds	r3, #16
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fef1 	bl	8002fd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3324      	adds	r3, #36	@ 0x24
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff feec 	bl	8002fd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031fc:	f002 fcbe 	bl	8005b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003200:	2301      	movs	r3, #1
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08e      	sub	sp, #56	@ 0x38
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <xQueueGenericCreateStatic+0x56>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <xQueueGenericCreateStatic+0x5a>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <xQueueGenericCreateStatic+0x5c>
 800326a:	2300      	movs	r3, #0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	623b      	str	r3, [r7, #32]
}
 8003282:	bf00      	nop
 8003284:	bf00      	nop
 8003286:	e7fd      	b.n	8003284 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <xQueueGenericCreateStatic+0x84>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <xQueueGenericCreateStatic+0x88>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <xQueueGenericCreateStatic+0x8a>
 8003298:	2300      	movs	r3, #0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10b      	bne.n	80032b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	61fb      	str	r3, [r7, #28]
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	e7fd      	b.n	80032b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032b6:	2350      	movs	r3, #80	@ 0x50
 80032b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b50      	cmp	r3, #80	@ 0x50
 80032be:	d00b      	beq.n	80032d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	61bb      	str	r3, [r7, #24]
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80032de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00d      	beq.n	8003300 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80032f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f840 	bl	8003380 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003302:	4618      	mov	r0, r3
 8003304:	3730      	adds	r7, #48	@ 0x30
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800330a:	b580      	push	{r7, lr}
 800330c:	b08a      	sub	sp, #40	@ 0x28
 800330e:	af02      	add	r7, sp, #8
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <xQueueGenericCreate+0x2c>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	613b      	str	r3, [r7, #16]
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	e7fd      	b.n	8003332 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3350      	adds	r3, #80	@ 0x50
 8003344:	4618      	mov	r0, r3
 8003346:	f002 fd09 	bl	8005d5c <pvPortMalloc>
 800334a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d011      	beq.n	8003376 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3350      	adds	r3, #80	@ 0x50
 800335a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003364:	79fa      	ldrb	r2, [r7, #7]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f805 	bl	8003380 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003376:	69bb      	ldr	r3, [r7, #24]
	}
 8003378:	4618      	mov	r0, r3
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e002      	b.n	80033a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033ae:	2101      	movs	r1, #1
 80033b0:	69b8      	ldr	r0, [r7, #24]
 80033b2:	f7ff fec3 	bl	800313c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08a      	sub	sp, #40	@ 0x28
 80033ca:	af02      	add	r7, sp, #8
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61bb      	str	r3, [r7, #24]
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d90b      	bls.n	8003410 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	617b      	str	r3, [r7, #20]
}
 800340a:	bf00      	nop
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003410:	2302      	movs	r3, #2
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff fef8 	bl	8003210 <xQueueGenericCreateStatic>
 8003420:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800342e:	69fb      	ldr	r3, [r7, #28]
	}
 8003430:	4618      	mov	r0, r3
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	613b      	str	r3, [r7, #16]
}
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	d90b      	bls.n	8003480 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60fb      	str	r3, [r7, #12]
}
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003480:	2202      	movs	r2, #2
 8003482:	2100      	movs	r1, #0
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff40 	bl	800330a <xQueueGenericCreate>
 800348a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003498:	697b      	ldr	r3, [r7, #20]
	}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08e      	sub	sp, #56	@ 0x38
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034b2:	2300      	movs	r3, #0
 80034b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <xQueueGenericSend+0x34>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <xQueueGenericSend+0x42>
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <xQueueGenericSend+0x46>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <xQueueGenericSend+0x48>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <xQueueGenericSend+0x64>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d103      	bne.n	8003516 <xQueueGenericSend+0x72>
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <xQueueGenericSend+0x76>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <xQueueGenericSend+0x78>
 800351a:	2300      	movs	r3, #0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <xQueueGenericSend+0x94>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	623b      	str	r3, [r7, #32]
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003538:	f001 fc84 	bl	8004e44 <xTaskGetSchedulerState>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <xQueueGenericSend+0xa4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <xQueueGenericSend+0xa8>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <xQueueGenericSend+0xaa>
 800354c:	2300      	movs	r3, #0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <xQueueGenericSend+0xc6>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	61fb      	str	r3, [r7, #28]
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800356a:	f002 fad5 	bl	8005b18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <xQueueGenericSend+0xdc>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d129      	bne.n	80035d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003586:	f000 fc6d 	bl	8003e64 <prvCopyDataToQueue>
 800358a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d010      	beq.n	80035b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	3324      	adds	r3, #36	@ 0x24
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fa8d 	bl	8004ab8 <xTaskRemoveFromEventList>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035a4:	4b3f      	ldr	r3, [pc, #252]	@ (80036a4 <xQueueGenericSend+0x200>)
 80035a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	e00a      	b.n	80035cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035bc:	4b39      	ldr	r3, [pc, #228]	@ (80036a4 <xQueueGenericSend+0x200>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035cc:	f002 fad6 	bl	8005b7c <vPortExitCritical>
				return pdPASS;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e063      	b.n	800369c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035da:	f002 facf 	bl	8005b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	e05c      	b.n	800369c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fac7 	bl	8004b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035f6:	f002 fac1 	bl	8005b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035fa:	f001 f82f 	bl	800465c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035fe:	f002 fa8b 	bl	8005b18 <vPortEnterCritical>
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003608:	b25b      	sxtb	r3, r3
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800360e:	d103      	bne.n	8003618 <xQueueGenericSend+0x174>
 8003610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800361e:	b25b      	sxtb	r3, r3
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003624:	d103      	bne.n	800362e <xQueueGenericSend+0x18a>
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800362e:	f002 faa5 	bl	8005b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003632:	1d3a      	adds	r2, r7, #4
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fab6 	bl	8004bac <xTaskCheckForTimeOut>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d124      	bne.n	8003690 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003646:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003648:	f000 fd04 	bl	8004054 <prvIsQueueFull>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d018      	beq.n	8003684 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	3310      	adds	r3, #16
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f001 f9da 	bl	8004a14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003662:	f000 fc8f 	bl	8003f84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003666:	f001 f807 	bl	8004678 <xTaskResumeAll>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	f47f af7c 	bne.w	800356a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003672:	4b0c      	ldr	r3, [pc, #48]	@ (80036a4 <xQueueGenericSend+0x200>)
 8003674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	e772      	b.n	800356a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003684:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003686:	f000 fc7d 	bl	8003f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800368a:	f000 fff5 	bl	8004678 <xTaskResumeAll>
 800368e:	e76c      	b.n	800356a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003692:	f000 fc77 	bl	8003f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003696:	f000 ffef 	bl	8004678 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800369a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800369c:	4618      	mov	r0, r3
 800369e:	3738      	adds	r7, #56	@ 0x38
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b090      	sub	sp, #64	@ 0x40
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80036ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <xQueueGenericSendFromISR+0x3e>
 80036de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <xQueueGenericSendFromISR+0x42>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <xQueueGenericSendFromISR+0x44>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d103      	bne.n	8003716 <xQueueGenericSendFromISR+0x6e>
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <xQueueGenericSendFromISR+0x72>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericSendFromISR+0x74>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	623b      	str	r3, [r7, #32]
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003738:	f002 face 	bl	8005cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800373c:	f3ef 8211 	mrs	r2, BASEPRI
 8003740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	61fa      	str	r2, [r7, #28]
 8003752:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003754:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003756:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <xQueueGenericSendFromISR+0xc2>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d12f      	bne.n	80037ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003770:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003778:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003780:	f000 fb70 	bl	8003e64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003784:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800378c:	d112      	bne.n	80037b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003798:	3324      	adds	r3, #36	@ 0x24
 800379a:	4618      	mov	r0, r3
 800379c:	f001 f98c 	bl	8004ab8 <xTaskRemoveFromEventList>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00e      	beq.n	80037c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e007      	b.n	80037c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037b8:	3301      	adds	r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	b25a      	sxtb	r2, r3
 80037be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80037c4:	2301      	movs	r3, #1
 80037c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80037c8:	e001      	b.n	80037ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3740      	adds	r7, #64	@ 0x40
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08e      	sub	sp, #56	@ 0x38
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	623b      	str	r3, [r7, #32]
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	61fb      	str	r3, [r7, #28]
}
 800382a:	bf00      	nop
 800382c:	bf00      	nop
 800382e:	e7fd      	b.n	800382c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <xQueueGiveFromISR+0x5c>
 8003838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <xQueueGiveFromISR+0x60>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <xQueueGiveFromISR+0x62>
 8003844:	2300      	movs	r3, #0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	61bb      	str	r3, [r7, #24]
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	e7fd      	b.n	800385e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003862:	f002 fa39 	bl	8005cd8 <vPortValidateInterruptPriority>
	__asm volatile
 8003866:	f3ef 8211 	mrs	r2, BASEPRI
 800386a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	617a      	str	r2, [r7, #20]
 800387c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800387e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800388e:	429a      	cmp	r2, r3
 8003890:	d22b      	bcs.n	80038ea <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003894:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ac:	d112      	bne.n	80038d4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b8:	3324      	adds	r3, #36	@ 0x24
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 f8fc 	bl	8004ab8 <xTaskRemoveFromEventList>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00e      	beq.n	80038e4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2201      	movs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e007      	b.n	80038e4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d8:	3301      	adds	r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	b25a      	sxtb	r2, r3
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80038e4:	2301      	movs	r3, #1
 80038e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e8:	e001      	b.n	80038ee <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f383 8811 	msr	BASEPRI, r3
}
 80038f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3738      	adds	r7, #56	@ 0x38
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	@ 0x30
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <xQueueReceive+0x32>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	623b      	str	r3, [r7, #32]
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d103      	bne.n	8003944 <xQueueReceive+0x40>
 800393c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <xQueueReceive+0x44>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <xQueueReceive+0x46>
 8003948:	2300      	movs	r3, #0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <xQueueReceive+0x62>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	61fb      	str	r3, [r7, #28]
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	e7fd      	b.n	8003962 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003966:	f001 fa6d 	bl	8004e44 <xTaskGetSchedulerState>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <xQueueReceive+0x72>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <xQueueReceive+0x76>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <xQueueReceive+0x78>
 800397a:	2300      	movs	r3, #0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <xQueueReceive+0x94>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	61bb      	str	r3, [r7, #24]
}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003998:	f002 f8be 	bl	8005b18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01f      	beq.n	80039e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039ac:	f000 fac4 	bl	8003f38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	1e5a      	subs	r2, r3, #1
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00f      	beq.n	80039e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	3310      	adds	r3, #16
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f877 	bl	8004ab8 <xTaskRemoveFromEventList>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039d0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ac4 <xQueueReceive+0x1c0>)
 80039d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039e0:	f002 f8cc 	bl	8005b7c <vPortExitCritical>
				return pdPASS;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e069      	b.n	8003abc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ee:	f002 f8c5 	bl	8005b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e062      	b.n	8003abc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039fc:	f107 0310 	add.w	r3, r7, #16
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 f8bd 	bl	8004b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a0a:	f002 f8b7 	bl	8005b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a0e:	f000 fe25 	bl	800465c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a12:	f002 f881 	bl	8005b18 <vPortEnterCritical>
 8003a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a1c:	b25b      	sxtb	r3, r3
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a22:	d103      	bne.n	8003a2c <xQueueReceive+0x128>
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a38:	d103      	bne.n	8003a42 <xQueueReceive+0x13e>
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a42:	f002 f89b 	bl	8005b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a46:	1d3a      	adds	r2, r7, #4
 8003a48:	f107 0310 	add.w	r3, r7, #16
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 f8ac 	bl	8004bac <xTaskCheckForTimeOut>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d123      	bne.n	8003aa2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a5c:	f000 fae4 	bl	8004028 <prvIsQueueEmpty>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d017      	beq.n	8003a96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a68:	3324      	adds	r3, #36	@ 0x24
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 ffd0 	bl	8004a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a76:	f000 fa85 	bl	8003f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a7a:	f000 fdfd 	bl	8004678 <xTaskResumeAll>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d189      	bne.n	8003998 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003a84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <xQueueReceive+0x1c0>)
 8003a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	e780      	b.n	8003998 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a98:	f000 fa74 	bl	8003f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a9c:	f000 fdec 	bl	8004678 <xTaskResumeAll>
 8003aa0:	e77a      	b.n	8003998 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003aa4:	f000 fa6e 	bl	8003f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aa8:	f000 fde6 	bl	8004678 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003aae:	f000 fabb 	bl	8004028 <prvIsQueueEmpty>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f43f af6f 	beq.w	8003998 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003aba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3730      	adds	r7, #48	@ 0x30
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	e000ed04 	.word	0xe000ed04

08003ac8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08e      	sub	sp, #56	@ 0x38
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	623b      	str	r3, [r7, #32]
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00b      	beq.n	8003b1c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	61fb      	str	r3, [r7, #28]
}
 8003b16:	bf00      	nop
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b1c:	f001 f992 	bl	8004e44 <xTaskGetSchedulerState>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <xQueueSemaphoreTake+0x64>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <xQueueSemaphoreTake+0x68>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <xQueueSemaphoreTake+0x6a>
 8003b30:	2300      	movs	r3, #0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10b      	bne.n	8003b4e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	61bb      	str	r3, [r7, #24]
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	e7fd      	b.n	8003b4a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b4e:	f001 ffe3 	bl	8005b18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d024      	beq.n	8003ba8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b64:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b6e:	f001 fae3 	bl	8005138 <pvTaskIncrementMutexHeldCount>
 8003b72:	4602      	mov	r2, r0
 8003b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00f      	beq.n	8003ba0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b82:	3310      	adds	r3, #16
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 ff97 	bl	8004ab8 <xTaskRemoveFromEventList>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b90:	4b54      	ldr	r3, [pc, #336]	@ (8003ce4 <xQueueSemaphoreTake+0x21c>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ba0:	f001 ffec 	bl	8005b7c <vPortExitCritical>
				return pdPASS;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e098      	b.n	8003cda <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d112      	bne.n	8003bd4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	617b      	str	r3, [r7, #20]
}
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003bcc:	f001 ffd6 	bl	8005b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e082      	b.n	8003cda <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 ffce 	bl	8004b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003be8:	f001 ffc8 	bl	8005b7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bec:	f000 fd36 	bl	800465c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bf0:	f001 ff92 	bl	8005b18 <vPortEnterCritical>
 8003bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bfa:	b25b      	sxtb	r3, r3
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c00:	d103      	bne.n	8003c0a <xQueueSemaphoreTake+0x142>
 8003c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c16:	d103      	bne.n	8003c20 <xQueueSemaphoreTake+0x158>
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c20:	f001 ffac 	bl	8005b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c24:	463a      	mov	r2, r7
 8003c26:	f107 030c 	add.w	r3, r7, #12
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 ffbd 	bl	8004bac <xTaskCheckForTimeOut>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d132      	bne.n	8003c9e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c3a:	f000 f9f5 	bl	8004028 <prvIsQueueEmpty>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d026      	beq.n	8003c92 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003c4c:	f001 ff64 	bl	8005b18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f001 f913 	bl	8004e80 <xTaskPriorityInherit>
 8003c5a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003c5c:	f001 ff8e 	bl	8005b7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c62:	3324      	adds	r3, #36	@ 0x24
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fed3 	bl	8004a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c70:	f000 f988 	bl	8003f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c74:	f000 fd00 	bl	8004678 <xTaskResumeAll>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f47f af67 	bne.w	8003b4e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003c80:	4b18      	ldr	r3, [pc, #96]	@ (8003ce4 <xQueueSemaphoreTake+0x21c>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	e75d      	b.n	8003b4e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003c92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c94:	f000 f976 	bl	8003f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c98:	f000 fcee 	bl	8004678 <xTaskResumeAll>
 8003c9c:	e757      	b.n	8003b4e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003c9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ca0:	f000 f970 	bl	8003f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ca4:	f000 fce8 	bl	8004678 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ca8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003caa:	f000 f9bd 	bl	8004028 <prvIsQueueEmpty>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f43f af4c 	beq.w	8003b4e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00d      	beq.n	8003cd8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003cbc:	f001 ff2c 	bl	8005b18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003cc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003cc2:	f000 f8b7 	bl	8003e34 <prvGetDisinheritPriorityAfterTimeout>
 8003cc6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 f9ae 	bl	8005030 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003cd4:	f001 ff52 	bl	8005b7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3738      	adds	r7, #56	@ 0x38
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08e      	sub	sp, #56	@ 0x38
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	623b      	str	r3, [r7, #32]
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	e7fd      	b.n	8003d12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <xQueueReceiveFromISR+0x3c>
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <xQueueReceiveFromISR+0x40>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <xQueueReceiveFromISR+0x42>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	61fb      	str	r3, [r7, #28]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d46:	f001 ffc7 	bl	8005cd8 <vPortValidateInterruptPriority>
	__asm volatile
 8003d4a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	61ba      	str	r2, [r7, #24]
 8003d60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003d62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d02f      	beq.n	8003dd2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d80:	f000 f8da 	bl	8003f38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d86:	1e5a      	subs	r2, r3, #1
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003d8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d94:	d112      	bne.n	8003dbc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	3310      	adds	r3, #16
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fe88 	bl	8004ab8 <xTaskRemoveFromEventList>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e007      	b.n	8003dcc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	b25a      	sxtb	r2, r3
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd0:	e001      	b.n	8003dd6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f383 8811 	msr	BASEPRI, r3
}
 8003de0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3738      	adds	r7, #56	@ 0x38
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <vQueueDelete+0x2a>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	60bb      	str	r3, [r7, #8]
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	e7fd      	b.n	8003e12 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f95e 	bl	80040d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f002 f866 	bl	8005ef8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d006      	beq.n	8003e52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e001      	b.n	8003e56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e56:	68fb      	ldr	r3, [r7, #12]
	}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d14d      	bne.n	8003f26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 f85e 	bl	8004f50 <xTaskPriorityDisinherit>
 8003e94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	e043      	b.n	8003f26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d119      	bne.n	8003ed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6858      	ldr	r0, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	461a      	mov	r2, r3
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	f002 f9c6 	bl	8006240 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	441a      	add	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d32b      	bcc.n	8003f26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	e026      	b.n	8003f26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68d8      	ldr	r0, [r3, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	f002 f9ac 	bl	8006240 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	425b      	negs	r3, r3
 8003ef2:	441a      	add	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d207      	bcs.n	8003f14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	425b      	negs	r3, r3
 8003f0e:	441a      	add	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d105      	bne.n	8003f26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003f2e:	697b      	ldr	r3, [r7, #20]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d018      	beq.n	8003f7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d303      	bcc.n	8003f6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68d9      	ldr	r1, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	461a      	mov	r2, r3
 8003f76:	6838      	ldr	r0, [r7, #0]
 8003f78:	f002 f962 	bl	8006240 <memcpy>
	}
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f8c:	f001 fdc4 	bl	8005b18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f98:	e011      	b.n	8003fbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d012      	beq.n	8003fc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3324      	adds	r3, #36	@ 0x24
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fd86 	bl	8004ab8 <xTaskRemoveFromEventList>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fb2:	f000 fe5f 	bl	8004c74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	dce9      	bgt.n	8003f9a <prvUnlockQueue+0x16>
 8003fc6:	e000      	b.n	8003fca <prvUnlockQueue+0x46>
					break;
 8003fc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	22ff      	movs	r2, #255	@ 0xff
 8003fce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003fd2:	f001 fdd3 	bl	8005b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fd6:	f001 fd9f 	bl	8005b18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fe2:	e011      	b.n	8004008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d012      	beq.n	8004012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3310      	adds	r3, #16
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fd61 	bl	8004ab8 <xTaskRemoveFromEventList>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ffc:	f000 fe3a 	bl	8004c74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004000:	7bbb      	ldrb	r3, [r7, #14]
 8004002:	3b01      	subs	r3, #1
 8004004:	b2db      	uxtb	r3, r3
 8004006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800400c:	2b00      	cmp	r3, #0
 800400e:	dce9      	bgt.n	8003fe4 <prvUnlockQueue+0x60>
 8004010:	e000      	b.n	8004014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	22ff      	movs	r2, #255	@ 0xff
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800401c:	f001 fdae 	bl	8005b7c <vPortExitCritical>
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004030:	f001 fd72 	bl	8005b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e001      	b.n	8004046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004046:	f001 fd99 	bl	8005b7c <vPortExitCritical>

	return xReturn;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800405c:	f001 fd5c 	bl	8005b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	429a      	cmp	r2, r3
 800406a:	d102      	bne.n	8004072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e001      	b.n	8004076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004076:	f001 fd81 	bl	8005b7c <vPortExitCritical>

	return xReturn;
 800407a:	68fb      	ldr	r3, [r7, #12]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e014      	b.n	80040be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004094:	4a0f      	ldr	r2, [pc, #60]	@ (80040d4 <vQueueAddToRegistry+0x50>)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040a0:	490c      	ldr	r1, [pc, #48]	@ (80040d4 <vQueueAddToRegistry+0x50>)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040aa:	4a0a      	ldr	r2, [pc, #40]	@ (80040d4 <vQueueAddToRegistry+0x50>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040b6:	e006      	b.n	80040c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b07      	cmp	r3, #7
 80040c2:	d9e7      	bls.n	8004094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000870 	.word	0x20000870

080040d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e016      	b.n	8004114 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80040e6:	4a10      	ldr	r2, [pc, #64]	@ (8004128 <vQueueUnregisterQueue+0x50>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10b      	bne.n	800410e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80040f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004128 <vQueueUnregisterQueue+0x50>)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2100      	movs	r1, #0
 80040fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004100:	4a09      	ldr	r2, [pc, #36]	@ (8004128 <vQueueUnregisterQueue+0x50>)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	2200      	movs	r2, #0
 800410a:	605a      	str	r2, [r3, #4]
				break;
 800410c:	e006      	b.n	800411c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3301      	adds	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b07      	cmp	r3, #7
 8004118:	d9e5      	bls.n	80040e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	20000870 	.word	0x20000870

0800412c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800413c:	f001 fcec 	bl	8005b18 <vPortEnterCritical>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004146:	b25b      	sxtb	r3, r3
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800414c:	d103      	bne.n	8004156 <vQueueWaitForMessageRestricted+0x2a>
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800415c:	b25b      	sxtb	r3, r3
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004162:	d103      	bne.n	800416c <vQueueWaitForMessageRestricted+0x40>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800416c:	f001 fd06 	bl	8005b7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	3324      	adds	r3, #36	@ 0x24
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fc6d 	bl	8004a60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004186:	6978      	ldr	r0, [r7, #20]
 8004188:	f7ff fefc 	bl	8003f84 <prvUnlockQueue>
	}
 800418c:	bf00      	nop
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08e      	sub	sp, #56	@ 0x38
 8004198:	af04      	add	r7, sp, #16
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	623b      	str	r3, [r7, #32]
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <xTaskCreateStatic+0x4a>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	61fb      	str	r3, [r7, #28]
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	e7fd      	b.n	80041da <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041de:	23a8      	movs	r3, #168	@ 0xa8
 80041e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2ba8      	cmp	r3, #168	@ 0xa8
 80041e6:	d00b      	beq.n	8004200 <xTaskCreateStatic+0x6c>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	61bb      	str	r3, [r7, #24]
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004200:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01e      	beq.n	8004246 <xTaskCreateStatic+0xb2>
 8004208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01b      	beq.n	8004246 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	2202      	movs	r2, #2
 800421c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004220:	2300      	movs	r3, #0
 8004222:	9303      	str	r3, [sp, #12]
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	f107 0314 	add.w	r3, r7, #20
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f851 	bl	80042e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800423e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004240:	f000 f8f6 	bl	8004430 <prvAddNewTaskToReadyList>
 8004244:	e001      	b.n	800424a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800424a:	697b      	ldr	r3, [r7, #20]
	}
 800424c:	4618      	mov	r0, r3
 800424e:	3728      	adds	r7, #40	@ 0x28
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08c      	sub	sp, #48	@ 0x30
 8004258:	af04      	add	r7, sp, #16
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fd77 	bl	8005d5c <pvPortMalloc>
 800426e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00e      	beq.n	8004294 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004276:	20a8      	movs	r0, #168	@ 0xa8
 8004278:	f001 fd70 	bl	8005d5c <pvPortMalloc>
 800427c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	631a      	str	r2, [r3, #48]	@ 0x30
 800428a:	e005      	b.n	8004298 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800428c:	6978      	ldr	r0, [r7, #20]
 800428e:	f001 fe33 	bl	8005ef8 <vPortFree>
 8004292:	e001      	b.n	8004298 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d017      	beq.n	80042ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	2300      	movs	r3, #0
 80042aa:	9303      	str	r3, [sp, #12]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	9302      	str	r3, [sp, #8]
 80042b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f80f 	bl	80042e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042c2:	69f8      	ldr	r0, [r7, #28]
 80042c4:	f000 f8b4 	bl	8004430 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042c8:	2301      	movs	r3, #1
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e002      	b.n	80042d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042d4:	69bb      	ldr	r3, [r7, #24]
	}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	461a      	mov	r2, r3
 80042f8:	21a5      	movs	r1, #165	@ 0xa5
 80042fa:	f001 ff1d 	bl	8006138 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004308:	3b01      	subs	r3, #1
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f023 0307 	bic.w	r3, r3, #7
 8004316:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	617b      	str	r3, [r7, #20]
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	e7fd      	b.n	8004336 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01f      	beq.n	8004380 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	e012      	b.n	800436c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	4413      	add	r3, r2
 800434c:	7819      	ldrb	r1, [r3, #0]
 800434e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	4413      	add	r3, r2
 8004354:	3334      	adds	r3, #52	@ 0x34
 8004356:	460a      	mov	r2, r1
 8004358:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d006      	beq.n	8004374 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3301      	adds	r3, #1
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b0f      	cmp	r3, #15
 8004370:	d9e9      	bls.n	8004346 <prvInitialiseNewTask+0x66>
 8004372:	e000      	b.n	8004376 <prvInitialiseNewTask+0x96>
			{
				break;
 8004374:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800437e:	e003      	b.n	8004388 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438a:	2b37      	cmp	r3, #55	@ 0x37
 800438c:	d901      	bls.n	8004392 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800438e:	2337      	movs	r3, #55	@ 0x37
 8004390:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004396:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800439c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	2200      	movs	r2, #0
 80043a2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fe33 	bl	8003014 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	3318      	adds	r3, #24
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe fe2e 	bl	8003014 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	3354      	adds	r3, #84	@ 0x54
 80043e2:	224c      	movs	r2, #76	@ 0x4c
 80043e4:	2100      	movs	r1, #0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 fea6 	bl	8006138 <memset>
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	4a0d      	ldr	r2, [pc, #52]	@ (8004424 <prvInitialiseNewTask+0x144>)
 80043f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80043f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004428 <prvInitialiseNewTask+0x148>)
 80043f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	4a0c      	ldr	r2, [pc, #48]	@ (800442c <prvInitialiseNewTask+0x14c>)
 80043fc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	68f9      	ldr	r1, [r7, #12]
 8004402:	69b8      	ldr	r0, [r7, #24]
 8004404:	f001 fa5a 	bl	80058bc <pxPortInitialiseStack>
 8004408:	4602      	mov	r2, r0
 800440a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800440e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004418:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800441a:	bf00      	nop
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20004b04 	.word	0x20004b04
 8004428:	20004b6c 	.word	0x20004b6c
 800442c:	20004bd4 	.word	0x20004bd4

08004430 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004438:	f001 fb6e 	bl	8005b18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800443c:	4b2d      	ldr	r3, [pc, #180]	@ (80044f4 <prvAddNewTaskToReadyList+0xc4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	4a2c      	ldr	r2, [pc, #176]	@ (80044f4 <prvAddNewTaskToReadyList+0xc4>)
 8004444:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004446:	4b2c      	ldr	r3, [pc, #176]	@ (80044f8 <prvAddNewTaskToReadyList+0xc8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800444e:	4a2a      	ldr	r2, [pc, #168]	@ (80044f8 <prvAddNewTaskToReadyList+0xc8>)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004454:	4b27      	ldr	r3, [pc, #156]	@ (80044f4 <prvAddNewTaskToReadyList+0xc4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d110      	bne.n	800447e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800445c:	f000 fc2e 	bl	8004cbc <prvInitialiseTaskLists>
 8004460:	e00d      	b.n	800447e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004462:	4b26      	ldr	r3, [pc, #152]	@ (80044fc <prvAddNewTaskToReadyList+0xcc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800446a:	4b23      	ldr	r3, [pc, #140]	@ (80044f8 <prvAddNewTaskToReadyList+0xc8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	429a      	cmp	r2, r3
 8004476:	d802      	bhi.n	800447e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004478:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <prvAddNewTaskToReadyList+0xc8>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800447e:	4b20      	ldr	r3, [pc, #128]	@ (8004500 <prvAddNewTaskToReadyList+0xd0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <prvAddNewTaskToReadyList+0xd0>)
 8004486:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004488:	4b1d      	ldr	r3, [pc, #116]	@ (8004500 <prvAddNewTaskToReadyList+0xd0>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004494:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <prvAddNewTaskToReadyList+0xd4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d903      	bls.n	80044a4 <prvAddNewTaskToReadyList+0x74>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a0:	4a18      	ldr	r2, [pc, #96]	@ (8004504 <prvAddNewTaskToReadyList+0xd4>)
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4a15      	ldr	r2, [pc, #84]	@ (8004508 <prvAddNewTaskToReadyList+0xd8>)
 80044b2:	441a      	add	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f7fe fdb7 	bl	800302e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044c0:	f001 fb5c 	bl	8005b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044c4:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <prvAddNewTaskToReadyList+0xcc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00e      	beq.n	80044ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044cc:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <prvAddNewTaskToReadyList+0xc8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d207      	bcs.n	80044ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044da:	4b0c      	ldr	r3, [pc, #48]	@ (800450c <prvAddNewTaskToReadyList+0xdc>)
 80044dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000d84 	.word	0x20000d84
 80044f8:	200008b0 	.word	0x200008b0
 80044fc:	20000d90 	.word	0x20000d90
 8004500:	20000da0 	.word	0x20000da0
 8004504:	20000d8c 	.word	0x20000d8c
 8004508:	200008b4 	.word	0x200008b4
 800450c:	e000ed04 	.word	0xe000ed04

08004510 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004522:	4b14      	ldr	r3, [pc, #80]	@ (8004574 <vTaskDelay+0x64>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <vTaskDelay+0x32>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	60bb      	str	r3, [r7, #8]
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	e7fd      	b.n	800453e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004542:	f000 f88b 	bl	800465c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004546:	2100      	movs	r1, #0
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fe09 	bl	8005160 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800454e:	f000 f893 	bl	8004678 <xTaskResumeAll>
 8004552:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800455a:	4b07      	ldr	r3, [pc, #28]	@ (8004578 <vTaskDelay+0x68>)
 800455c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000dac 	.word	0x20000dac
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	@ 0x28
 8004580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800458a:	463a      	mov	r2, r7
 800458c:	1d39      	adds	r1, r7, #4
 800458e:	f107 0308 	add.w	r3, r7, #8
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe fcea 	bl	8002f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	9202      	str	r2, [sp, #8]
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	2300      	movs	r3, #0
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2300      	movs	r3, #0
 80045a8:	460a      	mov	r2, r1
 80045aa:	4924      	ldr	r1, [pc, #144]	@ (800463c <vTaskStartScheduler+0xc0>)
 80045ac:	4824      	ldr	r0, [pc, #144]	@ (8004640 <vTaskStartScheduler+0xc4>)
 80045ae:	f7ff fdf1 	bl	8004194 <xTaskCreateStatic>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4a23      	ldr	r2, [pc, #140]	@ (8004644 <vTaskStartScheduler+0xc8>)
 80045b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045b8:	4b22      	ldr	r3, [pc, #136]	@ (8004644 <vTaskStartScheduler+0xc8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045c0:	2301      	movs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e001      	b.n	80045ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d102      	bne.n	80045d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045d0:	f000 fe1a 	bl	8005208 <xTimerCreateTimerTask>
 80045d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d11b      	bne.n	8004614 <vTaskStartScheduler+0x98>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	613b      	str	r3, [r7, #16]
}
 80045ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045f0:	4b15      	ldr	r3, [pc, #84]	@ (8004648 <vTaskStartScheduler+0xcc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3354      	adds	r3, #84	@ 0x54
 80045f6:	4a15      	ldr	r2, [pc, #84]	@ (800464c <vTaskStartScheduler+0xd0>)
 80045f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045fa:	4b15      	ldr	r3, [pc, #84]	@ (8004650 <vTaskStartScheduler+0xd4>)
 80045fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004600:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004602:	4b14      	ldr	r3, [pc, #80]	@ (8004654 <vTaskStartScheduler+0xd8>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004608:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <vTaskStartScheduler+0xdc>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800460e:	f001 f9df 	bl	80059d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004612:	e00f      	b.n	8004634 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800461a:	d10b      	bne.n	8004634 <vTaskStartScheduler+0xb8>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60fb      	str	r3, [r7, #12]
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	e7fd      	b.n	8004630 <vTaskStartScheduler+0xb4>
}
 8004634:	bf00      	nop
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	08006380 	.word	0x08006380
 8004640:	08004c8d 	.word	0x08004c8d
 8004644:	20000da8 	.word	0x20000da8
 8004648:	200008b0 	.word	0x200008b0
 800464c:	20000010 	.word	0x20000010
 8004650:	20000da4 	.word	0x20000da4
 8004654:	20000d90 	.word	0x20000d90
 8004658:	20000d88 	.word	0x20000d88

0800465c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004660:	4b04      	ldr	r3, [pc, #16]	@ (8004674 <vTaskSuspendAll+0x18>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	4a03      	ldr	r2, [pc, #12]	@ (8004674 <vTaskSuspendAll+0x18>)
 8004668:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800466a:	bf00      	nop
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	20000dac 	.word	0x20000dac

08004678 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004686:	4b42      	ldr	r3, [pc, #264]	@ (8004790 <xTaskResumeAll+0x118>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	603b      	str	r3, [r7, #0]
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	e7fd      	b.n	80046a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046a6:	f001 fa37 	bl	8005b18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046aa:	4b39      	ldr	r3, [pc, #228]	@ (8004790 <xTaskResumeAll+0x118>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	4a37      	ldr	r2, [pc, #220]	@ (8004790 <xTaskResumeAll+0x118>)
 80046b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b4:	4b36      	ldr	r3, [pc, #216]	@ (8004790 <xTaskResumeAll+0x118>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d162      	bne.n	8004782 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046bc:	4b35      	ldr	r3, [pc, #212]	@ (8004794 <xTaskResumeAll+0x11c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d05e      	beq.n	8004782 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046c4:	e02f      	b.n	8004726 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c6:	4b34      	ldr	r3, [pc, #208]	@ (8004798 <xTaskResumeAll+0x120>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3318      	adds	r3, #24
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fd08 	bl	80030e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3304      	adds	r3, #4
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fd03 	bl	80030e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e6:	4b2d      	ldr	r3, [pc, #180]	@ (800479c <xTaskResumeAll+0x124>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d903      	bls.n	80046f6 <xTaskResumeAll+0x7e>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f2:	4a2a      	ldr	r2, [pc, #168]	@ (800479c <xTaskResumeAll+0x124>)
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4a27      	ldr	r2, [pc, #156]	@ (80047a0 <xTaskResumeAll+0x128>)
 8004704:	441a      	add	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f7fe fc8e 	bl	800302e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004716:	4b23      	ldr	r3, [pc, #140]	@ (80047a4 <xTaskResumeAll+0x12c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471c:	429a      	cmp	r2, r3
 800471e:	d302      	bcc.n	8004726 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004720:	4b21      	ldr	r3, [pc, #132]	@ (80047a8 <xTaskResumeAll+0x130>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004726:	4b1c      	ldr	r3, [pc, #112]	@ (8004798 <xTaskResumeAll+0x120>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1cb      	bne.n	80046c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004734:	f000 fb66 	bl	8004e04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004738:	4b1c      	ldr	r3, [pc, #112]	@ (80047ac <xTaskResumeAll+0x134>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d010      	beq.n	8004766 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004744:	f000 f846 	bl	80047d4 <xTaskIncrementTick>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800474e:	4b16      	ldr	r3, [pc, #88]	@ (80047a8 <xTaskResumeAll+0x130>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3b01      	subs	r3, #1
 8004758:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f1      	bne.n	8004744 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004760:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <xTaskResumeAll+0x134>)
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004766:	4b10      	ldr	r3, [pc, #64]	@ (80047a8 <xTaskResumeAll+0x130>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800476e:	2301      	movs	r3, #1
 8004770:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004772:	4b0f      	ldr	r3, [pc, #60]	@ (80047b0 <xTaskResumeAll+0x138>)
 8004774:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004782:	f001 f9fb 	bl	8005b7c <vPortExitCritical>

	return xAlreadyYielded;
 8004786:	68bb      	ldr	r3, [r7, #8]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000dac 	.word	0x20000dac
 8004794:	20000d84 	.word	0x20000d84
 8004798:	20000d44 	.word	0x20000d44
 800479c:	20000d8c 	.word	0x20000d8c
 80047a0:	200008b4 	.word	0x200008b4
 80047a4:	200008b0 	.word	0x200008b0
 80047a8:	20000d98 	.word	0x20000d98
 80047ac:	20000d94 	.word	0x20000d94
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047ba:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <xTaskGetTickCount+0x1c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047c0:	687b      	ldr	r3, [r7, #4]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000d88 	.word	0x20000d88

080047d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047de:	4b4f      	ldr	r3, [pc, #316]	@ (800491c <xTaskIncrementTick+0x148>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 8090 	bne.w	8004908 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047e8:	4b4d      	ldr	r3, [pc, #308]	@ (8004920 <xTaskIncrementTick+0x14c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004920 <xTaskIncrementTick+0x14c>)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d121      	bne.n	8004840 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80047fc:	4b49      	ldr	r3, [pc, #292]	@ (8004924 <xTaskIncrementTick+0x150>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	603b      	str	r3, [r7, #0]
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	e7fd      	b.n	800481a <xTaskIncrementTick+0x46>
 800481e:	4b41      	ldr	r3, [pc, #260]	@ (8004924 <xTaskIncrementTick+0x150>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	4b40      	ldr	r3, [pc, #256]	@ (8004928 <xTaskIncrementTick+0x154>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a3e      	ldr	r2, [pc, #248]	@ (8004924 <xTaskIncrementTick+0x150>)
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4a3e      	ldr	r2, [pc, #248]	@ (8004928 <xTaskIncrementTick+0x154>)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b3e      	ldr	r3, [pc, #248]	@ (800492c <xTaskIncrementTick+0x158>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	4a3c      	ldr	r2, [pc, #240]	@ (800492c <xTaskIncrementTick+0x158>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	f000 fae2 	bl	8004e04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004840:	4b3b      	ldr	r3, [pc, #236]	@ (8004930 <xTaskIncrementTick+0x15c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	429a      	cmp	r2, r3
 8004848:	d349      	bcc.n	80048de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800484a:	4b36      	ldr	r3, [pc, #216]	@ (8004924 <xTaskIncrementTick+0x150>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004854:	4b36      	ldr	r3, [pc, #216]	@ (8004930 <xTaskIncrementTick+0x15c>)
 8004856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800485a:	601a      	str	r2, [r3, #0]
					break;
 800485c:	e03f      	b.n	80048de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485e:	4b31      	ldr	r3, [pc, #196]	@ (8004924 <xTaskIncrementTick+0x150>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d203      	bcs.n	800487e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004876:	4a2e      	ldr	r2, [pc, #184]	@ (8004930 <xTaskIncrementTick+0x15c>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800487c:	e02f      	b.n	80048de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	3304      	adds	r3, #4
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe fc30 	bl	80030e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	3318      	adds	r3, #24
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fc27 	bl	80030e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800489e:	4b25      	ldr	r3, [pc, #148]	@ (8004934 <xTaskIncrementTick+0x160>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d903      	bls.n	80048ae <xTaskIncrementTick+0xda>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	4a22      	ldr	r2, [pc, #136]	@ (8004934 <xTaskIncrementTick+0x160>)
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004938 <xTaskIncrementTick+0x164>)
 80048bc:	441a      	add	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f7fe fbb2 	bl	800302e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ce:	4b1b      	ldr	r3, [pc, #108]	@ (800493c <xTaskIncrementTick+0x168>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d3b8      	bcc.n	800484a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80048d8:	2301      	movs	r3, #1
 80048da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048dc:	e7b5      	b.n	800484a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048de:	4b17      	ldr	r3, [pc, #92]	@ (800493c <xTaskIncrementTick+0x168>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e4:	4914      	ldr	r1, [pc, #80]	@ (8004938 <xTaskIncrementTick+0x164>)
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d901      	bls.n	80048fa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80048f6:	2301      	movs	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048fa:	4b11      	ldr	r3, [pc, #68]	@ (8004940 <xTaskIncrementTick+0x16c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004902:	2301      	movs	r3, #1
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e004      	b.n	8004912 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004908:	4b0e      	ldr	r3, [pc, #56]	@ (8004944 <xTaskIncrementTick+0x170>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	4a0d      	ldr	r2, [pc, #52]	@ (8004944 <xTaskIncrementTick+0x170>)
 8004910:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004912:	697b      	ldr	r3, [r7, #20]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000dac 	.word	0x20000dac
 8004920:	20000d88 	.word	0x20000d88
 8004924:	20000d3c 	.word	0x20000d3c
 8004928:	20000d40 	.word	0x20000d40
 800492c:	20000d9c 	.word	0x20000d9c
 8004930:	20000da4 	.word	0x20000da4
 8004934:	20000d8c 	.word	0x20000d8c
 8004938:	200008b4 	.word	0x200008b4
 800493c:	200008b0 	.word	0x200008b0
 8004940:	20000d98 	.word	0x20000d98
 8004944:	20000d94 	.word	0x20000d94

08004948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800494e:	4b2b      	ldr	r3, [pc, #172]	@ (80049fc <vTaskSwitchContext+0xb4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004956:	4b2a      	ldr	r3, [pc, #168]	@ (8004a00 <vTaskSwitchContext+0xb8>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800495c:	e047      	b.n	80049ee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800495e:	4b28      	ldr	r3, [pc, #160]	@ (8004a00 <vTaskSwitchContext+0xb8>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004964:	4b27      	ldr	r3, [pc, #156]	@ (8004a04 <vTaskSwitchContext+0xbc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e011      	b.n	8004990 <vTaskSwitchContext+0x48>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <vTaskSwitchContext+0x42>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	607b      	str	r3, [r7, #4]
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <vTaskSwitchContext+0x3e>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3b01      	subs	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	491d      	ldr	r1, [pc, #116]	@ (8004a08 <vTaskSwitchContext+0xc0>)
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0e3      	beq.n	800496c <vTaskSwitchContext+0x24>
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4613      	mov	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4a16      	ldr	r2, [pc, #88]	@ (8004a08 <vTaskSwitchContext+0xc0>)
 80049b0:	4413      	add	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	605a      	str	r2, [r3, #4]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3308      	adds	r3, #8
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d104      	bne.n	80049d4 <vTaskSwitchContext+0x8c>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	605a      	str	r2, [r3, #4]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	4a0c      	ldr	r2, [pc, #48]	@ (8004a0c <vTaskSwitchContext+0xc4>)
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4a09      	ldr	r2, [pc, #36]	@ (8004a04 <vTaskSwitchContext+0xbc>)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049e4:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <vTaskSwitchContext+0xc4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3354      	adds	r3, #84	@ 0x54
 80049ea:	4a09      	ldr	r2, [pc, #36]	@ (8004a10 <vTaskSwitchContext+0xc8>)
 80049ec:	6013      	str	r3, [r2, #0]
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000dac 	.word	0x20000dac
 8004a00:	20000d98 	.word	0x20000d98
 8004a04:	20000d8c 	.word	0x20000d8c
 8004a08:	200008b4 	.word	0x200008b4
 8004a0c:	200008b0 	.word	0x200008b0
 8004a10:	20000010 	.word	0x20000010

08004a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10b      	bne.n	8004a3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60fb      	str	r3, [r7, #12]
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a3c:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <vTaskPlaceOnEventList+0x48>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3318      	adds	r3, #24
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fe fb16 	bl	8003076 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	6838      	ldr	r0, [r7, #0]
 8004a4e:	f000 fb87 	bl	8005160 <prvAddCurrentTaskToDelayedList>
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	200008b0 	.word	0x200008b0

08004a60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	617b      	str	r3, [r7, #20]
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	e7fd      	b.n	8004a86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3318      	adds	r3, #24
 8004a90:	4619      	mov	r1, r3
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7fe facb 	bl	800302e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004aa2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	68b8      	ldr	r0, [r7, #8]
 8004aa8:	f000 fb5a 	bl	8005160 <prvAddCurrentTaskToDelayedList>
	}
 8004aac:	bf00      	nop
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	200008b0 	.word	0x200008b0

08004ab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	60fb      	str	r3, [r7, #12]
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	e7fd      	b.n	8004ae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	3318      	adds	r3, #24
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fe fafc 	bl	80030e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b68 <xTaskRemoveFromEventList+0xb0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d11d      	bne.n	8004b34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe faf3 	bl	80030e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b06:	4b19      	ldr	r3, [pc, #100]	@ (8004b6c <xTaskRemoveFromEventList+0xb4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d903      	bls.n	8004b16 <xTaskRemoveFromEventList+0x5e>
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b12:	4a16      	ldr	r2, [pc, #88]	@ (8004b6c <xTaskRemoveFromEventList+0xb4>)
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4a13      	ldr	r2, [pc, #76]	@ (8004b70 <xTaskRemoveFromEventList+0xb8>)
 8004b24:	441a      	add	r2, r3
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f7fe fa7e 	bl	800302e <vListInsertEnd>
 8004b32:	e005      	b.n	8004b40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	3318      	adds	r3, #24
 8004b38:	4619      	mov	r1, r3
 8004b3a:	480e      	ldr	r0, [pc, #56]	@ (8004b74 <xTaskRemoveFromEventList+0xbc>)
 8004b3c:	f7fe fa77 	bl	800302e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b44:	4b0c      	ldr	r3, [pc, #48]	@ (8004b78 <xTaskRemoveFromEventList+0xc0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d905      	bls.n	8004b5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b52:	4b0a      	ldr	r3, [pc, #40]	@ (8004b7c <xTaskRemoveFromEventList+0xc4>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e001      	b.n	8004b5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b5e:	697b      	ldr	r3, [r7, #20]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000dac 	.word	0x20000dac
 8004b6c:	20000d8c 	.word	0x20000d8c
 8004b70:	200008b4 	.word	0x200008b4
 8004b74:	20000d44 	.word	0x20000d44
 8004b78:	200008b0 	.word	0x200008b0
 8004b7c:	20000d98 	.word	0x20000d98

08004b80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b88:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <vTaskInternalSetTimeOutState+0x24>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <vTaskInternalSetTimeOutState+0x28>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	605a      	str	r2, [r3, #4]
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	20000d9c 	.word	0x20000d9c
 8004ba8:	20000d88 	.word	0x20000d88

08004bac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	613b      	str	r3, [r7, #16]
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60fb      	str	r3, [r7, #12]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004bf2:	f000 ff91 	bl	8005b18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c6c <xTaskCheckForTimeOut+0xc0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c0e:	d102      	bne.n	8004c16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	e023      	b.n	8004c5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <xTaskCheckForTimeOut+0xc4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d007      	beq.n	8004c32 <xTaskCheckForTimeOut+0x86>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d302      	bcc.n	8004c32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	e015      	b.n	8004c5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d20b      	bcs.n	8004c54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff99 	bl	8004b80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e004      	b.n	8004c5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c5e:	f000 ff8d 	bl	8005b7c <vPortExitCritical>

	return xReturn;
 8004c62:	69fb      	ldr	r3, [r7, #28]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000d88 	.word	0x20000d88
 8004c70:	20000d9c 	.word	0x20000d9c

08004c74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c78:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <vTaskMissedYield+0x14>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	20000d98 	.word	0x20000d98

08004c8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c94:	f000 f852 	bl	8004d3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c98:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <prvIdleTask+0x28>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d9f9      	bls.n	8004c94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ca0:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <prvIdleTask+0x2c>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cb0:	e7f0      	b.n	8004c94 <prvIdleTask+0x8>
 8004cb2:	bf00      	nop
 8004cb4:	200008b4 	.word	0x200008b4
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	e00c      	b.n	8004ce2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4a12      	ldr	r2, [pc, #72]	@ (8004d1c <prvInitialiseTaskLists+0x60>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe f97c 	bl	8002fd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b37      	cmp	r3, #55	@ 0x37
 8004ce6:	d9ef      	bls.n	8004cc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ce8:	480d      	ldr	r0, [pc, #52]	@ (8004d20 <prvInitialiseTaskLists+0x64>)
 8004cea:	f7fe f973 	bl	8002fd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cee:	480d      	ldr	r0, [pc, #52]	@ (8004d24 <prvInitialiseTaskLists+0x68>)
 8004cf0:	f7fe f970 	bl	8002fd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cf4:	480c      	ldr	r0, [pc, #48]	@ (8004d28 <prvInitialiseTaskLists+0x6c>)
 8004cf6:	f7fe f96d 	bl	8002fd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cfa:	480c      	ldr	r0, [pc, #48]	@ (8004d2c <prvInitialiseTaskLists+0x70>)
 8004cfc:	f7fe f96a 	bl	8002fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d00:	480b      	ldr	r0, [pc, #44]	@ (8004d30 <prvInitialiseTaskLists+0x74>)
 8004d02:	f7fe f967 	bl	8002fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <prvInitialiseTaskLists+0x78>)
 8004d08:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <prvInitialiseTaskLists+0x64>)
 8004d0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <prvInitialiseTaskLists+0x7c>)
 8004d0e:	4a05      	ldr	r2, [pc, #20]	@ (8004d24 <prvInitialiseTaskLists+0x68>)
 8004d10:	601a      	str	r2, [r3, #0]
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	200008b4 	.word	0x200008b4
 8004d20:	20000d14 	.word	0x20000d14
 8004d24:	20000d28 	.word	0x20000d28
 8004d28:	20000d44 	.word	0x20000d44
 8004d2c:	20000d58 	.word	0x20000d58
 8004d30:	20000d70 	.word	0x20000d70
 8004d34:	20000d3c 	.word	0x20000d3c
 8004d38:	20000d40 	.word	0x20000d40

08004d3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d42:	e019      	b.n	8004d78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d44:	f000 fee8 	bl	8005b18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d48:	4b10      	ldr	r3, [pc, #64]	@ (8004d8c <prvCheckTasksWaitingTermination+0x50>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe f9c7 	bl	80030e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <prvCheckTasksWaitingTermination+0x54>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	4a0b      	ldr	r2, [pc, #44]	@ (8004d90 <prvCheckTasksWaitingTermination+0x54>)
 8004d62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d64:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <prvCheckTasksWaitingTermination+0x58>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d94 <prvCheckTasksWaitingTermination+0x58>)
 8004d6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d6e:	f000 ff05 	bl	8005b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f810 	bl	8004d98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d78:	4b06      	ldr	r3, [pc, #24]	@ (8004d94 <prvCheckTasksWaitingTermination+0x58>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e1      	bne.n	8004d44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000d58 	.word	0x20000d58
 8004d90:	20000d84 	.word	0x20000d84
 8004d94:	20000d6c 	.word	0x20000d6c

08004d98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3354      	adds	r3, #84	@ 0x54
 8004da4:	4618      	mov	r0, r3
 8004da6:	f001 f9cf 	bl	8006148 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d108      	bne.n	8004dc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 f89d 	bl	8005ef8 <vPortFree>
				vPortFree( pxTCB );
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 f89a 	bl	8005ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dc4:	e019      	b.n	8004dfa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d103      	bne.n	8004dd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f001 f891 	bl	8005ef8 <vPortFree>
	}
 8004dd6:	e010      	b.n	8004dfa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d00b      	beq.n	8004dfa <prvDeleteTCB+0x62>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	60fb      	str	r3, [r7, #12]
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	e7fd      	b.n	8004df6 <prvDeleteTCB+0x5e>
	}
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e3c <prvResetNextTaskUnblockTime+0x38>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e14:	4b0a      	ldr	r3, [pc, #40]	@ (8004e40 <prvResetNextTaskUnblockTime+0x3c>)
 8004e16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e1c:	e008      	b.n	8004e30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e1e:	4b07      	ldr	r3, [pc, #28]	@ (8004e3c <prvResetNextTaskUnblockTime+0x38>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4a04      	ldr	r2, [pc, #16]	@ (8004e40 <prvResetNextTaskUnblockTime+0x3c>)
 8004e2e:	6013      	str	r3, [r2, #0]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000d3c 	.word	0x20000d3c
 8004e40:	20000da4 	.word	0x20000da4

08004e44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e78 <xTaskGetSchedulerState+0x34>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e52:	2301      	movs	r3, #1
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	e008      	b.n	8004e6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e58:	4b08      	ldr	r3, [pc, #32]	@ (8004e7c <xTaskGetSchedulerState+0x38>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d102      	bne.n	8004e66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e60:	2302      	movs	r3, #2
 8004e62:	607b      	str	r3, [r7, #4]
 8004e64:	e001      	b.n	8004e6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e66:	2300      	movs	r3, #0
 8004e68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e6a:	687b      	ldr	r3, [r7, #4]
	}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	20000d90 	.word	0x20000d90
 8004e7c:	20000dac 	.word	0x20000dac

08004e80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d051      	beq.n	8004f3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8004f44 <xTaskPriorityInherit+0xc4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d241      	bcs.n	8004f28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	db06      	blt.n	8004eba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eac:	4b25      	ldr	r3, [pc, #148]	@ (8004f44 <xTaskPriorityInherit+0xc4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	6959      	ldr	r1, [r3, #20]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4a1f      	ldr	r2, [pc, #124]	@ (8004f48 <xTaskPriorityInherit+0xc8>)
 8004ecc:	4413      	add	r3, r2
 8004ece:	4299      	cmp	r1, r3
 8004ed0:	d122      	bne.n	8004f18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe f906 	bl	80030e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004edc:	4b19      	ldr	r3, [pc, #100]	@ (8004f44 <xTaskPriorityInherit+0xc4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eea:	4b18      	ldr	r3, [pc, #96]	@ (8004f4c <xTaskPriorityInherit+0xcc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d903      	bls.n	8004efa <xTaskPriorityInherit+0x7a>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	4a15      	ldr	r2, [pc, #84]	@ (8004f4c <xTaskPriorityInherit+0xcc>)
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4a10      	ldr	r2, [pc, #64]	@ (8004f48 <xTaskPriorityInherit+0xc8>)
 8004f08:	441a      	add	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f7fe f88c 	bl	800302e <vListInsertEnd>
 8004f16:	e004      	b.n	8004f22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f18:	4b0a      	ldr	r3, [pc, #40]	@ (8004f44 <xTaskPriorityInherit+0xc4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004f22:	2301      	movs	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e008      	b.n	8004f3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f2c:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <xTaskPriorityInherit+0xc4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d201      	bcs.n	8004f3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004f36:	2301      	movs	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
	}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	200008b0 	.word	0x200008b0
 8004f48:	200008b4 	.word	0x200008b4
 8004f4c:	20000d8c 	.word	0x20000d8c

08004f50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d058      	beq.n	8005018 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f66:	4b2f      	ldr	r3, [pc, #188]	@ (8005024 <xTaskPriorityDisinherit+0xd4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d00b      	beq.n	8004f88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60fb      	str	r3, [r7, #12]
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60bb      	str	r3, [r7, #8]
}
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fac:	1e5a      	subs	r2, r3, #1
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d02c      	beq.n	8005018 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d128      	bne.n	8005018 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe f88c 	bl	80030e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8005028 <xTaskPriorityDisinherit+0xd8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d903      	bls.n	8004ff8 <xTaskPriorityDisinherit+0xa8>
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8005028 <xTaskPriorityDisinherit+0xd8>)
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4a09      	ldr	r2, [pc, #36]	@ (800502c <xTaskPriorityDisinherit+0xdc>)
 8005006:	441a      	add	r2, r3
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f7fe f80d 	bl	800302e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005014:	2301      	movs	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005018:	697b      	ldr	r3, [r7, #20]
	}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	200008b0 	.word	0x200008b0
 8005028:	20000d8c 	.word	0x20000d8c
 800502c:	200008b4 	.word	0x200008b4

08005030 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800503e:	2301      	movs	r3, #1
 8005040:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d06c      	beq.n	8005122 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	60fb      	str	r3, [r7, #12]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d902      	bls.n	8005078 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	e002      	b.n	800507e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	429a      	cmp	r2, r3
 8005086:	d04c      	beq.n	8005122 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	429a      	cmp	r2, r3
 8005090:	d147      	bne.n	8005122 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005092:	4b26      	ldr	r3, [pc, #152]	@ (800512c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	429a      	cmp	r2, r3
 800509a:	d10b      	bne.n	80050b4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	60bb      	str	r3, [r7, #8]
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	e7fd      	b.n	80050b0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	db04      	blt.n	80050d2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	6959      	ldr	r1, [r3, #20]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4a13      	ldr	r2, [pc, #76]	@ (8005130 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80050e2:	4413      	add	r3, r2
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d11c      	bne.n	8005122 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fd fffb 	bl	80030e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005134 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d903      	bls.n	8005106 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	4a0c      	ldr	r2, [pc, #48]	@ (8005134 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4a07      	ldr	r2, [pc, #28]	@ (8005130 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005114:	441a      	add	r2, r3
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7fd ff86 	bl	800302e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005122:	bf00      	nop
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200008b0 	.word	0x200008b0
 8005130:	200008b4 	.word	0x200008b4
 8005134:	20000d8c 	.word	0x20000d8c

08005138 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800513c:	4b07      	ldr	r3, [pc, #28]	@ (800515c <pvTaskIncrementMutexHeldCount+0x24>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005144:	4b05      	ldr	r3, [pc, #20]	@ (800515c <pvTaskIncrementMutexHeldCount+0x24>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800514a:	3201      	adds	r2, #1
 800514c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800514e:	4b03      	ldr	r3, [pc, #12]	@ (800515c <pvTaskIncrementMutexHeldCount+0x24>)
 8005150:	681b      	ldr	r3, [r3, #0]
	}
 8005152:	4618      	mov	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	200008b0 	.word	0x200008b0

08005160 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800516a:	4b21      	ldr	r3, [pc, #132]	@ (80051f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005170:	4b20      	ldr	r3, [pc, #128]	@ (80051f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3304      	adds	r3, #4
 8005176:	4618      	mov	r0, r3
 8005178:	f7fd ffb6 	bl	80030e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005182:	d10a      	bne.n	800519a <prvAddCurrentTaskToDelayedList+0x3a>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800518a:	4b1a      	ldr	r3, [pc, #104]	@ (80051f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4819      	ldr	r0, [pc, #100]	@ (80051f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005194:	f7fd ff4b 	bl	800302e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005198:	e026      	b.n	80051e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4413      	add	r3, r2
 80051a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051a2:	4b14      	ldr	r3, [pc, #80]	@ (80051f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d209      	bcs.n	80051c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051b2:	4b12      	ldr	r3, [pc, #72]	@ (80051fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b0f      	ldr	r3, [pc, #60]	@ (80051f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f7fd ff59 	bl	8003076 <vListInsert>
}
 80051c4:	e010      	b.n	80051e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005200 <prvAddCurrentTaskToDelayedList+0xa0>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f7fd ff4f 	bl	8003076 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d202      	bcs.n	80051e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051e2:	4a08      	ldr	r2, [pc, #32]	@ (8005204 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6013      	str	r3, [r2, #0]
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000d88 	.word	0x20000d88
 80051f4:	200008b0 	.word	0x200008b0
 80051f8:	20000d70 	.word	0x20000d70
 80051fc:	20000d40 	.word	0x20000d40
 8005200:	20000d3c 	.word	0x20000d3c
 8005204:	20000da4 	.word	0x20000da4

08005208 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	@ 0x28
 800520c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005212:	f000 fb13 	bl	800583c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005216:	4b1d      	ldr	r3, [pc, #116]	@ (800528c <xTimerCreateTimerTask+0x84>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d021      	beq.n	8005262 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005226:	1d3a      	adds	r2, r7, #4
 8005228:	f107 0108 	add.w	r1, r7, #8
 800522c:	f107 030c 	add.w	r3, r7, #12
 8005230:	4618      	mov	r0, r3
 8005232:	f7fd feb5 	bl	8002fa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	9202      	str	r2, [sp, #8]
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	2302      	movs	r3, #2
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	2300      	movs	r3, #0
 8005246:	460a      	mov	r2, r1
 8005248:	4911      	ldr	r1, [pc, #68]	@ (8005290 <xTimerCreateTimerTask+0x88>)
 800524a:	4812      	ldr	r0, [pc, #72]	@ (8005294 <xTimerCreateTimerTask+0x8c>)
 800524c:	f7fe ffa2 	bl	8004194 <xTaskCreateStatic>
 8005250:	4603      	mov	r3, r0
 8005252:	4a11      	ldr	r2, [pc, #68]	@ (8005298 <xTimerCreateTimerTask+0x90>)
 8005254:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005256:	4b10      	ldr	r3, [pc, #64]	@ (8005298 <xTimerCreateTimerTask+0x90>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800525e:	2301      	movs	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	613b      	str	r3, [r7, #16]
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005280:	697b      	ldr	r3, [r7, #20]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000de0 	.word	0x20000de0
 8005290:	08006388 	.word	0x08006388
 8005294:	080053d5 	.word	0x080053d5
 8005298:	20000de4 	.word	0x20000de4

0800529c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08a      	sub	sp, #40	@ 0x28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <xTimerGenericCommand+0x30>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	623b      	str	r3, [r7, #32]
}
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	e7fd      	b.n	80052c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052cc:	4b19      	ldr	r3, [pc, #100]	@ (8005334 <xTimerGenericCommand+0x98>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02a      	beq.n	800532a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b05      	cmp	r3, #5
 80052e4:	dc18      	bgt.n	8005318 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052e6:	f7ff fdad 	bl	8004e44 <xTaskGetSchedulerState>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d109      	bne.n	8005304 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052f0:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <xTimerGenericCommand+0x98>)
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	f107 0110 	add.w	r1, r7, #16
 80052f8:	2300      	movs	r3, #0
 80052fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052fc:	f7fe f8d2 	bl	80034a4 <xQueueGenericSend>
 8005300:	6278      	str	r0, [r7, #36]	@ 0x24
 8005302:	e012      	b.n	800532a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005304:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <xTimerGenericCommand+0x98>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	f107 0110 	add.w	r1, r7, #16
 800530c:	2300      	movs	r3, #0
 800530e:	2200      	movs	r2, #0
 8005310:	f7fe f8c8 	bl	80034a4 <xQueueGenericSend>
 8005314:	6278      	str	r0, [r7, #36]	@ 0x24
 8005316:	e008      	b.n	800532a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005318:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <xTimerGenericCommand+0x98>)
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	f107 0110 	add.w	r1, r7, #16
 8005320:	2300      	movs	r3, #0
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	f7fe f9c0 	bl	80036a8 <xQueueGenericSendFromISR>
 8005328:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800532c:	4618      	mov	r0, r3
 800532e:	3728      	adds	r7, #40	@ 0x28
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000de0 	.word	0x20000de0

08005338 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af02      	add	r7, sp, #8
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005342:	4b23      	ldr	r3, [pc, #140]	@ (80053d0 <prvProcessExpiredTimer+0x98>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	3304      	adds	r3, #4
 8005350:	4618      	mov	r0, r3
 8005352:	f7fd fec9 	bl	80030e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d023      	beq.n	80053ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	18d1      	adds	r1, r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	6978      	ldr	r0, [r7, #20]
 8005372:	f000 f8d5 	bl	8005520 <prvInsertTimerInActiveList>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d020      	beq.n	80053be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800537c:	2300      	movs	r3, #0
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	2300      	movs	r3, #0
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	2100      	movs	r1, #0
 8005386:	6978      	ldr	r0, [r7, #20]
 8005388:	f7ff ff88 	bl	800529c <xTimerGenericCommand>
 800538c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d114      	bne.n	80053be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60fb      	str	r3, [r7, #12]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	6978      	ldr	r0, [r7, #20]
 80053c4:	4798      	blx	r3
}
 80053c6:	bf00      	nop
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000dd8 	.word	0x20000dd8

080053d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053dc:	f107 0308 	add.w	r3, r7, #8
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f859 	bl	8005498 <prvGetNextExpireTime>
 80053e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4619      	mov	r1, r3
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f805 	bl	80053fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053f2:	f000 f8d7 	bl	80055a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053f6:	bf00      	nop
 80053f8:	e7f0      	b.n	80053dc <prvTimerTask+0x8>
	...

080053fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005406:	f7ff f929 	bl	800465c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800540a:	f107 0308 	add.w	r3, r7, #8
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f866 	bl	80054e0 <prvSampleTimeNow>
 8005414:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d130      	bne.n	800547e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <prvProcessTimerOrBlockTask+0x3c>
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	429a      	cmp	r2, r3
 8005428:	d806      	bhi.n	8005438 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800542a:	f7ff f925 	bl	8004678 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff ff81 	bl	8005338 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005436:	e024      	b.n	8005482 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800543e:	4b13      	ldr	r3, [pc, #76]	@ (800548c <prvProcessTimerOrBlockTask+0x90>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <prvProcessTimerOrBlockTask+0x50>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <prvProcessTimerOrBlockTask+0x52>
 800544c:	2300      	movs	r3, #0
 800544e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005450:	4b0f      	ldr	r3, [pc, #60]	@ (8005490 <prvProcessTimerOrBlockTask+0x94>)
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	4619      	mov	r1, r3
 800545e:	f7fe fe65 	bl	800412c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005462:	f7ff f909 	bl	8004678 <xTaskResumeAll>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800546c:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <prvProcessTimerOrBlockTask+0x98>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	f3bf 8f6f 	isb	sy
}
 800547c:	e001      	b.n	8005482 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800547e:	f7ff f8fb 	bl	8004678 <xTaskResumeAll>
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000ddc 	.word	0x20000ddc
 8005490:	20000de0 	.word	0x20000de0
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054a0:	4b0e      	ldr	r3, [pc, #56]	@ (80054dc <prvGetNextExpireTime+0x44>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <prvGetNextExpireTime+0x16>
 80054aa:	2201      	movs	r2, #1
 80054ac:	e000      	b.n	80054b0 <prvGetNextExpireTime+0x18>
 80054ae:	2200      	movs	r2, #0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054bc:	4b07      	ldr	r3, [pc, #28]	@ (80054dc <prvGetNextExpireTime+0x44>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e001      	b.n	80054cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054cc:	68fb      	ldr	r3, [r7, #12]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	20000dd8 	.word	0x20000dd8

080054e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80054e8:	f7ff f964 	bl	80047b4 <xTaskGetTickCount>
 80054ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054ee:	4b0b      	ldr	r3, [pc, #44]	@ (800551c <prvSampleTimeNow+0x3c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d205      	bcs.n	8005504 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054f8:	f000 f93a 	bl	8005770 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e002      	b.n	800550a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800550a:	4a04      	ldr	r2, [pc, #16]	@ (800551c <prvSampleTimeNow+0x3c>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005510:	68fb      	ldr	r3, [r7, #12]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000de8 	.word	0x20000de8

08005520 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d812      	bhi.n	800556c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	1ad2      	subs	r2, r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e01b      	b.n	8005592 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800555a:	4b10      	ldr	r3, [pc, #64]	@ (800559c <prvInsertTimerInActiveList+0x7c>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3304      	adds	r3, #4
 8005562:	4619      	mov	r1, r3
 8005564:	4610      	mov	r0, r2
 8005566:	f7fd fd86 	bl	8003076 <vListInsert>
 800556a:	e012      	b.n	8005592 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d206      	bcs.n	8005582 <prvInsertTimerInActiveList+0x62>
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d302      	bcc.n	8005582 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e007      	b.n	8005592 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005582:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <prvInsertTimerInActiveList+0x80>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3304      	adds	r3, #4
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f7fd fd72 	bl	8003076 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005592:	697b      	ldr	r3, [r7, #20]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000ddc 	.word	0x20000ddc
 80055a0:	20000dd8 	.word	0x20000dd8

080055a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	@ 0x38
 80055a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055aa:	e0ce      	b.n	800574a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da19      	bge.n	80055e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	3304      	adds	r3, #4
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	61fb      	str	r3, [r7, #28]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055dc:	6850      	ldr	r0, [r2, #4]
 80055de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	4611      	mov	r1, r2
 80055e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f2c0 80ae 	blt.w	800574a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fc:	3304      	adds	r3, #4
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fd fd72 	bl	80030e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005604:	463b      	mov	r3, r7
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff ff6a 	bl	80054e0 <prvSampleTimeNow>
 800560c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b09      	cmp	r3, #9
 8005612:	f200 8097 	bhi.w	8005744 <prvProcessReceivedCommands+0x1a0>
 8005616:	a201      	add	r2, pc, #4	@ (adr r2, 800561c <prvProcessReceivedCommands+0x78>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005645 	.word	0x08005645
 8005620:	08005645 	.word	0x08005645
 8005624:	08005645 	.word	0x08005645
 8005628:	080056bb 	.word	0x080056bb
 800562c:	080056cf 	.word	0x080056cf
 8005630:	0800571b 	.word	0x0800571b
 8005634:	08005645 	.word	0x08005645
 8005638:	08005645 	.word	0x08005645
 800563c:	080056bb 	.word	0x080056bb
 8005640:	080056cf 	.word	0x080056cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	b2da      	uxtb	r2, r3
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	18d1      	adds	r1, r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005664:	f7ff ff5c 	bl	8005520 <prvInsertTimerInActiveList>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d06c      	beq.n	8005748 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800566e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005674:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d061      	beq.n	8005748 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	441a      	add	r2, r3
 800568c:	2300      	movs	r3, #0
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	2300      	movs	r3, #0
 8005692:	2100      	movs	r1, #0
 8005694:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005696:	f7ff fe01 	bl	800529c <xTimerGenericCommand>
 800569a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d152      	bne.n	8005748 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61bb      	str	r3, [r7, #24]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80056cc:	e03d      	b.n	800574a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	617b      	str	r3, [r7, #20]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	18d1      	adds	r1, r2, r3
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005714:	f7ff ff04 	bl	8005520 <prvInsertTimerInActiveList>
					break;
 8005718:	e017      	b.n	800574a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d103      	bne.n	8005730 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005728:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800572a:	f000 fbe5 	bl	8005ef8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800572e:	e00c      	b.n	800574a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005732:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005742:	e002      	b.n	800574a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005744:	bf00      	nop
 8005746:	e000      	b.n	800574a <prvProcessReceivedCommands+0x1a6>
					break;
 8005748:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800574a:	4b08      	ldr	r3, [pc, #32]	@ (800576c <prvProcessReceivedCommands+0x1c8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	1d39      	adds	r1, r7, #4
 8005750:	2200      	movs	r2, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe f8d6 	bl	8003904 <xQueueReceive>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	f47f af26 	bne.w	80055ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	3730      	adds	r7, #48	@ 0x30
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000de0 	.word	0x20000de0

08005770 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005776:	e049      	b.n	800580c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005778:	4b2e      	ldr	r3, [pc, #184]	@ (8005834 <prvSwitchTimerLists+0xc4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005782:	4b2c      	ldr	r3, [pc, #176]	@ (8005834 <prvSwitchTimerLists+0xc4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3304      	adds	r3, #4
 8005790:	4618      	mov	r0, r3
 8005792:	f7fd fca9 	bl	80030e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d02f      	beq.n	800580c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d90e      	bls.n	80057dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005834 <prvSwitchTimerLists+0xc4>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f7fd fc4e 	bl	8003076 <vListInsert>
 80057da:	e017      	b.n	800580c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057dc:	2300      	movs	r3, #0
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	2300      	movs	r3, #0
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	2100      	movs	r1, #0
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff fd58 	bl	800529c <xTimerGenericCommand>
 80057ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10b      	bne.n	800580c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	603b      	str	r3, [r7, #0]
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800580c:	4b09      	ldr	r3, [pc, #36]	@ (8005834 <prvSwitchTimerLists+0xc4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1b0      	bne.n	8005778 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005816:	4b07      	ldr	r3, [pc, #28]	@ (8005834 <prvSwitchTimerLists+0xc4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800581c:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <prvSwitchTimerLists+0xc8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a04      	ldr	r2, [pc, #16]	@ (8005834 <prvSwitchTimerLists+0xc4>)
 8005822:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005824:	4a04      	ldr	r2, [pc, #16]	@ (8005838 <prvSwitchTimerLists+0xc8>)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6013      	str	r3, [r2, #0]
}
 800582a:	bf00      	nop
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000dd8 	.word	0x20000dd8
 8005838:	20000ddc 	.word	0x20000ddc

0800583c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005842:	f000 f969 	bl	8005b18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005846:	4b15      	ldr	r3, [pc, #84]	@ (800589c <prvCheckForValidListAndQueue+0x60>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d120      	bne.n	8005890 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800584e:	4814      	ldr	r0, [pc, #80]	@ (80058a0 <prvCheckForValidListAndQueue+0x64>)
 8005850:	f7fd fbc0 	bl	8002fd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005854:	4813      	ldr	r0, [pc, #76]	@ (80058a4 <prvCheckForValidListAndQueue+0x68>)
 8005856:	f7fd fbbd 	bl	8002fd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800585a:	4b13      	ldr	r3, [pc, #76]	@ (80058a8 <prvCheckForValidListAndQueue+0x6c>)
 800585c:	4a10      	ldr	r2, [pc, #64]	@ (80058a0 <prvCheckForValidListAndQueue+0x64>)
 800585e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005860:	4b12      	ldr	r3, [pc, #72]	@ (80058ac <prvCheckForValidListAndQueue+0x70>)
 8005862:	4a10      	ldr	r2, [pc, #64]	@ (80058a4 <prvCheckForValidListAndQueue+0x68>)
 8005864:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005866:	2300      	movs	r3, #0
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	4b11      	ldr	r3, [pc, #68]	@ (80058b0 <prvCheckForValidListAndQueue+0x74>)
 800586c:	4a11      	ldr	r2, [pc, #68]	@ (80058b4 <prvCheckForValidListAndQueue+0x78>)
 800586e:	2110      	movs	r1, #16
 8005870:	200a      	movs	r0, #10
 8005872:	f7fd fccd 	bl	8003210 <xQueueGenericCreateStatic>
 8005876:	4603      	mov	r3, r0
 8005878:	4a08      	ldr	r2, [pc, #32]	@ (800589c <prvCheckForValidListAndQueue+0x60>)
 800587a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800587c:	4b07      	ldr	r3, [pc, #28]	@ (800589c <prvCheckForValidListAndQueue+0x60>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005884:	4b05      	ldr	r3, [pc, #20]	@ (800589c <prvCheckForValidListAndQueue+0x60>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	490b      	ldr	r1, [pc, #44]	@ (80058b8 <prvCheckForValidListAndQueue+0x7c>)
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fbfa 	bl	8004084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005890:	f000 f974 	bl	8005b7c <vPortExitCritical>
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000de0 	.word	0x20000de0
 80058a0:	20000db0 	.word	0x20000db0
 80058a4:	20000dc4 	.word	0x20000dc4
 80058a8:	20000dd8 	.word	0x20000dd8
 80058ac:	20000ddc 	.word	0x20000ddc
 80058b0:	20000e8c 	.word	0x20000e8c
 80058b4:	20000dec 	.word	0x20000dec
 80058b8:	08006390 	.word	0x08006390

080058bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3b04      	subs	r3, #4
 80058cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3b04      	subs	r3, #4
 80058da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f023 0201 	bic.w	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3b04      	subs	r3, #4
 80058ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005920 <pxPortInitialiseStack+0x64>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3b14      	subs	r3, #20
 80058f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3b04      	subs	r3, #4
 8005902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f06f 0202 	mvn.w	r2, #2
 800590a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3b20      	subs	r3, #32
 8005910:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005912:	68fb      	ldr	r3, [r7, #12]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	08005925 	.word	0x08005925

08005924 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800592e:	4b13      	ldr	r3, [pc, #76]	@ (800597c <prvTaskExitError+0x58>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005936:	d00b      	beq.n	8005950 <prvTaskExitError+0x2c>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <prvTaskExitError+0x28>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	60bb      	str	r3, [r7, #8]
}
 8005962:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005964:	bf00      	nop
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0fc      	beq.n	8005966 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	2000000c 	.word	0x2000000c

08005980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005980:	4b07      	ldr	r3, [pc, #28]	@ (80059a0 <pxCurrentTCBConst2>)
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	6808      	ldr	r0, [r1, #0]
 8005986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598a:	f380 8809 	msr	PSP, r0
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f380 8811 	msr	BASEPRI, r0
 800599a:	4770      	bx	lr
 800599c:	f3af 8000 	nop.w

080059a0 <pxCurrentTCBConst2>:
 80059a0:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop

080059a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059a8:	4808      	ldr	r0, [pc, #32]	@ (80059cc <prvPortStartFirstTask+0x24>)
 80059aa:	6800      	ldr	r0, [r0, #0]
 80059ac:	6800      	ldr	r0, [r0, #0]
 80059ae:	f380 8808 	msr	MSP, r0
 80059b2:	f04f 0000 	mov.w	r0, #0
 80059b6:	f380 8814 	msr	CONTROL, r0
 80059ba:	b662      	cpsie	i
 80059bc:	b661      	cpsie	f
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	df00      	svc	0
 80059c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059ca:	bf00      	nop
 80059cc:	e000ed08 	.word	0xe000ed08

080059d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059d6:	4b47      	ldr	r3, [pc, #284]	@ (8005af4 <xPortStartScheduler+0x124>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a47      	ldr	r2, [pc, #284]	@ (8005af8 <xPortStartScheduler+0x128>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10b      	bne.n	80059f8 <xPortStartScheduler+0x28>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	613b      	str	r3, [r7, #16]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059f8:	4b3e      	ldr	r3, [pc, #248]	@ (8005af4 <xPortStartScheduler+0x124>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a3f      	ldr	r2, [pc, #252]	@ (8005afc <xPortStartScheduler+0x12c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10b      	bne.n	8005a1a <xPortStartScheduler+0x4a>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60fb      	str	r3, [r7, #12]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a1a:	4b39      	ldr	r3, [pc, #228]	@ (8005b00 <xPortStartScheduler+0x130>)
 8005a1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	22ff      	movs	r2, #255	@ 0xff
 8005a2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	4b31      	ldr	r3, [pc, #196]	@ (8005b04 <xPortStartScheduler+0x134>)
 8005a40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a42:	4b31      	ldr	r3, [pc, #196]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a44:	2207      	movs	r2, #7
 8005a46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a48:	e009      	b.n	8005a5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4a2d      	ldr	r2, [pc, #180]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a66:	2b80      	cmp	r3, #128	@ 0x80
 8005a68:	d0ef      	beq.n	8005a4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a6a:	4b27      	ldr	r3, [pc, #156]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1c3 0307 	rsb	r3, r3, #7
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d00b      	beq.n	8005a8e <xPortStartScheduler+0xbe>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60bb      	str	r3, [r7, #8]
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	4a1c      	ldr	r2, [pc, #112]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a98:	4b1b      	ldr	r3, [pc, #108]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005aa0:	4a19      	ldr	r2, [pc, #100]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005aac:	4b17      	ldr	r3, [pc, #92]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a16      	ldr	r2, [pc, #88]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ab8:	4b14      	ldr	r3, [pc, #80]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a13      	ldr	r2, [pc, #76]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ac4:	f000 f8da 	bl	8005c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ac8:	4b11      	ldr	r3, [pc, #68]	@ (8005b10 <xPortStartScheduler+0x140>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ace:	f000 f8f9 	bl	8005cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ad2:	4b10      	ldr	r3, [pc, #64]	@ (8005b14 <xPortStartScheduler+0x144>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8005b14 <xPortStartScheduler+0x144>)
 8005ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ade:	f7ff ff63 	bl	80059a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ae2:	f7fe ff31 	bl	8004948 <vTaskSwitchContext>
	prvTaskExitError();
 8005ae6:	f7ff ff1d 	bl	8005924 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	e000ed00 	.word	0xe000ed00
 8005af8:	410fc271 	.word	0x410fc271
 8005afc:	410fc270 	.word	0x410fc270
 8005b00:	e000e400 	.word	0xe000e400
 8005b04:	20000edc 	.word	0x20000edc
 8005b08:	20000ee0 	.word	0x20000ee0
 8005b0c:	e000ed20 	.word	0xe000ed20
 8005b10:	2000000c 	.word	0x2000000c
 8005b14:	e000ef34 	.word	0xe000ef34

08005b18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b32:	4b10      	ldr	r3, [pc, #64]	@ (8005b74 <vPortEnterCritical+0x5c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	4a0e      	ldr	r2, [pc, #56]	@ (8005b74 <vPortEnterCritical+0x5c>)
 8005b3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <vPortEnterCritical+0x5c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d110      	bne.n	8005b66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b44:	4b0c      	ldr	r3, [pc, #48]	@ (8005b78 <vPortEnterCritical+0x60>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	603b      	str	r3, [r7, #0]
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <vPortEnterCritical+0x4a>
	}
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	2000000c 	.word	0x2000000c
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b82:	4b12      	ldr	r3, [pc, #72]	@ (8005bcc <vPortExitCritical+0x50>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <vPortExitCritical+0x26>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	607b      	str	r3, [r7, #4]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <vPortExitCritical+0x50>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	4a08      	ldr	r2, [pc, #32]	@ (8005bcc <vPortExitCritical+0x50>)
 8005baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bac:	4b07      	ldr	r3, [pc, #28]	@ (8005bcc <vPortExitCritical+0x50>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <vPortExitCritical+0x44>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f383 8811 	msr	BASEPRI, r3
}
 8005bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	2000000c 	.word	0x2000000c

08005bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bd0:	f3ef 8009 	mrs	r0, PSP
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	4b15      	ldr	r3, [pc, #84]	@ (8005c30 <pxCurrentTCBConst>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	f01e 0f10 	tst.w	lr, #16
 8005be0:	bf08      	it	eq
 8005be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	6010      	str	r0, [r2, #0]
 8005bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005bf4:	f380 8811 	msr	BASEPRI, r0
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f7fe fea2 	bl	8004948 <vTaskSwitchContext>
 8005c04:	f04f 0000 	mov.w	r0, #0
 8005c08:	f380 8811 	msr	BASEPRI, r0
 8005c0c:	bc09      	pop	{r0, r3}
 8005c0e:	6819      	ldr	r1, [r3, #0]
 8005c10:	6808      	ldr	r0, [r1, #0]
 8005c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c16:	f01e 0f10 	tst.w	lr, #16
 8005c1a:	bf08      	it	eq
 8005c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c20:	f380 8809 	msr	PSP, r0
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst>:
 8005c30:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop

08005c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	607b      	str	r3, [r7, #4]
}
 8005c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c52:	f7fe fdbf 	bl	80047d4 <xTaskIncrementTick>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <xPortSysTickHandler+0x40>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	2300      	movs	r3, #0
 8005c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	f383 8811 	msr	BASEPRI, r3
}
 8005c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c80:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <vPortSetupTimerInterrupt+0x34>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c86:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <vPortSetupTimerInterrupt+0x38>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb8 <vPortSetupTimerInterrupt+0x3c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a0a      	ldr	r2, [pc, #40]	@ (8005cbc <vPortSetupTimerInterrupt+0x40>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	099b      	lsrs	r3, r3, #6
 8005c98:	4a09      	ldr	r2, [pc, #36]	@ (8005cc0 <vPortSetupTimerInterrupt+0x44>)
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c9e:	4b04      	ldr	r3, [pc, #16]	@ (8005cb0 <vPortSetupTimerInterrupt+0x34>)
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	e000e010 	.word	0xe000e010
 8005cb4:	e000e018 	.word	0xe000e018
 8005cb8:	20000000 	.word	0x20000000
 8005cbc:	10624dd3 	.word	0x10624dd3
 8005cc0:	e000e014 	.word	0xe000e014

08005cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005cd4 <vPortEnableVFP+0x10>
 8005cc8:	6801      	ldr	r1, [r0, #0]
 8005cca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005cce:	6001      	str	r1, [r0, #0]
 8005cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005cd2:	bf00      	nop
 8005cd4:	e000ed88 	.word	0xe000ed88

08005cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cde:	f3ef 8305 	mrs	r3, IPSR
 8005ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b0f      	cmp	r3, #15
 8005ce8:	d915      	bls.n	8005d16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005cea:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <vPortValidateInterruptPriority+0x74>)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005cf4:	4b16      	ldr	r3, [pc, #88]	@ (8005d50 <vPortValidateInterruptPriority+0x78>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	7afa      	ldrb	r2, [r7, #11]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d20b      	bcs.n	8005d16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	607b      	str	r3, [r7, #4]
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	e7fd      	b.n	8005d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d16:	4b0f      	ldr	r3, [pc, #60]	@ (8005d54 <vPortValidateInterruptPriority+0x7c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d58 <vPortValidateInterruptPriority+0x80>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d90b      	bls.n	8005d3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	603b      	str	r3, [r7, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	e7fd      	b.n	8005d3a <vPortValidateInterruptPriority+0x62>
	}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	e000e3f0 	.word	0xe000e3f0
 8005d50:	20000edc 	.word	0x20000edc
 8005d54:	e000ed0c 	.word	0xe000ed0c
 8005d58:	20000ee0 	.word	0x20000ee0

08005d5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	@ 0x28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d68:	f7fe fc78 	bl	800465c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ee0 <pvPortMalloc+0x184>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d74:	f000 f924 	bl	8005fc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d78:	4b5a      	ldr	r3, [pc, #360]	@ (8005ee4 <pvPortMalloc+0x188>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f040 8095 	bne.w	8005eb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01e      	beq.n	8005dca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4413      	add	r3, r2
 8005d92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d015      	beq.n	8005dca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f023 0307 	bic.w	r3, r3, #7
 8005da4:	3308      	adds	r3, #8
 8005da6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <pvPortMalloc+0x6e>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	617b      	str	r3, [r7, #20]
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	e7fd      	b.n	8005dc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d06f      	beq.n	8005eb0 <pvPortMalloc+0x154>
 8005dd0:	4b45      	ldr	r3, [pc, #276]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d86a      	bhi.n	8005eb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dda:	4b44      	ldr	r3, [pc, #272]	@ (8005eec <pvPortMalloc+0x190>)
 8005ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005dde:	4b43      	ldr	r3, [pc, #268]	@ (8005eec <pvPortMalloc+0x190>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005de4:	e004      	b.n	8005df0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d903      	bls.n	8005e02 <pvPortMalloc+0xa6>
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f1      	bne.n	8005de6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e02:	4b37      	ldr	r3, [pc, #220]	@ (8005ee0 <pvPortMalloc+0x184>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d051      	beq.n	8005eb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2208      	movs	r2, #8
 8005e12:	4413      	add	r3, r2
 8005e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	1ad2      	subs	r2, r2, r3
 8005e26:	2308      	movs	r3, #8
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d920      	bls.n	8005e70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4413      	add	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <pvPortMalloc+0xfc>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	613b      	str	r3, [r7, #16]
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e6a:	69b8      	ldr	r0, [r7, #24]
 8005e6c:	f000 f90a 	bl	8006084 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <pvPortMalloc+0x194>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d203      	bcs.n	8005e92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e8a:	4b17      	ldr	r3, [pc, #92]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <pvPortMalloc+0x194>)
 8005e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	4b13      	ldr	r3, [pc, #76]	@ (8005ee4 <pvPortMalloc+0x188>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ea6:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <pvPortMalloc+0x198>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	4a11      	ldr	r2, [pc, #68]	@ (8005ef4 <pvPortMalloc+0x198>)
 8005eae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005eb0:	f7fe fbe2 	bl	8004678 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <pvPortMalloc+0x17a>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	60fb      	str	r3, [r7, #12]
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <pvPortMalloc+0x176>
	return pvReturn;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3728      	adds	r7, #40	@ 0x28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20004aec 	.word	0x20004aec
 8005ee4:	20004b00 	.word	0x20004b00
 8005ee8:	20004af0 	.word	0x20004af0
 8005eec:	20004ae4 	.word	0x20004ae4
 8005ef0:	20004af4 	.word	0x20004af4
 8005ef4:	20004af8 	.word	0x20004af8

08005ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d04f      	beq.n	8005faa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f0a:	2308      	movs	r3, #8
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4413      	add	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	4b25      	ldr	r3, [pc, #148]	@ (8005fb4 <vPortFree+0xbc>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10b      	bne.n	8005f3e <vPortFree+0x46>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60fb      	str	r3, [r7, #12]
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	e7fd      	b.n	8005f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <vPortFree+0x66>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60bb      	str	r3, [r7, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	4b14      	ldr	r3, [pc, #80]	@ (8005fb4 <vPortFree+0xbc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01e      	beq.n	8005faa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d11a      	bne.n	8005faa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb4 <vPortFree+0xbc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	401a      	ands	r2, r3
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f84:	f7fe fb6a 	bl	800465c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <vPortFree+0xc0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4413      	add	r3, r2
 8005f92:	4a09      	ldr	r2, [pc, #36]	@ (8005fb8 <vPortFree+0xc0>)
 8005f94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f96:	6938      	ldr	r0, [r7, #16]
 8005f98:	f000 f874 	bl	8006084 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f9c:	4b07      	ldr	r3, [pc, #28]	@ (8005fbc <vPortFree+0xc4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	4a06      	ldr	r2, [pc, #24]	@ (8005fbc <vPortFree+0xc4>)
 8005fa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fa6:	f7fe fb67 	bl	8004678 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005faa:	bf00      	nop
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20004b00 	.word	0x20004b00
 8005fb8:	20004af0 	.word	0x20004af0
 8005fbc:	20004afc 	.word	0x20004afc

08005fc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005fca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fcc:	4b27      	ldr	r3, [pc, #156]	@ (800606c <prvHeapInit+0xac>)
 8005fce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3307      	adds	r3, #7
 8005fde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0307 	bic.w	r3, r3, #7
 8005fe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	4a1f      	ldr	r2, [pc, #124]	@ (800606c <prvHeapInit+0xac>)
 8005ff0:	4413      	add	r3, r2
 8005ff2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <prvHeapInit+0xb0>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8006070 <prvHeapInit+0xb0>)
 8006000:	2200      	movs	r2, #0
 8006002:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	4413      	add	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800600c:	2208      	movs	r2, #8
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0307 	bic.w	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4a15      	ldr	r2, [pc, #84]	@ (8006074 <prvHeapInit+0xb4>)
 8006020:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006022:	4b14      	ldr	r3, [pc, #80]	@ (8006074 <prvHeapInit+0xb4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2200      	movs	r2, #0
 8006028:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800602a:	4b12      	ldr	r3, [pc, #72]	@ (8006074 <prvHeapInit+0xb4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006040:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <prvHeapInit+0xb4>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a0a      	ldr	r2, [pc, #40]	@ (8006078 <prvHeapInit+0xb8>)
 800604e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4a09      	ldr	r2, [pc, #36]	@ (800607c <prvHeapInit+0xbc>)
 8006056:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006058:	4b09      	ldr	r3, [pc, #36]	@ (8006080 <prvHeapInit+0xc0>)
 800605a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800605e:	601a      	str	r2, [r3, #0]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000ee4 	.word	0x20000ee4
 8006070:	20004ae4 	.word	0x20004ae4
 8006074:	20004aec 	.word	0x20004aec
 8006078:	20004af4 	.word	0x20004af4
 800607c:	20004af0 	.word	0x20004af0
 8006080:	20004b00 	.word	0x20004b00

08006084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800608c:	4b28      	ldr	r3, [pc, #160]	@ (8006130 <prvInsertBlockIntoFreeList+0xac>)
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	e002      	b.n	8006098 <prvInsertBlockIntoFreeList+0x14>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d8f7      	bhi.n	8006092 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d108      	bne.n	80060c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	441a      	add	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d118      	bne.n	800610c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b15      	ldr	r3, [pc, #84]	@ (8006134 <prvInsertBlockIntoFreeList+0xb0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d00d      	beq.n	8006102 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	441a      	add	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e008      	b.n	8006114 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006102:	4b0c      	ldr	r3, [pc, #48]	@ (8006134 <prvInsertBlockIntoFreeList+0xb0>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e003      	b.n	8006114 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	d002      	beq.n	8006122 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20004ae4 	.word	0x20004ae4
 8006134:	20004aec 	.word	0x20004aec

08006138 <memset>:
 8006138:	4402      	add	r2, r0
 800613a:	4603      	mov	r3, r0
 800613c:	4293      	cmp	r3, r2
 800613e:	d100      	bne.n	8006142 <memset+0xa>
 8006140:	4770      	bx	lr
 8006142:	f803 1b01 	strb.w	r1, [r3], #1
 8006146:	e7f9      	b.n	800613c <memset+0x4>

08006148 <_reclaim_reent>:
 8006148:	4b29      	ldr	r3, [pc, #164]	@ (80061f0 <_reclaim_reent+0xa8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4283      	cmp	r3, r0
 800614e:	b570      	push	{r4, r5, r6, lr}
 8006150:	4604      	mov	r4, r0
 8006152:	d04b      	beq.n	80061ec <_reclaim_reent+0xa4>
 8006154:	69c3      	ldr	r3, [r0, #28]
 8006156:	b1ab      	cbz	r3, 8006184 <_reclaim_reent+0x3c>
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	b16b      	cbz	r3, 8006178 <_reclaim_reent+0x30>
 800615c:	2500      	movs	r5, #0
 800615e:	69e3      	ldr	r3, [r4, #28]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	5959      	ldr	r1, [r3, r5]
 8006164:	2900      	cmp	r1, #0
 8006166:	d13b      	bne.n	80061e0 <_reclaim_reent+0x98>
 8006168:	3504      	adds	r5, #4
 800616a:	2d80      	cmp	r5, #128	@ 0x80
 800616c:	d1f7      	bne.n	800615e <_reclaim_reent+0x16>
 800616e:	69e3      	ldr	r3, [r4, #28]
 8006170:	4620      	mov	r0, r4
 8006172:	68d9      	ldr	r1, [r3, #12]
 8006174:	f000 f872 	bl	800625c <_free_r>
 8006178:	69e3      	ldr	r3, [r4, #28]
 800617a:	6819      	ldr	r1, [r3, #0]
 800617c:	b111      	cbz	r1, 8006184 <_reclaim_reent+0x3c>
 800617e:	4620      	mov	r0, r4
 8006180:	f000 f86c 	bl	800625c <_free_r>
 8006184:	6961      	ldr	r1, [r4, #20]
 8006186:	b111      	cbz	r1, 800618e <_reclaim_reent+0x46>
 8006188:	4620      	mov	r0, r4
 800618a:	f000 f867 	bl	800625c <_free_r>
 800618e:	69e1      	ldr	r1, [r4, #28]
 8006190:	b111      	cbz	r1, 8006198 <_reclaim_reent+0x50>
 8006192:	4620      	mov	r0, r4
 8006194:	f000 f862 	bl	800625c <_free_r>
 8006198:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800619a:	b111      	cbz	r1, 80061a2 <_reclaim_reent+0x5a>
 800619c:	4620      	mov	r0, r4
 800619e:	f000 f85d 	bl	800625c <_free_r>
 80061a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061a4:	b111      	cbz	r1, 80061ac <_reclaim_reent+0x64>
 80061a6:	4620      	mov	r0, r4
 80061a8:	f000 f858 	bl	800625c <_free_r>
 80061ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80061ae:	b111      	cbz	r1, 80061b6 <_reclaim_reent+0x6e>
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 f853 	bl	800625c <_free_r>
 80061b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80061b8:	b111      	cbz	r1, 80061c0 <_reclaim_reent+0x78>
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 f84e 	bl	800625c <_free_r>
 80061c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80061c2:	b111      	cbz	r1, 80061ca <_reclaim_reent+0x82>
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 f849 	bl	800625c <_free_r>
 80061ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80061cc:	b111      	cbz	r1, 80061d4 <_reclaim_reent+0x8c>
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 f844 	bl	800625c <_free_r>
 80061d4:	6a23      	ldr	r3, [r4, #32]
 80061d6:	b14b      	cbz	r3, 80061ec <_reclaim_reent+0xa4>
 80061d8:	4620      	mov	r0, r4
 80061da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80061de:	4718      	bx	r3
 80061e0:	680e      	ldr	r6, [r1, #0]
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 f83a 	bl	800625c <_free_r>
 80061e8:	4631      	mov	r1, r6
 80061ea:	e7bb      	b.n	8006164 <_reclaim_reent+0x1c>
 80061ec:	bd70      	pop	{r4, r5, r6, pc}
 80061ee:	bf00      	nop
 80061f0:	20000010 	.word	0x20000010

080061f4 <__libc_init_array>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	4d0d      	ldr	r5, [pc, #52]	@ (800622c <__libc_init_array+0x38>)
 80061f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006230 <__libc_init_array+0x3c>)
 80061fa:	1b64      	subs	r4, r4, r5
 80061fc:	10a4      	asrs	r4, r4, #2
 80061fe:	2600      	movs	r6, #0
 8006200:	42a6      	cmp	r6, r4
 8006202:	d109      	bne.n	8006218 <__libc_init_array+0x24>
 8006204:	4d0b      	ldr	r5, [pc, #44]	@ (8006234 <__libc_init_array+0x40>)
 8006206:	4c0c      	ldr	r4, [pc, #48]	@ (8006238 <__libc_init_array+0x44>)
 8006208:	f000 f87e 	bl	8006308 <_init>
 800620c:	1b64      	subs	r4, r4, r5
 800620e:	10a4      	asrs	r4, r4, #2
 8006210:	2600      	movs	r6, #0
 8006212:	42a6      	cmp	r6, r4
 8006214:	d105      	bne.n	8006222 <__libc_init_array+0x2e>
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	f855 3b04 	ldr.w	r3, [r5], #4
 800621c:	4798      	blx	r3
 800621e:	3601      	adds	r6, #1
 8006220:	e7ee      	b.n	8006200 <__libc_init_array+0xc>
 8006222:	f855 3b04 	ldr.w	r3, [r5], #4
 8006226:	4798      	blx	r3
 8006228:	3601      	adds	r6, #1
 800622a:	e7f2      	b.n	8006212 <__libc_init_array+0x1e>
 800622c:	08006410 	.word	0x08006410
 8006230:	08006410 	.word	0x08006410
 8006234:	08006410 	.word	0x08006410
 8006238:	08006414 	.word	0x08006414

0800623c <__retarget_lock_acquire_recursive>:
 800623c:	4770      	bx	lr

0800623e <__retarget_lock_release_recursive>:
 800623e:	4770      	bx	lr

08006240 <memcpy>:
 8006240:	440a      	add	r2, r1
 8006242:	4291      	cmp	r1, r2
 8006244:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006248:	d100      	bne.n	800624c <memcpy+0xc>
 800624a:	4770      	bx	lr
 800624c:	b510      	push	{r4, lr}
 800624e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006256:	4291      	cmp	r1, r2
 8006258:	d1f9      	bne.n	800624e <memcpy+0xe>
 800625a:	bd10      	pop	{r4, pc}

0800625c <_free_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4605      	mov	r5, r0
 8006260:	2900      	cmp	r1, #0
 8006262:	d041      	beq.n	80062e8 <_free_r+0x8c>
 8006264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006268:	1f0c      	subs	r4, r1, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	bfb8      	it	lt
 800626e:	18e4      	addlt	r4, r4, r3
 8006270:	f000 f83e 	bl	80062f0 <__malloc_lock>
 8006274:	4a1d      	ldr	r2, [pc, #116]	@ (80062ec <_free_r+0x90>)
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	b933      	cbnz	r3, 8006288 <_free_r+0x2c>
 800627a:	6063      	str	r3, [r4, #4]
 800627c:	6014      	str	r4, [r2, #0]
 800627e:	4628      	mov	r0, r5
 8006280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006284:	f000 b83a 	b.w	80062fc <__malloc_unlock>
 8006288:	42a3      	cmp	r3, r4
 800628a:	d908      	bls.n	800629e <_free_r+0x42>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	1821      	adds	r1, r4, r0
 8006290:	428b      	cmp	r3, r1
 8006292:	bf01      	itttt	eq
 8006294:	6819      	ldreq	r1, [r3, #0]
 8006296:	685b      	ldreq	r3, [r3, #4]
 8006298:	1809      	addeq	r1, r1, r0
 800629a:	6021      	streq	r1, [r4, #0]
 800629c:	e7ed      	b.n	800627a <_free_r+0x1e>
 800629e:	461a      	mov	r2, r3
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	b10b      	cbz	r3, 80062a8 <_free_r+0x4c>
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d9fa      	bls.n	800629e <_free_r+0x42>
 80062a8:	6811      	ldr	r1, [r2, #0]
 80062aa:	1850      	adds	r0, r2, r1
 80062ac:	42a0      	cmp	r0, r4
 80062ae:	d10b      	bne.n	80062c8 <_free_r+0x6c>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	4401      	add	r1, r0
 80062b4:	1850      	adds	r0, r2, r1
 80062b6:	4283      	cmp	r3, r0
 80062b8:	6011      	str	r1, [r2, #0]
 80062ba:	d1e0      	bne.n	800627e <_free_r+0x22>
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	6053      	str	r3, [r2, #4]
 80062c2:	4408      	add	r0, r1
 80062c4:	6010      	str	r0, [r2, #0]
 80062c6:	e7da      	b.n	800627e <_free_r+0x22>
 80062c8:	d902      	bls.n	80062d0 <_free_r+0x74>
 80062ca:	230c      	movs	r3, #12
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	e7d6      	b.n	800627e <_free_r+0x22>
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	1821      	adds	r1, r4, r0
 80062d4:	428b      	cmp	r3, r1
 80062d6:	bf04      	itt	eq
 80062d8:	6819      	ldreq	r1, [r3, #0]
 80062da:	685b      	ldreq	r3, [r3, #4]
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	bf04      	itt	eq
 80062e0:	1809      	addeq	r1, r1, r0
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	6054      	str	r4, [r2, #4]
 80062e6:	e7ca      	b.n	800627e <_free_r+0x22>
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	20004c40 	.word	0x20004c40

080062f0 <__malloc_lock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	@ (80062f8 <__malloc_lock+0x8>)
 80062f2:	f7ff bfa3 	b.w	800623c <__retarget_lock_acquire_recursive>
 80062f6:	bf00      	nop
 80062f8:	20004c3c 	.word	0x20004c3c

080062fc <__malloc_unlock>:
 80062fc:	4801      	ldr	r0, [pc, #4]	@ (8006304 <__malloc_unlock+0x8>)
 80062fe:	f7ff bf9e 	b.w	800623e <__retarget_lock_release_recursive>
 8006302:	bf00      	nop
 8006304:	20004c3c 	.word	0x20004c3c

08006308 <_init>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	bf00      	nop
 800630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630e:	bc08      	pop	{r3}
 8006310:	469e      	mov	lr, r3
 8006312:	4770      	bx	lr

08006314 <_fini>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	bf00      	nop
 8006318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631a:	bc08      	pop	{r3}
 800631c:	469e      	mov	lr, r3
 800631e:	4770      	bx	lr
