
Atividade03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000635c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800652c  0800652c  0000752c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d0  080066d0  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080066d0  080066d0  000076d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066d8  080066d8  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d8  080066d8  000076d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080066e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  20000060  08006740  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c4c  08006740  00008c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018500  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f1  00000000  00000000  00020590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00023988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc7  00000000  00000000  00024dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039e4  00000000  00000000  00025d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163c1  00000000  00000000  0002977b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db920  00000000  00000000  0003fb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b45c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a8c  00000000  00000000  0011b4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00120f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006514 	.word	0x08006514

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006514 	.word	0x08006514

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fb8c 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f826 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f8bc 	bl	8000728 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f890 	bl	80006d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b4:	f002 fb5c 	bl	8002c70 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskMain */
  TaskMainHandle = osThreadNew(StartTaskMain, NULL, &TaskMain_attributes);
 80005b8:	4a09      	ldr	r2, [pc, #36]	@ (80005e0 <main+0x40>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <main+0x44>)
 80005be:	f002 fba1 	bl	8002d04 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a08      	ldr	r2, [pc, #32]	@ (80005e8 <main+0x48>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of TaskAux */
  TaskAuxHandle = osThreadNew(StartTaskAux, NULL, &TaskAux_attributes);
 80005c8:	4a08      	ldr	r2, [pc, #32]	@ (80005ec <main+0x4c>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <main+0x50>)
 80005ce:	f002 fb99 	bl	8002d04 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <main+0x54>)
 80005d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d8:	f002 fb6e 	bl	8002cb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <main+0x3c>
 80005e0:	0800663c 	.word	0x0800663c
 80005e4:	08000825 	.word	0x08000825
 80005e8:	200000c4 	.word	0x200000c4
 80005ec:	08006660 	.word	0x08006660
 80005f0:	08000895 	.word	0x08000895
 80005f4:	200000c8 	.word	0x200000c8

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2234      	movs	r2, #52	@ 0x34
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 faae 	bl	8005b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <SystemClock_Config+0xd4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a29      	ldr	r2, [pc, #164]	@ (80006cc <SystemClock_Config+0xd4>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b27      	ldr	r3, [pc, #156]	@ (80006cc <SystemClock_Config+0xd4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <SystemClock_Config+0xd8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000644:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <SystemClock_Config+0xd8>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <SystemClock_Config+0xd8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800066c:	2310      	movs	r3, #16
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000674:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4618      	mov	r0, r3
 8000688:	f001 f968 	bl	800195c <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000692:	f000 f991 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fdd6 	bl	8001264 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006be:	f000 f97b 	bl	80009b8 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_USART1_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 800070c:	f001 fe60 	bl	80023d0 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f94f 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000007c 	.word	0x2000007c
 8000724:	40011000 	.word	0x40011000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b35      	ldr	r3, [pc, #212]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a34      	ldr	r2, [pc, #208]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a2d      	ldr	r2, [pc, #180]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <MX_GPIO_Init+0xf0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <MX_GPIO_Init+0xf0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a26      	ldr	r2, [pc, #152]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a1f      	ldr	r2, [pc, #124]	@ (8000818 <MX_GPIO_Init+0xf0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedGreen_Pin|LedYellow_Pin|LedRed_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2133      	movs	r1, #51	@ 0x33
 80007b2:	481a      	ldr	r0, [pc, #104]	@ (800081c <MX_GPIO_Init+0xf4>)
 80007b4:	f000 fd3c 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	@ (8000820 <MX_GPIO_Init+0xf8>)
 80007d0:	f000 fb9a 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LedGreen_Pin LedYellow_Pin LedRed_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LedGreen_Pin|LedYellow_Pin|LedRed_Pin|LD2_Pin;
 80007d4:	2333      	movs	r3, #51	@ 0x33
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <MX_GPIO_Init+0xf4>)
 80007ec:	f000 fb8c 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f0:	230c      	movs	r3, #12
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000800:	2307      	movs	r3, #7
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_GPIO_Init+0xf4>)
 800080c:	f000 fb7c 	bl	8000f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	@ 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020800 	.word	0x40020800

08000824 <StartTaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskMain */
void StartTaskMain(void *argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09e      	sub	sp, #120	@ 0x78
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	int size;
	char message[100];
  /* Infinite loop */
  for(;;)
  {
	  TaskMainState = osThreadGetState(TaskMainHandle);
 800082c:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <StartTaskMain+0x60>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f002 faf9 	bl	8002e28 <osThreadGetState>
 8000836:	6778      	str	r0, [r7, #116]	@ 0x74
	  size =sprintf(message,"O Estado Atual da Main Task: %i\n ",TaskMainState);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800083e:	4912      	ldr	r1, [pc, #72]	@ (8000888 <StartTaskMain+0x64>)
 8000840:	4618      	mov	r0, r3
 8000842:	f005 f971 	bl	8005b28 <siprintf>
 8000846:	6738      	str	r0, [r7, #112]	@ 0x70
	  HAL_UART_Transmit(&huart1,(uint8_t*)message, size,HAL_MAX_DELAY);
 8000848:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800084a:	b29a      	uxth	r2, r3
 800084c:	f107 010c 	add.w	r1, r7, #12
 8000850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000854:	480d      	ldr	r0, [pc, #52]	@ (800088c <StartTaskMain+0x68>)
 8000856:	f001 fe0b 	bl	8002470 <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(LedGreen_GPIO_Port, LedGreen_Pin, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2101      	movs	r1, #1
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <StartTaskMain+0x6c>)
 8000860:	f000 fce6 	bl	8001230 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LedYellow_GPIO_Port, LedYellow_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2102      	movs	r1, #2
 8000868:	4809      	ldr	r0, [pc, #36]	@ (8000890 <StartTaskMain+0x6c>)
 800086a:	f000 fce1 	bl	8001230 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LedRed_GPIO_Port, LedRed_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2110      	movs	r1, #16
 8000872:	4807      	ldr	r0, [pc, #28]	@ (8000890 <StartTaskMain+0x6c>)
 8000874:	f000 fcdc 	bl	8001230 <HAL_GPIO_WritePin>
	  osDelay(2000);
 8000878:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800087c:	f002 fb10 	bl	8002ea0 <osDelay>
	  TaskMainState = osThreadGetState(TaskMainHandle);
 8000880:	bf00      	nop
 8000882:	e7d3      	b.n	800082c <StartTaskMain+0x8>
 8000884:	200000c4 	.word	0x200000c4
 8000888:	08006540 	.word	0x08006540
 800088c:	2000007c 	.word	0x2000007c
 8000890:	40020000 	.word	0x40020000

08000894 <StartTaskAux>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAux */
void StartTaskAux(void *argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09e      	sub	sp, #120	@ 0x78
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	char message[100];
  /* Infinite loop */
  for(;;)
  {

	  if((TaskMainState = osThreadGetState(TaskMainHandle)) == 3) /*Se o Task Principal estiver Bloqueada*/
 800089c:	4b37      	ldr	r3, [pc, #220]	@ (800097c <StartTaskAux+0xe8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fac1 	bl	8002e28 <osThreadGetState>
 80008a6:	6778      	str	r0, [r7, #116]	@ 0x74
 80008a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d1f6      	bne.n	800089c <StartTaskAux+0x8>
	  {
		  osDelay(2000);
 80008ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008b2:	f002 faf5 	bl	8002ea0 <osDelay>
		  size =sprintf(message,"Mensagem Enviada Pela AUX: O Estado Atual da Main Task: %i\n ",TaskMainState);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80008bc:	4930      	ldr	r1, [pc, #192]	@ (8000980 <StartTaskAux+0xec>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f005 f932 	bl	8005b28 <siprintf>
 80008c4:	6738      	str	r0, [r7, #112]	@ 0x70
		  HAL_UART_Transmit(&huart1,(uint8_t*)message, size,HAL_MAX_DELAY);
 80008c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	f107 010c 	add.w	r1, r7, #12
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008d2:	482c      	ldr	r0, [pc, #176]	@ (8000984 <StartTaskAux+0xf0>)
 80008d4:	f001 fdcc 	bl	8002470 <HAL_UART_Transmit>

		  vTaskSuspend(TaskMainHandle);
 80008d8:	4b28      	ldr	r3, [pc, #160]	@ (800097c <StartTaskAux+0xe8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fb39 	bl	8003f54 <vTaskSuspend>
		  size =sprintf(message,"Mensagem Enviada Pela Aux: A Main Task Foi Suspensa e seu Estado: %i\n ",TaskMainState);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80008e8:	4927      	ldr	r1, [pc, #156]	@ (8000988 <StartTaskAux+0xf4>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 f91c 	bl	8005b28 <siprintf>
 80008f0:	6738      	str	r0, [r7, #112]	@ 0x70
		  HAL_UART_Transmit(&huart1,(uint8_t*)message, size,HAL_MAX_DELAY);
 80008f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f107 010c 	add.w	r1, r7, #12
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008fe:	4821      	ldr	r0, [pc, #132]	@ (8000984 <StartTaskAux+0xf0>)
 8000900:	f001 fdb6 	bl	8002470 <HAL_UART_Transmit>

		  HAL_GPIO_WritePin(LedGreen_GPIO_Port, LedGreen_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2101      	movs	r1, #1
 8000908:	4820      	ldr	r0, [pc, #128]	@ (800098c <StartTaskAux+0xf8>)
 800090a:	f000 fc91 	bl	8001230 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LedYellow_GPIO_Port, LedYellow_Pin, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2102      	movs	r1, #2
 8000912:	481e      	ldr	r0, [pc, #120]	@ (800098c <StartTaskAux+0xf8>)
 8000914:	f000 fc8c 	bl	8001230 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LedRed_GPIO_Port, LedRed_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2110      	movs	r1, #16
 800091c:	481b      	ldr	r0, [pc, #108]	@ (800098c <StartTaskAux+0xf8>)
 800091e:	f000 fc87 	bl	8001230 <HAL_GPIO_WritePin>
		  osDelay(2000);
 8000922:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000926:	f002 fabb 	bl	8002ea0 <osDelay>

		  HAL_GPIO_WritePin(LedGreen_GPIO_Port, LedGreen_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	4817      	ldr	r0, [pc, #92]	@ (800098c <StartTaskAux+0xf8>)
 8000930:	f000 fc7e 	bl	8001230 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LedYellow_GPIO_Port, LedYellow_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2102      	movs	r1, #2
 8000938:	4814      	ldr	r0, [pc, #80]	@ (800098c <StartTaskAux+0xf8>)
 800093a:	f000 fc79 	bl	8001230 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LedRed_GPIO_Port, LedRed_Pin, GPIO_PIN_SET);
 800093e:	2201      	movs	r2, #1
 8000940:	2110      	movs	r1, #16
 8000942:	4812      	ldr	r0, [pc, #72]	@ (800098c <StartTaskAux+0xf8>)
 8000944:	f000 fc74 	bl	8001230 <HAL_GPIO_WritePin>
		  osDelay(2000);
 8000948:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800094c:	f002 faa8 	bl	8002ea0 <osDelay>


		  size =sprintf(message,"Mensagem Enviada pela AUX: A Main Task Foi Retomada\n ");
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	490e      	ldr	r1, [pc, #56]	@ (8000990 <StartTaskAux+0xfc>)
 8000956:	4618      	mov	r0, r3
 8000958:	f005 f8e6 	bl	8005b28 <siprintf>
 800095c:	6738      	str	r0, [r7, #112]	@ 0x70
		  HAL_UART_Transmit(&huart1,(uint8_t*)message, size,HAL_MAX_DELAY);
 800095e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000960:	b29a      	uxth	r2, r3
 8000962:	f107 010c 	add.w	r1, r7, #12
 8000966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800096a:	4806      	ldr	r0, [pc, #24]	@ (8000984 <StartTaskAux+0xf0>)
 800096c:	f001 fd80 	bl	8002470 <HAL_UART_Transmit>
		  vTaskResume(TaskMainHandle);
 8000970:	4b02      	ldr	r3, [pc, #8]	@ (800097c <StartTaskAux+0xe8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fb95 	bl	80040a4 <vTaskResume>
	  if((TaskMainState = osThreadGetState(TaskMainHandle)) == 3) /*Se o Task Principal estiver Bloqueada*/
 800097a:	e78f      	b.n	800089c <StartTaskAux+0x8>
 800097c:	200000c4 	.word	0x200000c4
 8000980:	08006564 	.word	0x08006564
 8000984:	2000007c 	.word	0x2000007c
 8000988:	080065a4 	.word	0x080065a4
 800098c:	40020000 	.word	0x40020000
 8000990:	080065ec 	.word	0x080065ec

08000994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a6:	f000 f9ad 	bl	8000d04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40010000 	.word	0x40010000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a11      	ldr	r2, [pc, #68]	@ (8000a18 <HAL_MspInit+0x54>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_MspInit+0x54>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <HAL_MspInit+0x54>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_MspInit+0x54>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	210f      	movs	r1, #15
 8000a06:	f06f 0001 	mvn.w	r0, #1
 8000a0a:	f000 fa53 	bl	8000eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a19      	ldr	r2, [pc, #100]	@ (8000aa0 <HAL_UART_MspInit+0x84>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12c      	bne.n	8000a98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a17      	ldr	r2, [pc, #92]	@ (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a48:	f043 0310 	orr.w	r3, r3, #16
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f003 0310 	and.w	r3, r3, #16
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a10      	ldr	r2, [pc, #64]	@ (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <HAL_UART_MspInit+0x8c>)
 8000a94:	f000 fa38 	bl	8000f08 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	@ 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40011000 	.word	0x40011000
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	@ 0x30
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b7c <HAL_InitTick+0xd0>)
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8000b7c <HAL_InitTick+0xd0>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6453      	str	r3, [r2, #68]	@ 0x44
 8000acc:	4b2b      	ldr	r3, [pc, #172]	@ (8000b7c <HAL_InitTick+0xd0>)
 8000ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad8:	f107 020c 	add.w	r2, r7, #12
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fcd8 	bl	8001498 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ae8:	f000 fcc2 	bl	8001470 <HAL_RCC_GetPCLK2Freq>
 8000aec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af0:	4a23      	ldr	r2, [pc, #140]	@ (8000b80 <HAL_InitTick+0xd4>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	0c9b      	lsrs	r3, r3, #18
 8000af8:	3b01      	subs	r3, #1
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000afc:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <HAL_InitTick+0xd8>)
 8000afe:	4a22      	ldr	r2, [pc, #136]	@ (8000b88 <HAL_InitTick+0xdc>)
 8000b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b02:	4b20      	ldr	r3, [pc, #128]	@ (8000b84 <HAL_InitTick+0xd8>)
 8000b04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b84 <HAL_InitTick+0xd8>)
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <HAL_InitTick+0xd8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <HAL_InitTick+0xd8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <HAL_InitTick+0xd8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b22:	4818      	ldr	r0, [pc, #96]	@ (8000b84 <HAL_InitTick+0xd8>)
 8000b24:	f001 f9b8 	bl	8001e98 <HAL_TIM_Base_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d11b      	bne.n	8000b6e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b36:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <HAL_InitTick+0xd8>)
 8000b38:	f001 fa08 	bl	8001f4c <HAL_TIM_Base_Start_IT>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d111      	bne.n	8000b6e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b4a:	2019      	movs	r0, #25
 8000b4c:	f000 f9ce 	bl	8000eec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	d808      	bhi.n	8000b68 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b56:	2200      	movs	r2, #0
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	2019      	movs	r0, #25
 8000b5c:	f000 f9aa 	bl	8000eb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_InitTick+0xe0>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e002      	b.n	8000b6e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3730      	adds	r7, #48	@ 0x30
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	431bde83 	.word	0x431bde83
 8000b84:	200000cc 	.word	0x200000cc
 8000b88:	40010000 	.word	0x40010000
 8000b8c:	20000004 	.word	0x20000004

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <NMI_Handler+0x4>

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bce:	f001 fa2d 	bl	800202c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200000cc 	.word	0x200000cc

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	@ (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f005 f80a 	bl	8005c24 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20020000 	.word	0x20020000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000114 	.word	0x20000114
 8000c44:	20004c50 	.word	0x20004c50

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	@ (8000cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f004 ffc9 	bl	8005c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fc7f 	bl	80005a0 <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cb0:	080066e0 	.word	0x080066e0
  ldr r2, =_sbss
 8000cb4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cb8:	20004c4c 	.word	0x20004c4c

08000cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	@ (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f8d8 	bl	8000e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f7ff fedc 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fe66 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000118 	.word	0x20000118

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000118 	.word	0x20000118

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	@ (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	@ (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	@ (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	@ 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff4c 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec6:	f7ff ff61 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000eca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	6978      	ldr	r0, [r7, #20]
 8000ed2:	f7ff ffb1 	bl	8000e38 <NVIC_EncodePriority>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff80 	bl	8000de4 <__NVIC_SetPriority>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff54 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	@ 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e165      	b.n	80011f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	f040 8154 	bne.w	80011ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d005      	beq.n	8000f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d130      	bne.n	8000fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	f003 0201 	and.w	r2, r3, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d017      	beq.n	8000ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d123      	bne.n	800104c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	69b9      	ldr	r1, [r7, #24]
 8001048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0203 	and.w	r2, r3, #3
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80ae 	beq.w	80011ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b5d      	ldr	r3, [pc, #372]	@ (8001208 <HAL_GPIO_Init+0x300>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	4a5c      	ldr	r2, [pc, #368]	@ (8001208 <HAL_GPIO_Init+0x300>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800109c:	6453      	str	r3, [r2, #68]	@ 0x44
 800109e:	4b5a      	ldr	r3, [pc, #360]	@ (8001208 <HAL_GPIO_Init+0x300>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010aa:	4a58      	ldr	r2, [pc, #352]	@ (800120c <HAL_GPIO_Init+0x304>)
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001210 <HAL_GPIO_Init+0x308>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d025      	beq.n	8001122 <HAL_GPIO_Init+0x21a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001214 <HAL_GPIO_Init+0x30c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01f      	beq.n	800111e <HAL_GPIO_Init+0x216>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001218 <HAL_GPIO_Init+0x310>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x212>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4c      	ldr	r2, [pc, #304]	@ (800121c <HAL_GPIO_Init+0x314>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x20e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001220 <HAL_GPIO_Init+0x318>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x20a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001224 <HAL_GPIO_Init+0x31c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x206>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a49      	ldr	r2, [pc, #292]	@ (8001228 <HAL_GPIO_Init+0x320>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x202>
 8001106:	2306      	movs	r3, #6
 8001108:	e00c      	b.n	8001124 <HAL_GPIO_Init+0x21c>
 800110a:	2307      	movs	r3, #7
 800110c:	e00a      	b.n	8001124 <HAL_GPIO_Init+0x21c>
 800110e:	2305      	movs	r3, #5
 8001110:	e008      	b.n	8001124 <HAL_GPIO_Init+0x21c>
 8001112:	2304      	movs	r3, #4
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x21c>
 8001116:	2303      	movs	r3, #3
 8001118:	e004      	b.n	8001124 <HAL_GPIO_Init+0x21c>
 800111a:	2302      	movs	r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x21c>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x21c>
 8001122:	2300      	movs	r3, #0
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	f002 0203 	and.w	r2, r2, #3
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	4093      	lsls	r3, r2
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001134:	4935      	ldr	r1, [pc, #212]	@ (800120c <HAL_GPIO_Init+0x304>)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001142:	4b3a      	ldr	r3, [pc, #232]	@ (800122c <HAL_GPIO_Init+0x324>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001166:	4a31      	ldr	r2, [pc, #196]	@ (800122c <HAL_GPIO_Init+0x324>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800116c:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <HAL_GPIO_Init+0x324>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001190:	4a26      	ldr	r2, [pc, #152]	@ (800122c <HAL_GPIO_Init+0x324>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <HAL_GPIO_Init+0x324>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ba:	4a1c      	ldr	r2, [pc, #112]	@ (800122c <HAL_GPIO_Init+0x324>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <HAL_GPIO_Init+0x324>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e4:	4a11      	ldr	r2, [pc, #68]	@ (800122c <HAL_GPIO_Init+0x324>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	f67f ae96 	bls.w	8000f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	@ 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020800 	.word	0x40020800
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40021400 	.word	0x40021400
 8001228:	40021800 	.word	0x40021800
 800122c:	40013c00 	.word	0x40013c00

08001230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800124c:	e003      	b.n	8001256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	041a      	lsls	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0cc      	b.n	8001412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001278:	4b68      	ldr	r3, [pc, #416]	@ (800141c <HAL_RCC_ClockConfig+0x1b8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d90c      	bls.n	80012a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b65      	ldr	r3, [pc, #404]	@ (800141c <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b63      	ldr	r3, [pc, #396]	@ (800141c <HAL_RCC_ClockConfig+0x1b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0b8      	b.n	8001412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d020      	beq.n	80012ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b8:	4b59      	ldr	r3, [pc, #356]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a58      	ldr	r2, [pc, #352]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d0:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	4a52      	ldr	r2, [pc, #328]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012dc:	4b50      	ldr	r3, [pc, #320]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	494d      	ldr	r1, [pc, #308]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d044      	beq.n	8001384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d107      	bne.n	8001312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d119      	bne.n	8001342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e07f      	b.n	8001412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d003      	beq.n	8001322 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131e:	2b03      	cmp	r3, #3
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001322:	4b3f      	ldr	r3, [pc, #252]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06f      	b.n	8001412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001332:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e067      	b.n	8001412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001342:	4b37      	ldr	r3, [pc, #220]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f023 0203 	bic.w	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4934      	ldr	r1, [pc, #208]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	4313      	orrs	r3, r2
 8001352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001354:	f7ff fcea 	bl	8000d2c <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135a:	e00a      	b.n	8001372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135c:	f7ff fce6 	bl	8000d2c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e04f      	b.n	8001412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 020c 	and.w	r2, r3, #12
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	429a      	cmp	r2, r3
 8001382:	d1eb      	bne.n	800135c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001384:	4b25      	ldr	r3, [pc, #148]	@ (800141c <HAL_RCC_ClockConfig+0x1b8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d20c      	bcs.n	80013ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b22      	ldr	r3, [pc, #136]	@ (800141c <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <HAL_RCC_ClockConfig+0x1b8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e032      	b.n	8001412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d008      	beq.n	80013ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b8:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4916      	ldr	r1, [pc, #88]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	490e      	ldr	r1, [pc, #56]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ea:	f000 f887 	bl	80014fc <HAL_RCC_GetSysClockFreq>
 80013ee:	4602      	mov	r2, r0
 80013f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	490a      	ldr	r1, [pc, #40]	@ (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	5ccb      	ldrb	r3, [r1, r3]
 80013fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001402:	4a09      	ldr	r2, [pc, #36]	@ (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_RCC_ClockConfig+0x1c8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fb4e 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023c00 	.word	0x40023c00
 8001420:	40023800 	.word	0x40023800
 8001424:	08006684 	.word	0x08006684
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <HAL_RCC_GetHCLKFreq+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000000 	.word	0x20000000

08001448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800144c:	f7ff fff0 	bl	8001430 <HAL_RCC_GetHCLKFreq>
 8001450:	4602      	mov	r2, r0
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	0a9b      	lsrs	r3, r3, #10
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	4903      	ldr	r1, [pc, #12]	@ (800146c <HAL_RCC_GetPCLK1Freq+0x24>)
 800145e:	5ccb      	ldrb	r3, [r1, r3]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	08006694 	.word	0x08006694

08001470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001474:	f7ff ffdc 	bl	8001430 <HAL_RCC_GetHCLKFreq>
 8001478:	4602      	mov	r2, r0
 800147a:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	0b5b      	lsrs	r3, r3, #13
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	4903      	ldr	r1, [pc, #12]	@ (8001494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001486:	5ccb      	ldrb	r3, [r1, r3]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	08006694 	.word	0x08006694

08001498 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	220f      	movs	r2, #15
 80014a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_RCC_GetClockConfig+0x5c>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 0203 	and.w	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_RCC_GetClockConfig+0x5c>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <HAL_RCC_GetClockConfig+0x5c>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_RCC_GetClockConfig+0x5c>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <HAL_RCC_GetClockConfig+0x60>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 020f 	and.w	r2, r3, #15
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40023c00 	.word	0x40023c00

080014fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001500:	b0ae      	sub	sp, #184	@ 0xb8
 8001502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001522:	4bcb      	ldr	r3, [pc, #812]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x354>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b0c      	cmp	r3, #12
 800152c:	f200 8206 	bhi.w	800193c <HAL_RCC_GetSysClockFreq+0x440>
 8001530:	a201      	add	r2, pc, #4	@ (adr r2, 8001538 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001536:	bf00      	nop
 8001538:	0800156d 	.word	0x0800156d
 800153c:	0800193d 	.word	0x0800193d
 8001540:	0800193d 	.word	0x0800193d
 8001544:	0800193d 	.word	0x0800193d
 8001548:	08001575 	.word	0x08001575
 800154c:	0800193d 	.word	0x0800193d
 8001550:	0800193d 	.word	0x0800193d
 8001554:	0800193d 	.word	0x0800193d
 8001558:	0800157d 	.word	0x0800157d
 800155c:	0800193d 	.word	0x0800193d
 8001560:	0800193d 	.word	0x0800193d
 8001564:	0800193d 	.word	0x0800193d
 8001568:	0800176d 	.word	0x0800176d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800156c:	4bb9      	ldr	r3, [pc, #740]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x358>)
 800156e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001572:	e1e7      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001574:	4bb8      	ldr	r3, [pc, #736]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800157a:	e1e3      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800157c:	4bb4      	ldr	r3, [pc, #720]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x354>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001588:	4bb1      	ldr	r3, [pc, #708]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x354>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d071      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001594:	4bae      	ldr	r3, [pc, #696]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x354>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	099b      	lsrs	r3, r3, #6
 800159a:	2200      	movs	r2, #0
 800159c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015a0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015ba:	4622      	mov	r2, r4
 80015bc:	462b      	mov	r3, r5
 80015be:	f04f 0000 	mov.w	r0, #0
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	0159      	lsls	r1, r3, #5
 80015c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015cc:	0150      	lsls	r0, r2, #5
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4621      	mov	r1, r4
 80015d4:	1a51      	subs	r1, r2, r1
 80015d6:	6439      	str	r1, [r7, #64]	@ 0x40
 80015d8:	4629      	mov	r1, r5
 80015da:	eb63 0301 	sbc.w	r3, r3, r1
 80015de:	647b      	str	r3, [r7, #68]	@ 0x44
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015ec:	4649      	mov	r1, r9
 80015ee:	018b      	lsls	r3, r1, #6
 80015f0:	4641      	mov	r1, r8
 80015f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015f6:	4641      	mov	r1, r8
 80015f8:	018a      	lsls	r2, r1, #6
 80015fa:	4641      	mov	r1, r8
 80015fc:	1a51      	subs	r1, r2, r1
 80015fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001600:	4649      	mov	r1, r9
 8001602:	eb63 0301 	sbc.w	r3, r3, r1
 8001606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001614:	4649      	mov	r1, r9
 8001616:	00cb      	lsls	r3, r1, #3
 8001618:	4641      	mov	r1, r8
 800161a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800161e:	4641      	mov	r1, r8
 8001620:	00ca      	lsls	r2, r1, #3
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	4603      	mov	r3, r0
 8001628:	4622      	mov	r2, r4
 800162a:	189b      	adds	r3, r3, r2
 800162c:	633b      	str	r3, [r7, #48]	@ 0x30
 800162e:	462b      	mov	r3, r5
 8001630:	460a      	mov	r2, r1
 8001632:	eb42 0303 	adc.w	r3, r2, r3
 8001636:	637b      	str	r3, [r7, #52]	@ 0x34
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001644:	4629      	mov	r1, r5
 8001646:	024b      	lsls	r3, r1, #9
 8001648:	4621      	mov	r1, r4
 800164a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800164e:	4621      	mov	r1, r4
 8001650:	024a      	lsls	r2, r1, #9
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800165a:	2200      	movs	r2, #0
 800165c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001660:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001664:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001668:	f7fe fe22 	bl	80002b0 <__aeabi_uldivmod>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4613      	mov	r3, r2
 8001672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001676:	e067      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001678:	4b75      	ldr	r3, [pc, #468]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x354>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	2200      	movs	r2, #0
 8001680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001684:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001688:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800168c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001690:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001692:	2300      	movs	r3, #0
 8001694:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001696:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800169a:	4622      	mov	r2, r4
 800169c:	462b      	mov	r3, r5
 800169e:	f04f 0000 	mov.w	r0, #0
 80016a2:	f04f 0100 	mov.w	r1, #0
 80016a6:	0159      	lsls	r1, r3, #5
 80016a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ac:	0150      	lsls	r0, r2, #5
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4621      	mov	r1, r4
 80016b4:	1a51      	subs	r1, r2, r1
 80016b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016b8:	4629      	mov	r1, r5
 80016ba:	eb63 0301 	sbc.w	r3, r3, r1
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016cc:	4649      	mov	r1, r9
 80016ce:	018b      	lsls	r3, r1, #6
 80016d0:	4641      	mov	r1, r8
 80016d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d6:	4641      	mov	r1, r8
 80016d8:	018a      	lsls	r2, r1, #6
 80016da:	4641      	mov	r1, r8
 80016dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80016e0:	4649      	mov	r1, r9
 80016e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016fa:	4692      	mov	sl, r2
 80016fc:	469b      	mov	fp, r3
 80016fe:	4623      	mov	r3, r4
 8001700:	eb1a 0303 	adds.w	r3, sl, r3
 8001704:	623b      	str	r3, [r7, #32]
 8001706:	462b      	mov	r3, r5
 8001708:	eb4b 0303 	adc.w	r3, fp, r3
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800171a:	4629      	mov	r1, r5
 800171c:	028b      	lsls	r3, r1, #10
 800171e:	4621      	mov	r1, r4
 8001720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001724:	4621      	mov	r1, r4
 8001726:	028a      	lsls	r2, r1, #10
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001730:	2200      	movs	r2, #0
 8001732:	673b      	str	r3, [r7, #112]	@ 0x70
 8001734:	677a      	str	r2, [r7, #116]	@ 0x74
 8001736:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800173a:	f7fe fdb9 	bl	80002b0 <__aeabi_uldivmod>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4613      	mov	r3, r2
 8001744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001748:	4b41      	ldr	r3, [pc, #260]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x354>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	3301      	adds	r3, #1
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800175a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800175e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800176a:	e0eb      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800176c:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x354>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001778:	4b35      	ldr	r3, [pc, #212]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x354>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d06b      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001784:	4b32      	ldr	r3, [pc, #200]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x354>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	2200      	movs	r2, #0
 800178c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800178e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001796:	663b      	str	r3, [r7, #96]	@ 0x60
 8001798:	2300      	movs	r3, #0
 800179a:	667b      	str	r3, [r7, #100]	@ 0x64
 800179c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017a0:	4622      	mov	r2, r4
 80017a2:	462b      	mov	r3, r5
 80017a4:	f04f 0000 	mov.w	r0, #0
 80017a8:	f04f 0100 	mov.w	r1, #0
 80017ac:	0159      	lsls	r1, r3, #5
 80017ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b2:	0150      	lsls	r0, r2, #5
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4621      	mov	r1, r4
 80017ba:	1a51      	subs	r1, r2, r1
 80017bc:	61b9      	str	r1, [r7, #24]
 80017be:	4629      	mov	r1, r5
 80017c0:	eb63 0301 	sbc.w	r3, r3, r1
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017d2:	4659      	mov	r1, fp
 80017d4:	018b      	lsls	r3, r1, #6
 80017d6:	4651      	mov	r1, sl
 80017d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017dc:	4651      	mov	r1, sl
 80017de:	018a      	lsls	r2, r1, #6
 80017e0:	4651      	mov	r1, sl
 80017e2:	ebb2 0801 	subs.w	r8, r2, r1
 80017e6:	4659      	mov	r1, fp
 80017e8:	eb63 0901 	sbc.w	r9, r3, r1
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001800:	4690      	mov	r8, r2
 8001802:	4699      	mov	r9, r3
 8001804:	4623      	mov	r3, r4
 8001806:	eb18 0303 	adds.w	r3, r8, r3
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	462b      	mov	r3, r5
 800180e:	eb49 0303 	adc.w	r3, r9, r3
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001820:	4629      	mov	r1, r5
 8001822:	024b      	lsls	r3, r1, #9
 8001824:	4621      	mov	r1, r4
 8001826:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800182a:	4621      	mov	r1, r4
 800182c:	024a      	lsls	r2, r1, #9
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001836:	2200      	movs	r2, #0
 8001838:	65bb      	str	r3, [r7, #88]	@ 0x58
 800183a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800183c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001840:	f7fe fd36 	bl	80002b0 <__aeabi_uldivmod>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4613      	mov	r3, r2
 800184a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800184e:	e065      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x420>
 8001850:	40023800 	.word	0x40023800
 8001854:	00f42400 	.word	0x00f42400
 8001858:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185c:	4b3d      	ldr	r3, [pc, #244]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x458>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	2200      	movs	r2, #0
 8001864:	4618      	mov	r0, r3
 8001866:	4611      	mov	r1, r2
 8001868:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800186c:	653b      	str	r3, [r7, #80]	@ 0x50
 800186e:	2300      	movs	r3, #0
 8001870:	657b      	str	r3, [r7, #84]	@ 0x54
 8001872:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001876:	4642      	mov	r2, r8
 8001878:	464b      	mov	r3, r9
 800187a:	f04f 0000 	mov.w	r0, #0
 800187e:	f04f 0100 	mov.w	r1, #0
 8001882:	0159      	lsls	r1, r3, #5
 8001884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001888:	0150      	lsls	r0, r2, #5
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4641      	mov	r1, r8
 8001890:	1a51      	subs	r1, r2, r1
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	4649      	mov	r1, r9
 8001896:	eb63 0301 	sbc.w	r3, r3, r1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018a8:	4659      	mov	r1, fp
 80018aa:	018b      	lsls	r3, r1, #6
 80018ac:	4651      	mov	r1, sl
 80018ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b2:	4651      	mov	r1, sl
 80018b4:	018a      	lsls	r2, r1, #6
 80018b6:	4651      	mov	r1, sl
 80018b8:	1a54      	subs	r4, r2, r1
 80018ba:	4659      	mov	r1, fp
 80018bc:	eb63 0501 	sbc.w	r5, r3, r1
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	00eb      	lsls	r3, r5, #3
 80018ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ce:	00e2      	lsls	r2, r4, #3
 80018d0:	4614      	mov	r4, r2
 80018d2:	461d      	mov	r5, r3
 80018d4:	4643      	mov	r3, r8
 80018d6:	18e3      	adds	r3, r4, r3
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	464b      	mov	r3, r9
 80018dc:	eb45 0303 	adc.w	r3, r5, r3
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ee:	4629      	mov	r1, r5
 80018f0:	028b      	lsls	r3, r1, #10
 80018f2:	4621      	mov	r1, r4
 80018f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f8:	4621      	mov	r1, r4
 80018fa:	028a      	lsls	r2, r1, #10
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001904:	2200      	movs	r2, #0
 8001906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001908:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800190a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800190e:	f7fe fccf 	bl	80002b0 <__aeabi_uldivmod>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4613      	mov	r3, r2
 8001918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800191c:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x458>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	0f1b      	lsrs	r3, r3, #28
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800192a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800192e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800193a:	e003      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x45c>)
 800193e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001944:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001948:	4618      	mov	r0, r3
 800194a:	37b8      	adds	r7, #184	@ 0xb8
 800194c:	46bd      	mov	sp, r7
 800194e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	00f42400 	.word	0x00f42400

0800195c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e28d      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8083 	beq.w	8001a82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800197c:	4b94      	ldr	r3, [pc, #592]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b04      	cmp	r3, #4
 8001986:	d019      	beq.n	80019bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001988:	4b91      	ldr	r3, [pc, #580]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001990:	2b08      	cmp	r3, #8
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001994:	4b8e      	ldr	r3, [pc, #568]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019a0:	d00c      	beq.n	80019bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	4b8b      	ldr	r3, [pc, #556]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d112      	bne.n	80019d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ae:	4b88      	ldr	r3, [pc, #544]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ba:	d10b      	bne.n	80019d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	4b84      	ldr	r3, [pc, #528]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d05b      	beq.n	8001a80 <HAL_RCC_OscConfig+0x124>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d157      	bne.n	8001a80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e25a      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019dc:	d106      	bne.n	80019ec <HAL_RCC_OscConfig+0x90>
 80019de:	4b7c      	ldr	r3, [pc, #496]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a7b      	ldr	r2, [pc, #492]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e01d      	b.n	8001a28 <HAL_RCC_OscConfig+0xcc>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0xb4>
 80019f6:	4b76      	ldr	r3, [pc, #472]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a75      	ldr	r2, [pc, #468]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 80019fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b73      	ldr	r3, [pc, #460]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a72      	ldr	r2, [pc, #456]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0xcc>
 8001a10:	4b6f      	ldr	r3, [pc, #444]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a6e      	ldr	r2, [pc, #440]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6b      	ldr	r2, [pc, #428]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f97c 	bl	8000d2c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff f978 	bl	8000d2c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	@ 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e21f      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b61      	ldr	r3, [pc, #388]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0xdc>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff f968 	bl	8000d2c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff f964 	bl	8000d2c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	@ 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e20b      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	4b57      	ldr	r3, [pc, #348]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x104>
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d06f      	beq.n	8001b6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a8e:	4b50      	ldr	r3, [pc, #320]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d017      	beq.n	8001aca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d105      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab2:	4b47      	ldr	r3, [pc, #284]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d11c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001abe:	4b44      	ldr	r3, [pc, #272]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d116      	bne.n	8001af8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	4b41      	ldr	r3, [pc, #260]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x186>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e1d3      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4937      	ldr	r1, [pc, #220]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	e03a      	b.n	8001b6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d020      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b00:	4b34      	ldr	r3, [pc, #208]	@ (8001bd4 <HAL_RCC_OscConfig+0x278>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f911 	bl	8000d2c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f90d 	bl	8000d2c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1b4      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	4b28      	ldr	r3, [pc, #160]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4925      	ldr	r1, [pc, #148]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
 8001b40:	e015      	b.n	8001b6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <HAL_RCC_OscConfig+0x278>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f8f0 	bl	8000d2c <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff f8ec 	bl	8000d2c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e193      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d036      	beq.n	8001be8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d016      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff f8d0 	bl	8000d2c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff f8cc 	bl	8000d2c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e173      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x234>
 8001bae:	e01b      	b.n	8001be8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f8b9 	bl	8000d2c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	e00e      	b.n	8001bdc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f8b5 	bl	8000d2c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d907      	bls.n	8001bdc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e15c      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	42470000 	.word	0x42470000
 8001bd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	4b8a      	ldr	r3, [pc, #552]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ea      	bne.n	8001bbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8097 	beq.w	8001d24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	4b83      	ldr	r3, [pc, #524]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10f      	bne.n	8001c26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b79      	ldr	r3, [pc, #484]	@ (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b76      	ldr	r3, [pc, #472]	@ (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a75      	ldr	r2, [pc, #468]	@ (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f875 	bl	8000d2c <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7ff f871 	bl	8000d2c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e118      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b6c      	ldr	r3, [pc, #432]	@ (8001e0c <HAL_RCC_OscConfig+0x4b0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x31e>
 8001c6c:	4b66      	ldr	r3, [pc, #408]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c70:	4a65      	ldr	r2, [pc, #404]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c78:	e01c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x358>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x340>
 8001c82:	4b61      	ldr	r3, [pc, #388]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c86:	4a60      	ldr	r2, [pc, #384]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c8e:	4b5e      	ldr	r3, [pc, #376]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c92:	4a5d      	ldr	r2, [pc, #372]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x358>
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca0:	4a59      	ldr	r2, [pc, #356]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca8:	4b57      	ldr	r3, [pc, #348]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cac:	4a56      	ldr	r2, [pc, #344]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	f023 0304 	bic.w	r3, r3, #4
 8001cb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d015      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f836 	bl	8000d2c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f832 	bl	8000d2c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0d7      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	4b4b      	ldr	r3, [pc, #300]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0ee      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x368>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f820 	bl	8000d2c <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f81c 	bl	8000d2c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e0c1      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d06:	4b40      	ldr	r3, [pc, #256]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ee      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d18:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80ad 	beq.w	8001e88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2e:	4b36      	ldr	r3, [pc, #216]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d060      	beq.n	8001dfc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d145      	bne.n	8001dce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b33      	ldr	r3, [pc, #204]	@ (8001e10 <HAL_RCC_OscConfig+0x4b4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7fe fff0 	bl	8000d2c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7fe ffec 	bl	8000d2c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e093      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d62:	4b29      	ldr	r3, [pc, #164]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	071b      	lsls	r3, r3, #28
 8001d9a:	491b      	ldr	r1, [pc, #108]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_RCC_OscConfig+0x4b4>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7fe ffc1 	bl	8000d2c <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe ffbd 	bl	8000d2c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e064      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc0:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x452>
 8001dcc:	e05c      	b.n	8001e88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <HAL_RCC_OscConfig+0x4b4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7fe ffaa 	bl	8000d2c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe ffa6 	bl	8000d2c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e04d      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x480>
 8001dfa:	e045      	b.n	8001e88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e040      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <HAL_RCC_OscConfig+0x538>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d030      	beq.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d129      	bne.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d122      	bne.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d119      	bne.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d10f      	bne.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e041      	b.n	8001f2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f839 	bl	8001f36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f000 f9c0 	bl	800225c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d001      	beq.n	8001f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e04e      	b.n	8002002 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a23      	ldr	r2, [pc, #140]	@ (8002010 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d022      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f8e:	d01d      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1f      	ldr	r2, [pc, #124]	@ (8002014 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d018      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002018 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800201c <HAL_TIM_Base_Start_IT+0xd0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00e      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8002020 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a18      	ldr	r2, [pc, #96]	@ (8002028 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d111      	bne.n	8001ff0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d010      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fee:	e007      	b.n	8002000 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40010000 	.word	0x40010000
 8002014:	40000400 	.word	0x40000400
 8002018:	40000800 	.word	0x40000800
 800201c:	40000c00 	.word	0x40000c00
 8002020:	40010400 	.word	0x40010400
 8002024:	40014000 	.word	0x40014000
 8002028:	40001800 	.word	0x40001800

0800202c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d020      	beq.n	8002090 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01b      	beq.n	8002090 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0202 	mvn.w	r2, #2
 8002060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8d2 	bl	8002220 <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8c4 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f8d5 	bl	8002234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d020      	beq.n	80020dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01b      	beq.n	80020dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0204 	mvn.w	r2, #4
 80020ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2202      	movs	r2, #2
 80020b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8ac 	bl	8002220 <HAL_TIM_IC_CaptureCallback>
 80020c8:	e005      	b.n	80020d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f89e 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f8af 	bl	8002234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d020      	beq.n	8002128 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01b      	beq.n	8002128 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0208 	mvn.w	r2, #8
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2204      	movs	r2, #4
 80020fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f886 	bl	8002220 <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f878 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f889 	bl	8002234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d020      	beq.n	8002174 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0210 	mvn.w	r2, #16
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2208      	movs	r2, #8
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f860 	bl	8002220 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f852 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f863 	bl	8002234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00c      	beq.n	8002198 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0201 	mvn.w	r2, #1
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fbfe 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f900 	bl	80023bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00c      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f834 	bl	8002248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00c      	beq.n	8002204 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0220 	mvn.w	r2, #32
 80021fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8d2 	bl	80023a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a43      	ldr	r2, [pc, #268]	@ (800237c <TIM_Base_SetConfig+0x120>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800227a:	d00f      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a40      	ldr	r2, [pc, #256]	@ (8002380 <TIM_Base_SetConfig+0x124>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00b      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3f      	ldr	r2, [pc, #252]	@ (8002384 <TIM_Base_SetConfig+0x128>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d007      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3e      	ldr	r2, [pc, #248]	@ (8002388 <TIM_Base_SetConfig+0x12c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3d      	ldr	r2, [pc, #244]	@ (800238c <TIM_Base_SetConfig+0x130>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d108      	bne.n	80022ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a32      	ldr	r2, [pc, #200]	@ (800237c <TIM_Base_SetConfig+0x120>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d02b      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022bc:	d027      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002380 <TIM_Base_SetConfig+0x124>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d023      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002384 <TIM_Base_SetConfig+0x128>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01f      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002388 <TIM_Base_SetConfig+0x12c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01b      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2c      	ldr	r2, [pc, #176]	@ (800238c <TIM_Base_SetConfig+0x130>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d017      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002390 <TIM_Base_SetConfig+0x134>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002394 <TIM_Base_SetConfig+0x138>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00f      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a29      	ldr	r2, [pc, #164]	@ (8002398 <TIM_Base_SetConfig+0x13c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00b      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a28      	ldr	r2, [pc, #160]	@ (800239c <TIM_Base_SetConfig+0x140>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a27      	ldr	r2, [pc, #156]	@ (80023a0 <TIM_Base_SetConfig+0x144>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d003      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a26      	ldr	r2, [pc, #152]	@ (80023a4 <TIM_Base_SetConfig+0x148>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d108      	bne.n	8002320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0e      	ldr	r2, [pc, #56]	@ (800237c <TIM_Base_SetConfig+0x120>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d003      	beq.n	800234e <TIM_Base_SetConfig+0xf2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a10      	ldr	r2, [pc, #64]	@ (800238c <TIM_Base_SetConfig+0x130>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d103      	bne.n	8002356 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f043 0204 	orr.w	r2, r3, #4
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	601a      	str	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40010000 	.word	0x40010000
 8002380:	40000400 	.word	0x40000400
 8002384:	40000800 	.word	0x40000800
 8002388:	40000c00 	.word	0x40000c00
 800238c:	40010400 	.word	0x40010400
 8002390:	40014000 	.word	0x40014000
 8002394:	40014400 	.word	0x40014400
 8002398:	40014800 	.word	0x40014800
 800239c:	40001800 	.word	0x40001800
 80023a0:	40001c00 	.word	0x40001c00
 80023a4:	40002000 	.word	0x40002000

080023a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e042      	b.n	8002468 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe fb10 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2224      	movs	r2, #36	@ 0x24
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f973 	bl	8002700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b20      	cmp	r3, #32
 800248e:	d175      	bne.n	800257c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_UART_Transmit+0x2c>
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e06e      	b.n	800257e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2221      	movs	r2, #33	@ 0x21
 80024aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ae:	f7fe fc3d 	bl	8000d2c <HAL_GetTick>
 80024b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c8:	d108      	bne.n	80024dc <HAL_UART_Transmit+0x6c>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e003      	b.n	80024e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024e4:	e02e      	b.n	8002544 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	2180      	movs	r1, #128	@ 0x80
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f848 	bl	8002586 <UART_WaitOnFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e03a      	b.n	800257e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800251c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3302      	adds	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e007      	b.n	8002536 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	3301      	adds	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1cb      	bne.n	80024e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2200      	movs	r2, #0
 8002556:	2140      	movs	r1, #64	@ 0x40
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f814 	bl	8002586 <UART_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e006      	b.n	800257e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002596:	e03b      	b.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800259e:	d037      	beq.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a0:	f7fe fbc4 	bl	8000d2c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	6a3a      	ldr	r2, [r7, #32]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d302      	bcc.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e03a      	b.n	8002630 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d023      	beq.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b80      	cmp	r3, #128	@ 0x80
 80025cc:	d020      	beq.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b40      	cmp	r3, #64	@ 0x40
 80025d2:	d01d      	beq.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d116      	bne.n	8002610 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f81d 	bl	8002638 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2208      	movs	r2, #8
 8002602:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e00f      	b.n	8002630 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4013      	ands	r3, r2
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	429a      	cmp	r2, r3
 800262c:	d0b4      	beq.n	8002598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002638:	b480      	push	{r7}
 800263a:	b095      	sub	sp, #84	@ 0x54
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264a:	e853 3f00 	ldrex	r3, [r3]
 800264e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002660:	643a      	str	r2, [r7, #64]	@ 0x40
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e5      	bne.n	8002640 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3314      	adds	r3, #20
 800267a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	e853 3f00 	ldrex	r3, [r3]
 8002682:	61fb      	str	r3, [r7, #28]
   return(result);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3314      	adds	r3, #20
 8002692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002696:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800269a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800269c:	e841 2300 	strex	r3, r2, [r1]
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e5      	bne.n	8002674 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d119      	bne.n	80026e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	330c      	adds	r3, #12
 80026b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	e853 3f00 	ldrex	r3, [r3]
 80026be:	60bb      	str	r3, [r7, #8]
   return(result);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f023 0310 	bic.w	r3, r3, #16
 80026c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	330c      	adds	r3, #12
 80026ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026d0:	61ba      	str	r2, [r7, #24]
 80026d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	6979      	ldr	r1, [r7, #20]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	613b      	str	r3, [r7, #16]
   return(result);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e5      	bne.n	80026b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026f2:	bf00      	nop
 80026f4:	3754      	adds	r7, #84	@ 0x54
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002704:	b0c0      	sub	sp, #256	@ 0x100
 8002706:	af00      	add	r7, sp, #0
 8002708:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271c:	68d9      	ldr	r1, [r3, #12]
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	ea40 0301 	orr.w	r3, r0, r1
 8002728:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800272a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	431a      	orrs	r2, r3
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	431a      	orrs	r2, r3
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002758:	f021 010c 	bic.w	r1, r1, #12
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002766:	430b      	orrs	r3, r1
 8002768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277a:	6999      	ldr	r1, [r3, #24]
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	ea40 0301 	orr.w	r3, r0, r1
 8002786:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b8f      	ldr	r3, [pc, #572]	@ (80029cc <UART_SetConfig+0x2cc>)
 8002790:	429a      	cmp	r2, r3
 8002792:	d005      	beq.n	80027a0 <UART_SetConfig+0xa0>
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b8d      	ldr	r3, [pc, #564]	@ (80029d0 <UART_SetConfig+0x2d0>)
 800279c:	429a      	cmp	r2, r3
 800279e:	d104      	bne.n	80027aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027a0:	f7fe fe66 	bl	8001470 <HAL_RCC_GetPCLK2Freq>
 80027a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027a8:	e003      	b.n	80027b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027aa:	f7fe fe4d 	bl	8001448 <HAL_RCC_GetPCLK1Freq>
 80027ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027bc:	f040 810c 	bne.w	80029d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027c4:	2200      	movs	r2, #0
 80027c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027d2:	4622      	mov	r2, r4
 80027d4:	462b      	mov	r3, r5
 80027d6:	1891      	adds	r1, r2, r2
 80027d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027da:	415b      	adcs	r3, r3
 80027dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027e2:	4621      	mov	r1, r4
 80027e4:	eb12 0801 	adds.w	r8, r2, r1
 80027e8:	4629      	mov	r1, r5
 80027ea:	eb43 0901 	adc.w	r9, r3, r1
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002802:	4690      	mov	r8, r2
 8002804:	4699      	mov	r9, r3
 8002806:	4623      	mov	r3, r4
 8002808:	eb18 0303 	adds.w	r3, r8, r3
 800280c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002810:	462b      	mov	r3, r5
 8002812:	eb49 0303 	adc.w	r3, r9, r3
 8002816:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800281a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002826:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800282a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800282e:	460b      	mov	r3, r1
 8002830:	18db      	adds	r3, r3, r3
 8002832:	653b      	str	r3, [r7, #80]	@ 0x50
 8002834:	4613      	mov	r3, r2
 8002836:	eb42 0303 	adc.w	r3, r2, r3
 800283a:	657b      	str	r3, [r7, #84]	@ 0x54
 800283c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002840:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002844:	f7fd fd34 	bl	80002b0 <__aeabi_uldivmod>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4b61      	ldr	r3, [pc, #388]	@ (80029d4 <UART_SetConfig+0x2d4>)
 800284e:	fba3 2302 	umull	r2, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	011c      	lsls	r4, r3, #4
 8002856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800285a:	2200      	movs	r2, #0
 800285c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002860:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002864:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002868:	4642      	mov	r2, r8
 800286a:	464b      	mov	r3, r9
 800286c:	1891      	adds	r1, r2, r2
 800286e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002870:	415b      	adcs	r3, r3
 8002872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002874:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002878:	4641      	mov	r1, r8
 800287a:	eb12 0a01 	adds.w	sl, r2, r1
 800287e:	4649      	mov	r1, r9
 8002880:	eb43 0b01 	adc.w	fp, r3, r1
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002890:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002894:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002898:	4692      	mov	sl, r2
 800289a:	469b      	mov	fp, r3
 800289c:	4643      	mov	r3, r8
 800289e:	eb1a 0303 	adds.w	r3, sl, r3
 80028a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028a6:	464b      	mov	r3, r9
 80028a8:	eb4b 0303 	adc.w	r3, fp, r3
 80028ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028c4:	460b      	mov	r3, r1
 80028c6:	18db      	adds	r3, r3, r3
 80028c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80028ca:	4613      	mov	r3, r2
 80028cc:	eb42 0303 	adc.w	r3, r2, r3
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028da:	f7fd fce9 	bl	80002b0 <__aeabi_uldivmod>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4611      	mov	r1, r2
 80028e4:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <UART_SetConfig+0x2d4>)
 80028e6:	fba3 2301 	umull	r2, r3, r3, r1
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2264      	movs	r2, #100	@ 0x64
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	1acb      	subs	r3, r1, r3
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028fa:	4b36      	ldr	r3, [pc, #216]	@ (80029d4 <UART_SetConfig+0x2d4>)
 80028fc:	fba3 2302 	umull	r2, r3, r3, r2
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002908:	441c      	add	r4, r3
 800290a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800290e:	2200      	movs	r2, #0
 8002910:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002914:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002918:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800291c:	4642      	mov	r2, r8
 800291e:	464b      	mov	r3, r9
 8002920:	1891      	adds	r1, r2, r2
 8002922:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002924:	415b      	adcs	r3, r3
 8002926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002928:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800292c:	4641      	mov	r1, r8
 800292e:	1851      	adds	r1, r2, r1
 8002930:	6339      	str	r1, [r7, #48]	@ 0x30
 8002932:	4649      	mov	r1, r9
 8002934:	414b      	adcs	r3, r1
 8002936:	637b      	str	r3, [r7, #52]	@ 0x34
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002944:	4659      	mov	r1, fp
 8002946:	00cb      	lsls	r3, r1, #3
 8002948:	4651      	mov	r1, sl
 800294a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800294e:	4651      	mov	r1, sl
 8002950:	00ca      	lsls	r2, r1, #3
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	4603      	mov	r3, r0
 8002958:	4642      	mov	r2, r8
 800295a:	189b      	adds	r3, r3, r2
 800295c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002960:	464b      	mov	r3, r9
 8002962:	460a      	mov	r2, r1
 8002964:	eb42 0303 	adc.w	r3, r2, r3
 8002968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002978:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800297c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002980:	460b      	mov	r3, r1
 8002982:	18db      	adds	r3, r3, r3
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002986:	4613      	mov	r3, r2
 8002988:	eb42 0303 	adc.w	r3, r2, r3
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800298e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002992:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002996:	f7fd fc8b 	bl	80002b0 <__aeabi_uldivmod>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <UART_SetConfig+0x2d4>)
 80029a0:	fba3 1302 	umull	r1, r3, r3, r2
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	2164      	movs	r1, #100	@ 0x64
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	3332      	adds	r3, #50	@ 0x32
 80029b2:	4a08      	ldr	r2, [pc, #32]	@ (80029d4 <UART_SetConfig+0x2d4>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	f003 0207 	and.w	r2, r3, #7
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4422      	add	r2, r4
 80029c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029c8:	e106      	b.n	8002bd8 <UART_SetConfig+0x4d8>
 80029ca:	bf00      	nop
 80029cc:	40011000 	.word	0x40011000
 80029d0:	40011400 	.word	0x40011400
 80029d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029ea:	4642      	mov	r2, r8
 80029ec:	464b      	mov	r3, r9
 80029ee:	1891      	adds	r1, r2, r2
 80029f0:	6239      	str	r1, [r7, #32]
 80029f2:	415b      	adcs	r3, r3
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029fa:	4641      	mov	r1, r8
 80029fc:	1854      	adds	r4, r2, r1
 80029fe:	4649      	mov	r1, r9
 8002a00:	eb43 0501 	adc.w	r5, r3, r1
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	00eb      	lsls	r3, r5, #3
 8002a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a12:	00e2      	lsls	r2, r4, #3
 8002a14:	4614      	mov	r4, r2
 8002a16:	461d      	mov	r5, r3
 8002a18:	4643      	mov	r3, r8
 8002a1a:	18e3      	adds	r3, r4, r3
 8002a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a20:	464b      	mov	r3, r9
 8002a22:	eb45 0303 	adc.w	r3, r5, r3
 8002a26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a46:	4629      	mov	r1, r5
 8002a48:	008b      	lsls	r3, r1, #2
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a50:	4621      	mov	r1, r4
 8002a52:	008a      	lsls	r2, r1, #2
 8002a54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a58:	f7fd fc2a 	bl	80002b0 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4b60      	ldr	r3, [pc, #384]	@ (8002be4 <UART_SetConfig+0x4e4>)
 8002a62:	fba3 2302 	umull	r2, r3, r3, r2
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	011c      	lsls	r4, r3, #4
 8002a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	464b      	mov	r3, r9
 8002a80:	1891      	adds	r1, r2, r2
 8002a82:	61b9      	str	r1, [r7, #24]
 8002a84:	415b      	adcs	r3, r3
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	1851      	adds	r1, r2, r1
 8002a90:	6139      	str	r1, [r7, #16]
 8002a92:	4649      	mov	r1, r9
 8002a94:	414b      	adcs	r3, r1
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002aa4:	4659      	mov	r1, fp
 8002aa6:	00cb      	lsls	r3, r1, #3
 8002aa8:	4651      	mov	r1, sl
 8002aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aae:	4651      	mov	r1, sl
 8002ab0:	00ca      	lsls	r2, r1, #3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4642      	mov	r2, r8
 8002aba:	189b      	adds	r3, r3, r2
 8002abc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ac0:	464b      	mov	r3, r9
 8002ac2:	460a      	mov	r2, r1
 8002ac4:	eb42 0303 	adc.w	r3, r2, r3
 8002ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ad6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	008b      	lsls	r3, r1, #2
 8002ae8:	4641      	mov	r1, r8
 8002aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aee:	4641      	mov	r1, r8
 8002af0:	008a      	lsls	r2, r1, #2
 8002af2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002af6:	f7fd fbdb 	bl	80002b0 <__aeabi_uldivmod>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	4b38      	ldr	r3, [pc, #224]	@ (8002be4 <UART_SetConfig+0x4e4>)
 8002b02:	fba3 2301 	umull	r2, r3, r3, r1
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2264      	movs	r2, #100	@ 0x64
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	1acb      	subs	r3, r1, r3
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	3332      	adds	r3, #50	@ 0x32
 8002b14:	4a33      	ldr	r2, [pc, #204]	@ (8002be4 <UART_SetConfig+0x4e4>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b20:	441c      	add	r4, r3
 8002b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b26:	2200      	movs	r2, #0
 8002b28:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b30:	4642      	mov	r2, r8
 8002b32:	464b      	mov	r3, r9
 8002b34:	1891      	adds	r1, r2, r2
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	415b      	adcs	r3, r3
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b40:	4641      	mov	r1, r8
 8002b42:	1851      	adds	r1, r2, r1
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	4649      	mov	r1, r9
 8002b48:	414b      	adcs	r3, r1
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b58:	4659      	mov	r1, fp
 8002b5a:	00cb      	lsls	r3, r1, #3
 8002b5c:	4651      	mov	r1, sl
 8002b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b62:	4651      	mov	r1, sl
 8002b64:	00ca      	lsls	r2, r1, #3
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	189b      	adds	r3, r3, r2
 8002b70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b72:	464b      	mov	r3, r9
 8002b74:	460a      	mov	r2, r1
 8002b76:	eb42 0303 	adc.w	r3, r2, r3
 8002b7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b86:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b94:	4649      	mov	r1, r9
 8002b96:	008b      	lsls	r3, r1, #2
 8002b98:	4641      	mov	r1, r8
 8002b9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	008a      	lsls	r2, r1, #2
 8002ba2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ba6:	f7fd fb83 	bl	80002b0 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <UART_SetConfig+0x4e4>)
 8002bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	2164      	movs	r1, #100	@ 0x64
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	3332      	adds	r3, #50	@ 0x32
 8002bc2:	4a08      	ldr	r2, [pc, #32]	@ (8002be4 <UART_SetConfig+0x4e4>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4422      	add	r2, r4
 8002bd6:	609a      	str	r2, [r3, #8]
}
 8002bd8:	bf00      	nop
 8002bda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002bde:	46bd      	mov	sp, r7
 8002be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be4:	51eb851f 	.word	0x51eb851f

08002be8 <__NVIC_SetPriority>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	6039      	str	r1, [r7, #0]
 8002bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	db0a      	blt.n	8002c12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	490c      	ldr	r1, [pc, #48]	@ (8002c34 <__NVIC_SetPriority+0x4c>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	0112      	lsls	r2, r2, #4
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c10:	e00a      	b.n	8002c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4908      	ldr	r1, [pc, #32]	@ (8002c38 <__NVIC_SetPriority+0x50>)
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	3b04      	subs	r3, #4
 8002c20:	0112      	lsls	r2, r2, #4
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	440b      	add	r3, r1
 8002c26:	761a      	strb	r2, [r3, #24]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000e100 	.word	0xe000e100
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <SysTick_Handler+0x1c>)
 8002c42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002c44:	f001 fef2 	bl	8004a2c <xTaskGetSchedulerState>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d001      	beq.n	8002c52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c4e:	f002 fceb 	bl	8005628 <xPortSysTickHandler>
  }
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	e000e010 	.word	0xe000e010

08002c5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c60:	2100      	movs	r1, #0
 8002c62:	f06f 0004 	mvn.w	r0, #4
 8002c66:	f7ff ffbf 	bl	8002be8 <__NVIC_SetPriority>
#endif
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c76:	f3ef 8305 	mrs	r3, IPSR
 8002c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8002c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c82:	f06f 0305 	mvn.w	r3, #5
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	e00c      	b.n	8002ca4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <osKernelInitialize+0x44>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c92:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <osKernelInitialize+0x44>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	e002      	b.n	8002ca4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ca2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ca4:	687b      	ldr	r3, [r7, #4]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	2000011c 	.word	0x2000011c

08002cb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cbe:	f3ef 8305 	mrs	r3, IPSR
 8002cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8002cc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002cca:	f06f 0305 	mvn.w	r3, #5
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	e010      	b.n	8002cf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <osKernelStart+0x48>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d109      	bne.n	8002cee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002cda:	f7ff ffbf 	bl	8002c5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002cde:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <osKernelStart+0x48>)
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002ce4:	f001 fa3e 	bl	8004164 <vTaskStartScheduler>
      stat = osOK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	e002      	b.n	8002cf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002cf4:	687b      	ldr	r3, [r7, #4]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000011c 	.word	0x2000011c

08002d04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	@ 0x38
 8002d08:	af04      	add	r7, sp, #16
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d14:	f3ef 8305 	mrs	r3, IPSR
 8002d18:	617b      	str	r3, [r7, #20]
  return(result);
 8002d1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d17e      	bne.n	8002e1e <osThreadNew+0x11a>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d07b      	beq.n	8002e1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002d26:	2380      	movs	r3, #128	@ 0x80
 8002d28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002d2a:	2318      	movs	r3, #24
 8002d2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d045      	beq.n	8002dca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <osThreadNew+0x48>
        name = attr->name;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <osThreadNew+0x6e>
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b38      	cmp	r3, #56	@ 0x38
 8002d64:	d805      	bhi.n	8002d72 <osThreadNew+0x6e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <osThreadNew+0x72>
        return (NULL);
 8002d72:	2300      	movs	r3, #0
 8002d74:	e054      	b.n	8002e20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00e      	beq.n	8002dac <osThreadNew+0xa8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2ba7      	cmp	r3, #167	@ 0xa7
 8002d94:	d90a      	bls.n	8002dac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d006      	beq.n	8002dac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <osThreadNew+0xa8>
        mem = 1;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	e010      	b.n	8002dce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10c      	bne.n	8002dce <osThreadNew+0xca>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d108      	bne.n	8002dce <osThreadNew+0xca>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d104      	bne.n	8002dce <osThreadNew+0xca>
          mem = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	e001      	b.n	8002dce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d110      	bne.n	8002df6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ddc:	9202      	str	r2, [sp, #8]
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	6a3a      	ldr	r2, [r7, #32]
 8002de8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fe56 	bl	8003a9c <xTaskCreateStatic>
 8002df0:	4603      	mov	r3, r0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	e013      	b.n	8002e1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d110      	bne.n	8002e1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	f107 0310 	add.w	r3, r7, #16
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fea4 	bl	8003b5c <xTaskCreate>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d001      	beq.n	8002e1e <osThreadNew+0x11a>
            hTask = NULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e1e:	693b      	ldr	r3, [r7, #16]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3728      	adds	r7, #40	@ 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <osThreadGetState>:
  id = (osThreadId_t)xTaskGetCurrentTaskHandle();

  return (id);
}

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e34:	f3ef 8305 	mrs	r3, IPSR
 8002e38:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <osThreadGetState+0x1e>
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <osThreadGetState+0x26>
    state = osThreadError;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e022      	b.n	8002e94 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8002e4e:	6938      	ldr	r0, [r7, #16]
 8002e50:	f001 f818 	bl	8003e84 <eTaskGetState>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d818      	bhi.n	8002e8c <osThreadGetState+0x64>
 8002e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e60 <osThreadGetState+0x38>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e75 	.word	0x08002e75
 8002e64:	08002e7b 	.word	0x08002e7b
 8002e68:	08002e81 	.word	0x08002e81
 8002e6c:	08002e81 	.word	0x08002e81
 8002e70:	08002e87 	.word	0x08002e87
      case eRunning:   state = osThreadRunning;    break;
 8002e74:	2302      	movs	r3, #2
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e00c      	b.n	8002e94 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e009      	b.n	8002e94 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8002e80:	2303      	movs	r3, #3
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e006      	b.n	8002e94 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8002e86:	2304      	movs	r3, #4
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e003      	b.n	8002e94 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	bf00      	nop
    }
  }

  return (state);
 8002e94:	697b      	ldr	r3, [r7, #20]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop

08002ea0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ea8:	f3ef 8305 	mrs	r3, IPSR
 8002eac:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <osDelay+0x1c>
    stat = osErrorISR;
 8002eb4:	f06f 0305 	mvn.w	r3, #5
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e007      	b.n	8002ecc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <osDelay+0x2c>
      vTaskDelay(ticks);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 ffa6 	bl	8003e18 <vTaskDelay>
    }
  }

  return (stat);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a07      	ldr	r2, [pc, #28]	@ (8002f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4a06      	ldr	r2, [pc, #24]	@ (8002f08 <vApplicationGetIdleTaskMemory+0x30>)
 8002eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2280      	movs	r2, #128	@ 0x80
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000120 	.word	0x20000120
 8002f08:	200001c8 	.word	0x200001c8

08002f0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a07      	ldr	r2, [pc, #28]	@ (8002f38 <vApplicationGetTimerTaskMemory+0x2c>)
 8002f1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4a06      	ldr	r2, [pc, #24]	@ (8002f3c <vApplicationGetTimerTaskMemory+0x30>)
 8002f22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f2a:	601a      	str	r2, [r3, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	200003c8 	.word	0x200003c8
 8002f3c:	20000470 	.word	0x20000470

08002f40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f103 0208 	add.w	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f103 0208 	add.w	r2, r3, #8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f103 0208 	add.w	r2, r3, #8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	601a      	str	r2, [r3, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ff8:	d103      	bne.n	8003002 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e00c      	b.n	800301c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3308      	adds	r3, #8
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e002      	b.n	8003010 <vListInsert+0x2e>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d2f6      	bcs.n	800300a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	601a      	str	r2, [r3, #0]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6892      	ldr	r2, [r2, #8]
 800306a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6852      	ldr	r2, [r2, #4]
 8003074:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	d103      	bne.n	8003088 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1e5a      	subs	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030d4:	f002 fa18 	bl	8005508 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e0:	68f9      	ldr	r1, [r7, #12]
 80030e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	441a      	add	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003104:	3b01      	subs	r3, #1
 8003106:	68f9      	ldr	r1, [r7, #12]
 8003108:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	441a      	add	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	22ff      	movs	r2, #255	@ 0xff
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	22ff      	movs	r2, #255	@ 0xff
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d114      	bne.n	8003154 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01a      	beq.n	8003168 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3310      	adds	r3, #16
 8003136:	4618      	mov	r0, r3
 8003138:	f001 fab2 	bl	80046a0 <xTaskRemoveFromEventList>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d012      	beq.n	8003168 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003142:	4b0d      	ldr	r3, [pc, #52]	@ (8003178 <xQueueGenericReset+0xd0>)
 8003144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	e009      	b.n	8003168 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3310      	adds	r3, #16
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fef1 	bl	8002f40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3324      	adds	r3, #36	@ 0x24
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff feec 	bl	8002f40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003168:	f002 fa00 	bl	800556c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800316c:	2301      	movs	r3, #1
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	@ 0x38
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10b      	bne.n	80031c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	e7fd      	b.n	80031c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <xQueueGenericCreateStatic+0x56>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <xQueueGenericCreateStatic+0x5a>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <xQueueGenericCreateStatic+0x5c>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	623b      	str	r3, [r7, #32]
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <xQueueGenericCreateStatic+0x84>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <xQueueGenericCreateStatic+0x88>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <xQueueGenericCreateStatic+0x8a>
 8003204:	2300      	movs	r3, #0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	61fb      	str	r3, [r7, #28]
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	e7fd      	b.n	800321e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003222:	2350      	movs	r3, #80	@ 0x50
 8003224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b50      	cmp	r3, #80	@ 0x50
 800322a:	d00b      	beq.n	8003244 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	61bb      	str	r3, [r7, #24]
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003244:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003258:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f805 	bl	8003276 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800326c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800326e:	4618      	mov	r0, r3
 8003270:	3730      	adds	r7, #48	@ 0x30
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e002      	b.n	8003298 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032a4:	2101      	movs	r1, #1
 80032a6:	69b8      	ldr	r0, [r7, #24]
 80032a8:	f7ff fefe 	bl	80030a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08e      	sub	sp, #56	@ 0x38
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032ca:	2300      	movs	r3, #0
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80032d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <xQueueGenericSend+0x34>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <xQueueGenericSend+0x42>
 80032f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <xQueueGenericSend+0x46>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <xQueueGenericSend+0x48>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <xQueueGenericSend+0x64>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800331a:	bf00      	nop
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d103      	bne.n	800332e <xQueueGenericSend+0x72>
 8003326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <xQueueGenericSend+0x76>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <xQueueGenericSend+0x78>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <xQueueGenericSend+0x94>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	623b      	str	r3, [r7, #32]
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003350:	f001 fb6c 	bl	8004a2c <xTaskGetSchedulerState>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <xQueueGenericSend+0xa4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <xQueueGenericSend+0xa8>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <xQueueGenericSend+0xaa>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <xQueueGenericSend+0xc6>
	__asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	61fb      	str	r3, [r7, #28]
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	e7fd      	b.n	800337e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003382:	f002 f8c1 	bl	8005508 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <xQueueGenericSend+0xdc>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d129      	bne.n	80033ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800339e:	f000 fa0f 	bl	80037c0 <prvCopyDataToQueue>
 80033a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d010      	beq.n	80033ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ae:	3324      	adds	r3, #36	@ 0x24
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 f975 	bl	80046a0 <xTaskRemoveFromEventList>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80033bc:	4b3f      	ldr	r3, [pc, #252]	@ (80034bc <xQueueGenericSend+0x200>)
 80033be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	e00a      	b.n	80033e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80033ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80033d4:	4b39      	ldr	r3, [pc, #228]	@ (80034bc <xQueueGenericSend+0x200>)
 80033d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80033e4:	f002 f8c2 	bl	800556c <vPortExitCritical>
				return pdPASS;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e063      	b.n	80034b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033f2:	f002 f8bb 	bl	800556c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e05c      	b.n	80034b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d106      	bne.n	800340e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	4618      	mov	r0, r3
 8003406:	f001 f9af 	bl	8004768 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800340a:	2301      	movs	r3, #1
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800340e:	f002 f8ad 	bl	800556c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003412:	f000 ff17 	bl	8004244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003416:	f002 f877 	bl	8005508 <vPortEnterCritical>
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003420:	b25b      	sxtb	r3, r3
 8003422:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003426:	d103      	bne.n	8003430 <xQueueGenericSend+0x174>
 8003428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003432:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003436:	b25b      	sxtb	r3, r3
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800343c:	d103      	bne.n	8003446 <xQueueGenericSend+0x18a>
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003446:	f002 f891 	bl	800556c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800344a:	1d3a      	adds	r2, r7, #4
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f001 f99e 	bl	8004794 <xTaskCheckForTimeOut>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d124      	bne.n	80034a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800345e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003460:	f000 faa6 	bl	80039b0 <prvIsQueueFull>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d018      	beq.n	800349c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800346a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346c:	3310      	adds	r3, #16
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f001 f8c2 	bl	80045fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800347a:	f000 fa31 	bl	80038e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800347e:	f000 feef 	bl	8004260 <xTaskResumeAll>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f af7c 	bne.w	8003382 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800348a:	4b0c      	ldr	r3, [pc, #48]	@ (80034bc <xQueueGenericSend+0x200>)
 800348c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	e772      	b.n	8003382 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800349c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800349e:	f000 fa1f 	bl	80038e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034a2:	f000 fedd 	bl	8004260 <xTaskResumeAll>
 80034a6:	e76c      	b.n	8003382 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034aa:	f000 fa19 	bl	80038e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034ae:	f000 fed7 	bl	8004260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3738      	adds	r7, #56	@ 0x38
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	e000ed04 	.word	0xe000ed04

080034c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b090      	sub	sp, #64	@ 0x40
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d103      	bne.n	80034fe <xQueueGenericSendFromISR+0x3e>
 80034f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <xQueueGenericSendFromISR+0x42>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <xQueueGenericSendFromISR+0x44>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800351a:	bf00      	nop
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d103      	bne.n	800352e <xQueueGenericSendFromISR+0x6e>
 8003526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <xQueueGenericSendFromISR+0x72>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <xQueueGenericSendFromISR+0x74>
 8003532:	2300      	movs	r3, #0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	623b      	str	r3, [r7, #32]
}
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003550:	f002 f8ba 	bl	80056c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003554:	f3ef 8211 	mrs	r2, BASEPRI
 8003558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	61fa      	str	r2, [r7, #28]
 800356a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800356c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800356e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	429a      	cmp	r2, r3
 800357a:	d302      	bcc.n	8003582 <xQueueGenericSendFromISR+0xc2>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d12f      	bne.n	80035e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003584:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003588:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800358c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003598:	f000 f912 	bl	80037c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800359c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a4:	d112      	bne.n	80035cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b0:	3324      	adds	r3, #36	@ 0x24
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 f874 	bl	80046a0 <xTaskRemoveFromEventList>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00b      	beq.n	80035dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e007      	b.n	80035dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80035d0:	3301      	adds	r3, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	b25a      	sxtb	r2, r3
 80035d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80035dc:	2301      	movs	r3, #1
 80035de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80035e0:	e001      	b.n	80035e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3740      	adds	r7, #64	@ 0x40
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	@ 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003608:	2300      	movs	r3, #0
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <xQueueReceive+0x32>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	623b      	str	r3, [r7, #32]
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <xQueueReceive+0x40>
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <xQueueReceive+0x44>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <xQueueReceive+0x46>
 8003640:	2300      	movs	r3, #0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10b      	bne.n	800365e <xQueueReceive+0x62>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	61fb      	str	r3, [r7, #28]
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	e7fd      	b.n	800365a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800365e:	f001 f9e5 	bl	8004a2c <xTaskGetSchedulerState>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <xQueueReceive+0x72>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <xQueueReceive+0x76>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <xQueueReceive+0x78>
 8003672:	2300      	movs	r3, #0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <xQueueReceive+0x94>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	61bb      	str	r3, [r7, #24]
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003690:	f001 ff3a 	bl	8005508 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01f      	beq.n	80036e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036a4:	f000 f8f6 	bl	8003894 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	1e5a      	subs	r2, r3, #1
 80036ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00f      	beq.n	80036d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ba:	3310      	adds	r3, #16
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 ffef 	bl	80046a0 <xTaskRemoveFromEventList>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80036c8:	4b3c      	ldr	r3, [pc, #240]	@ (80037bc <xQueueReceive+0x1c0>)
 80036ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80036d8:	f001 ff48 	bl	800556c <vPortExitCritical>
				return pdPASS;
 80036dc:	2301      	movs	r3, #1
 80036de:	e069      	b.n	80037b4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036e6:	f001 ff41 	bl	800556c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e062      	b.n	80037b4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f835 	bl	8004768 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036fe:	2301      	movs	r3, #1
 8003700:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003702:	f001 ff33 	bl	800556c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003706:	f000 fd9d 	bl	8004244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800370a:	f001 fefd 	bl	8005508 <vPortEnterCritical>
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003714:	b25b      	sxtb	r3, r3
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800371a:	d103      	bne.n	8003724 <xQueueReceive+0x128>
 800371c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003726:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800372a:	b25b      	sxtb	r3, r3
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003730:	d103      	bne.n	800373a <xQueueReceive+0x13e>
 8003732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800373a:	f001 ff17 	bl	800556c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800373e:	1d3a      	adds	r2, r7, #4
 8003740:	f107 0310 	add.w	r3, r7, #16
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f001 f824 	bl	8004794 <xTaskCheckForTimeOut>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d123      	bne.n	800379a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003754:	f000 f916 	bl	8003984 <prvIsQueueEmpty>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d017      	beq.n	800378e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800375e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003760:	3324      	adds	r3, #36	@ 0x24
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f000 ff48 	bl	80045fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800376c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800376e:	f000 f8b7 	bl	80038e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003772:	f000 fd75 	bl	8004260 <xTaskResumeAll>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d189      	bne.n	8003690 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800377c:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <xQueueReceive+0x1c0>)
 800377e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	e780      	b.n	8003690 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800378e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003790:	f000 f8a6 	bl	80038e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003794:	f000 fd64 	bl	8004260 <xTaskResumeAll>
 8003798:	e77a      	b.n	8003690 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800379a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800379c:	f000 f8a0 	bl	80038e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037a0:	f000 fd5e 	bl	8004260 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037a6:	f000 f8ed 	bl	8003984 <prvIsQueueEmpty>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f43f af6f 	beq.w	8003690 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3730      	adds	r7, #48	@ 0x30
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	e000ed04 	.word	0xe000ed04

080037c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10d      	bne.n	80037fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d14d      	bne.n	8003882 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 f93c 	bl	8004a68 <xTaskPriorityDisinherit>
 80037f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	e043      	b.n	8003882 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d119      	bne.n	8003834 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6858      	ldr	r0, [r3, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	461a      	mov	r2, r3
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	f002 fa36 	bl	8005c7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	441a      	add	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	d32b      	bcc.n	8003882 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	e026      	b.n	8003882 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68d8      	ldr	r0, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	461a      	mov	r2, r3
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	f002 fa1c 	bl	8005c7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	425b      	negs	r3, r3
 800384e:	441a      	add	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d207      	bcs.n	8003870 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	425b      	negs	r3, r3
 800386a:	441a      	add	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d105      	bne.n	8003882 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	3b01      	subs	r3, #1
 8003880:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800388a:	697b      	ldr	r3, [r7, #20]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	441a      	add	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d303      	bcc.n	80038c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68d9      	ldr	r1, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d0:	461a      	mov	r2, r3
 80038d2:	6838      	ldr	r0, [r7, #0]
 80038d4:	f002 f9d2 	bl	8005c7c <memcpy>
	}
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038e8:	f001 fe0e 	bl	8005508 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038f4:	e011      	b.n	800391a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d012      	beq.n	8003924 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3324      	adds	r3, #36	@ 0x24
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fecc 	bl	80046a0 <xTaskRemoveFromEventList>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800390e:	f000 ffa5 	bl	800485c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	3b01      	subs	r3, #1
 8003916:	b2db      	uxtb	r3, r3
 8003918:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800391a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	dce9      	bgt.n	80038f6 <prvUnlockQueue+0x16>
 8003922:	e000      	b.n	8003926 <prvUnlockQueue+0x46>
					break;
 8003924:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	22ff      	movs	r2, #255	@ 0xff
 800392a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800392e:	f001 fe1d 	bl	800556c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003932:	f001 fde9 	bl	8005508 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800393c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800393e:	e011      	b.n	8003964 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d012      	beq.n	800396e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3310      	adds	r3, #16
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fea7 	bl	80046a0 <xTaskRemoveFromEventList>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003958:	f000 ff80 	bl	800485c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800395c:	7bbb      	ldrb	r3, [r7, #14]
 800395e:	3b01      	subs	r3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003968:	2b00      	cmp	r3, #0
 800396a:	dce9      	bgt.n	8003940 <prvUnlockQueue+0x60>
 800396c:	e000      	b.n	8003970 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800396e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	22ff      	movs	r2, #255	@ 0xff
 8003974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003978:	f001 fdf8 	bl	800556c <vPortExitCritical>
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800398c:	f001 fdbc 	bl	8005508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003998:	2301      	movs	r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e001      	b.n	80039a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039a2:	f001 fde3 	bl	800556c <vPortExitCritical>

	return xReturn;
 80039a6:	68fb      	ldr	r3, [r7, #12]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039b8:	f001 fda6 	bl	8005508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d102      	bne.n	80039ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e001      	b.n	80039d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039d2:	f001 fdcb 	bl	800556c <vPortExitCritical>

	return xReturn;
 80039d6:	68fb      	ldr	r3, [r7, #12]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e014      	b.n	8003a1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003a30 <vQueueAddToRegistry+0x50>)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039fc:	490c      	ldr	r1, [pc, #48]	@ (8003a30 <vQueueAddToRegistry+0x50>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a06:	4a0a      	ldr	r2, [pc, #40]	@ (8003a30 <vQueueAddToRegistry+0x50>)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a12:	e006      	b.n	8003a22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3301      	adds	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b07      	cmp	r3, #7
 8003a1e:	d9e7      	bls.n	80039f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000870 	.word	0x20000870

08003a34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a44:	f001 fd60 	bl	8005508 <vPortEnterCritical>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a4e:	b25b      	sxtb	r3, r3
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a54:	d103      	bne.n	8003a5e <vQueueWaitForMessageRestricted+0x2a>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a64:	b25b      	sxtb	r3, r3
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a6a:	d103      	bne.n	8003a74 <vQueueWaitForMessageRestricted+0x40>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a74:	f001 fd7a 	bl	800556c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	3324      	adds	r3, #36	@ 0x24
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fddd 	bl	8004648 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f7ff ff26 	bl	80038e0 <prvUnlockQueue>
	}
 8003a94:	bf00      	nop
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08e      	sub	sp, #56	@ 0x38
 8003aa0:	af04      	add	r7, sp, #16
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	623b      	str	r3, [r7, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	61fb      	str	r3, [r7, #28]
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	e7fd      	b.n	8003ae2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ae6:	23a8      	movs	r3, #168	@ 0xa8
 8003ae8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2ba8      	cmp	r3, #168	@ 0xa8
 8003aee:	d00b      	beq.n	8003b08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	61bb      	str	r3, [r7, #24]
}
 8003b02:	bf00      	nop
 8003b04:	bf00      	nop
 8003b06:	e7fd      	b.n	8003b04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01e      	beq.n	8003b4e <xTaskCreateStatic+0xb2>
 8003b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01b      	beq.n	8003b4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9303      	str	r3, [sp, #12]
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	9302      	str	r3, [sp, #8]
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f851 	bl	8003be8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b48:	f000 f8f6 	bl	8003d38 <prvAddNewTaskToReadyList>
 8003b4c:	e001      	b.n	8003b52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b52:	697b      	ldr	r3, [r7, #20]
	}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3728      	adds	r7, #40	@ 0x28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08c      	sub	sp, #48	@ 0x30
 8003b60:	af04      	add	r7, sp, #16
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 fdeb 	bl	800574c <pvPortMalloc>
 8003b76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00e      	beq.n	8003b9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b7e:	20a8      	movs	r0, #168	@ 0xa8
 8003b80:	f001 fde4 	bl	800574c <pvPortMalloc>
 8003b84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b92:	e005      	b.n	8003ba0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b94:	6978      	ldr	r0, [r7, #20]
 8003b96:	f001 fea7 	bl	80058e8 <vPortFree>
 8003b9a:	e001      	b.n	8003ba0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d017      	beq.n	8003bd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9303      	str	r3, [sp, #12]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	9302      	str	r3, [sp, #8]
 8003bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f80f 	bl	8003be8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bca:	69f8      	ldr	r0, [r7, #28]
 8003bcc:	f000 f8b4 	bl	8003d38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e002      	b.n	8003bdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
	}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	461a      	mov	r2, r3
 8003c00:	21a5      	movs	r1, #165	@ 0xa5
 8003c02:	f001 ffb1 	bl	8005b68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c10:	3b01      	subs	r3, #1
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f023 0307 	bic.w	r3, r3, #7
 8003c1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	617b      	str	r3, [r7, #20]
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	e7fd      	b.n	8003c3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01f      	beq.n	8003c88 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	e012      	b.n	8003c74 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	7819      	ldrb	r1, [r3, #0]
 8003c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3334      	adds	r3, #52	@ 0x34
 8003c5e:	460a      	mov	r2, r1
 8003c60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d006      	beq.n	8003c7c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3301      	adds	r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	d9e9      	bls.n	8003c4e <prvInitialiseNewTask+0x66>
 8003c7a:	e000      	b.n	8003c7e <prvInitialiseNewTask+0x96>
			{
				break;
 8003c7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c86:	e003      	b.n	8003c90 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	2b37      	cmp	r3, #55	@ 0x37
 8003c94:	d901      	bls.n	8003c9a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c96:	2337      	movs	r3, #55	@ 0x37
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ca4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	2200      	movs	r2, #0
 8003caa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff f965 	bl	8002f80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	3318      	adds	r3, #24
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff f960 	bl	8002f80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	3354      	adds	r3, #84	@ 0x54
 8003cea:	224c      	movs	r2, #76	@ 0x4c
 8003cec:	2100      	movs	r1, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f001 ff3a 	bl	8005b68 <memset>
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8003d2c <prvInitialiseNewTask+0x144>)
 8003cf8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8003d30 <prvInitialiseNewTask+0x148>)
 8003cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d02:	4a0c      	ldr	r2, [pc, #48]	@ (8003d34 <prvInitialiseNewTask+0x14c>)
 8003d04:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	69b8      	ldr	r0, [r7, #24]
 8003d0c:	f001 faca 	bl	80052a4 <pxPortInitialiseStack>
 8003d10:	4602      	mov	r2, r0
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d22:	bf00      	nop
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20004b04 	.word	0x20004b04
 8003d30:	20004b6c 	.word	0x20004b6c
 8003d34:	20004bd4 	.word	0x20004bd4

08003d38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d40:	f001 fbe2 	bl	8005508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d44:	4b2d      	ldr	r3, [pc, #180]	@ (8003dfc <prvAddNewTaskToReadyList+0xc4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003dfc <prvAddNewTaskToReadyList+0xc4>)
 8003d4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e00 <prvAddNewTaskToReadyList+0xc8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d56:	4a2a      	ldr	r2, [pc, #168]	@ (8003e00 <prvAddNewTaskToReadyList+0xc8>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d5c:	4b27      	ldr	r3, [pc, #156]	@ (8003dfc <prvAddNewTaskToReadyList+0xc4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d110      	bne.n	8003d86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d64:	f000 fd9e 	bl	80048a4 <prvInitialiseTaskLists>
 8003d68:	e00d      	b.n	8003d86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d6a:	4b26      	ldr	r3, [pc, #152]	@ (8003e04 <prvAddNewTaskToReadyList+0xcc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d72:	4b23      	ldr	r3, [pc, #140]	@ (8003e00 <prvAddNewTaskToReadyList+0xc8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d802      	bhi.n	8003d86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d80:	4a1f      	ldr	r2, [pc, #124]	@ (8003e00 <prvAddNewTaskToReadyList+0xc8>)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d86:	4b20      	ldr	r3, [pc, #128]	@ (8003e08 <prvAddNewTaskToReadyList+0xd0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <prvAddNewTaskToReadyList+0xd0>)
 8003d8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d90:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <prvAddNewTaskToReadyList+0xd0>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <prvAddNewTaskToReadyList+0xd4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d903      	bls.n	8003dac <prvAddNewTaskToReadyList+0x74>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	4a18      	ldr	r2, [pc, #96]	@ (8003e0c <prvAddNewTaskToReadyList+0xd4>)
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <prvAddNewTaskToReadyList+0xd8>)
 8003dba:	441a      	add	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f7ff f8e9 	bl	8002f9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dc8:	f001 fbd0 	bl	800556c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <prvAddNewTaskToReadyList+0xcc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00e      	beq.n	8003df2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <prvAddNewTaskToReadyList+0xc8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d207      	bcs.n	8003df2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003de2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e14 <prvAddNewTaskToReadyList+0xdc>)
 8003de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000d84 	.word	0x20000d84
 8003e00:	200008b0 	.word	0x200008b0
 8003e04:	20000d90 	.word	0x20000d90
 8003e08:	20000da0 	.word	0x20000da0
 8003e0c:	20000d8c 	.word	0x20000d8c
 8003e10:	200008b4 	.word	0x200008b4
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d018      	beq.n	8003e5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e2a:	4b14      	ldr	r3, [pc, #80]	@ (8003e7c <vTaskDelay+0x64>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <vTaskDelay+0x32>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	60bb      	str	r3, [r7, #8]
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	e7fd      	b.n	8003e46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e4a:	f000 f9fb 	bl	8004244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e4e:	2100      	movs	r1, #0
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fe79 	bl	8004b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e56:	f000 fa03 	bl	8004260 <xTaskResumeAll>
 8003e5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e62:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <vTaskDelay+0x68>)
 8003e64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000dac 	.word	0x20000dac
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <eTaskGetState+0x2a>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60bb      	str	r3, [r7, #8]
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	e7fd      	b.n	8003eaa <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8003eae:	4b24      	ldr	r3, [pc, #144]	@ (8003f40 <eTaskGetState+0xbc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d102      	bne.n	8003ebe <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e03a      	b.n	8003f34 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8003ebe:	f001 fb23 	bl	8005508 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f44 <eTaskGetState+0xc0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003ece:	4b1e      	ldr	r3, [pc, #120]	@ (8003f48 <eTaskGetState+0xc4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8003ed4:	f001 fb4a 	bl	800556c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d003      	beq.n	8003ee8 <eTaskGetState+0x64>
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d102      	bne.n	8003eee <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e022      	b.n	8003f34 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4a16      	ldr	r2, [pc, #88]	@ (8003f4c <eTaskGetState+0xc8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d112      	bne.n	8003f1c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d102      	bne.n	8003f10 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e011      	b.n	8003f34 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8003f10:	2303      	movs	r3, #3
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e00e      	b.n	8003f34 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003f16:	2302      	movs	r3, #2
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e00b      	b.n	8003f34 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f50 <eTaskGetState+0xcc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d002      	beq.n	8003f2a <eTaskGetState+0xa6>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e001      	b.n	8003f34 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003f30:	2301      	movs	r3, #1
 8003f32:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003f34:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003f36:	4618      	mov	r0, r3
 8003f38:	3720      	adds	r7, #32
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200008b0 	.word	0x200008b0
 8003f44:	20000d3c 	.word	0x20000d3c
 8003f48:	20000d40 	.word	0x20000d40
 8003f4c:	20000d70 	.word	0x20000d70
 8003f50:	20000d58 	.word	0x20000d58

08003f54 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003f5c:	f001 fad4 	bl	8005508 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d102      	bne.n	8003f6c <vTaskSuspend+0x18>
 8003f66:	4b30      	ldr	r3, [pc, #192]	@ (8004028 <vTaskSuspend+0xd4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	e000      	b.n	8003f6e <vTaskSuspend+0x1a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff f86d 	bl	8003054 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3318      	adds	r3, #24
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff f864 	bl	8003054 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4826      	ldr	r0, [pc, #152]	@ (800402c <vTaskSuspend+0xd8>)
 8003f94:	f7ff f801 	bl	8002f9a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d103      	bne.n	8003fac <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003fac:	f001 fade 	bl	800556c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004030 <vTaskSuspend+0xdc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003fb8:	f001 faa6 	bl	8005508 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003fbc:	f000 fd16 	bl	80049ec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003fc0:	f001 fad4 	bl	800556c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003fc4:	4b18      	ldr	r3, [pc, #96]	@ (8004028 <vTaskSuspend+0xd4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d128      	bne.n	8004020 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003fce:	4b18      	ldr	r3, [pc, #96]	@ (8004030 <vTaskSuspend+0xdc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d018      	beq.n	8004008 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003fd6:	4b17      	ldr	r3, [pc, #92]	@ (8004034 <vTaskSuspend+0xe0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <vTaskSuspend+0xa2>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	60bb      	str	r3, [r7, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8003ff6:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <vTaskSuspend+0xe4>)
 8003ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004006:	e00b      	b.n	8004020 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004008:	4b08      	ldr	r3, [pc, #32]	@ (800402c <vTaskSuspend+0xd8>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <vTaskSuspend+0xe8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d103      	bne.n	800401c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8004014:	4b04      	ldr	r3, [pc, #16]	@ (8004028 <vTaskSuspend+0xd4>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
	}
 800401a:	e001      	b.n	8004020 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800401c:	f000 fa88 	bl	8004530 <vTaskSwitchContext>
	}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	200008b0 	.word	0x200008b0
 800402c:	20000d70 	.word	0x20000d70
 8004030:	20000d90 	.word	0x20000d90
 8004034:	20000dac 	.word	0x20000dac
 8004038:	e000ed04 	.word	0xe000ed04
 800403c:	20000d84 	.word	0x20000d84

08004040 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	60fb      	str	r3, [r7, #12]
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	e7fd      	b.n	800406a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	4a0a      	ldr	r2, [pc, #40]	@ (800409c <prvTaskIsTaskSuspended+0x5c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d10a      	bne.n	800408e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	4a08      	ldr	r2, [pc, #32]	@ (80040a0 <prvTaskIsTaskSuspended+0x60>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d005      	beq.n	800408e <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800408a:	2301      	movs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800408e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004090:	4618      	mov	r0, r3
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	20000d70 	.word	0x20000d70
 80040a0:	20000d44 	.word	0x20000d44

080040a4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <vTaskResume+0x2a>
	__asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	60bb      	str	r3, [r7, #8]
}
 80040c8:	bf00      	nop
 80040ca:	bf00      	nop
 80040cc:	e7fd      	b.n	80040ca <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80040ce:	4b21      	ldr	r3, [pc, #132]	@ (8004154 <vTaskResume+0xb0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d038      	beq.n	800414a <vTaskResume+0xa6>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d035      	beq.n	800414a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 80040de:	f001 fa13 	bl	8005508 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff ffac 	bl	8004040 <prvTaskIsTaskSuspended>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d02b      	beq.n	8004146 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe ffae 	bl	8003054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fc:	4b16      	ldr	r3, [pc, #88]	@ (8004158 <vTaskResume+0xb4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d903      	bls.n	800410c <vTaskResume+0x68>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	4a13      	ldr	r2, [pc, #76]	@ (8004158 <vTaskResume+0xb4>)
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4a10      	ldr	r2, [pc, #64]	@ (800415c <vTaskResume+0xb8>)
 800411a:	441a      	add	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f7fe ff39 	bl	8002f9a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412c:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <vTaskResume+0xb0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	429a      	cmp	r2, r3
 8004134:	d307      	bcc.n	8004146 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004136:	4b0a      	ldr	r3, [pc, #40]	@ (8004160 <vTaskResume+0xbc>)
 8004138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004146:	f001 fa11 	bl	800556c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200008b0 	.word	0x200008b0
 8004158:	20000d8c 	.word	0x20000d8c
 800415c:	200008b4 	.word	0x200008b4
 8004160:	e000ed04 	.word	0xe000ed04

08004164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	@ 0x28
 8004168:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004172:	463a      	mov	r2, r7
 8004174:	1d39      	adds	r1, r7, #4
 8004176:	f107 0308 	add.w	r3, r7, #8
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe feac 	bl	8002ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004180:	6839      	ldr	r1, [r7, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	9202      	str	r2, [sp, #8]
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	2300      	movs	r3, #0
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2300      	movs	r3, #0
 8004190:	460a      	mov	r2, r1
 8004192:	4924      	ldr	r1, [pc, #144]	@ (8004224 <vTaskStartScheduler+0xc0>)
 8004194:	4824      	ldr	r0, [pc, #144]	@ (8004228 <vTaskStartScheduler+0xc4>)
 8004196:	f7ff fc81 	bl	8003a9c <xTaskCreateStatic>
 800419a:	4603      	mov	r3, r0
 800419c:	4a23      	ldr	r2, [pc, #140]	@ (800422c <vTaskStartScheduler+0xc8>)
 800419e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041a0:	4b22      	ldr	r3, [pc, #136]	@ (800422c <vTaskStartScheduler+0xc8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041a8:	2301      	movs	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e001      	b.n	80041b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d102      	bne.n	80041be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041b8:	f000 fd1a 	bl	8004bf0 <xTimerCreateTimerTask>
 80041bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d11b      	bne.n	80041fc <vTaskStartScheduler+0x98>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	613b      	str	r3, [r7, #16]
}
 80041d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041d8:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <vTaskStartScheduler+0xcc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3354      	adds	r3, #84	@ 0x54
 80041de:	4a15      	ldr	r2, [pc, #84]	@ (8004234 <vTaskStartScheduler+0xd0>)
 80041e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041e2:	4b15      	ldr	r3, [pc, #84]	@ (8004238 <vTaskStartScheduler+0xd4>)
 80041e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041ea:	4b14      	ldr	r3, [pc, #80]	@ (800423c <vTaskStartScheduler+0xd8>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041f0:	4b13      	ldr	r3, [pc, #76]	@ (8004240 <vTaskStartScheduler+0xdc>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041f6:	f001 f8e3 	bl	80053c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041fa:	e00f      	b.n	800421c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004202:	d10b      	bne.n	800421c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <vTaskStartScheduler+0xb4>
}
 800421c:	bf00      	nop
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	08006624 	.word	0x08006624
 8004228:	08004875 	.word	0x08004875
 800422c:	20000da8 	.word	0x20000da8
 8004230:	200008b0 	.word	0x200008b0
 8004234:	20000010 	.word	0x20000010
 8004238:	20000da4 	.word	0x20000da4
 800423c:	20000d90 	.word	0x20000d90
 8004240:	20000d88 	.word	0x20000d88

08004244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004248:	4b04      	ldr	r3, [pc, #16]	@ (800425c <vTaskSuspendAll+0x18>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	4a03      	ldr	r2, [pc, #12]	@ (800425c <vTaskSuspendAll+0x18>)
 8004250:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004252:	bf00      	nop
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	20000dac 	.word	0x20000dac

08004260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800426e:	4b42      	ldr	r3, [pc, #264]	@ (8004378 <xTaskResumeAll+0x118>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <xTaskResumeAll+0x2e>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	603b      	str	r3, [r7, #0]
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	e7fd      	b.n	800428a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800428e:	f001 f93b 	bl	8005508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004292:	4b39      	ldr	r3, [pc, #228]	@ (8004378 <xTaskResumeAll+0x118>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3b01      	subs	r3, #1
 8004298:	4a37      	ldr	r2, [pc, #220]	@ (8004378 <xTaskResumeAll+0x118>)
 800429a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429c:	4b36      	ldr	r3, [pc, #216]	@ (8004378 <xTaskResumeAll+0x118>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d162      	bne.n	800436a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042a4:	4b35      	ldr	r3, [pc, #212]	@ (800437c <xTaskResumeAll+0x11c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05e      	beq.n	800436a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042ac:	e02f      	b.n	800430e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ae:	4b34      	ldr	r3, [pc, #208]	@ (8004380 <xTaskResumeAll+0x120>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3318      	adds	r3, #24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe feca 	bl	8003054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe fec5 	bl	8003054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004384 <xTaskResumeAll+0x124>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d903      	bls.n	80042de <xTaskResumeAll+0x7e>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	4a2a      	ldr	r2, [pc, #168]	@ (8004384 <xTaskResumeAll+0x124>)
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4a27      	ldr	r2, [pc, #156]	@ (8004388 <xTaskResumeAll+0x128>)
 80042ec:	441a      	add	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f7fe fe50 	bl	8002f9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fe:	4b23      	ldr	r3, [pc, #140]	@ (800438c <xTaskResumeAll+0x12c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	429a      	cmp	r2, r3
 8004306:	d302      	bcc.n	800430e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004308:	4b21      	ldr	r3, [pc, #132]	@ (8004390 <xTaskResumeAll+0x130>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800430e:	4b1c      	ldr	r3, [pc, #112]	@ (8004380 <xTaskResumeAll+0x120>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1cb      	bne.n	80042ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800431c:	f000 fb66 	bl	80049ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004320:	4b1c      	ldr	r3, [pc, #112]	@ (8004394 <xTaskResumeAll+0x134>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800432c:	f000 f846 	bl	80043bc <xTaskIncrementTick>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004336:	4b16      	ldr	r3, [pc, #88]	@ (8004390 <xTaskResumeAll+0x130>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3b01      	subs	r3, #1
 8004340:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f1      	bne.n	800432c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004348:	4b12      	ldr	r3, [pc, #72]	@ (8004394 <xTaskResumeAll+0x134>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800434e:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <xTaskResumeAll+0x130>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004356:	2301      	movs	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800435a:	4b0f      	ldr	r3, [pc, #60]	@ (8004398 <xTaskResumeAll+0x138>)
 800435c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800436a:	f001 f8ff 	bl	800556c <vPortExitCritical>

	return xAlreadyYielded;
 800436e:	68bb      	ldr	r3, [r7, #8]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000dac 	.word	0x20000dac
 800437c:	20000d84 	.word	0x20000d84
 8004380:	20000d44 	.word	0x20000d44
 8004384:	20000d8c 	.word	0x20000d8c
 8004388:	200008b4 	.word	0x200008b4
 800438c:	200008b0 	.word	0x200008b0
 8004390:	20000d98 	.word	0x20000d98
 8004394:	20000d94 	.word	0x20000d94
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043a2:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <xTaskGetTickCount+0x1c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043a8:	687b      	ldr	r3, [r7, #4]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000d88 	.word	0x20000d88

080043bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004504 <xTaskIncrementTick+0x148>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 8090 	bne.w	80044f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004508 <xTaskIncrementTick+0x14c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3301      	adds	r3, #1
 80043d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004508 <xTaskIncrementTick+0x14c>)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d121      	bne.n	8004428 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80043e4:	4b49      	ldr	r3, [pc, #292]	@ (800450c <xTaskIncrementTick+0x150>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <xTaskIncrementTick+0x4a>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	603b      	str	r3, [r7, #0]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <xTaskIncrementTick+0x46>
 8004406:	4b41      	ldr	r3, [pc, #260]	@ (800450c <xTaskIncrementTick+0x150>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	4b40      	ldr	r3, [pc, #256]	@ (8004510 <xTaskIncrementTick+0x154>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a3e      	ldr	r2, [pc, #248]	@ (800450c <xTaskIncrementTick+0x150>)
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4a3e      	ldr	r2, [pc, #248]	@ (8004510 <xTaskIncrementTick+0x154>)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b3e      	ldr	r3, [pc, #248]	@ (8004514 <xTaskIncrementTick+0x158>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3301      	adds	r3, #1
 8004420:	4a3c      	ldr	r2, [pc, #240]	@ (8004514 <xTaskIncrementTick+0x158>)
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	f000 fae2 	bl	80049ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004428:	4b3b      	ldr	r3, [pc, #236]	@ (8004518 <xTaskIncrementTick+0x15c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	429a      	cmp	r2, r3
 8004430:	d349      	bcc.n	80044c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004432:	4b36      	ldr	r3, [pc, #216]	@ (800450c <xTaskIncrementTick+0x150>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800443c:	4b36      	ldr	r3, [pc, #216]	@ (8004518 <xTaskIncrementTick+0x15c>)
 800443e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004442:	601a      	str	r2, [r3, #0]
					break;
 8004444:	e03f      	b.n	80044c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004446:	4b31      	ldr	r3, [pc, #196]	@ (800450c <xTaskIncrementTick+0x150>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d203      	bcs.n	8004466 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800445e:	4a2e      	ldr	r2, [pc, #184]	@ (8004518 <xTaskIncrementTick+0x15c>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004464:	e02f      	b.n	80044c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	3304      	adds	r3, #4
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fdf2 	bl	8003054 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d004      	beq.n	8004482 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	3318      	adds	r3, #24
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe fde9 	bl	8003054 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004486:	4b25      	ldr	r3, [pc, #148]	@ (800451c <xTaskIncrementTick+0x160>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d903      	bls.n	8004496 <xTaskIncrementTick+0xda>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	4a22      	ldr	r2, [pc, #136]	@ (800451c <xTaskIncrementTick+0x160>)
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004520 <xTaskIncrementTick+0x164>)
 80044a4:	441a      	add	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f7fe fd74 	bl	8002f9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <xTaskIncrementTick+0x168>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	429a      	cmp	r2, r3
 80044be:	d3b8      	bcc.n	8004432 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044c4:	e7b5      	b.n	8004432 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044c6:	4b17      	ldr	r3, [pc, #92]	@ (8004524 <xTaskIncrementTick+0x168>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044cc:	4914      	ldr	r1, [pc, #80]	@ (8004520 <xTaskIncrementTick+0x164>)
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d901      	bls.n	80044e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80044de:	2301      	movs	r3, #1
 80044e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044e2:	4b11      	ldr	r3, [pc, #68]	@ (8004528 <xTaskIncrementTick+0x16c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80044ea:	2301      	movs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e004      	b.n	80044fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80044f0:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <xTaskIncrementTick+0x170>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	4a0d      	ldr	r2, [pc, #52]	@ (800452c <xTaskIncrementTick+0x170>)
 80044f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80044fa:	697b      	ldr	r3, [r7, #20]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000dac 	.word	0x20000dac
 8004508:	20000d88 	.word	0x20000d88
 800450c:	20000d3c 	.word	0x20000d3c
 8004510:	20000d40 	.word	0x20000d40
 8004514:	20000d9c 	.word	0x20000d9c
 8004518:	20000da4 	.word	0x20000da4
 800451c:	20000d8c 	.word	0x20000d8c
 8004520:	200008b4 	.word	0x200008b4
 8004524:	200008b0 	.word	0x200008b0
 8004528:	20000d98 	.word	0x20000d98
 800452c:	20000d94 	.word	0x20000d94

08004530 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004536:	4b2b      	ldr	r3, [pc, #172]	@ (80045e4 <vTaskSwitchContext+0xb4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800453e:	4b2a      	ldr	r3, [pc, #168]	@ (80045e8 <vTaskSwitchContext+0xb8>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004544:	e047      	b.n	80045d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004546:	4b28      	ldr	r3, [pc, #160]	@ (80045e8 <vTaskSwitchContext+0xb8>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454c:	4b27      	ldr	r3, [pc, #156]	@ (80045ec <vTaskSwitchContext+0xbc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e011      	b.n	8004578 <vTaskSwitchContext+0x48>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10b      	bne.n	8004572 <vTaskSwitchContext+0x42>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	607b      	str	r3, [r7, #4]
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <vTaskSwitchContext+0x3e>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b01      	subs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	491d      	ldr	r1, [pc, #116]	@ (80045f0 <vTaskSwitchContext+0xc0>)
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0e3      	beq.n	8004554 <vTaskSwitchContext+0x24>
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4a16      	ldr	r2, [pc, #88]	@ (80045f0 <vTaskSwitchContext+0xc0>)
 8004598:	4413      	add	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3308      	adds	r3, #8
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d104      	bne.n	80045bc <vTaskSwitchContext+0x8c>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	605a      	str	r2, [r3, #4]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4a0c      	ldr	r2, [pc, #48]	@ (80045f4 <vTaskSwitchContext+0xc4>)
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	4a09      	ldr	r2, [pc, #36]	@ (80045ec <vTaskSwitchContext+0xbc>)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <vTaskSwitchContext+0xc4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3354      	adds	r3, #84	@ 0x54
 80045d2:	4a09      	ldr	r2, [pc, #36]	@ (80045f8 <vTaskSwitchContext+0xc8>)
 80045d4:	6013      	str	r3, [r2, #0]
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000dac 	.word	0x20000dac
 80045e8:	20000d98 	.word	0x20000d98
 80045ec:	20000d8c 	.word	0x20000d8c
 80045f0:	200008b4 	.word	0x200008b4
 80045f4:	200008b0 	.word	0x200008b0
 80045f8:	20000010 	.word	0x20000010

080045fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	60fb      	str	r3, [r7, #12]
}
 800461e:	bf00      	nop
 8004620:	bf00      	nop
 8004622:	e7fd      	b.n	8004620 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004624:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <vTaskPlaceOnEventList+0x48>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3318      	adds	r3, #24
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fe fcd8 	bl	8002fe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004632:	2101      	movs	r1, #1
 8004634:	6838      	ldr	r0, [r7, #0]
 8004636:	f000 fa87 	bl	8004b48 <prvAddCurrentTaskToDelayedList>
}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	200008b0 	.word	0x200008b0

08004648 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10b      	bne.n	8004672 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	617b      	str	r3, [r7, #20]
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	e7fd      	b.n	800466e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004672:	4b0a      	ldr	r3, [pc, #40]	@ (800469c <vTaskPlaceOnEventListRestricted+0x54>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3318      	adds	r3, #24
 8004678:	4619      	mov	r1, r3
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7fe fc8d 	bl	8002f9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800468a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	68b8      	ldr	r0, [r7, #8]
 8004690:	f000 fa5a 	bl	8004b48 <prvAddCurrentTaskToDelayedList>
	}
 8004694:	bf00      	nop
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	200008b0 	.word	0x200008b0

080046a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10b      	bne.n	80046ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60fb      	str	r3, [r7, #12]
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	e7fd      	b.n	80046ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	3318      	adds	r3, #24
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fcbe 	bl	8003054 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <xTaskRemoveFromEventList+0xb0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d11d      	bne.n	800471c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe fcb5 	bl	8003054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ee:	4b19      	ldr	r3, [pc, #100]	@ (8004754 <xTaskRemoveFromEventList+0xb4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d903      	bls.n	80046fe <xTaskRemoveFromEventList+0x5e>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	4a16      	ldr	r2, [pc, #88]	@ (8004754 <xTaskRemoveFromEventList+0xb4>)
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4a13      	ldr	r2, [pc, #76]	@ (8004758 <xTaskRemoveFromEventList+0xb8>)
 800470c:	441a      	add	r2, r3
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	3304      	adds	r3, #4
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f7fe fc40 	bl	8002f9a <vListInsertEnd>
 800471a:	e005      	b.n	8004728 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	3318      	adds	r3, #24
 8004720:	4619      	mov	r1, r3
 8004722:	480e      	ldr	r0, [pc, #56]	@ (800475c <xTaskRemoveFromEventList+0xbc>)
 8004724:	f7fe fc39 	bl	8002f9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472c:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <xTaskRemoveFromEventList+0xc0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	429a      	cmp	r2, r3
 8004734:	d905      	bls.n	8004742 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800473a:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <xTaskRemoveFromEventList+0xc4>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	e001      	b.n	8004746 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004746:	697b      	ldr	r3, [r7, #20]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000dac 	.word	0x20000dac
 8004754:	20000d8c 	.word	0x20000d8c
 8004758:	200008b4 	.word	0x200008b4
 800475c:	20000d44 	.word	0x20000d44
 8004760:	200008b0 	.word	0x200008b0
 8004764:	20000d98 	.word	0x20000d98

08004768 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004770:	4b06      	ldr	r3, [pc, #24]	@ (800478c <vTaskInternalSetTimeOutState+0x24>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <vTaskInternalSetTimeOutState+0x28>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	605a      	str	r2, [r3, #4]
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	20000d9c 	.word	0x20000d9c
 8004790:	20000d88 	.word	0x20000d88

08004794 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	613b      	str	r3, [r7, #16]
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	60fb      	str	r3, [r7, #12]
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	e7fd      	b.n	80047d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80047da:	f000 fe95 	bl	8005508 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047de:	4b1d      	ldr	r3, [pc, #116]	@ (8004854 <xTaskCheckForTimeOut+0xc0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047f6:	d102      	bne.n	80047fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	e023      	b.n	8004846 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b15      	ldr	r3, [pc, #84]	@ (8004858 <xTaskCheckForTimeOut+0xc4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d007      	beq.n	800481a <xTaskCheckForTimeOut+0x86>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	429a      	cmp	r2, r3
 8004812:	d302      	bcc.n	800481a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004814:	2301      	movs	r3, #1
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	e015      	b.n	8004846 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	429a      	cmp	r2, r3
 8004822:	d20b      	bcs.n	800483c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ff99 	bl	8004768 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	e004      	b.n	8004846 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004842:	2301      	movs	r3, #1
 8004844:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004846:	f000 fe91 	bl	800556c <vPortExitCritical>

	return xReturn;
 800484a:	69fb      	ldr	r3, [r7, #28]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20000d88 	.word	0x20000d88
 8004858:	20000d9c 	.word	0x20000d9c

0800485c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004860:	4b03      	ldr	r3, [pc, #12]	@ (8004870 <vTaskMissedYield+0x14>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]
}
 8004866:	bf00      	nop
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	20000d98 	.word	0x20000d98

08004874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800487c:	f000 f852 	bl	8004924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004880:	4b06      	ldr	r3, [pc, #24]	@ (800489c <prvIdleTask+0x28>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d9f9      	bls.n	800487c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <prvIdleTask+0x2c>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004898:	e7f0      	b.n	800487c <prvIdleTask+0x8>
 800489a:	bf00      	nop
 800489c:	200008b4 	.word	0x200008b4
 80048a0:	e000ed04 	.word	0xe000ed04

080048a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	e00c      	b.n	80048ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4a12      	ldr	r2, [pc, #72]	@ (8004904 <prvInitialiseTaskLists+0x60>)
 80048bc:	4413      	add	r3, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe fb3e 	bl	8002f40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3301      	adds	r3, #1
 80048c8:	607b      	str	r3, [r7, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b37      	cmp	r3, #55	@ 0x37
 80048ce:	d9ef      	bls.n	80048b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048d0:	480d      	ldr	r0, [pc, #52]	@ (8004908 <prvInitialiseTaskLists+0x64>)
 80048d2:	f7fe fb35 	bl	8002f40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048d6:	480d      	ldr	r0, [pc, #52]	@ (800490c <prvInitialiseTaskLists+0x68>)
 80048d8:	f7fe fb32 	bl	8002f40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048dc:	480c      	ldr	r0, [pc, #48]	@ (8004910 <prvInitialiseTaskLists+0x6c>)
 80048de:	f7fe fb2f 	bl	8002f40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048e2:	480c      	ldr	r0, [pc, #48]	@ (8004914 <prvInitialiseTaskLists+0x70>)
 80048e4:	f7fe fb2c 	bl	8002f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048e8:	480b      	ldr	r0, [pc, #44]	@ (8004918 <prvInitialiseTaskLists+0x74>)
 80048ea:	f7fe fb29 	bl	8002f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <prvInitialiseTaskLists+0x78>)
 80048f0:	4a05      	ldr	r2, [pc, #20]	@ (8004908 <prvInitialiseTaskLists+0x64>)
 80048f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004920 <prvInitialiseTaskLists+0x7c>)
 80048f6:	4a05      	ldr	r2, [pc, #20]	@ (800490c <prvInitialiseTaskLists+0x68>)
 80048f8:	601a      	str	r2, [r3, #0]
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200008b4 	.word	0x200008b4
 8004908:	20000d14 	.word	0x20000d14
 800490c:	20000d28 	.word	0x20000d28
 8004910:	20000d44 	.word	0x20000d44
 8004914:	20000d58 	.word	0x20000d58
 8004918:	20000d70 	.word	0x20000d70
 800491c:	20000d3c 	.word	0x20000d3c
 8004920:	20000d40 	.word	0x20000d40

08004924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800492a:	e019      	b.n	8004960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800492c:	f000 fdec 	bl	8005508 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004930:	4b10      	ldr	r3, [pc, #64]	@ (8004974 <prvCheckTasksWaitingTermination+0x50>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe fb89 	bl	8003054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004942:	4b0d      	ldr	r3, [pc, #52]	@ (8004978 <prvCheckTasksWaitingTermination+0x54>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3b01      	subs	r3, #1
 8004948:	4a0b      	ldr	r2, [pc, #44]	@ (8004978 <prvCheckTasksWaitingTermination+0x54>)
 800494a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800494c:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <prvCheckTasksWaitingTermination+0x58>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3b01      	subs	r3, #1
 8004952:	4a0a      	ldr	r2, [pc, #40]	@ (800497c <prvCheckTasksWaitingTermination+0x58>)
 8004954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004956:	f000 fe09 	bl	800556c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f810 	bl	8004980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004960:	4b06      	ldr	r3, [pc, #24]	@ (800497c <prvCheckTasksWaitingTermination+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e1      	bne.n	800492c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000d58 	.word	0x20000d58
 8004978:	20000d84 	.word	0x20000d84
 800497c:	20000d6c 	.word	0x20000d6c

08004980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3354      	adds	r3, #84	@ 0x54
 800498c:	4618      	mov	r0, r3
 800498e:	f001 f8f3 	bl	8005b78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004998:	2b00      	cmp	r3, #0
 800499a:	d108      	bne.n	80049ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 ffa1 	bl	80058e8 <vPortFree>
				vPortFree( pxTCB );
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 ff9e 	bl	80058e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049ac:	e019      	b.n	80049e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d103      	bne.n	80049c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 ff95 	bl	80058e8 <vPortFree>
	}
 80049be:	e010      	b.n	80049e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d00b      	beq.n	80049e2 <prvDeleteTCB+0x62>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	60fb      	str	r3, [r7, #12]
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	e7fd      	b.n	80049de <prvDeleteTCB+0x5e>
	}
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004a24 <prvResetNextTaskUnblockTime+0x38>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004a28 <prvResetNextTaskUnblockTime+0x3c>)
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a04:	e008      	b.n	8004a18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a06:	4b07      	ldr	r3, [pc, #28]	@ (8004a24 <prvResetNextTaskUnblockTime+0x38>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a04      	ldr	r2, [pc, #16]	@ (8004a28 <prvResetNextTaskUnblockTime+0x3c>)
 8004a16:	6013      	str	r3, [r2, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	20000d3c 	.word	0x20000d3c
 8004a28:	20000da4 	.word	0x20000da4

08004a2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a32:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <xTaskGetSchedulerState+0x34>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	e008      	b.n	8004a52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a40:	4b08      	ldr	r3, [pc, #32]	@ (8004a64 <xTaskGetSchedulerState+0x38>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	e001      	b.n	8004a52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a52:	687b      	ldr	r3, [r7, #4]
	}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	20000d90 	.word	0x20000d90
 8004a64:	20000dac 	.word	0x20000dac

08004a68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d058      	beq.n	8004b30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b3c <xTaskPriorityDisinherit+0xd4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d00b      	beq.n	8004aa0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	60fb      	str	r3, [r7, #12]
}
 8004a9a:	bf00      	nop
 8004a9c:	bf00      	nop
 8004a9e:	e7fd      	b.n	8004a9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	60bb      	str	r3, [r7, #8]
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac4:	1e5a      	subs	r2, r3, #1
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d02c      	beq.n	8004b30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d128      	bne.n	8004b30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fab6 	bl	8003054 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b00:	4b0f      	ldr	r3, [pc, #60]	@ (8004b40 <xTaskPriorityDisinherit+0xd8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d903      	bls.n	8004b10 <xTaskPriorityDisinherit+0xa8>
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b40 <xTaskPriorityDisinherit+0xd8>)
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4a09      	ldr	r2, [pc, #36]	@ (8004b44 <xTaskPriorityDisinherit+0xdc>)
 8004b1e:	441a      	add	r2, r3
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f7fe fa37 	bl	8002f9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b30:	697b      	ldr	r3, [r7, #20]
	}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	200008b0 	.word	0x200008b0
 8004b40:	20000d8c 	.word	0x20000d8c
 8004b44:	200008b4 	.word	0x200008b4

08004b48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b52:	4b21      	ldr	r3, [pc, #132]	@ (8004bd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b58:	4b20      	ldr	r3, [pc, #128]	@ (8004bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fa78 	bl	8003054 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b6a:	d10a      	bne.n	8004b82 <prvAddCurrentTaskToDelayedList+0x3a>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b72:	4b1a      	ldr	r3, [pc, #104]	@ (8004bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4819      	ldr	r0, [pc, #100]	@ (8004be0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b7c:	f7fe fa0d 	bl	8002f9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b80:	e026      	b.n	8004bd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4413      	add	r3, r2
 8004b88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b8a:	4b14      	ldr	r3, [pc, #80]	@ (8004bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d209      	bcs.n	8004bae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b9a:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f7fe fa1b 	bl	8002fe2 <vListInsert>
}
 8004bac:	e010      	b.n	8004bd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bae:	4b0e      	ldr	r3, [pc, #56]	@ (8004be8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f7fe fa11 	bl	8002fe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d202      	bcs.n	8004bd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bca:	4a08      	ldr	r2, [pc, #32]	@ (8004bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	6013      	str	r3, [r2, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000d88 	.word	0x20000d88
 8004bdc:	200008b0 	.word	0x200008b0
 8004be0:	20000d70 	.word	0x20000d70
 8004be4:	20000d40 	.word	0x20000d40
 8004be8:	20000d3c 	.word	0x20000d3c
 8004bec:	20000da4 	.word	0x20000da4

08004bf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	@ 0x28
 8004bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bfa:	f000 fb13 	bl	8005224 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8004c74 <xTimerCreateTimerTask+0x84>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d021      	beq.n	8004c4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c0e:	1d3a      	adds	r2, r7, #4
 8004c10:	f107 0108 	add.w	r1, r7, #8
 8004c14:	f107 030c 	add.w	r3, r7, #12
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fe f977 	bl	8002f0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	9202      	str	r2, [sp, #8]
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	2302      	movs	r3, #2
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	460a      	mov	r2, r1
 8004c30:	4911      	ldr	r1, [pc, #68]	@ (8004c78 <xTimerCreateTimerTask+0x88>)
 8004c32:	4812      	ldr	r0, [pc, #72]	@ (8004c7c <xTimerCreateTimerTask+0x8c>)
 8004c34:	f7fe ff32 	bl	8003a9c <xTaskCreateStatic>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4a11      	ldr	r2, [pc, #68]	@ (8004c80 <xTimerCreateTimerTask+0x90>)
 8004c3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c3e:	4b10      	ldr	r3, [pc, #64]	@ (8004c80 <xTimerCreateTimerTask+0x90>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c46:	2301      	movs	r3, #1
 8004c48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10b      	bne.n	8004c68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	613b      	str	r3, [r7, #16]
}
 8004c62:	bf00      	nop
 8004c64:	bf00      	nop
 8004c66:	e7fd      	b.n	8004c64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c68:	697b      	ldr	r3, [r7, #20]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000de0 	.word	0x20000de0
 8004c78:	0800662c 	.word	0x0800662c
 8004c7c:	08004dbd 	.word	0x08004dbd
 8004c80:	20000de4 	.word	0x20000de4

08004c84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	@ 0x28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <xTimerGenericCommand+0x30>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	623b      	str	r3, [r7, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	bf00      	nop
 8004cb2:	e7fd      	b.n	8004cb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cb4:	4b19      	ldr	r3, [pc, #100]	@ (8004d1c <xTimerGenericCommand+0x98>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d02a      	beq.n	8004d12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	dc18      	bgt.n	8004d00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cce:	f7ff fead 	bl	8004a2c <xTaskGetSchedulerState>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d109      	bne.n	8004cec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cd8:	4b10      	ldr	r3, [pc, #64]	@ (8004d1c <xTimerGenericCommand+0x98>)
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	f107 0110 	add.w	r1, r7, #16
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce4:	f7fe faea 	bl	80032bc <xQueueGenericSend>
 8004ce8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004cea:	e012      	b.n	8004d12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cec:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <xTimerGenericCommand+0x98>)
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	f107 0110 	add.w	r1, r7, #16
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f7fe fae0 	bl	80032bc <xQueueGenericSend>
 8004cfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004cfe:	e008      	b.n	8004d12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d00:	4b06      	ldr	r3, [pc, #24]	@ (8004d1c <xTimerGenericCommand+0x98>)
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	f107 0110 	add.w	r1, r7, #16
 8004d08:	2300      	movs	r3, #0
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	f7fe fbd8 	bl	80034c0 <xQueueGenericSendFromISR>
 8004d10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3728      	adds	r7, #40	@ 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000de0 	.word	0x20000de0

08004d20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d2a:	4b23      	ldr	r3, [pc, #140]	@ (8004db8 <prvProcessExpiredTimer+0x98>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe f98b 	bl	8003054 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d023      	beq.n	8004d94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	18d1      	adds	r1, r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	6978      	ldr	r0, [r7, #20]
 8004d5a:	f000 f8d5 	bl	8004f08 <prvInsertTimerInActiveList>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d020      	beq.n	8004da6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d64:	2300      	movs	r3, #0
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	6978      	ldr	r0, [r7, #20]
 8004d70:	f7ff ff88 	bl	8004c84 <xTimerGenericCommand>
 8004d74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d114      	bne.n	8004da6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	60fb      	str	r3, [r7, #12]
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	6978      	ldr	r0, [r7, #20]
 8004dac:	4798      	blx	r3
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000dd8 	.word	0x20000dd8

08004dbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dc4:	f107 0308 	add.w	r3, r7, #8
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 f859 	bl	8004e80 <prvGetNextExpireTime>
 8004dce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f805 	bl	8004de4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dda:	f000 f8d7 	bl	8004f8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dde:	bf00      	nop
 8004de0:	e7f0      	b.n	8004dc4 <prvTimerTask+0x8>
	...

08004de4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004dee:	f7ff fa29 	bl	8004244 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004df2:	f107 0308 	add.w	r3, r7, #8
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f866 	bl	8004ec8 <prvSampleTimeNow>
 8004dfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d130      	bne.n	8004e66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10a      	bne.n	8004e20 <prvProcessTimerOrBlockTask+0x3c>
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d806      	bhi.n	8004e20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e12:	f7ff fa25 	bl	8004260 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff ff81 	bl	8004d20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e1e:	e024      	b.n	8004e6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e26:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <prvProcessTimerOrBlockTask+0x90>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <prvProcessTimerOrBlockTask+0x50>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <prvProcessTimerOrBlockTask+0x52>
 8004e34:	2300      	movs	r3, #0
 8004e36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e38:	4b0f      	ldr	r3, [pc, #60]	@ (8004e78 <prvProcessTimerOrBlockTask+0x94>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	4619      	mov	r1, r3
 8004e46:	f7fe fdf5 	bl	8003a34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e4a:	f7ff fa09 	bl	8004260 <xTaskResumeAll>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e54:	4b09      	ldr	r3, [pc, #36]	@ (8004e7c <prvProcessTimerOrBlockTask+0x98>)
 8004e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	f3bf 8f6f 	isb	sy
}
 8004e64:	e001      	b.n	8004e6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e66:	f7ff f9fb 	bl	8004260 <xTaskResumeAll>
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000ddc 	.word	0x20000ddc
 8004e78:	20000de0 	.word	0x20000de0
 8004e7c:	e000ed04 	.word	0xe000ed04

08004e80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec4 <prvGetNextExpireTime+0x44>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <prvGetNextExpireTime+0x16>
 8004e92:	2201      	movs	r2, #1
 8004e94:	e000      	b.n	8004e98 <prvGetNextExpireTime+0x18>
 8004e96:	2200      	movs	r2, #0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ea4:	4b07      	ldr	r3, [pc, #28]	@ (8004ec4 <prvGetNextExpireTime+0x44>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e001      	b.n	8004eb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	20000dd8 	.word	0x20000dd8

08004ec8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ed0:	f7ff fa64 	bl	800439c <xTaskGetTickCount>
 8004ed4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f04 <prvSampleTimeNow+0x3c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d205      	bcs.n	8004eec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ee0:	f000 f93a 	bl	8005158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e002      	b.n	8004ef2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ef2:	4a04      	ldr	r2, [pc, #16]	@ (8004f04 <prvSampleTimeNow+0x3c>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000de8 	.word	0x20000de8

08004f08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d812      	bhi.n	8004f54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	1ad2      	subs	r2, r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e01b      	b.n	8004f7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f42:	4b10      	ldr	r3, [pc, #64]	@ (8004f84 <prvInsertTimerInActiveList+0x7c>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f7fe f848 	bl	8002fe2 <vListInsert>
 8004f52:	e012      	b.n	8004f7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d206      	bcs.n	8004f6a <prvInsertTimerInActiveList+0x62>
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f64:	2301      	movs	r3, #1
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e007      	b.n	8004f7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f6a:	4b07      	ldr	r3, [pc, #28]	@ (8004f88 <prvInsertTimerInActiveList+0x80>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f7fe f834 	bl	8002fe2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f7a:	697b      	ldr	r3, [r7, #20]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	20000ddc 	.word	0x20000ddc
 8004f88:	20000dd8 	.word	0x20000dd8

08004f8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08e      	sub	sp, #56	@ 0x38
 8004f90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f92:	e0ce      	b.n	8005132 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da19      	bge.n	8004fce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	61fb      	str	r3, [r7, #28]
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	e7fd      	b.n	8004fba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc4:	6850      	ldr	r0, [r2, #4]
 8004fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc8:	6892      	ldr	r2, [r2, #8]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f2c0 80ae 	blt.w	8005132 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d004      	beq.n	8004fec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe f834 	bl	8003054 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fec:	463b      	mov	r3, r7
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ff6a 	bl	8004ec8 <prvSampleTimeNow>
 8004ff4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b09      	cmp	r3, #9
 8004ffa:	f200 8097 	bhi.w	800512c <prvProcessReceivedCommands+0x1a0>
 8004ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8005004 <prvProcessReceivedCommands+0x78>)
 8005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005004:	0800502d 	.word	0x0800502d
 8005008:	0800502d 	.word	0x0800502d
 800500c:	0800502d 	.word	0x0800502d
 8005010:	080050a3 	.word	0x080050a3
 8005014:	080050b7 	.word	0x080050b7
 8005018:	08005103 	.word	0x08005103
 800501c:	0800502d 	.word	0x0800502d
 8005020:	0800502d 	.word	0x0800502d
 8005024:	080050a3 	.word	0x080050a3
 8005028:	080050b7 	.word	0x080050b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	b2da      	uxtb	r2, r3
 8005038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	18d1      	adds	r1, r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800504a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800504c:	f7ff ff5c 	bl	8004f08 <prvInsertTimerInActiveList>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d06c      	beq.n	8005130 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800505c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d061      	beq.n	8005130 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	441a      	add	r2, r3
 8005074:	2300      	movs	r3, #0
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	2300      	movs	r3, #0
 800507a:	2100      	movs	r1, #0
 800507c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800507e:	f7ff fe01 	bl	8004c84 <xTimerGenericCommand>
 8005082:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d152      	bne.n	8005130 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	61bb      	str	r3, [r7, #24]
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	e7fd      	b.n	800509e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80050b4:	e03d      	b.n	8005132 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	617b      	str	r3, [r7, #20]
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	18d1      	adds	r1, r2, r3
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050fc:	f7ff ff04 	bl	8004f08 <prvInsertTimerInActiveList>
					break;
 8005100:	e017      	b.n	8005132 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d103      	bne.n	8005118 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005112:	f000 fbe9 	bl	80058e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005116:	e00c      	b.n	8005132 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	b2da      	uxtb	r2, r3
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800512a:	e002      	b.n	8005132 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800512c:	bf00      	nop
 800512e:	e000      	b.n	8005132 <prvProcessReceivedCommands+0x1a6>
					break;
 8005130:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005132:	4b08      	ldr	r3, [pc, #32]	@ (8005154 <prvProcessReceivedCommands+0x1c8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	1d39      	adds	r1, r7, #4
 8005138:	2200      	movs	r2, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe fa5e 	bl	80035fc <xQueueReceive>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	f47f af26 	bne.w	8004f94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	3730      	adds	r7, #48	@ 0x30
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000de0 	.word	0x20000de0

08005158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800515e:	e049      	b.n	80051f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005160:	4b2e      	ldr	r3, [pc, #184]	@ (800521c <prvSwitchTimerLists+0xc4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516a:	4b2c      	ldr	r3, [pc, #176]	@ (800521c <prvSwitchTimerLists+0xc4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3304      	adds	r3, #4
 8005178:	4618      	mov	r0, r3
 800517a:	f7fd ff6b 	bl	8003054 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d02f      	beq.n	80051f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4413      	add	r3, r2
 800519c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d90e      	bls.n	80051c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051b2:	4b1a      	ldr	r3, [pc, #104]	@ (800521c <prvSwitchTimerLists+0xc4>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f7fd ff10 	bl	8002fe2 <vListInsert>
 80051c2:	e017      	b.n	80051f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	2100      	movs	r1, #0
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff fd58 	bl	8004c84 <xTimerGenericCommand>
 80051d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	603b      	str	r3, [r7, #0]
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	e7fd      	b.n	80051f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051f4:	4b09      	ldr	r3, [pc, #36]	@ (800521c <prvSwitchTimerLists+0xc4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1b0      	bne.n	8005160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051fe:	4b07      	ldr	r3, [pc, #28]	@ (800521c <prvSwitchTimerLists+0xc4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005204:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <prvSwitchTimerLists+0xc8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a04      	ldr	r2, [pc, #16]	@ (800521c <prvSwitchTimerLists+0xc4>)
 800520a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800520c:	4a04      	ldr	r2, [pc, #16]	@ (8005220 <prvSwitchTimerLists+0xc8>)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	6013      	str	r3, [r2, #0]
}
 8005212:	bf00      	nop
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000dd8 	.word	0x20000dd8
 8005220:	20000ddc 	.word	0x20000ddc

08005224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800522a:	f000 f96d 	bl	8005508 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800522e:	4b15      	ldr	r3, [pc, #84]	@ (8005284 <prvCheckForValidListAndQueue+0x60>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d120      	bne.n	8005278 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005236:	4814      	ldr	r0, [pc, #80]	@ (8005288 <prvCheckForValidListAndQueue+0x64>)
 8005238:	f7fd fe82 	bl	8002f40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800523c:	4813      	ldr	r0, [pc, #76]	@ (800528c <prvCheckForValidListAndQueue+0x68>)
 800523e:	f7fd fe7f 	bl	8002f40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005242:	4b13      	ldr	r3, [pc, #76]	@ (8005290 <prvCheckForValidListAndQueue+0x6c>)
 8005244:	4a10      	ldr	r2, [pc, #64]	@ (8005288 <prvCheckForValidListAndQueue+0x64>)
 8005246:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005248:	4b12      	ldr	r3, [pc, #72]	@ (8005294 <prvCheckForValidListAndQueue+0x70>)
 800524a:	4a10      	ldr	r2, [pc, #64]	@ (800528c <prvCheckForValidListAndQueue+0x68>)
 800524c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800524e:	2300      	movs	r3, #0
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	4b11      	ldr	r3, [pc, #68]	@ (8005298 <prvCheckForValidListAndQueue+0x74>)
 8005254:	4a11      	ldr	r2, [pc, #68]	@ (800529c <prvCheckForValidListAndQueue+0x78>)
 8005256:	2110      	movs	r1, #16
 8005258:	200a      	movs	r0, #10
 800525a:	f7fd ff8f 	bl	800317c <xQueueGenericCreateStatic>
 800525e:	4603      	mov	r3, r0
 8005260:	4a08      	ldr	r2, [pc, #32]	@ (8005284 <prvCheckForValidListAndQueue+0x60>)
 8005262:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005264:	4b07      	ldr	r3, [pc, #28]	@ (8005284 <prvCheckForValidListAndQueue+0x60>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800526c:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <prvCheckForValidListAndQueue+0x60>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	490b      	ldr	r1, [pc, #44]	@ (80052a0 <prvCheckForValidListAndQueue+0x7c>)
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe fbb4 	bl	80039e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005278:	f000 f978 	bl	800556c <vPortExitCritical>
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000de0 	.word	0x20000de0
 8005288:	20000db0 	.word	0x20000db0
 800528c:	20000dc4 	.word	0x20000dc4
 8005290:	20000dd8 	.word	0x20000dd8
 8005294:	20000ddc 	.word	0x20000ddc
 8005298:	20000e8c 	.word	0x20000e8c
 800529c:	20000dec 	.word	0x20000dec
 80052a0:	08006634 	.word	0x08006634

080052a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3b04      	subs	r3, #4
 80052b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80052bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3b04      	subs	r3, #4
 80052c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f023 0201 	bic.w	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3b04      	subs	r3, #4
 80052d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005308 <pxPortInitialiseStack+0x64>)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3b14      	subs	r3, #20
 80052de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3b04      	subs	r3, #4
 80052ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f06f 0202 	mvn.w	r2, #2
 80052f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3b20      	subs	r3, #32
 80052f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	0800530d 	.word	0x0800530d

0800530c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005316:	4b13      	ldr	r3, [pc, #76]	@ (8005364 <prvTaskExitError+0x58>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800531e:	d00b      	beq.n	8005338 <prvTaskExitError+0x2c>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <prvTaskExitError+0x28>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	60bb      	str	r3, [r7, #8]
}
 800534a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800534c:	bf00      	nop
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0fc      	beq.n	800534e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	2000000c 	.word	0x2000000c
	...

08005370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005370:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <pxCurrentTCBConst2>)
 8005372:	6819      	ldr	r1, [r3, #0]
 8005374:	6808      	ldr	r0, [r1, #0]
 8005376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537a:	f380 8809 	msr	PSP, r0
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f04f 0000 	mov.w	r0, #0
 8005386:	f380 8811 	msr	BASEPRI, r0
 800538a:	4770      	bx	lr
 800538c:	f3af 8000 	nop.w

08005390 <pxCurrentTCBConst2>:
 8005390:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop

08005398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005398:	4808      	ldr	r0, [pc, #32]	@ (80053bc <prvPortStartFirstTask+0x24>)
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	6800      	ldr	r0, [r0, #0]
 800539e:	f380 8808 	msr	MSP, r0
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f380 8814 	msr	CONTROL, r0
 80053aa:	b662      	cpsie	i
 80053ac:	b661      	cpsie	f
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	df00      	svc	0
 80053b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053ba:	bf00      	nop
 80053bc:	e000ed08 	.word	0xe000ed08

080053c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053c6:	4b47      	ldr	r3, [pc, #284]	@ (80054e4 <xPortStartScheduler+0x124>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a47      	ldr	r2, [pc, #284]	@ (80054e8 <xPortStartScheduler+0x128>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10b      	bne.n	80053e8 <xPortStartScheduler+0x28>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	613b      	str	r3, [r7, #16]
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053e8:	4b3e      	ldr	r3, [pc, #248]	@ (80054e4 <xPortStartScheduler+0x124>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a3f      	ldr	r2, [pc, #252]	@ (80054ec <xPortStartScheduler+0x12c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d10b      	bne.n	800540a <xPortStartScheduler+0x4a>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	60fb      	str	r3, [r7, #12]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800540a:	4b39      	ldr	r3, [pc, #228]	@ (80054f0 <xPortStartScheduler+0x130>)
 800540c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	22ff      	movs	r2, #255	@ 0xff
 800541a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800542c:	b2da      	uxtb	r2, r3
 800542e:	4b31      	ldr	r3, [pc, #196]	@ (80054f4 <xPortStartScheduler+0x134>)
 8005430:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005432:	4b31      	ldr	r3, [pc, #196]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005434:	2207      	movs	r2, #7
 8005436:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005438:	e009      	b.n	800544e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800543a:	4b2f      	ldr	r3, [pc, #188]	@ (80054f8 <xPortStartScheduler+0x138>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3b01      	subs	r3, #1
 8005440:	4a2d      	ldr	r2, [pc, #180]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005442:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	b2db      	uxtb	r3, r3
 800544c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	d0ef      	beq.n	800543a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800545a:	4b27      	ldr	r3, [pc, #156]	@ (80054f8 <xPortStartScheduler+0x138>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1c3 0307 	rsb	r3, r3, #7
 8005462:	2b04      	cmp	r3, #4
 8005464:	d00b      	beq.n	800547e <xPortStartScheduler+0xbe>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60bb      	str	r3, [r7, #8]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800547e:	4b1e      	ldr	r3, [pc, #120]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	4a1c      	ldr	r2, [pc, #112]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005486:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <xPortStartScheduler+0x138>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005490:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005492:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	b2da      	uxtb	r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800549c:	4b17      	ldr	r3, [pc, #92]	@ (80054fc <xPortStartScheduler+0x13c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a16      	ldr	r2, [pc, #88]	@ (80054fc <xPortStartScheduler+0x13c>)
 80054a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054a8:	4b14      	ldr	r3, [pc, #80]	@ (80054fc <xPortStartScheduler+0x13c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a13      	ldr	r2, [pc, #76]	@ (80054fc <xPortStartScheduler+0x13c>)
 80054ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80054b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054b4:	f000 f8da 	bl	800566c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054b8:	4b11      	ldr	r3, [pc, #68]	@ (8005500 <xPortStartScheduler+0x140>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054be:	f000 f8f9 	bl	80056b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054c2:	4b10      	ldr	r3, [pc, #64]	@ (8005504 <xPortStartScheduler+0x144>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005504 <xPortStartScheduler+0x144>)
 80054c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80054cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054ce:	f7ff ff63 	bl	8005398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054d2:	f7ff f82d 	bl	8004530 <vTaskSwitchContext>
	prvTaskExitError();
 80054d6:	f7ff ff19 	bl	800530c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	e000ed00 	.word	0xe000ed00
 80054e8:	410fc271 	.word	0x410fc271
 80054ec:	410fc270 	.word	0x410fc270
 80054f0:	e000e400 	.word	0xe000e400
 80054f4:	20000edc 	.word	0x20000edc
 80054f8:	20000ee0 	.word	0x20000ee0
 80054fc:	e000ed20 	.word	0xe000ed20
 8005500:	2000000c 	.word	0x2000000c
 8005504:	e000ef34 	.word	0xe000ef34

08005508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005522:	4b10      	ldr	r3, [pc, #64]	@ (8005564 <vPortEnterCritical+0x5c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	4a0e      	ldr	r2, [pc, #56]	@ (8005564 <vPortEnterCritical+0x5c>)
 800552a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800552c:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <vPortEnterCritical+0x5c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d110      	bne.n	8005556 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005534:	4b0c      	ldr	r3, [pc, #48]	@ (8005568 <vPortEnterCritical+0x60>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <vPortEnterCritical+0x4e>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	603b      	str	r3, [r7, #0]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <vPortEnterCritical+0x4a>
	}
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	2000000c 	.word	0x2000000c
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005572:	4b12      	ldr	r3, [pc, #72]	@ (80055bc <vPortExitCritical+0x50>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10b      	bne.n	8005592 <vPortExitCritical+0x26>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	607b      	str	r3, [r7, #4]
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	e7fd      	b.n	800558e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005592:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <vPortExitCritical+0x50>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3b01      	subs	r3, #1
 8005598:	4a08      	ldr	r2, [pc, #32]	@ (80055bc <vPortExitCritical+0x50>)
 800559a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800559c:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <vPortExitCritical+0x50>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <vPortExitCritical+0x44>
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	2000000c 	.word	0x2000000c

080055c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055c0:	f3ef 8009 	mrs	r0, PSP
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	4b15      	ldr	r3, [pc, #84]	@ (8005620 <pxCurrentTCBConst>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	f01e 0f10 	tst.w	lr, #16
 80055d0:	bf08      	it	eq
 80055d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055da:	6010      	str	r0, [r2, #0]
 80055dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80055e4:	f380 8811 	msr	BASEPRI, r0
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f7fe ff9e 	bl	8004530 <vTaskSwitchContext>
 80055f4:	f04f 0000 	mov.w	r0, #0
 80055f8:	f380 8811 	msr	BASEPRI, r0
 80055fc:	bc09      	pop	{r0, r3}
 80055fe:	6819      	ldr	r1, [r3, #0]
 8005600:	6808      	ldr	r0, [r1, #0]
 8005602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005606:	f01e 0f10 	tst.w	lr, #16
 800560a:	bf08      	it	eq
 800560c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005610:	f380 8809 	msr	PSP, r0
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w

08005620 <pxCurrentTCBConst>:
 8005620:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	607b      	str	r3, [r7, #4]
}
 8005640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005642:	f7fe febb 	bl	80043bc <xTaskIncrementTick>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800564c:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <xPortSysTickHandler+0x40>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	2300      	movs	r3, #0
 8005656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	f383 8811 	msr	BASEPRI, r3
}
 800565e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005670:	4b0b      	ldr	r3, [pc, #44]	@ (80056a0 <vPortSetupTimerInterrupt+0x34>)
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005676:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <vPortSetupTimerInterrupt+0x38>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800567c:	4b0a      	ldr	r3, [pc, #40]	@ (80056a8 <vPortSetupTimerInterrupt+0x3c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a0a      	ldr	r2, [pc, #40]	@ (80056ac <vPortSetupTimerInterrupt+0x40>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	099b      	lsrs	r3, r3, #6
 8005688:	4a09      	ldr	r2, [pc, #36]	@ (80056b0 <vPortSetupTimerInterrupt+0x44>)
 800568a:	3b01      	subs	r3, #1
 800568c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800568e:	4b04      	ldr	r3, [pc, #16]	@ (80056a0 <vPortSetupTimerInterrupt+0x34>)
 8005690:	2207      	movs	r2, #7
 8005692:	601a      	str	r2, [r3, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	e000e010 	.word	0xe000e010
 80056a4:	e000e018 	.word	0xe000e018
 80056a8:	20000000 	.word	0x20000000
 80056ac:	10624dd3 	.word	0x10624dd3
 80056b0:	e000e014 	.word	0xe000e014

080056b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80056c4 <vPortEnableVFP+0x10>
 80056b8:	6801      	ldr	r1, [r0, #0]
 80056ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80056be:	6001      	str	r1, [r0, #0]
 80056c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056c2:	bf00      	nop
 80056c4:	e000ed88 	.word	0xe000ed88

080056c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056ce:	f3ef 8305 	mrs	r3, IPSR
 80056d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b0f      	cmp	r3, #15
 80056d8:	d915      	bls.n	8005706 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056da:	4a18      	ldr	r2, [pc, #96]	@ (800573c <vPortValidateInterruptPriority+0x74>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056e4:	4b16      	ldr	r3, [pc, #88]	@ (8005740 <vPortValidateInterruptPriority+0x78>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	7afa      	ldrb	r2, [r7, #11]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d20b      	bcs.n	8005706 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005706:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <vPortValidateInterruptPriority+0x7c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800570e:	4b0e      	ldr	r3, [pc, #56]	@ (8005748 <vPortValidateInterruptPriority+0x80>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d90b      	bls.n	800572e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	603b      	str	r3, [r7, #0]
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	e7fd      	b.n	800572a <vPortValidateInterruptPriority+0x62>
	}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000e3f0 	.word	0xe000e3f0
 8005740:	20000edc 	.word	0x20000edc
 8005744:	e000ed0c 	.word	0xe000ed0c
 8005748:	20000ee0 	.word	0x20000ee0

0800574c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	@ 0x28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005758:	f7fe fd74 	bl	8004244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800575c:	4b5c      	ldr	r3, [pc, #368]	@ (80058d0 <pvPortMalloc+0x184>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005764:	f000 f924 	bl	80059b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005768:	4b5a      	ldr	r3, [pc, #360]	@ (80058d4 <pvPortMalloc+0x188>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	f040 8095 	bne.w	80058a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01e      	beq.n	80057ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800577c:	2208      	movs	r2, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b00      	cmp	r3, #0
 800578c:	d015      	beq.n	80057ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	3308      	adds	r3, #8
 8005796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <pvPortMalloc+0x6e>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	617b      	str	r3, [r7, #20]
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d06f      	beq.n	80058a0 <pvPortMalloc+0x154>
 80057c0:	4b45      	ldr	r3, [pc, #276]	@ (80058d8 <pvPortMalloc+0x18c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d86a      	bhi.n	80058a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057ca:	4b44      	ldr	r3, [pc, #272]	@ (80058dc <pvPortMalloc+0x190>)
 80057cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057ce:	4b43      	ldr	r3, [pc, #268]	@ (80058dc <pvPortMalloc+0x190>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057d4:	e004      	b.n	80057e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d903      	bls.n	80057f2 <pvPortMalloc+0xa6>
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f1      	bne.n	80057d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057f2:	4b37      	ldr	r3, [pc, #220]	@ (80058d0 <pvPortMalloc+0x184>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d051      	beq.n	80058a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2208      	movs	r2, #8
 8005802:	4413      	add	r3, r2
 8005804:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	2308      	movs	r3, #8
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	429a      	cmp	r2, r3
 800581c:	d920      	bls.n	8005860 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800581e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <pvPortMalloc+0xfc>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	613b      	str	r3, [r7, #16]
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800585a:	69b8      	ldr	r0, [r7, #24]
 800585c:	f000 f90a 	bl	8005a74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005860:	4b1d      	ldr	r3, [pc, #116]	@ (80058d8 <pvPortMalloc+0x18c>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	4a1b      	ldr	r2, [pc, #108]	@ (80058d8 <pvPortMalloc+0x18c>)
 800586c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800586e:	4b1a      	ldr	r3, [pc, #104]	@ (80058d8 <pvPortMalloc+0x18c>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b1b      	ldr	r3, [pc, #108]	@ (80058e0 <pvPortMalloc+0x194>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d203      	bcs.n	8005882 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800587a:	4b17      	ldr	r3, [pc, #92]	@ (80058d8 <pvPortMalloc+0x18c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a18      	ldr	r2, [pc, #96]	@ (80058e0 <pvPortMalloc+0x194>)
 8005880:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	4b13      	ldr	r3, [pc, #76]	@ (80058d4 <pvPortMalloc+0x188>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	431a      	orrs	r2, r3
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005896:	4b13      	ldr	r3, [pc, #76]	@ (80058e4 <pvPortMalloc+0x198>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3301      	adds	r3, #1
 800589c:	4a11      	ldr	r2, [pc, #68]	@ (80058e4 <pvPortMalloc+0x198>)
 800589e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058a0:	f7fe fcde 	bl	8004260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <pvPortMalloc+0x17a>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	60fb      	str	r3, [r7, #12]
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	e7fd      	b.n	80058c2 <pvPortMalloc+0x176>
	return pvReturn;
 80058c6:	69fb      	ldr	r3, [r7, #28]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3728      	adds	r7, #40	@ 0x28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20004aec 	.word	0x20004aec
 80058d4:	20004b00 	.word	0x20004b00
 80058d8:	20004af0 	.word	0x20004af0
 80058dc:	20004ae4 	.word	0x20004ae4
 80058e0:	20004af4 	.word	0x20004af4
 80058e4:	20004af8 	.word	0x20004af8

080058e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d04f      	beq.n	800599a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058fa:	2308      	movs	r3, #8
 80058fc:	425b      	negs	r3, r3
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4413      	add	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	4b25      	ldr	r3, [pc, #148]	@ (80059a4 <vPortFree+0xbc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4013      	ands	r3, r2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10b      	bne.n	800592e <vPortFree+0x46>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	60fb      	str	r3, [r7, #12]
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	e7fd      	b.n	800592a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <vPortFree+0x66>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	60bb      	str	r3, [r7, #8]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	4b14      	ldr	r3, [pc, #80]	@ (80059a4 <vPortFree+0xbc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01e      	beq.n	800599a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11a      	bne.n	800599a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <vPortFree+0xbc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	43db      	mvns	r3, r3
 800596e:	401a      	ands	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005974:	f7fe fc66 	bl	8004244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <vPortFree+0xc0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4413      	add	r3, r2
 8005982:	4a09      	ldr	r2, [pc, #36]	@ (80059a8 <vPortFree+0xc0>)
 8005984:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005986:	6938      	ldr	r0, [r7, #16]
 8005988:	f000 f874 	bl	8005a74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800598c:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <vPortFree+0xc4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	4a06      	ldr	r2, [pc, #24]	@ (80059ac <vPortFree+0xc4>)
 8005994:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005996:	f7fe fc63 	bl	8004260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800599a:	bf00      	nop
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20004b00 	.word	0x20004b00
 80059a8:	20004af0 	.word	0x20004af0
 80059ac:	20004afc 	.word	0x20004afc

080059b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80059ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059bc:	4b27      	ldr	r3, [pc, #156]	@ (8005a5c <prvHeapInit+0xac>)
 80059be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00c      	beq.n	80059e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3307      	adds	r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0307 	bic.w	r3, r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	4a1f      	ldr	r2, [pc, #124]	@ (8005a5c <prvHeapInit+0xac>)
 80059e0:	4413      	add	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a60 <prvHeapInit+0xb0>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005a60 <prvHeapInit+0xb0>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	4413      	add	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059fc:	2208      	movs	r2, #8
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0307 	bic.w	r3, r3, #7
 8005a0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2200      	movs	r2, #0
 8005a18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a1a:	4b12      	ldr	r3, [pc, #72]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a30:	4b0c      	ldr	r3, [pc, #48]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a68 <prvHeapInit+0xb8>)
 8005a3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4a09      	ldr	r2, [pc, #36]	@ (8005a6c <prvHeapInit+0xbc>)
 8005a46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a48:	4b09      	ldr	r3, [pc, #36]	@ (8005a70 <prvHeapInit+0xc0>)
 8005a4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a4e:	601a      	str	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	20000ee4 	.word	0x20000ee4
 8005a60:	20004ae4 	.word	0x20004ae4
 8005a64:	20004aec 	.word	0x20004aec
 8005a68:	20004af4 	.word	0x20004af4
 8005a6c:	20004af0 	.word	0x20004af0
 8005a70:	20004b00 	.word	0x20004b00

08005a74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a7c:	4b28      	ldr	r3, [pc, #160]	@ (8005b20 <prvInsertBlockIntoFreeList+0xac>)
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e002      	b.n	8005a88 <prvInsertBlockIntoFreeList+0x14>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d8f7      	bhi.n	8005a82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d108      	bne.n	8005ab6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	441a      	add	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	441a      	add	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d118      	bne.n	8005afc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b15      	ldr	r3, [pc, #84]	@ (8005b24 <prvInsertBlockIntoFreeList+0xb0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d00d      	beq.n	8005af2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e008      	b.n	8005b04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005af2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b24 <prvInsertBlockIntoFreeList+0xb0>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e003      	b.n	8005b04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d002      	beq.n	8005b12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20004ae4 	.word	0x20004ae4
 8005b24:	20004aec 	.word	0x20004aec

08005b28 <siprintf>:
 8005b28:	b40e      	push	{r1, r2, r3}
 8005b2a:	b500      	push	{lr}
 8005b2c:	b09c      	sub	sp, #112	@ 0x70
 8005b2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b30:	9002      	str	r0, [sp, #8]
 8005b32:	9006      	str	r0, [sp, #24]
 8005b34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b38:	4809      	ldr	r0, [pc, #36]	@ (8005b60 <siprintf+0x38>)
 8005b3a:	9107      	str	r1, [sp, #28]
 8005b3c:	9104      	str	r1, [sp, #16]
 8005b3e:	4909      	ldr	r1, [pc, #36]	@ (8005b64 <siprintf+0x3c>)
 8005b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b44:	9105      	str	r1, [sp, #20]
 8005b46:	6800      	ldr	r0, [r0, #0]
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	a902      	add	r1, sp, #8
 8005b4c:	f000 f9f8 	bl	8005f40 <_svfiprintf_r>
 8005b50:	9b02      	ldr	r3, [sp, #8]
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	b01c      	add	sp, #112	@ 0x70
 8005b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b5c:	b003      	add	sp, #12
 8005b5e:	4770      	bx	lr
 8005b60:	20000010 	.word	0x20000010
 8005b64:	ffff0208 	.word	0xffff0208

08005b68 <memset>:
 8005b68:	4402      	add	r2, r0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d100      	bne.n	8005b72 <memset+0xa>
 8005b70:	4770      	bx	lr
 8005b72:	f803 1b01 	strb.w	r1, [r3], #1
 8005b76:	e7f9      	b.n	8005b6c <memset+0x4>

08005b78 <_reclaim_reent>:
 8005b78:	4b29      	ldr	r3, [pc, #164]	@ (8005c20 <_reclaim_reent+0xa8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4283      	cmp	r3, r0
 8005b7e:	b570      	push	{r4, r5, r6, lr}
 8005b80:	4604      	mov	r4, r0
 8005b82:	d04b      	beq.n	8005c1c <_reclaim_reent+0xa4>
 8005b84:	69c3      	ldr	r3, [r0, #28]
 8005b86:	b1ab      	cbz	r3, 8005bb4 <_reclaim_reent+0x3c>
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	b16b      	cbz	r3, 8005ba8 <_reclaim_reent+0x30>
 8005b8c:	2500      	movs	r5, #0
 8005b8e:	69e3      	ldr	r3, [r4, #28]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	5959      	ldr	r1, [r3, r5]
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d13b      	bne.n	8005c10 <_reclaim_reent+0x98>
 8005b98:	3504      	adds	r5, #4
 8005b9a:	2d80      	cmp	r5, #128	@ 0x80
 8005b9c:	d1f7      	bne.n	8005b8e <_reclaim_reent+0x16>
 8005b9e:	69e3      	ldr	r3, [r4, #28]
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	68d9      	ldr	r1, [r3, #12]
 8005ba4:	f000 f878 	bl	8005c98 <_free_r>
 8005ba8:	69e3      	ldr	r3, [r4, #28]
 8005baa:	6819      	ldr	r1, [r3, #0]
 8005bac:	b111      	cbz	r1, 8005bb4 <_reclaim_reent+0x3c>
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f000 f872 	bl	8005c98 <_free_r>
 8005bb4:	6961      	ldr	r1, [r4, #20]
 8005bb6:	b111      	cbz	r1, 8005bbe <_reclaim_reent+0x46>
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 f86d 	bl	8005c98 <_free_r>
 8005bbe:	69e1      	ldr	r1, [r4, #28]
 8005bc0:	b111      	cbz	r1, 8005bc8 <_reclaim_reent+0x50>
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f000 f868 	bl	8005c98 <_free_r>
 8005bc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005bca:	b111      	cbz	r1, 8005bd2 <_reclaim_reent+0x5a>
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 f863 	bl	8005c98 <_free_r>
 8005bd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bd4:	b111      	cbz	r1, 8005bdc <_reclaim_reent+0x64>
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f000 f85e 	bl	8005c98 <_free_r>
 8005bdc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005bde:	b111      	cbz	r1, 8005be6 <_reclaim_reent+0x6e>
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 f859 	bl	8005c98 <_free_r>
 8005be6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005be8:	b111      	cbz	r1, 8005bf0 <_reclaim_reent+0x78>
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 f854 	bl	8005c98 <_free_r>
 8005bf0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005bf2:	b111      	cbz	r1, 8005bfa <_reclaim_reent+0x82>
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f000 f84f 	bl	8005c98 <_free_r>
 8005bfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005bfc:	b111      	cbz	r1, 8005c04 <_reclaim_reent+0x8c>
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f000 f84a 	bl	8005c98 <_free_r>
 8005c04:	6a23      	ldr	r3, [r4, #32]
 8005c06:	b14b      	cbz	r3, 8005c1c <_reclaim_reent+0xa4>
 8005c08:	4620      	mov	r0, r4
 8005c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c0e:	4718      	bx	r3
 8005c10:	680e      	ldr	r6, [r1, #0]
 8005c12:	4620      	mov	r0, r4
 8005c14:	f000 f840 	bl	8005c98 <_free_r>
 8005c18:	4631      	mov	r1, r6
 8005c1a:	e7bb      	b.n	8005b94 <_reclaim_reent+0x1c>
 8005c1c:	bd70      	pop	{r4, r5, r6, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000010 	.word	0x20000010

08005c24 <__errno>:
 8005c24:	4b01      	ldr	r3, [pc, #4]	@ (8005c2c <__errno+0x8>)
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	20000010 	.word	0x20000010

08005c30 <__libc_init_array>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	4d0d      	ldr	r5, [pc, #52]	@ (8005c68 <__libc_init_array+0x38>)
 8005c34:	4c0d      	ldr	r4, [pc, #52]	@ (8005c6c <__libc_init_array+0x3c>)
 8005c36:	1b64      	subs	r4, r4, r5
 8005c38:	10a4      	asrs	r4, r4, #2
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	42a6      	cmp	r6, r4
 8005c3e:	d109      	bne.n	8005c54 <__libc_init_array+0x24>
 8005c40:	4d0b      	ldr	r5, [pc, #44]	@ (8005c70 <__libc_init_array+0x40>)
 8005c42:	4c0c      	ldr	r4, [pc, #48]	@ (8005c74 <__libc_init_array+0x44>)
 8005c44:	f000 fc66 	bl	8006514 <_init>
 8005c48:	1b64      	subs	r4, r4, r5
 8005c4a:	10a4      	asrs	r4, r4, #2
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	42a6      	cmp	r6, r4
 8005c50:	d105      	bne.n	8005c5e <__libc_init_array+0x2e>
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c58:	4798      	blx	r3
 8005c5a:	3601      	adds	r6, #1
 8005c5c:	e7ee      	b.n	8005c3c <__libc_init_array+0xc>
 8005c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c62:	4798      	blx	r3
 8005c64:	3601      	adds	r6, #1
 8005c66:	e7f2      	b.n	8005c4e <__libc_init_array+0x1e>
 8005c68:	080066d8 	.word	0x080066d8
 8005c6c:	080066d8 	.word	0x080066d8
 8005c70:	080066d8 	.word	0x080066d8
 8005c74:	080066dc 	.word	0x080066dc

08005c78 <__retarget_lock_acquire_recursive>:
 8005c78:	4770      	bx	lr

08005c7a <__retarget_lock_release_recursive>:
 8005c7a:	4770      	bx	lr

08005c7c <memcpy>:
 8005c7c:	440a      	add	r2, r1
 8005c7e:	4291      	cmp	r1, r2
 8005c80:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005c84:	d100      	bne.n	8005c88 <memcpy+0xc>
 8005c86:	4770      	bx	lr
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c92:	4291      	cmp	r1, r2
 8005c94:	d1f9      	bne.n	8005c8a <memcpy+0xe>
 8005c96:	bd10      	pop	{r4, pc}

08005c98 <_free_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	d041      	beq.n	8005d24 <_free_r+0x8c>
 8005ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca4:	1f0c      	subs	r4, r1, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bfb8      	it	lt
 8005caa:	18e4      	addlt	r4, r4, r3
 8005cac:	f000 f8e0 	bl	8005e70 <__malloc_lock>
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d28 <_free_r+0x90>)
 8005cb2:	6813      	ldr	r3, [r2, #0]
 8005cb4:	b933      	cbnz	r3, 8005cc4 <_free_r+0x2c>
 8005cb6:	6063      	str	r3, [r4, #4]
 8005cb8:	6014      	str	r4, [r2, #0]
 8005cba:	4628      	mov	r0, r5
 8005cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cc0:	f000 b8dc 	b.w	8005e7c <__malloc_unlock>
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d908      	bls.n	8005cda <_free_r+0x42>
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	1821      	adds	r1, r4, r0
 8005ccc:	428b      	cmp	r3, r1
 8005cce:	bf01      	itttt	eq
 8005cd0:	6819      	ldreq	r1, [r3, #0]
 8005cd2:	685b      	ldreq	r3, [r3, #4]
 8005cd4:	1809      	addeq	r1, r1, r0
 8005cd6:	6021      	streq	r1, [r4, #0]
 8005cd8:	e7ed      	b.n	8005cb6 <_free_r+0x1e>
 8005cda:	461a      	mov	r2, r3
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b10b      	cbz	r3, 8005ce4 <_free_r+0x4c>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d9fa      	bls.n	8005cda <_free_r+0x42>
 8005ce4:	6811      	ldr	r1, [r2, #0]
 8005ce6:	1850      	adds	r0, r2, r1
 8005ce8:	42a0      	cmp	r0, r4
 8005cea:	d10b      	bne.n	8005d04 <_free_r+0x6c>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	4401      	add	r1, r0
 8005cf0:	1850      	adds	r0, r2, r1
 8005cf2:	4283      	cmp	r3, r0
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	d1e0      	bne.n	8005cba <_free_r+0x22>
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	6053      	str	r3, [r2, #4]
 8005cfe:	4408      	add	r0, r1
 8005d00:	6010      	str	r0, [r2, #0]
 8005d02:	e7da      	b.n	8005cba <_free_r+0x22>
 8005d04:	d902      	bls.n	8005d0c <_free_r+0x74>
 8005d06:	230c      	movs	r3, #12
 8005d08:	602b      	str	r3, [r5, #0]
 8005d0a:	e7d6      	b.n	8005cba <_free_r+0x22>
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	1821      	adds	r1, r4, r0
 8005d10:	428b      	cmp	r3, r1
 8005d12:	bf04      	itt	eq
 8005d14:	6819      	ldreq	r1, [r3, #0]
 8005d16:	685b      	ldreq	r3, [r3, #4]
 8005d18:	6063      	str	r3, [r4, #4]
 8005d1a:	bf04      	itt	eq
 8005d1c:	1809      	addeq	r1, r1, r0
 8005d1e:	6021      	streq	r1, [r4, #0]
 8005d20:	6054      	str	r4, [r2, #4]
 8005d22:	e7ca      	b.n	8005cba <_free_r+0x22>
 8005d24:	bd38      	pop	{r3, r4, r5, pc}
 8005d26:	bf00      	nop
 8005d28:	20004c48 	.word	0x20004c48

08005d2c <sbrk_aligned>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d6c <sbrk_aligned+0x40>)
 8005d30:	460c      	mov	r4, r1
 8005d32:	6831      	ldr	r1, [r6, #0]
 8005d34:	4605      	mov	r5, r0
 8005d36:	b911      	cbnz	r1, 8005d3e <sbrk_aligned+0x12>
 8005d38:	f000 fba6 	bl	8006488 <_sbrk_r>
 8005d3c:	6030      	str	r0, [r6, #0]
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 fba1 	bl	8006488 <_sbrk_r>
 8005d46:	1c43      	adds	r3, r0, #1
 8005d48:	d103      	bne.n	8005d52 <sbrk_aligned+0x26>
 8005d4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005d4e:	4620      	mov	r0, r4
 8005d50:	bd70      	pop	{r4, r5, r6, pc}
 8005d52:	1cc4      	adds	r4, r0, #3
 8005d54:	f024 0403 	bic.w	r4, r4, #3
 8005d58:	42a0      	cmp	r0, r4
 8005d5a:	d0f8      	beq.n	8005d4e <sbrk_aligned+0x22>
 8005d5c:	1a21      	subs	r1, r4, r0
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 fb92 	bl	8006488 <_sbrk_r>
 8005d64:	3001      	adds	r0, #1
 8005d66:	d1f2      	bne.n	8005d4e <sbrk_aligned+0x22>
 8005d68:	e7ef      	b.n	8005d4a <sbrk_aligned+0x1e>
 8005d6a:	bf00      	nop
 8005d6c:	20004c44 	.word	0x20004c44

08005d70 <_malloc_r>:
 8005d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d74:	1ccd      	adds	r5, r1, #3
 8005d76:	f025 0503 	bic.w	r5, r5, #3
 8005d7a:	3508      	adds	r5, #8
 8005d7c:	2d0c      	cmp	r5, #12
 8005d7e:	bf38      	it	cc
 8005d80:	250c      	movcc	r5, #12
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	4606      	mov	r6, r0
 8005d86:	db01      	blt.n	8005d8c <_malloc_r+0x1c>
 8005d88:	42a9      	cmp	r1, r5
 8005d8a:	d904      	bls.n	8005d96 <_malloc_r+0x26>
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	6033      	str	r3, [r6, #0]
 8005d90:	2000      	movs	r0, #0
 8005d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e6c <_malloc_r+0xfc>
 8005d9a:	f000 f869 	bl	8005e70 <__malloc_lock>
 8005d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005da2:	461c      	mov	r4, r3
 8005da4:	bb44      	cbnz	r4, 8005df8 <_malloc_r+0x88>
 8005da6:	4629      	mov	r1, r5
 8005da8:	4630      	mov	r0, r6
 8005daa:	f7ff ffbf 	bl	8005d2c <sbrk_aligned>
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	4604      	mov	r4, r0
 8005db2:	d158      	bne.n	8005e66 <_malloc_r+0xf6>
 8005db4:	f8d8 4000 	ldr.w	r4, [r8]
 8005db8:	4627      	mov	r7, r4
 8005dba:	2f00      	cmp	r7, #0
 8005dbc:	d143      	bne.n	8005e46 <_malloc_r+0xd6>
 8005dbe:	2c00      	cmp	r4, #0
 8005dc0:	d04b      	beq.n	8005e5a <_malloc_r+0xea>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	eb04 0903 	add.w	r9, r4, r3
 8005dcc:	f000 fb5c 	bl	8006488 <_sbrk_r>
 8005dd0:	4581      	cmp	r9, r0
 8005dd2:	d142      	bne.n	8005e5a <_malloc_r+0xea>
 8005dd4:	6821      	ldr	r1, [r4, #0]
 8005dd6:	1a6d      	subs	r5, r5, r1
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f7ff ffa6 	bl	8005d2c <sbrk_aligned>
 8005de0:	3001      	adds	r0, #1
 8005de2:	d03a      	beq.n	8005e5a <_malloc_r+0xea>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	442b      	add	r3, r5
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	f8d8 3000 	ldr.w	r3, [r8]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	bb62      	cbnz	r2, 8005e4c <_malloc_r+0xdc>
 8005df2:	f8c8 7000 	str.w	r7, [r8]
 8005df6:	e00f      	b.n	8005e18 <_malloc_r+0xa8>
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	1b52      	subs	r2, r2, r5
 8005dfc:	d420      	bmi.n	8005e40 <_malloc_r+0xd0>
 8005dfe:	2a0b      	cmp	r2, #11
 8005e00:	d917      	bls.n	8005e32 <_malloc_r+0xc2>
 8005e02:	1961      	adds	r1, r4, r5
 8005e04:	42a3      	cmp	r3, r4
 8005e06:	6025      	str	r5, [r4, #0]
 8005e08:	bf18      	it	ne
 8005e0a:	6059      	strne	r1, [r3, #4]
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	bf08      	it	eq
 8005e10:	f8c8 1000 	streq.w	r1, [r8]
 8005e14:	5162      	str	r2, [r4, r5]
 8005e16:	604b      	str	r3, [r1, #4]
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f82f 	bl	8005e7c <__malloc_unlock>
 8005e1e:	f104 000b 	add.w	r0, r4, #11
 8005e22:	1d23      	adds	r3, r4, #4
 8005e24:	f020 0007 	bic.w	r0, r0, #7
 8005e28:	1ac2      	subs	r2, r0, r3
 8005e2a:	bf1c      	itt	ne
 8005e2c:	1a1b      	subne	r3, r3, r0
 8005e2e:	50a3      	strne	r3, [r4, r2]
 8005e30:	e7af      	b.n	8005d92 <_malloc_r+0x22>
 8005e32:	6862      	ldr	r2, [r4, #4]
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	bf0c      	ite	eq
 8005e38:	f8c8 2000 	streq.w	r2, [r8]
 8005e3c:	605a      	strne	r2, [r3, #4]
 8005e3e:	e7eb      	b.n	8005e18 <_malloc_r+0xa8>
 8005e40:	4623      	mov	r3, r4
 8005e42:	6864      	ldr	r4, [r4, #4]
 8005e44:	e7ae      	b.n	8005da4 <_malloc_r+0x34>
 8005e46:	463c      	mov	r4, r7
 8005e48:	687f      	ldr	r7, [r7, #4]
 8005e4a:	e7b6      	b.n	8005dba <_malloc_r+0x4a>
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	d1fb      	bne.n	8005e4c <_malloc_r+0xdc>
 8005e54:	2300      	movs	r3, #0
 8005e56:	6053      	str	r3, [r2, #4]
 8005e58:	e7de      	b.n	8005e18 <_malloc_r+0xa8>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	6033      	str	r3, [r6, #0]
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f000 f80c 	bl	8005e7c <__malloc_unlock>
 8005e64:	e794      	b.n	8005d90 <_malloc_r+0x20>
 8005e66:	6005      	str	r5, [r0, #0]
 8005e68:	e7d6      	b.n	8005e18 <_malloc_r+0xa8>
 8005e6a:	bf00      	nop
 8005e6c:	20004c48 	.word	0x20004c48

08005e70 <__malloc_lock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	@ (8005e78 <__malloc_lock+0x8>)
 8005e72:	f7ff bf01 	b.w	8005c78 <__retarget_lock_acquire_recursive>
 8005e76:	bf00      	nop
 8005e78:	20004c40 	.word	0x20004c40

08005e7c <__malloc_unlock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	@ (8005e84 <__malloc_unlock+0x8>)
 8005e7e:	f7ff befc 	b.w	8005c7a <__retarget_lock_release_recursive>
 8005e82:	bf00      	nop
 8005e84:	20004c40 	.word	0x20004c40

08005e88 <__ssputs_r>:
 8005e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	688e      	ldr	r6, [r1, #8]
 8005e8e:	461f      	mov	r7, r3
 8005e90:	42be      	cmp	r6, r7
 8005e92:	680b      	ldr	r3, [r1, #0]
 8005e94:	4682      	mov	sl, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	4690      	mov	r8, r2
 8005e9a:	d82d      	bhi.n	8005ef8 <__ssputs_r+0x70>
 8005e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ea0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ea4:	d026      	beq.n	8005ef4 <__ssputs_r+0x6c>
 8005ea6:	6965      	ldr	r5, [r4, #20]
 8005ea8:	6909      	ldr	r1, [r1, #16]
 8005eaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eae:	eba3 0901 	sub.w	r9, r3, r1
 8005eb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eb6:	1c7b      	adds	r3, r7, #1
 8005eb8:	444b      	add	r3, r9
 8005eba:	106d      	asrs	r5, r5, #1
 8005ebc:	429d      	cmp	r5, r3
 8005ebe:	bf38      	it	cc
 8005ec0:	461d      	movcc	r5, r3
 8005ec2:	0553      	lsls	r3, r2, #21
 8005ec4:	d527      	bpl.n	8005f16 <__ssputs_r+0x8e>
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	f7ff ff52 	bl	8005d70 <_malloc_r>
 8005ecc:	4606      	mov	r6, r0
 8005ece:	b360      	cbz	r0, 8005f2a <__ssputs_r+0xa2>
 8005ed0:	6921      	ldr	r1, [r4, #16]
 8005ed2:	464a      	mov	r2, r9
 8005ed4:	f7ff fed2 	bl	8005c7c <memcpy>
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ee2:	81a3      	strh	r3, [r4, #12]
 8005ee4:	6126      	str	r6, [r4, #16]
 8005ee6:	6165      	str	r5, [r4, #20]
 8005ee8:	444e      	add	r6, r9
 8005eea:	eba5 0509 	sub.w	r5, r5, r9
 8005eee:	6026      	str	r6, [r4, #0]
 8005ef0:	60a5      	str	r5, [r4, #8]
 8005ef2:	463e      	mov	r6, r7
 8005ef4:	42be      	cmp	r6, r7
 8005ef6:	d900      	bls.n	8005efa <__ssputs_r+0x72>
 8005ef8:	463e      	mov	r6, r7
 8005efa:	6820      	ldr	r0, [r4, #0]
 8005efc:	4632      	mov	r2, r6
 8005efe:	4641      	mov	r1, r8
 8005f00:	f000 faa8 	bl	8006454 <memmove>
 8005f04:	68a3      	ldr	r3, [r4, #8]
 8005f06:	1b9b      	subs	r3, r3, r6
 8005f08:	60a3      	str	r3, [r4, #8]
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	4433      	add	r3, r6
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	2000      	movs	r0, #0
 8005f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f16:	462a      	mov	r2, r5
 8005f18:	f000 fac6 	bl	80064a8 <_realloc_r>
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d1e0      	bne.n	8005ee4 <__ssputs_r+0x5c>
 8005f22:	6921      	ldr	r1, [r4, #16]
 8005f24:	4650      	mov	r0, sl
 8005f26:	f7ff feb7 	bl	8005c98 <_free_r>
 8005f2a:	230c      	movs	r3, #12
 8005f2c:	f8ca 3000 	str.w	r3, [sl]
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f3c:	e7e9      	b.n	8005f12 <__ssputs_r+0x8a>
	...

08005f40 <_svfiprintf_r>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	4698      	mov	r8, r3
 8005f46:	898b      	ldrh	r3, [r1, #12]
 8005f48:	061b      	lsls	r3, r3, #24
 8005f4a:	b09d      	sub	sp, #116	@ 0x74
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	4614      	mov	r4, r2
 8005f52:	d510      	bpl.n	8005f76 <_svfiprintf_r+0x36>
 8005f54:	690b      	ldr	r3, [r1, #16]
 8005f56:	b973      	cbnz	r3, 8005f76 <_svfiprintf_r+0x36>
 8005f58:	2140      	movs	r1, #64	@ 0x40
 8005f5a:	f7ff ff09 	bl	8005d70 <_malloc_r>
 8005f5e:	6028      	str	r0, [r5, #0]
 8005f60:	6128      	str	r0, [r5, #16]
 8005f62:	b930      	cbnz	r0, 8005f72 <_svfiprintf_r+0x32>
 8005f64:	230c      	movs	r3, #12
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f6c:	b01d      	add	sp, #116	@ 0x74
 8005f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f72:	2340      	movs	r3, #64	@ 0x40
 8005f74:	616b      	str	r3, [r5, #20]
 8005f76:	2300      	movs	r3, #0
 8005f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f84:	2330      	movs	r3, #48	@ 0x30
 8005f86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006124 <_svfiprintf_r+0x1e4>
 8005f8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f8e:	f04f 0901 	mov.w	r9, #1
 8005f92:	4623      	mov	r3, r4
 8005f94:	469a      	mov	sl, r3
 8005f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f9a:	b10a      	cbz	r2, 8005fa0 <_svfiprintf_r+0x60>
 8005f9c:	2a25      	cmp	r2, #37	@ 0x25
 8005f9e:	d1f9      	bne.n	8005f94 <_svfiprintf_r+0x54>
 8005fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8005fa4:	d00b      	beq.n	8005fbe <_svfiprintf_r+0x7e>
 8005fa6:	465b      	mov	r3, fp
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff ff6b 	bl	8005e88 <__ssputs_r>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f000 80a7 	beq.w	8006106 <_svfiprintf_r+0x1c6>
 8005fb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fba:	445a      	add	r2, fp
 8005fbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 809f 	beq.w	8006106 <_svfiprintf_r+0x1c6>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fd2:	f10a 0a01 	add.w	sl, sl, #1
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	9307      	str	r3, [sp, #28]
 8005fda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fde:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fe0:	4654      	mov	r4, sl
 8005fe2:	2205      	movs	r2, #5
 8005fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe8:	484e      	ldr	r0, [pc, #312]	@ (8006124 <_svfiprintf_r+0x1e4>)
 8005fea:	f7fa f911 	bl	8000210 <memchr>
 8005fee:	9a04      	ldr	r2, [sp, #16]
 8005ff0:	b9d8      	cbnz	r0, 800602a <_svfiprintf_r+0xea>
 8005ff2:	06d0      	lsls	r0, r2, #27
 8005ff4:	bf44      	itt	mi
 8005ff6:	2320      	movmi	r3, #32
 8005ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ffc:	0711      	lsls	r1, r2, #28
 8005ffe:	bf44      	itt	mi
 8006000:	232b      	movmi	r3, #43	@ 0x2b
 8006002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006006:	f89a 3000 	ldrb.w	r3, [sl]
 800600a:	2b2a      	cmp	r3, #42	@ 0x2a
 800600c:	d015      	beq.n	800603a <_svfiprintf_r+0xfa>
 800600e:	9a07      	ldr	r2, [sp, #28]
 8006010:	4654      	mov	r4, sl
 8006012:	2000      	movs	r0, #0
 8006014:	f04f 0c0a 	mov.w	ip, #10
 8006018:	4621      	mov	r1, r4
 800601a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800601e:	3b30      	subs	r3, #48	@ 0x30
 8006020:	2b09      	cmp	r3, #9
 8006022:	d94b      	bls.n	80060bc <_svfiprintf_r+0x17c>
 8006024:	b1b0      	cbz	r0, 8006054 <_svfiprintf_r+0x114>
 8006026:	9207      	str	r2, [sp, #28]
 8006028:	e014      	b.n	8006054 <_svfiprintf_r+0x114>
 800602a:	eba0 0308 	sub.w	r3, r0, r8
 800602e:	fa09 f303 	lsl.w	r3, r9, r3
 8006032:	4313      	orrs	r3, r2
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	46a2      	mov	sl, r4
 8006038:	e7d2      	b.n	8005fe0 <_svfiprintf_r+0xa0>
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	1d19      	adds	r1, r3, #4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	9103      	str	r1, [sp, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	bfbb      	ittet	lt
 8006046:	425b      	neglt	r3, r3
 8006048:	f042 0202 	orrlt.w	r2, r2, #2
 800604c:	9307      	strge	r3, [sp, #28]
 800604e:	9307      	strlt	r3, [sp, #28]
 8006050:	bfb8      	it	lt
 8006052:	9204      	strlt	r2, [sp, #16]
 8006054:	7823      	ldrb	r3, [r4, #0]
 8006056:	2b2e      	cmp	r3, #46	@ 0x2e
 8006058:	d10a      	bne.n	8006070 <_svfiprintf_r+0x130>
 800605a:	7863      	ldrb	r3, [r4, #1]
 800605c:	2b2a      	cmp	r3, #42	@ 0x2a
 800605e:	d132      	bne.n	80060c6 <_svfiprintf_r+0x186>
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	9203      	str	r2, [sp, #12]
 8006068:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800606c:	3402      	adds	r4, #2
 800606e:	9305      	str	r3, [sp, #20]
 8006070:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006134 <_svfiprintf_r+0x1f4>
 8006074:	7821      	ldrb	r1, [r4, #0]
 8006076:	2203      	movs	r2, #3
 8006078:	4650      	mov	r0, sl
 800607a:	f7fa f8c9 	bl	8000210 <memchr>
 800607e:	b138      	cbz	r0, 8006090 <_svfiprintf_r+0x150>
 8006080:	9b04      	ldr	r3, [sp, #16]
 8006082:	eba0 000a 	sub.w	r0, r0, sl
 8006086:	2240      	movs	r2, #64	@ 0x40
 8006088:	4082      	lsls	r2, r0
 800608a:	4313      	orrs	r3, r2
 800608c:	3401      	adds	r4, #1
 800608e:	9304      	str	r3, [sp, #16]
 8006090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006094:	4824      	ldr	r0, [pc, #144]	@ (8006128 <_svfiprintf_r+0x1e8>)
 8006096:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800609a:	2206      	movs	r2, #6
 800609c:	f7fa f8b8 	bl	8000210 <memchr>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d036      	beq.n	8006112 <_svfiprintf_r+0x1d2>
 80060a4:	4b21      	ldr	r3, [pc, #132]	@ (800612c <_svfiprintf_r+0x1ec>)
 80060a6:	bb1b      	cbnz	r3, 80060f0 <_svfiprintf_r+0x1b0>
 80060a8:	9b03      	ldr	r3, [sp, #12]
 80060aa:	3307      	adds	r3, #7
 80060ac:	f023 0307 	bic.w	r3, r3, #7
 80060b0:	3308      	adds	r3, #8
 80060b2:	9303      	str	r3, [sp, #12]
 80060b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b6:	4433      	add	r3, r6
 80060b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ba:	e76a      	b.n	8005f92 <_svfiprintf_r+0x52>
 80060bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80060c0:	460c      	mov	r4, r1
 80060c2:	2001      	movs	r0, #1
 80060c4:	e7a8      	b.n	8006018 <_svfiprintf_r+0xd8>
 80060c6:	2300      	movs	r3, #0
 80060c8:	3401      	adds	r4, #1
 80060ca:	9305      	str	r3, [sp, #20]
 80060cc:	4619      	mov	r1, r3
 80060ce:	f04f 0c0a 	mov.w	ip, #10
 80060d2:	4620      	mov	r0, r4
 80060d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d8:	3a30      	subs	r2, #48	@ 0x30
 80060da:	2a09      	cmp	r2, #9
 80060dc:	d903      	bls.n	80060e6 <_svfiprintf_r+0x1a6>
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0c6      	beq.n	8006070 <_svfiprintf_r+0x130>
 80060e2:	9105      	str	r1, [sp, #20]
 80060e4:	e7c4      	b.n	8006070 <_svfiprintf_r+0x130>
 80060e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80060ea:	4604      	mov	r4, r0
 80060ec:	2301      	movs	r3, #1
 80060ee:	e7f0      	b.n	80060d2 <_svfiprintf_r+0x192>
 80060f0:	ab03      	add	r3, sp, #12
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	462a      	mov	r2, r5
 80060f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006130 <_svfiprintf_r+0x1f0>)
 80060f8:	a904      	add	r1, sp, #16
 80060fa:	4638      	mov	r0, r7
 80060fc:	f3af 8000 	nop.w
 8006100:	1c42      	adds	r2, r0, #1
 8006102:	4606      	mov	r6, r0
 8006104:	d1d6      	bne.n	80060b4 <_svfiprintf_r+0x174>
 8006106:	89ab      	ldrh	r3, [r5, #12]
 8006108:	065b      	lsls	r3, r3, #25
 800610a:	f53f af2d 	bmi.w	8005f68 <_svfiprintf_r+0x28>
 800610e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006110:	e72c      	b.n	8005f6c <_svfiprintf_r+0x2c>
 8006112:	ab03      	add	r3, sp, #12
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	462a      	mov	r2, r5
 8006118:	4b05      	ldr	r3, [pc, #20]	@ (8006130 <_svfiprintf_r+0x1f0>)
 800611a:	a904      	add	r1, sp, #16
 800611c:	4638      	mov	r0, r7
 800611e:	f000 f879 	bl	8006214 <_printf_i>
 8006122:	e7ed      	b.n	8006100 <_svfiprintf_r+0x1c0>
 8006124:	0800669c 	.word	0x0800669c
 8006128:	080066a6 	.word	0x080066a6
 800612c:	00000000 	.word	0x00000000
 8006130:	08005e89 	.word	0x08005e89
 8006134:	080066a2 	.word	0x080066a2

08006138 <_printf_common>:
 8006138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613c:	4616      	mov	r6, r2
 800613e:	4698      	mov	r8, r3
 8006140:	688a      	ldr	r2, [r1, #8]
 8006142:	690b      	ldr	r3, [r1, #16]
 8006144:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006148:	4293      	cmp	r3, r2
 800614a:	bfb8      	it	lt
 800614c:	4613      	movlt	r3, r2
 800614e:	6033      	str	r3, [r6, #0]
 8006150:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006154:	4607      	mov	r7, r0
 8006156:	460c      	mov	r4, r1
 8006158:	b10a      	cbz	r2, 800615e <_printf_common+0x26>
 800615a:	3301      	adds	r3, #1
 800615c:	6033      	str	r3, [r6, #0]
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	0699      	lsls	r1, r3, #26
 8006162:	bf42      	ittt	mi
 8006164:	6833      	ldrmi	r3, [r6, #0]
 8006166:	3302      	addmi	r3, #2
 8006168:	6033      	strmi	r3, [r6, #0]
 800616a:	6825      	ldr	r5, [r4, #0]
 800616c:	f015 0506 	ands.w	r5, r5, #6
 8006170:	d106      	bne.n	8006180 <_printf_common+0x48>
 8006172:	f104 0a19 	add.w	sl, r4, #25
 8006176:	68e3      	ldr	r3, [r4, #12]
 8006178:	6832      	ldr	r2, [r6, #0]
 800617a:	1a9b      	subs	r3, r3, r2
 800617c:	42ab      	cmp	r3, r5
 800617e:	dc26      	bgt.n	80061ce <_printf_common+0x96>
 8006180:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006184:	6822      	ldr	r2, [r4, #0]
 8006186:	3b00      	subs	r3, #0
 8006188:	bf18      	it	ne
 800618a:	2301      	movne	r3, #1
 800618c:	0692      	lsls	r2, r2, #26
 800618e:	d42b      	bmi.n	80061e8 <_printf_common+0xb0>
 8006190:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006194:	4641      	mov	r1, r8
 8006196:	4638      	mov	r0, r7
 8006198:	47c8      	blx	r9
 800619a:	3001      	adds	r0, #1
 800619c:	d01e      	beq.n	80061dc <_printf_common+0xa4>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	6922      	ldr	r2, [r4, #16]
 80061a2:	f003 0306 	and.w	r3, r3, #6
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	bf02      	ittt	eq
 80061aa:	68e5      	ldreq	r5, [r4, #12]
 80061ac:	6833      	ldreq	r3, [r6, #0]
 80061ae:	1aed      	subeq	r5, r5, r3
 80061b0:	68a3      	ldr	r3, [r4, #8]
 80061b2:	bf0c      	ite	eq
 80061b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061b8:	2500      	movne	r5, #0
 80061ba:	4293      	cmp	r3, r2
 80061bc:	bfc4      	itt	gt
 80061be:	1a9b      	subgt	r3, r3, r2
 80061c0:	18ed      	addgt	r5, r5, r3
 80061c2:	2600      	movs	r6, #0
 80061c4:	341a      	adds	r4, #26
 80061c6:	42b5      	cmp	r5, r6
 80061c8:	d11a      	bne.n	8006200 <_printf_common+0xc8>
 80061ca:	2000      	movs	r0, #0
 80061cc:	e008      	b.n	80061e0 <_printf_common+0xa8>
 80061ce:	2301      	movs	r3, #1
 80061d0:	4652      	mov	r2, sl
 80061d2:	4641      	mov	r1, r8
 80061d4:	4638      	mov	r0, r7
 80061d6:	47c8      	blx	r9
 80061d8:	3001      	adds	r0, #1
 80061da:	d103      	bne.n	80061e4 <_printf_common+0xac>
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e4:	3501      	adds	r5, #1
 80061e6:	e7c6      	b.n	8006176 <_printf_common+0x3e>
 80061e8:	18e1      	adds	r1, r4, r3
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	2030      	movs	r0, #48	@ 0x30
 80061ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061f2:	4422      	add	r2, r4
 80061f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061fc:	3302      	adds	r3, #2
 80061fe:	e7c7      	b.n	8006190 <_printf_common+0x58>
 8006200:	2301      	movs	r3, #1
 8006202:	4622      	mov	r2, r4
 8006204:	4641      	mov	r1, r8
 8006206:	4638      	mov	r0, r7
 8006208:	47c8      	blx	r9
 800620a:	3001      	adds	r0, #1
 800620c:	d0e6      	beq.n	80061dc <_printf_common+0xa4>
 800620e:	3601      	adds	r6, #1
 8006210:	e7d9      	b.n	80061c6 <_printf_common+0x8e>
	...

08006214 <_printf_i>:
 8006214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006218:	7e0f      	ldrb	r7, [r1, #24]
 800621a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800621c:	2f78      	cmp	r7, #120	@ 0x78
 800621e:	4691      	mov	r9, r2
 8006220:	4680      	mov	r8, r0
 8006222:	460c      	mov	r4, r1
 8006224:	469a      	mov	sl, r3
 8006226:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800622a:	d807      	bhi.n	800623c <_printf_i+0x28>
 800622c:	2f62      	cmp	r7, #98	@ 0x62
 800622e:	d80a      	bhi.n	8006246 <_printf_i+0x32>
 8006230:	2f00      	cmp	r7, #0
 8006232:	f000 80d2 	beq.w	80063da <_printf_i+0x1c6>
 8006236:	2f58      	cmp	r7, #88	@ 0x58
 8006238:	f000 80b9 	beq.w	80063ae <_printf_i+0x19a>
 800623c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006240:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006244:	e03a      	b.n	80062bc <_printf_i+0xa8>
 8006246:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800624a:	2b15      	cmp	r3, #21
 800624c:	d8f6      	bhi.n	800623c <_printf_i+0x28>
 800624e:	a101      	add	r1, pc, #4	@ (adr r1, 8006254 <_printf_i+0x40>)
 8006250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006254:	080062ad 	.word	0x080062ad
 8006258:	080062c1 	.word	0x080062c1
 800625c:	0800623d 	.word	0x0800623d
 8006260:	0800623d 	.word	0x0800623d
 8006264:	0800623d 	.word	0x0800623d
 8006268:	0800623d 	.word	0x0800623d
 800626c:	080062c1 	.word	0x080062c1
 8006270:	0800623d 	.word	0x0800623d
 8006274:	0800623d 	.word	0x0800623d
 8006278:	0800623d 	.word	0x0800623d
 800627c:	0800623d 	.word	0x0800623d
 8006280:	080063c1 	.word	0x080063c1
 8006284:	080062eb 	.word	0x080062eb
 8006288:	0800637b 	.word	0x0800637b
 800628c:	0800623d 	.word	0x0800623d
 8006290:	0800623d 	.word	0x0800623d
 8006294:	080063e3 	.word	0x080063e3
 8006298:	0800623d 	.word	0x0800623d
 800629c:	080062eb 	.word	0x080062eb
 80062a0:	0800623d 	.word	0x0800623d
 80062a4:	0800623d 	.word	0x0800623d
 80062a8:	08006383 	.word	0x08006383
 80062ac:	6833      	ldr	r3, [r6, #0]
 80062ae:	1d1a      	adds	r2, r3, #4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6032      	str	r2, [r6, #0]
 80062b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062bc:	2301      	movs	r3, #1
 80062be:	e09d      	b.n	80063fc <_printf_i+0x1e8>
 80062c0:	6833      	ldr	r3, [r6, #0]
 80062c2:	6820      	ldr	r0, [r4, #0]
 80062c4:	1d19      	adds	r1, r3, #4
 80062c6:	6031      	str	r1, [r6, #0]
 80062c8:	0606      	lsls	r6, r0, #24
 80062ca:	d501      	bpl.n	80062d0 <_printf_i+0xbc>
 80062cc:	681d      	ldr	r5, [r3, #0]
 80062ce:	e003      	b.n	80062d8 <_printf_i+0xc4>
 80062d0:	0645      	lsls	r5, r0, #25
 80062d2:	d5fb      	bpl.n	80062cc <_printf_i+0xb8>
 80062d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062d8:	2d00      	cmp	r5, #0
 80062da:	da03      	bge.n	80062e4 <_printf_i+0xd0>
 80062dc:	232d      	movs	r3, #45	@ 0x2d
 80062de:	426d      	negs	r5, r5
 80062e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062e4:	4859      	ldr	r0, [pc, #356]	@ (800644c <_printf_i+0x238>)
 80062e6:	230a      	movs	r3, #10
 80062e8:	e011      	b.n	800630e <_printf_i+0xfa>
 80062ea:	6821      	ldr	r1, [r4, #0]
 80062ec:	6833      	ldr	r3, [r6, #0]
 80062ee:	0608      	lsls	r0, r1, #24
 80062f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80062f4:	d402      	bmi.n	80062fc <_printf_i+0xe8>
 80062f6:	0649      	lsls	r1, r1, #25
 80062f8:	bf48      	it	mi
 80062fa:	b2ad      	uxthmi	r5, r5
 80062fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80062fe:	4853      	ldr	r0, [pc, #332]	@ (800644c <_printf_i+0x238>)
 8006300:	6033      	str	r3, [r6, #0]
 8006302:	bf14      	ite	ne
 8006304:	230a      	movne	r3, #10
 8006306:	2308      	moveq	r3, #8
 8006308:	2100      	movs	r1, #0
 800630a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800630e:	6866      	ldr	r6, [r4, #4]
 8006310:	60a6      	str	r6, [r4, #8]
 8006312:	2e00      	cmp	r6, #0
 8006314:	bfa2      	ittt	ge
 8006316:	6821      	ldrge	r1, [r4, #0]
 8006318:	f021 0104 	bicge.w	r1, r1, #4
 800631c:	6021      	strge	r1, [r4, #0]
 800631e:	b90d      	cbnz	r5, 8006324 <_printf_i+0x110>
 8006320:	2e00      	cmp	r6, #0
 8006322:	d04b      	beq.n	80063bc <_printf_i+0x1a8>
 8006324:	4616      	mov	r6, r2
 8006326:	fbb5 f1f3 	udiv	r1, r5, r3
 800632a:	fb03 5711 	mls	r7, r3, r1, r5
 800632e:	5dc7      	ldrb	r7, [r0, r7]
 8006330:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006334:	462f      	mov	r7, r5
 8006336:	42bb      	cmp	r3, r7
 8006338:	460d      	mov	r5, r1
 800633a:	d9f4      	bls.n	8006326 <_printf_i+0x112>
 800633c:	2b08      	cmp	r3, #8
 800633e:	d10b      	bne.n	8006358 <_printf_i+0x144>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	07df      	lsls	r7, r3, #31
 8006344:	d508      	bpl.n	8006358 <_printf_i+0x144>
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	6861      	ldr	r1, [r4, #4]
 800634a:	4299      	cmp	r1, r3
 800634c:	bfde      	ittt	le
 800634e:	2330      	movle	r3, #48	@ 0x30
 8006350:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006354:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006358:	1b92      	subs	r2, r2, r6
 800635a:	6122      	str	r2, [r4, #16]
 800635c:	f8cd a000 	str.w	sl, [sp]
 8006360:	464b      	mov	r3, r9
 8006362:	aa03      	add	r2, sp, #12
 8006364:	4621      	mov	r1, r4
 8006366:	4640      	mov	r0, r8
 8006368:	f7ff fee6 	bl	8006138 <_printf_common>
 800636c:	3001      	adds	r0, #1
 800636e:	d14a      	bne.n	8006406 <_printf_i+0x1f2>
 8006370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006374:	b004      	add	sp, #16
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	f043 0320 	orr.w	r3, r3, #32
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	4833      	ldr	r0, [pc, #204]	@ (8006450 <_printf_i+0x23c>)
 8006384:	2778      	movs	r7, #120	@ 0x78
 8006386:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	6831      	ldr	r1, [r6, #0]
 800638e:	061f      	lsls	r7, r3, #24
 8006390:	f851 5b04 	ldr.w	r5, [r1], #4
 8006394:	d402      	bmi.n	800639c <_printf_i+0x188>
 8006396:	065f      	lsls	r7, r3, #25
 8006398:	bf48      	it	mi
 800639a:	b2ad      	uxthmi	r5, r5
 800639c:	6031      	str	r1, [r6, #0]
 800639e:	07d9      	lsls	r1, r3, #31
 80063a0:	bf44      	itt	mi
 80063a2:	f043 0320 	orrmi.w	r3, r3, #32
 80063a6:	6023      	strmi	r3, [r4, #0]
 80063a8:	b11d      	cbz	r5, 80063b2 <_printf_i+0x19e>
 80063aa:	2310      	movs	r3, #16
 80063ac:	e7ac      	b.n	8006308 <_printf_i+0xf4>
 80063ae:	4827      	ldr	r0, [pc, #156]	@ (800644c <_printf_i+0x238>)
 80063b0:	e7e9      	b.n	8006386 <_printf_i+0x172>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	f023 0320 	bic.w	r3, r3, #32
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	e7f6      	b.n	80063aa <_printf_i+0x196>
 80063bc:	4616      	mov	r6, r2
 80063be:	e7bd      	b.n	800633c <_printf_i+0x128>
 80063c0:	6833      	ldr	r3, [r6, #0]
 80063c2:	6825      	ldr	r5, [r4, #0]
 80063c4:	6961      	ldr	r1, [r4, #20]
 80063c6:	1d18      	adds	r0, r3, #4
 80063c8:	6030      	str	r0, [r6, #0]
 80063ca:	062e      	lsls	r6, r5, #24
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	d501      	bpl.n	80063d4 <_printf_i+0x1c0>
 80063d0:	6019      	str	r1, [r3, #0]
 80063d2:	e002      	b.n	80063da <_printf_i+0x1c6>
 80063d4:	0668      	lsls	r0, r5, #25
 80063d6:	d5fb      	bpl.n	80063d0 <_printf_i+0x1bc>
 80063d8:	8019      	strh	r1, [r3, #0]
 80063da:	2300      	movs	r3, #0
 80063dc:	6123      	str	r3, [r4, #16]
 80063de:	4616      	mov	r6, r2
 80063e0:	e7bc      	b.n	800635c <_printf_i+0x148>
 80063e2:	6833      	ldr	r3, [r6, #0]
 80063e4:	1d1a      	adds	r2, r3, #4
 80063e6:	6032      	str	r2, [r6, #0]
 80063e8:	681e      	ldr	r6, [r3, #0]
 80063ea:	6862      	ldr	r2, [r4, #4]
 80063ec:	2100      	movs	r1, #0
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7f9 ff0e 	bl	8000210 <memchr>
 80063f4:	b108      	cbz	r0, 80063fa <_printf_i+0x1e6>
 80063f6:	1b80      	subs	r0, r0, r6
 80063f8:	6060      	str	r0, [r4, #4]
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	6123      	str	r3, [r4, #16]
 80063fe:	2300      	movs	r3, #0
 8006400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006404:	e7aa      	b.n	800635c <_printf_i+0x148>
 8006406:	6923      	ldr	r3, [r4, #16]
 8006408:	4632      	mov	r2, r6
 800640a:	4649      	mov	r1, r9
 800640c:	4640      	mov	r0, r8
 800640e:	47d0      	blx	sl
 8006410:	3001      	adds	r0, #1
 8006412:	d0ad      	beq.n	8006370 <_printf_i+0x15c>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	079b      	lsls	r3, r3, #30
 8006418:	d413      	bmi.n	8006442 <_printf_i+0x22e>
 800641a:	68e0      	ldr	r0, [r4, #12]
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	4298      	cmp	r0, r3
 8006420:	bfb8      	it	lt
 8006422:	4618      	movlt	r0, r3
 8006424:	e7a6      	b.n	8006374 <_printf_i+0x160>
 8006426:	2301      	movs	r3, #1
 8006428:	4632      	mov	r2, r6
 800642a:	4649      	mov	r1, r9
 800642c:	4640      	mov	r0, r8
 800642e:	47d0      	blx	sl
 8006430:	3001      	adds	r0, #1
 8006432:	d09d      	beq.n	8006370 <_printf_i+0x15c>
 8006434:	3501      	adds	r5, #1
 8006436:	68e3      	ldr	r3, [r4, #12]
 8006438:	9903      	ldr	r1, [sp, #12]
 800643a:	1a5b      	subs	r3, r3, r1
 800643c:	42ab      	cmp	r3, r5
 800643e:	dcf2      	bgt.n	8006426 <_printf_i+0x212>
 8006440:	e7eb      	b.n	800641a <_printf_i+0x206>
 8006442:	2500      	movs	r5, #0
 8006444:	f104 0619 	add.w	r6, r4, #25
 8006448:	e7f5      	b.n	8006436 <_printf_i+0x222>
 800644a:	bf00      	nop
 800644c:	080066ad 	.word	0x080066ad
 8006450:	080066be 	.word	0x080066be

08006454 <memmove>:
 8006454:	4288      	cmp	r0, r1
 8006456:	b510      	push	{r4, lr}
 8006458:	eb01 0402 	add.w	r4, r1, r2
 800645c:	d902      	bls.n	8006464 <memmove+0x10>
 800645e:	4284      	cmp	r4, r0
 8006460:	4623      	mov	r3, r4
 8006462:	d807      	bhi.n	8006474 <memmove+0x20>
 8006464:	1e43      	subs	r3, r0, #1
 8006466:	42a1      	cmp	r1, r4
 8006468:	d008      	beq.n	800647c <memmove+0x28>
 800646a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800646e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006472:	e7f8      	b.n	8006466 <memmove+0x12>
 8006474:	4402      	add	r2, r0
 8006476:	4601      	mov	r1, r0
 8006478:	428a      	cmp	r2, r1
 800647a:	d100      	bne.n	800647e <memmove+0x2a>
 800647c:	bd10      	pop	{r4, pc}
 800647e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006486:	e7f7      	b.n	8006478 <memmove+0x24>

08006488 <_sbrk_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4d06      	ldr	r5, [pc, #24]	@ (80064a4 <_sbrk_r+0x1c>)
 800648c:	2300      	movs	r3, #0
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	602b      	str	r3, [r5, #0]
 8006494:	f7fa fba2 	bl	8000bdc <_sbrk>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d102      	bne.n	80064a2 <_sbrk_r+0x1a>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	b103      	cbz	r3, 80064a2 <_sbrk_r+0x1a>
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	20004c3c 	.word	0x20004c3c

080064a8 <_realloc_r>:
 80064a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ac:	4680      	mov	r8, r0
 80064ae:	4615      	mov	r5, r2
 80064b0:	460c      	mov	r4, r1
 80064b2:	b921      	cbnz	r1, 80064be <_realloc_r+0x16>
 80064b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064b8:	4611      	mov	r1, r2
 80064ba:	f7ff bc59 	b.w	8005d70 <_malloc_r>
 80064be:	b92a      	cbnz	r2, 80064cc <_realloc_r+0x24>
 80064c0:	f7ff fbea 	bl	8005c98 <_free_r>
 80064c4:	2400      	movs	r4, #0
 80064c6:	4620      	mov	r0, r4
 80064c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064cc:	f000 f81a 	bl	8006504 <_malloc_usable_size_r>
 80064d0:	4285      	cmp	r5, r0
 80064d2:	4606      	mov	r6, r0
 80064d4:	d802      	bhi.n	80064dc <_realloc_r+0x34>
 80064d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80064da:	d8f4      	bhi.n	80064c6 <_realloc_r+0x1e>
 80064dc:	4629      	mov	r1, r5
 80064de:	4640      	mov	r0, r8
 80064e0:	f7ff fc46 	bl	8005d70 <_malloc_r>
 80064e4:	4607      	mov	r7, r0
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d0ec      	beq.n	80064c4 <_realloc_r+0x1c>
 80064ea:	42b5      	cmp	r5, r6
 80064ec:	462a      	mov	r2, r5
 80064ee:	4621      	mov	r1, r4
 80064f0:	bf28      	it	cs
 80064f2:	4632      	movcs	r2, r6
 80064f4:	f7ff fbc2 	bl	8005c7c <memcpy>
 80064f8:	4621      	mov	r1, r4
 80064fa:	4640      	mov	r0, r8
 80064fc:	f7ff fbcc 	bl	8005c98 <_free_r>
 8006500:	463c      	mov	r4, r7
 8006502:	e7e0      	b.n	80064c6 <_realloc_r+0x1e>

08006504 <_malloc_usable_size_r>:
 8006504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006508:	1f18      	subs	r0, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	bfbc      	itt	lt
 800650e:	580b      	ldrlt	r3, [r1, r0]
 8006510:	18c0      	addlt	r0, r0, r3
 8006512:	4770      	bx	lr

08006514 <_init>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	bf00      	nop
 8006518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651a:	bc08      	pop	{r3}
 800651c:	469e      	mov	lr, r3
 800651e:	4770      	bx	lr

08006520 <_fini>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	bf00      	nop
 8006524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006526:	bc08      	pop	{r3}
 8006528:	469e      	mov	lr, r3
 800652a:	4770      	bx	lr
