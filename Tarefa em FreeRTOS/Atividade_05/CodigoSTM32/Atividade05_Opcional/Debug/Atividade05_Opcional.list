
Atividade05_Opcional.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a674  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800a848  0800a848  0000b848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac98  0800ac98  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac98  0800ac98  0000bc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aca0  0800aca0  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aca0  0800aca0  0000bca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aca4  0800aca4  0000bca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800aca8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c90  200001d8  0800ae80  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e68  0800ae80  0000ce68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d061  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d13  00000000  00000000  00029269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  0002cf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001390  00000000  00000000  0002e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050c5  00000000  00000000  0002fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c993  00000000  00000000  00034cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec4c9  00000000  00000000  00051668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013db31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bd0  00000000  00000000  0013db74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00145744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a82c 	.word	0x0800a82c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a82c 	.word	0x0800a82c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f023 030f 	bic.w	r3, r3, #15
 8000ee8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f043 030c 	orr.w	r3, r3, #12
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	f043 030c 	orr.w	r3, r3, #12
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f18:	f107 0208 	add.w	r2, r7, #8
 8000f1c:	2364      	movs	r3, #100	@ 0x64
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2304      	movs	r3, #4
 8000f22:	214e      	movs	r1, #78	@ 0x4e
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <lcd_send_cmd+0x5c>)
 8000f26:	f001 fdd3 	bl	8002ad0 <HAL_I2C_Master_Transmit>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000023c 	.word	0x2000023c

08000f38 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f023 030f 	bic.w	r3, r3, #15
 8000f48:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 030d 	orr.w	r3, r3, #13
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	f043 0309 	orr.w	r3, r3, #9
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f043 030d 	orr.w	r3, r3, #13
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	f043 0309 	orr.w	r3, r3, #9
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f78:	f107 0208 	add.w	r2, r7, #8
 8000f7c:	2364      	movs	r3, #100	@ 0x64
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2304      	movs	r3, #4
 8000f82:	214e      	movs	r1, #78	@ 0x4e
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <lcd_send_data+0x5c>)
 8000f86:	f001 fda3 	bl	8002ad0 <HAL_I2C_Master_Transmit>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000023c 	.word	0x2000023c

08000f98 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <lcd_put_cur+0x18>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d005      	beq.n	8000fba <lcd_put_cur+0x22>
 8000fae:	e009      	b.n	8000fc4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb6:	603b      	str	r3, [r7, #0]
            break;
 8000fb8:	e004      	b.n	8000fc4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fc0:	603b      	str	r3, [r7, #0]
            break;
 8000fc2:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff85 	bl	8000ed8 <lcd_send_cmd>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <lcd_init>:


void lcd_init (void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fda:	2032      	movs	r0, #50	@ 0x32
 8000fdc:	f000 fdbe 	bl	8001b5c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fe0:	2030      	movs	r0, #48	@ 0x30
 8000fe2:	f7ff ff79 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f000 fdb8 	bl	8001b5c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fec:	2030      	movs	r0, #48	@ 0x30
 8000fee:	f7ff ff73 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f000 fdb2 	bl	8001b5c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ff8:	2030      	movs	r0, #48	@ 0x30
 8000ffa:	f7ff ff6d 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(10);
 8000ffe:	200a      	movs	r0, #10
 8001000:	f000 fdac 	bl	8001b5c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001004:	2020      	movs	r0, #32
 8001006:	f7ff ff67 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(10);
 800100a:	200a      	movs	r0, #10
 800100c:	f000 fda6 	bl	8001b5c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001010:	2028      	movs	r0, #40	@ 0x28
 8001012:	f7ff ff61 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(1);
 8001016:	2001      	movs	r0, #1
 8001018:	f000 fda0 	bl	8001b5c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800101c:	2008      	movs	r0, #8
 800101e:	f7ff ff5b 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f000 fd9a 	bl	8001b5c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001028:	2001      	movs	r0, #1
 800102a:	f7ff ff55 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(1);
 800102e:	2001      	movs	r0, #1
 8001030:	f000 fd94 	bl	8001b5c <HAL_Delay>
	HAL_Delay(1);
 8001034:	2001      	movs	r0, #1
 8001036:	f000 fd91 	bl	8001b5c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800103a:	2006      	movs	r0, #6
 800103c:	f7ff ff4c 	bl	8000ed8 <lcd_send_cmd>
	HAL_Delay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 fd8b 	bl	8001b5c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001046:	200c      	movs	r0, #12
 8001048:	f7ff ff46 	bl	8000ed8 <lcd_send_cmd>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001058:	e006      	b.n	8001068 <lcd_send_string+0x18>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff68 	bl	8000f38 <lcd_send_data>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f4      	bne.n	800105a <lcd_send_string+0xa>
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double map(long x, double in_min, double in_max, double out_min, double out_max)
{
 800107a:	b5b0      	push	{r4, r5, r7, lr}
 800107c:	b08a      	sub	sp, #40	@ 0x28
 800107e:	af00      	add	r7, sp, #0
 8001080:	6278      	str	r0, [r7, #36]	@ 0x24
 8001082:	ed87 0b06 	vstr	d0, [r7, #24]
 8001086:	ed87 1b04 	vstr	d1, [r7, #16]
 800108a:	ed87 2b02 	vstr	d2, [r7, #8]
 800108e:	ed87 3b00 	vstr	d3, [r7]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001092:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001094:	f7ff fa66 	bl	8000564 <__aeabi_i2d>
 8001098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800109c:	f7ff f914 	bl	80002c8 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4614      	mov	r4, r2
 80010a6:	461d      	mov	r5, r3
 80010a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010b0:	f7ff f90a 	bl	80002c8 <__aeabi_dsub>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff fabc 	bl	8000638 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4614      	mov	r4, r2
 80010c6:	461d      	mov	r5, r3
 80010c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010d0:	f7ff f8fa 	bl	80002c8 <__aeabi_dsub>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff fbd6 	bl	800088c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010ec:	f7ff f8ee 	bl	80002cc <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80010f8:	eeb0 0a47 	vmov.f32	s0, s14
 80010fc:	eef0 0a67 	vmov.f32	s1, s15
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f000 fce4 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f836 	bl	8001180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f000 f94c 	bl	80013b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001118:	f000 f920 	bl	800135c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800111c:	f000 f89e 	bl	800125c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001120:	f000 f8ee 	bl	8001300 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001124:	f003 fd34 	bl	8004b90 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue01 */
  Queue01Handle = osMessageQueueNew (10, sizeof(MESSAGE_OBJ_T), &Queue01_attributes);
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <main+0x58>)
 800112a:	2129      	movs	r1, #41	@ 0x29
 800112c:	200a      	movs	r0, #10
 800112e:	f003 fe26 	bl	8004d7e <osMessageQueueNew>
 8001132:	4603      	mov	r3, r0
 8001134:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <main+0x5c>)
 8001136:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8001138:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <main+0x60>)
 800113a:	2100      	movs	r1, #0
 800113c:	480b      	ldr	r0, [pc, #44]	@ (800116c <main+0x64>)
 800113e:	f003 fd71 	bl	8004c24 <osThreadNew>
 8001142:	4603      	mov	r3, r0
 8001144:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <main+0x68>)
 8001146:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8001148:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <main+0x6c>)
 800114a:	2100      	movs	r1, #0
 800114c:	480a      	ldr	r0, [pc, #40]	@ (8001178 <main+0x70>)
 800114e:	f003 fd69 	bl	8004c24 <osThreadNew>
 8001152:	4603      	mov	r3, r0
 8001154:	4a09      	ldr	r2, [pc, #36]	@ (800117c <main+0x74>)
 8001156:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001158:	f003 fd3e 	bl	8004bd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <main+0x54>
 8001160:	0800a8f4 	.word	0x0800a8f4
 8001164:	200002e0 	.word	0x200002e0
 8001168:	0800a8ac 	.word	0x0800a8ac
 800116c:	08001421 	.word	0x08001421
 8001170:	200002d8 	.word	0x200002d8
 8001174:	0800a8d0 	.word	0x0800a8d0
 8001178:	080014d5 	.word	0x080014d5
 800117c:	200002dc 	.word	0x200002dc

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	@ 0x50
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	2234      	movs	r2, #52	@ 0x34
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f007 fa2b 	bl	80085ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001254 <SystemClock_Config+0xd4>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	4a29      	ldr	r2, [pc, #164]	@ (8001254 <SystemClock_Config+0xd4>)
 80011ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b4:	4b27      	ldr	r3, [pc, #156]	@ (8001254 <SystemClock_Config+0xd4>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <SystemClock_Config+0xd8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011cc:	4a22      	ldr	r2, [pc, #136]	@ (8001258 <SystemClock_Config+0xd8>)
 80011ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <SystemClock_Config+0xd8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e4:	2301      	movs	r3, #1
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e8:	2310      	movs	r3, #16
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ec:	2302      	movs	r3, #2
 80011ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011f4:	2310      	movs	r3, #16
 80011f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011fe:	2304      	movs	r3, #4
 8001200:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001202:	2302      	movs	r3, #2
 8001204:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001206:	2302      	movs	r3, #2
 8001208:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fb34 	bl	800387c <HAL_RCC_OscConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800121a:	f000 f9bd 	bl	8001598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	230f      	movs	r3, #15
 8001220:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2302      	movs	r3, #2
 8001224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800122a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	2102      	movs	r1, #2
 800123a:	4618      	mov	r0, r3
 800123c:	f001 ffa2 	bl	8003184 <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001246:	f000 f9a7 	bl	8001598 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	3750      	adds	r7, #80	@ 0x50
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126e:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <MX_ADC1_Init+0x98>)
 8001270:	4a21      	ldr	r2, [pc, #132]	@ (80012f8 <MX_ADC1_Init+0x9c>)
 8001272:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <MX_ADC1_Init+0x98>)
 8001276:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800127a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127c:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <MX_ADC1_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001282:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <MX_ADC1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <MX_ADC1_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <MX_ADC1_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MX_ADC1_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <MX_ADC1_Init+0x98>)
 800129e:	4a17      	ldr	r2, [pc, #92]	@ (80012fc <MX_ADC1_Init+0xa0>)
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012bc:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012be:	f000 fc71 	bl	8001ba4 <HAL_ADC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012c8:	f000 f966 	bl	8001598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_ADC1_Init+0x98>)
 80012de:	f000 fe0f 	bl	8001f00 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012e8:	f000 f956 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200001f4 	.word	0x200001f4
 80012f8:	40012000 	.word	0x40012000
 80012fc:	0f000001 	.word	0x0f000001

08001300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001306:	4a13      	ldr	r2, [pc, #76]	@ (8001354 <MX_I2C1_Init+0x54>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_I2C1_Init+0x50>)
 800130c:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <MX_I2C1_Init+0x58>)
 800130e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <MX_I2C1_Init+0x50>)
 800131e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_I2C1_Init+0x50>)
 800133e:	f001 fa83 	bl	8002848 <HAL_I2C_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001348:	f000 f926 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000023c 	.word	0x2000023c
 8001354:	40005400 	.word	0x40005400
 8001358:	000186a0 	.word	0x000186a0

0800135c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <MX_USART1_UART_Init+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001368:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800136c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_USART1_UART_Init+0x4c>)
 8001394:	f002 ffac 	bl	80042f0 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f000 f8fb 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000290 	.word	0x20000290
 80013ac:	40011000 	.word	0x40011000

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <MX_GPIO_Init+0x68>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a16      	ldr	r2, [pc, #88]	@ (8001418 <MX_GPIO_Init+0x68>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <MX_GPIO_Init+0x68>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_GPIO_Init+0x68>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a0f      	ldr	r2, [pc, #60]	@ (8001418 <MX_GPIO_Init+0x68>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <MX_GPIO_Init+0x68>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_GPIO_Init+0x68>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <MX_GPIO_Init+0x68>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_GPIO_Init+0x68>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	00000000 	.word	0x00000000

08001420 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b090      	sub	sp, #64	@ 0x40
 8001424:	af02      	add	r7, sp, #8
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	MESSAGE_OBJ_T msg={0};
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2229      	movs	r2, #41	@ 0x29
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f007 f8da 	bl	80085ea <memset>
	uint8_t uid = 123;
 8001436:	237b      	movs	r3, #123	@ 0x7b
 8001438:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 800143c:	4822      	ldr	r0, [pc, #136]	@ (80014c8 <StartTask01+0xa8>)
 800143e:	f000 fbf5 	bl	8001c2c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,100);
 8001442:	2164      	movs	r1, #100	@ 0x64
 8001444:	4820      	ldr	r0, [pc, #128]	@ (80014c8 <StartTask01+0xa8>)
 8001446:	f000 fcc3 	bl	8001dd0 <HAL_ADC_PollForConversion>
	  adcvalue = HAL_ADC_GetValue(&hadc1);
 800144a:	481f      	ldr	r0, [pc, #124]	@ (80014c8 <StartTask01+0xa8>)
 800144c:	f000 fd4b 	bl	8001ee6 <HAL_ADC_GetValue>
 8001450:	4603      	mov	r3, r0
 8001452:	86bb      	strh	r3, [r7, #52]	@ 0x34


	  snprintf(msg.buff,sizeof(msg.buff),"%.1lf V",map(adcvalue,0,4095,0,3.3));
 8001454:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001456:	ed9f 3b16 	vldr	d3, [pc, #88]	@ 80014b0 <StartTask01+0x90>
 800145a:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 80014b8 <StartTask01+0x98>
 800145e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80014c0 <StartTask01+0xa0>
 8001462:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 80014b8 <StartTask01+0x98>
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fe07 	bl	800107a <map>
 800146c:	eeb0 7a40 	vmov.f32	s14, s0
 8001470:	eef0 7a60 	vmov.f32	s15, s1
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	ed8d 7b00 	vstr	d7, [sp]
 800147c:	4a13      	ldr	r2, [pc, #76]	@ (80014cc <StartTask01+0xac>)
 800147e:	2128      	movs	r1, #40	@ 0x28
 8001480:	4618      	mov	r0, r3
 8001482:	f007 f83b 	bl	80084fc <sniprintf>
	  msg.UID_SENSOR = uid;
 8001486:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800148a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	  osMessageQueuePut(Queue01Handle,&msg,0,osWaitForever);
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <StartTask01+0xb0>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f107 0108 	add.w	r1, r7, #8
 8001496:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800149a:	2200      	movs	r2, #0
 800149c:	f003 fce2 	bl	8004e64 <osMessageQueuePut>
	  osDelay(1000);
 80014a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014a4:	f003 fc50 	bl	8004d48 <osDelay>
	  HAL_ADC_Start(&hadc1);
 80014a8:	bf00      	nop
 80014aa:	e7c7      	b.n	800143c <StartTask01+0x1c>
 80014ac:	f3af 8000 	nop.w
 80014b0:	66666666 	.word	0x66666666
 80014b4:	400a6666 	.word	0x400a6666
	...
 80014c4:	40affe00 	.word	0x40affe00
 80014c8:	200001f4 	.word	0x200001f4
 80014cc:	0800a860 	.word	0x0800a860
 80014d0:	200002e0 	.word	0x200002e0

080014d4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b098      	sub	sp, #96	@ 0x60
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	MESSAGE_OBJ_T msg;
	char message[40];
	lcd_init();
 80014dc:	f7ff fd7b 	bl	8000fd6 <lcd_init>

  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(Queue01Handle,&msg,NULL,osWaitForever);
 80014e0:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <StartTask02+0x90>)
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ec:	2200      	movs	r2, #0
 80014ee:	f003 fd19 	bl	8004f24 <osMessageQueueGet>

	  HAL_UART_Transmit(&huart1,(uint8_t*)msg.buff,strlen(msg.buff),HAL_MAX_DELAY);
 80014f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe feda 	bl	80002b0 <strlen>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001504:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001508:	4817      	ldr	r0, [pc, #92]	@ (8001568 <StartTask02+0x94>)
 800150a:	f002 ff41 	bl	8004390 <HAL_UART_Transmit>
	  snprintf(message,sizeof(message),"Leitura do Sensor:%d",msg.UID_SENSOR);
 800150e:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001512:	f107 000c 	add.w	r0, r7, #12
 8001516:	4a15      	ldr	r2, [pc, #84]	@ (800156c <StartTask02+0x98>)
 8001518:	2128      	movs	r1, #40	@ 0x28
 800151a:	f006 ffef 	bl	80084fc <sniprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t*)message,strlen(message),HAL_MAX_DELAY);
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fec4 	bl	80002b0 <strlen>
 8001528:	4603      	mov	r3, r0
 800152a:	b29a      	uxth	r2, r3
 800152c:	f107 010c 	add.w	r1, r7, #12
 8001530:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <StartTask02+0x94>)
 8001536:	f002 ff2b 	bl	8004390 <HAL_UART_Transmit>

	  //lcd_clear();
	  lcd_put_cur(0,0);
 800153a:	2100      	movs	r1, #0
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff fd2b 	bl	8000f98 <lcd_put_cur>
	  lcd_send_string(" Leitura Digital ");
 8001542:	480b      	ldr	r0, [pc, #44]	@ (8001570 <StartTask02+0x9c>)
 8001544:	f7ff fd84 	bl	8001050 <lcd_send_string>
	  lcd_put_cur(1,6);
 8001548:	2106      	movs	r1, #6
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff fd24 	bl	8000f98 <lcd_put_cur>
	  lcd_send_string(msg.buff);
 8001550:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fd7b 	bl	8001050 <lcd_send_string>
	  osDelay(100);
 800155a:	2064      	movs	r0, #100	@ 0x64
 800155c:	f003 fbf4 	bl	8004d48 <osDelay>
	  osMessageQueueGet(Queue01Handle,&msg,NULL,osWaitForever);
 8001560:	bf00      	nop
 8001562:	e7bd      	b.n	80014e0 <StartTask02+0xc>
 8001564:	200002e0 	.word	0x200002e0
 8001568:	20000290 	.word	0x20000290
 800156c:	0800a868 	.word	0x0800a868
 8001570:	0800a880 	.word	0x0800a880

08001574 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001586:	f000 fac9 	bl	8001b1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40010000 	.word	0x40010000

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <Error_Handler+0x8>

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_MspInit+0x54>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	4a11      	ldr	r2, [pc, #68]	@ (80015f8 <HAL_MspInit+0x54>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ba:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_MspInit+0x54>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <HAL_MspInit+0x54>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <HAL_MspInit+0x54>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <HAL_MspInit+0x54>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	210f      	movs	r1, #15
 80015e6:	f06f 0001 	mvn.w	r0, #1
 80015ea:	f000 ff6f 	bl	80024cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <HAL_ADC_MspInit+0x7c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d127      	bne.n	800166e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <HAL_ADC_MspInit+0x80>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	4a15      	ldr	r2, [pc, #84]	@ (800167c <HAL_ADC_MspInit+0x80>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162c:	6453      	str	r3, [r2, #68]	@ 0x44
 800162e:	4b13      	ldr	r3, [pc, #76]	@ (800167c <HAL_ADC_MspInit+0x80>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_ADC_MspInit+0x80>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a0e      	ldr	r2, [pc, #56]	@ (800167c <HAL_ADC_MspInit+0x80>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <HAL_ADC_MspInit+0x80>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001656:	2301      	movs	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165a:	2303      	movs	r3, #3
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	@ (8001680 <HAL_ADC_MspInit+0x84>)
 800166a:	f000 ff59 	bl	8002520 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40012000 	.word	0x40012000
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000

08001684 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	@ (8001708 <HAL_I2C_MspInit+0x84>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12b      	bne.n	80016fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a17      	ldr	r2, [pc, #92]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016c2:	23c0      	movs	r3, #192	@ 0xc0
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c6:	2312      	movs	r3, #18
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d2:	2304      	movs	r3, #4
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <HAL_I2C_MspInit+0x8c>)
 80016de:	f000 ff1f 	bl	8002520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a08      	ldr	r2, [pc, #32]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	@ 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40005400 	.word	0x40005400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	@ (8001798 <HAL_UART_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12c      	bne.n	8001790 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <HAL_UART_MspInit+0x88>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a17      	ldr	r2, [pc, #92]	@ (800179c <HAL_UART_MspInit+0x88>)
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_UART_MspInit+0x88>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <HAL_UART_MspInit+0x88>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a10      	ldr	r2, [pc, #64]	@ (800179c <HAL_UART_MspInit+0x88>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_UART_MspInit+0x88>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800176e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001780:	2307      	movs	r3, #7
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <HAL_UART_MspInit+0x8c>)
 800178c:	f000 fec8 	bl	8002520 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	@ 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40011000 	.word	0x40011000
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000

080017a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	@ 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001874 <HAL_InitTick+0xd0>)
 80017ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001874 <HAL_InitTick+0xd0>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <HAL_InitTick+0xd0>)
 80017c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d0:	f107 020c 	add.w	r2, r7, #12
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fdec 	bl	80033b8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017e0:	f001 fdd6 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
 80017e4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e8:	4a23      	ldr	r2, [pc, #140]	@ (8001878 <HAL_InitTick+0xd4>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	0c9b      	lsrs	r3, r3, #18
 80017f0:	3b01      	subs	r3, #1
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017f4:	4b21      	ldr	r3, [pc, #132]	@ (800187c <HAL_InitTick+0xd8>)
 80017f6:	4a22      	ldr	r2, [pc, #136]	@ (8001880 <HAL_InitTick+0xdc>)
 80017f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017fa:	4b20      	ldr	r3, [pc, #128]	@ (800187c <HAL_InitTick+0xd8>)
 80017fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001800:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001802:	4a1e      	ldr	r2, [pc, #120]	@ (800187c <HAL_InitTick+0xd8>)
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001808:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <HAL_InitTick+0xd8>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b1b      	ldr	r3, [pc, #108]	@ (800187c <HAL_InitTick+0xd8>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_InitTick+0xd8>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800181a:	4818      	ldr	r0, [pc, #96]	@ (800187c <HAL_InitTick+0xd8>)
 800181c:	f002 facc 	bl	8003db8 <HAL_TIM_Base_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001826:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800182a:	2b00      	cmp	r3, #0
 800182c:	d11b      	bne.n	8001866 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800182e:	4813      	ldr	r0, [pc, #76]	@ (800187c <HAL_InitTick+0xd8>)
 8001830:	f002 fb1c 	bl	8003e6c <HAL_TIM_Base_Start_IT>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800183a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800183e:	2b00      	cmp	r3, #0
 8001840:	d111      	bne.n	8001866 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001842:	2019      	movs	r0, #25
 8001844:	f000 fe5e 	bl	8002504 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b0f      	cmp	r3, #15
 800184c:	d808      	bhi.n	8001860 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800184e:	2200      	movs	r2, #0
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	2019      	movs	r0, #25
 8001854:	f000 fe3a 	bl	80024cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001858:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <HAL_InitTick+0xe0>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e002      	b.n	8001866 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001866:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800186a:	4618      	mov	r0, r3
 800186c:	3730      	adds	r7, #48	@ 0x30
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	431bde83 	.word	0x431bde83
 800187c:	200002e4 	.word	0x200002e4
 8001880:	40010000 	.word	0x40010000
 8001884:	20000004 	.word	0x20000004

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <NMI_Handler+0x4>

08001890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <MemManage_Handler+0x4>

080018a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <UsageFault_Handler+0x4>

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018c6:	f002 fb41 	bl	8003f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200002e4 	.word	0x200002e4

080018d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_kill>:

int _kill(int pid, int sig)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ee:	f006 ff25 	bl	800873c <__errno>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2216      	movs	r2, #22
 80018f6:	601a      	str	r2, [r3, #0]
  return -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_exit>:

void _exit (int status)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800190c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ffe7 	bl	80018e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001916:	bf00      	nop
 8001918:	e7fd      	b.n	8001916 <_exit+0x12>

0800191a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e00a      	b.n	8001942 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192c:	f3af 8000 	nop.w
 8001930:	4601      	mov	r1, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbf0      	blt.n	800192c <_read+0x12>
  }

  return len;
 800194a:	687b      	ldr	r3, [r7, #4]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e009      	b.n	800197a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbf1      	blt.n	8001966 <_write+0x12>
  }
  return len;
 8001982:	687b      	ldr	r3, [r7, #4]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_close>:

int _close(int file)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b4:	605a      	str	r2, [r3, #4]
  return 0;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_isatty>:

int _isatty(int file)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f006 fe8a 	bl	800873c <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20020000 	.word	0x20020000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	2000032c 	.word	0x2000032c
 8001a5c:	20004e68 	.word	0x20004e68

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001abc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a88:	f7ff ffea 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	@ (8001ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f006 fe49 	bl	8008748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff fb27 	bl	8001108 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ac8:	0800aca8 	.word	0x0800aca8
  ldr r2, =_sbss
 8001acc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ad0:	20004e68 	.word	0x20004e68

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b18 <HAL_Init+0x40>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <HAL_Init+0x40>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <HAL_Init+0x40>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 fcd8 	bl	80024b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	200f      	movs	r0, #15
 8001b08:	f7ff fe4c 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fd4a 	bl	80015a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x20>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_IncTick+0x24>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <HAL_IncTick+0x24>)
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	20000330 	.word	0x20000330

08001b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <HAL_GetTick+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000330 	.word	0x20000330

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff ffee 	bl	8001b44 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_Delay+0x44>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffde 	bl	8001b44 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e033      	b.n	8001c22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fd1a 	bl	80015fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bea:	f023 0302 	bic.w	r3, r3, #2
 8001bee:	f043 0202 	orr.w	r2, r3, #2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fab4 	bl	8002164 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f023 0303 	bic.w	r3, r3, #3
 8001c0a:	f043 0201 	orr.w	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c12:	e001      	b.n	8001c18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Start+0x1a>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e0b2      	b.n	8001dac <HAL_ADC_Start+0x180>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d018      	beq.n	8001c8e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c6c:	4b52      	ldr	r3, [pc, #328]	@ (8001db8 <HAL_ADC_Start+0x18c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a52      	ldr	r2, [pc, #328]	@ (8001dbc <HAL_ADC_Start+0x190>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0c9a      	lsrs	r2, r3, #18
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c80:	e002      	b.n	8001c88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f9      	bne.n	8001c82 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d17a      	bne.n	8001d92 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cc6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cda:	d106      	bne.n	8001cea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce0:	f023 0206 	bic.w	r2, r3, #6
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ce8:	e002      	b.n	8001cf0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf8:	4b31      	ldr	r3, [pc, #196]	@ (8001dc0 <HAL_ADC_Start+0x194>)
 8001cfa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d04:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d12a      	bne.n	8001d68 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a2b      	ldr	r2, [pc, #172]	@ (8001dc4 <HAL_ADC_Start+0x198>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d015      	beq.n	8001d48 <HAL_ADC_Start+0x11c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a29      	ldr	r2, [pc, #164]	@ (8001dc8 <HAL_ADC_Start+0x19c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d105      	bne.n	8001d32 <HAL_ADC_Start+0x106>
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_ADC_Start+0x194>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a25      	ldr	r2, [pc, #148]	@ (8001dcc <HAL_ADC_Start+0x1a0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d136      	bne.n	8001daa <HAL_ADC_Start+0x17e>
 8001d3c:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <HAL_ADC_Start+0x194>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d130      	bne.n	8001daa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d129      	bne.n	8001daa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	e020      	b.n	8001daa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a15      	ldr	r2, [pc, #84]	@ (8001dc4 <HAL_ADC_Start+0x198>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d11b      	bne.n	8001daa <HAL_ADC_Start+0x17e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d114      	bne.n	8001daa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	e00b      	b.n	8001daa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	f043 0210 	orr.w	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	40012300 	.word	0x40012300
 8001dc4:	40012000 	.word	0x40012000
 8001dc8:	40012100 	.word	0x40012100
 8001dcc:	40012200 	.word	0x40012200

08001dd0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dec:	d113      	bne.n	8001e16 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001df8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dfc:	d10b      	bne.n	8001e16 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f043 0220 	orr.w	r2, r3, #32
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e063      	b.n	8001ede <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e16:	f7ff fe95 	bl	8001b44 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e1c:	e021      	b.n	8001e62 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e24:	d01d      	beq.n	8001e62 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_ADC_PollForConversion+0x6c>
 8001e2c:	f7ff fe8a 	bl	8001b44 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d212      	bcs.n	8001e62 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d00b      	beq.n	8001e62 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f043 0204 	orr.w	r2, r3, #4
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e03d      	b.n	8001ede <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d1d6      	bne.n	8001e1e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0212 	mvn.w	r2, #18
 8001e78:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d123      	bne.n	8001edc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d11f      	bne.n	8001edc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1c>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e113      	b.n	8002144 <HAL_ADC_ConfigChannel+0x244>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d925      	bls.n	8001f78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68d9      	ldr	r1, [r3, #12]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b1e      	subs	r3, #30
 8001f42:	2207      	movs	r2, #7
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	400a      	ands	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68d9      	ldr	r1, [r3, #12]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	4603      	mov	r3, r0
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4403      	add	r3, r0
 8001f6a:	3b1e      	subs	r3, #30
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	e022      	b.n	8001fbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	400a      	ands	r2, r1
 8001f9a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6919      	ldr	r1, [r3, #16]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	4603      	mov	r3, r0
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4403      	add	r3, r0
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d824      	bhi.n	8002010 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b05      	subs	r3, #5
 8001fd8:	221f      	movs	r2, #31
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	3b05      	subs	r3, #5
 8002002:	fa00 f203 	lsl.w	r2, r0, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	635a      	str	r2, [r3, #52]	@ 0x34
 800200e:	e04c      	b.n	80020aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d824      	bhi.n	8002062 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3b23      	subs	r3, #35	@ 0x23
 800202a:	221f      	movs	r2, #31
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43da      	mvns	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	400a      	ands	r2, r1
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b29b      	uxth	r3, r3
 8002046:	4618      	mov	r0, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b23      	subs	r3, #35	@ 0x23
 8002054:	fa00 f203 	lsl.w	r2, r0, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002060:	e023      	b.n	80020aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	3b41      	subs	r3, #65	@ 0x41
 8002074:	221f      	movs	r2, #31
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	400a      	ands	r2, r1
 8002082:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	3b41      	subs	r3, #65	@ 0x41
 800209e:	fa00 f203 	lsl.w	r2, r0, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020aa:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_ADC_ConfigChannel+0x250>)
 80020ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a28      	ldr	r2, [pc, #160]	@ (8002154 <HAL_ADC_ConfigChannel+0x254>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d10f      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x1d8>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b12      	cmp	r3, #18
 80020be:	d10b      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002154 <HAL_ADC_ConfigChannel+0x254>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d12b      	bne.n	800213a <HAL_ADC_ConfigChannel+0x23a>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002158 <HAL_ADC_ConfigChannel+0x258>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d003      	beq.n	80020f4 <HAL_ADC_ConfigChannel+0x1f4>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b11      	cmp	r3, #17
 80020f2:	d122      	bne.n	800213a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a11      	ldr	r2, [pc, #68]	@ (8002158 <HAL_ADC_ConfigChannel+0x258>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d111      	bne.n	800213a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_ADC_ConfigChannel+0x25c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <HAL_ADC_ConfigChannel+0x260>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	0c9a      	lsrs	r2, r3, #18
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800212c:	e002      	b.n	8002134 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	3b01      	subs	r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f9      	bne.n	800212e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40012300 	.word	0x40012300
 8002154:	40012000 	.word	0x40012000
 8002158:	10000012 	.word	0x10000012
 800215c:	20000000 	.word	0x20000000
 8002160:	431bde83 	.word	0x431bde83

08002164 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800216c:	4b79      	ldr	r3, [pc, #484]	@ (8002354 <ADC_Init+0x1f0>)
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	431a      	orrs	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	021a      	lsls	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6899      	ldr	r1, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	4a58      	ldr	r2, [pc, #352]	@ (8002358 <ADC_Init+0x1f4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d022      	beq.n	8002242 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800220a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6899      	ldr	r1, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800222c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6899      	ldr	r1, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	e00f      	b.n	8002262 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002250:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002260:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0202 	bic.w	r2, r2, #2
 8002270:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6899      	ldr	r1, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7e1b      	ldrb	r3, [r3, #24]
 800227c:	005a      	lsls	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01b      	beq.n	80022c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800229e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	3b01      	subs	r3, #1
 80022bc:	035a      	lsls	r2, r3, #13
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	e007      	b.n	80022d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	051a      	lsls	r2, r3, #20
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800230c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800231a:	025a      	lsls	r2, r3, #9
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002332:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6899      	ldr	r1, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	029a      	lsls	r2, r3, #10
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	609a      	str	r2, [r3, #8]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40012300 	.word	0x40012300
 8002358:	0f000001 	.word	0x0f000001

0800235c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800236c:	4b0c      	ldr	r3, [pc, #48]	@ (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <__NVIC_GetPriorityGrouping+0x18>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0307 	and.w	r3, r3, #7
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db0b      	blt.n	80023ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4907      	ldr	r1, [pc, #28]	@ (80023f8 <__NVIC_EnableIRQ+0x38>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100

080023fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	db0a      	blt.n	8002426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	490c      	ldr	r1, [pc, #48]	@ (8002448 <__NVIC_SetPriority+0x4c>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	440b      	add	r3, r1
 8002420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002424:	e00a      	b.n	800243c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4908      	ldr	r1, [pc, #32]	@ (800244c <__NVIC_SetPriority+0x50>)
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	3b04      	subs	r3, #4
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	440b      	add	r3, r1
 800243a:	761a      	strb	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	@ 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f1c3 0307 	rsb	r3, r3, #7
 800246a:	2b04      	cmp	r3, #4
 800246c:	bf28      	it	cs
 800246e:	2304      	movcs	r3, #4
 8002470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3304      	adds	r3, #4
 8002476:	2b06      	cmp	r3, #6
 8002478:	d902      	bls.n	8002480 <NVIC_EncodePriority+0x30>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3b03      	subs	r3, #3
 800247e:	e000      	b.n	8002482 <NVIC_EncodePriority+0x32>
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	401a      	ands	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002498:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43d9      	mvns	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	4313      	orrs	r3, r2
         );
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	@ 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ff4c 	bl	800235c <__NVIC_SetPriorityGrouping>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024de:	f7ff ff61 	bl	80023a4 <__NVIC_GetPriorityGrouping>
 80024e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f7ff ffb1 	bl	8002450 <NVIC_EncodePriority>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff80 	bl	80023fc <__NVIC_SetPriority>
}
 80024fc:	bf00      	nop
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff54 	bl	80023c0 <__NVIC_EnableIRQ>
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	@ 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e165      	b.n	8002808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	f040 8154 	bne.w	8002802 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d005      	beq.n	8002572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256e:	2b02      	cmp	r3, #2
 8002570:	d130      	bne.n	80025d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 0201 	and.w	r2, r3, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d017      	beq.n	8002610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d123      	bne.n	8002664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80ae 	beq.w	8002802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002820 <HAL_GPIO_Init+0x300>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002820 <HAL_GPIO_Init+0x300>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002820 <HAL_GPIO_Init+0x300>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c2:	4a58      	ldr	r2, [pc, #352]	@ (8002824 <HAL_GPIO_Init+0x304>)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002828 <HAL_GPIO_Init+0x308>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d025      	beq.n	800273a <HAL_GPIO_Init+0x21a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4e      	ldr	r2, [pc, #312]	@ (800282c <HAL_GPIO_Init+0x30c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01f      	beq.n	8002736 <HAL_GPIO_Init+0x216>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002830 <HAL_GPIO_Init+0x310>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d019      	beq.n	8002732 <HAL_GPIO_Init+0x212>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4c      	ldr	r2, [pc, #304]	@ (8002834 <HAL_GPIO_Init+0x314>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_GPIO_Init+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4b      	ldr	r2, [pc, #300]	@ (8002838 <HAL_GPIO_Init+0x318>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00d      	beq.n	800272a <HAL_GPIO_Init+0x20a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4a      	ldr	r2, [pc, #296]	@ (800283c <HAL_GPIO_Init+0x31c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <HAL_GPIO_Init+0x206>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a49      	ldr	r2, [pc, #292]	@ (8002840 <HAL_GPIO_Init+0x320>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_GPIO_Init+0x202>
 800271e:	2306      	movs	r3, #6
 8002720:	e00c      	b.n	800273c <HAL_GPIO_Init+0x21c>
 8002722:	2307      	movs	r3, #7
 8002724:	e00a      	b.n	800273c <HAL_GPIO_Init+0x21c>
 8002726:	2305      	movs	r3, #5
 8002728:	e008      	b.n	800273c <HAL_GPIO_Init+0x21c>
 800272a:	2304      	movs	r3, #4
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x21c>
 800272e:	2303      	movs	r3, #3
 8002730:	e004      	b.n	800273c <HAL_GPIO_Init+0x21c>
 8002732:	2302      	movs	r3, #2
 8002734:	e002      	b.n	800273c <HAL_GPIO_Init+0x21c>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_GPIO_Init+0x21c>
 800273a:	2300      	movs	r3, #0
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f002 0203 	and.w	r2, r2, #3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4093      	lsls	r3, r2
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274c:	4935      	ldr	r1, [pc, #212]	@ (8002824 <HAL_GPIO_Init+0x304>)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275a:	4b3a      	ldr	r3, [pc, #232]	@ (8002844 <HAL_GPIO_Init+0x324>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277e:	4a31      	ldr	r2, [pc, #196]	@ (8002844 <HAL_GPIO_Init+0x324>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002784:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <HAL_GPIO_Init+0x324>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a8:	4a26      	ldr	r2, [pc, #152]	@ (8002844 <HAL_GPIO_Init+0x324>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ae:	4b25      	ldr	r3, [pc, #148]	@ (8002844 <HAL_GPIO_Init+0x324>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002844 <HAL_GPIO_Init+0x324>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <HAL_GPIO_Init+0x324>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027fc:	4a11      	ldr	r2, [pc, #68]	@ (8002844 <HAL_GPIO_Init+0x324>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b0f      	cmp	r3, #15
 800280c:	f67f ae96 	bls.w	800253c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3724      	adds	r7, #36	@ 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40013800 	.word	0x40013800
 8002828:	40020000 	.word	0x40020000
 800282c:	40020400 	.word	0x40020400
 8002830:	40020800 	.word	0x40020800
 8002834:	40020c00 	.word	0x40020c00
 8002838:	40021000 	.word	0x40021000
 800283c:	40021400 	.word	0x40021400
 8002840:	40021800 	.word	0x40021800
 8002844:	40013c00 	.word	0x40013c00

08002848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e12b      	b.n	8002ab2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe ff08 	bl	8001684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	@ 0x24
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800289a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028ac:	f000 fd5c 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 80028b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4a81      	ldr	r2, [pc, #516]	@ (8002abc <HAL_I2C_Init+0x274>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d807      	bhi.n	80028cc <HAL_I2C_Init+0x84>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a80      	ldr	r2, [pc, #512]	@ (8002ac0 <HAL_I2C_Init+0x278>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bf94      	ite	ls
 80028c4:	2301      	movls	r3, #1
 80028c6:	2300      	movhi	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e006      	b.n	80028da <HAL_I2C_Init+0x92>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a7d      	ldr	r2, [pc, #500]	@ (8002ac4 <HAL_I2C_Init+0x27c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	bf94      	ite	ls
 80028d4:	2301      	movls	r3, #1
 80028d6:	2300      	movhi	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e0e7      	b.n	8002ab2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4a78      	ldr	r2, [pc, #480]	@ (8002ac8 <HAL_I2C_Init+0x280>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0c9b      	lsrs	r3, r3, #18
 80028ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a6a      	ldr	r2, [pc, #424]	@ (8002abc <HAL_I2C_Init+0x274>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d802      	bhi.n	800291c <HAL_I2C_Init+0xd4>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	3301      	adds	r3, #1
 800291a:	e009      	b.n	8002930 <HAL_I2C_Init+0xe8>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	4a69      	ldr	r2, [pc, #420]	@ (8002acc <HAL_I2C_Init+0x284>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	3301      	adds	r3, #1
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	430b      	orrs	r3, r1
 8002936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002942:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	495c      	ldr	r1, [pc, #368]	@ (8002abc <HAL_I2C_Init+0x274>)
 800294c:	428b      	cmp	r3, r1
 800294e:	d819      	bhi.n	8002984 <HAL_I2C_Init+0x13c>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1e59      	subs	r1, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fbb1 f3f3 	udiv	r3, r1, r3
 800295e:	1c59      	adds	r1, r3, #1
 8002960:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002964:	400b      	ands	r3, r1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_I2C_Init+0x138>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1e59      	subs	r1, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fbb1 f3f3 	udiv	r3, r1, r3
 8002978:	3301      	adds	r3, #1
 800297a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297e:	e051      	b.n	8002a24 <HAL_I2C_Init+0x1dc>
 8002980:	2304      	movs	r3, #4
 8002982:	e04f      	b.n	8002a24 <HAL_I2C_Init+0x1dc>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d111      	bne.n	80029b0 <HAL_I2C_Init+0x168>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e58      	subs	r0, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	440b      	add	r3, r1
 800299a:	fbb0 f3f3 	udiv	r3, r0, r3
 800299e:	3301      	adds	r3, #1
 80029a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e012      	b.n	80029d6 <HAL_I2C_Init+0x18e>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1e58      	subs	r0, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	0099      	lsls	r1, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Init+0x196>
 80029da:	2301      	movs	r3, #1
 80029dc:	e022      	b.n	8002a24 <HAL_I2C_Init+0x1dc>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10e      	bne.n	8002a04 <HAL_I2C_Init+0x1bc>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e58      	subs	r0, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	440b      	add	r3, r1
 80029f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a02:	e00f      	b.n	8002a24 <HAL_I2C_Init+0x1dc>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e58      	subs	r0, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	0099      	lsls	r1, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	6809      	ldr	r1, [r1, #0]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6911      	ldr	r1, [r2, #16]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68d2      	ldr	r2, [r2, #12]
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	000186a0 	.word	0x000186a0
 8002ac0:	001e847f 	.word	0x001e847f
 8002ac4:	003d08ff 	.word	0x003d08ff
 8002ac8:	431bde83 	.word	0x431bde83
 8002acc:	10624dd3 	.word	0x10624dd3

08002ad0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	461a      	mov	r2, r3
 8002adc:	460b      	mov	r3, r1
 8002ade:	817b      	strh	r3, [r7, #10]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff f82e 	bl	8001b44 <HAL_GetTick>
 8002ae8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	f040 80e0 	bne.w	8002cb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2319      	movs	r3, #25
 8002afe:	2201      	movs	r2, #1
 8002b00:	4970      	ldr	r1, [pc, #448]	@ (8002cc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f964 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e0d3      	b.n	8002cba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_I2C_Master_Transmit+0x50>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e0cc      	b.n	8002cba <HAL_I2C_Master_Transmit+0x1ea>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d007      	beq.n	8002b46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2221      	movs	r2, #33	@ 0x21
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2210      	movs	r2, #16
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	893a      	ldrh	r2, [r7, #8]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a50      	ldr	r2, [pc, #320]	@ (8002cc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b88:	8979      	ldrh	r1, [r7, #10]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f89c 	bl	8002ccc <I2C_MasterRequestWrite>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e08d      	b.n	8002cba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bb4:	e066      	b.n	8002c84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fa22 	bl	8003004 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d107      	bne.n	8002bde <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06b      	b.n	8002cba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d11b      	bne.n	8002c58 <HAL_I2C_Master_Transmit+0x188>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d017      	beq.n	8002c58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	781a      	ldrb	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	6a39      	ldr	r1, [r7, #32]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fa19 	bl	8003094 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d107      	bne.n	8002c80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e01a      	b.n	8002cba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d194      	bne.n	8002bb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	00100002 	.word	0x00100002
 8002cc8:	ffff0000 	.word	0xffff0000

08002ccc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d006      	beq.n	8002cf6 <I2C_MasterRequestWrite+0x2a>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d003      	beq.n	8002cf6 <I2C_MasterRequestWrite+0x2a>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cf4:	d108      	bne.n	8002d08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e00b      	b.n	8002d20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	2b12      	cmp	r3, #18
 8002d0e:	d107      	bne.n	8002d20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f84f 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d46:	d103      	bne.n	8002d50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e035      	b.n	8002dc0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d5c:	d108      	bne.n	8002d70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d6c:	611a      	str	r2, [r3, #16]
 8002d6e:	e01b      	b.n	8002da8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d70:	897b      	ldrh	r3, [r7, #10]
 8002d72:	11db      	asrs	r3, r3, #7
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f003 0306 	and.w	r3, r3, #6
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f063 030f 	orn	r3, r3, #15
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	490e      	ldr	r1, [pc, #56]	@ (8002dc8 <I2C_MasterRequestWrite+0xfc>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f898 	bl	8002ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e010      	b.n	8002dc0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d9e:	897b      	ldrh	r3, [r7, #10]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4907      	ldr	r1, [pc, #28]	@ (8002dcc <I2C_MasterRequestWrite+0x100>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f888 	bl	8002ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	00010008 	.word	0x00010008
 8002dcc:	00010002 	.word	0x00010002

08002dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de0:	e048      	b.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002de8:	d044      	beq.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe feab 	bl	8001b44 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d139      	bne.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	0c1b      	lsrs	r3, r3, #16
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10d      	bne.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	43da      	mvns	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	e00c      	b.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d116      	bne.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e023      	b.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	0c1b      	lsrs	r3, r3, #16
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d10d      	bne.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	43da      	mvns	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	e00c      	b.n	8002eb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d093      	beq.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ed2:	e071      	b.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee2:	d123      	bne.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002efc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	f043 0204 	orr.w	r2, r3, #4
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e067      	b.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f32:	d041      	beq.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f34:	f7fe fe06 	bl	8001b44 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d302      	bcc.n	8002f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d136      	bne.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d10c      	bne.n	8002f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e00b      	b.n	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	43da      	mvns	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e021      	b.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	0c1b      	lsrs	r3, r3, #16
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d10c      	bne.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e00b      	b.n	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f47f af6d 	bne.w	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003010:	e034      	b.n	800307c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f886 	bl	8003124 <I2C_IsAcknowledgeFailed>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e034      	b.n	800308c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003028:	d028      	beq.n	800307c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7fe fd8b 	bl	8001b44 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11d      	bne.n	800307c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304a:	2b80      	cmp	r3, #128	@ 0x80
 800304c:	d016      	beq.n	800307c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e007      	b.n	800308c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003086:	2b80      	cmp	r3, #128	@ 0x80
 8003088:	d1c3      	bne.n	8003012 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030a0:	e034      	b.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f83e 	bl	8003124 <I2C_IsAcknowledgeFailed>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e034      	b.n	800311c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030b8:	d028      	beq.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7fe fd43 	bl	8001b44 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d11d      	bne.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d016      	beq.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b04      	cmp	r3, #4
 8003118:	d1c3      	bne.n	80030a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313a:	d11b      	bne.n	8003174 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003144:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	f043 0204 	orr.w	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0cc      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b68      	ldr	r3, [pc, #416]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d90c      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b65      	ldr	r3, [pc, #404]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b63      	ldr	r3, [pc, #396]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0b8      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d8:	4b59      	ldr	r3, [pc, #356]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4a58      	ldr	r2, [pc, #352]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f0:	4b53      	ldr	r3, [pc, #332]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4a52      	ldr	r2, [pc, #328]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4b50      	ldr	r3, [pc, #320]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	494d      	ldr	r1, [pc, #308]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d044      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b47      	ldr	r3, [pc, #284]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d119      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e07f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d003      	beq.n	8003242 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323e:	2b03      	cmp	r3, #3
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003242:	4b3f      	ldr	r3, [pc, #252]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e06f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	4b3b      	ldr	r3, [pc, #236]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e067      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	4b37      	ldr	r3, [pc, #220]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4934      	ldr	r1, [pc, #208]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	4313      	orrs	r3, r2
 8003272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003274:	f7fe fc66 	bl	8001b44 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	e00a      	b.n	8003292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fe fc62 	bl	8001b44 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e04f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	4b2b      	ldr	r3, [pc, #172]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 020c 	and.w	r2, r3, #12
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d1eb      	bne.n	800327c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a4:	4b25      	ldr	r3, [pc, #148]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d20c      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b22      	ldr	r3, [pc, #136]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b20      	ldr	r3, [pc, #128]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e032      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d8:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4916      	ldr	r1, [pc, #88]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f6:	4b12      	ldr	r3, [pc, #72]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	490e      	ldr	r1, [pc, #56]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800330a:	f000 f887 	bl	800341c <HAL_RCC_GetSysClockFreq>
 800330e:	4602      	mov	r2, r0
 8003310:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	490a      	ldr	r1, [pc, #40]	@ (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	5ccb      	ldrb	r3, [r1, r3]
 800331e:	fa22 f303 	lsr.w	r3, r2, r3
 8003322:	4a09      	ldr	r2, [pc, #36]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003326:	4b09      	ldr	r3, [pc, #36]	@ (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe fa3a 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40023c00 	.word	0x40023c00
 8003340:	40023800 	.word	0x40023800
 8003344:	0800a90c 	.word	0x0800a90c
 8003348:	20000000 	.word	0x20000000
 800334c:	20000004 	.word	0x20000004

08003350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003354:	4b03      	ldr	r3, [pc, #12]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000000 	.word	0x20000000

08003368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800336c:	f7ff fff0 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	0a9b      	lsrs	r3, r3, #10
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4903      	ldr	r1, [pc, #12]	@ (800338c <HAL_RCC_GetPCLK1Freq+0x24>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40023800 	.word	0x40023800
 800338c:	0800a91c 	.word	0x0800a91c

08003390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003394:	f7ff ffdc 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0b5b      	lsrs	r3, r3, #13
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4903      	ldr	r1, [pc, #12]	@ (80033b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	0800a91c 	.word	0x0800a91c

080033b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	220f      	movs	r2, #15
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033c8:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <HAL_RCC_GetClockConfig+0x5c>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0203 	and.w	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003414 <HAL_RCC_GetClockConfig+0x5c>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <HAL_RCC_GetClockConfig+0x5c>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033ec:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <HAL_RCC_GetClockConfig+0x5c>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	08db      	lsrs	r3, r3, #3
 80033f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033fa:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <HAL_RCC_GetClockConfig+0x60>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 020f 	and.w	r2, r3, #15
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	601a      	str	r2, [r3, #0]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	40023c00 	.word	0x40023c00

0800341c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b0ae      	sub	sp, #184	@ 0xb8
 8003422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003442:	4bcb      	ldr	r3, [pc, #812]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x354>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b0c      	cmp	r3, #12
 800344c:	f200 8206 	bhi.w	800385c <HAL_RCC_GetSysClockFreq+0x440>
 8003450:	a201      	add	r2, pc, #4	@ (adr r2, 8003458 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	0800348d 	.word	0x0800348d
 800345c:	0800385d 	.word	0x0800385d
 8003460:	0800385d 	.word	0x0800385d
 8003464:	0800385d 	.word	0x0800385d
 8003468:	08003495 	.word	0x08003495
 800346c:	0800385d 	.word	0x0800385d
 8003470:	0800385d 	.word	0x0800385d
 8003474:	0800385d 	.word	0x0800385d
 8003478:	0800349d 	.word	0x0800349d
 800347c:	0800385d 	.word	0x0800385d
 8003480:	0800385d 	.word	0x0800385d
 8003484:	0800385d 	.word	0x0800385d
 8003488:	0800368d 	.word	0x0800368d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4bb9      	ldr	r3, [pc, #740]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x358>)
 800348e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003492:	e1e7      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003494:	4bb8      	ldr	r3, [pc, #736]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003496:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800349a:	e1e3      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800349c:	4bb4      	ldr	r3, [pc, #720]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x354>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a8:	4bb1      	ldr	r3, [pc, #708]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x354>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d071      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b4:	4bae      	ldr	r3, [pc, #696]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x354>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80034c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	f04f 0000 	mov.w	r0, #0
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ec:	0150      	lsls	r0, r2, #5
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4621      	mov	r1, r4
 80034f4:	1a51      	subs	r1, r2, r1
 80034f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80034f8:	4629      	mov	r1, r5
 80034fa:	eb63 0301 	sbc.w	r3, r3, r1
 80034fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800350c:	4649      	mov	r1, r9
 800350e:	018b      	lsls	r3, r1, #6
 8003510:	4641      	mov	r1, r8
 8003512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003516:	4641      	mov	r1, r8
 8003518:	018a      	lsls	r2, r1, #6
 800351a:	4641      	mov	r1, r8
 800351c:	1a51      	subs	r1, r2, r1
 800351e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003520:	4649      	mov	r1, r9
 8003522:	eb63 0301 	sbc.w	r3, r3, r1
 8003526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003534:	4649      	mov	r1, r9
 8003536:	00cb      	lsls	r3, r1, #3
 8003538:	4641      	mov	r1, r8
 800353a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800353e:	4641      	mov	r1, r8
 8003540:	00ca      	lsls	r2, r1, #3
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	4603      	mov	r3, r0
 8003548:	4622      	mov	r2, r4
 800354a:	189b      	adds	r3, r3, r2
 800354c:	633b      	str	r3, [r7, #48]	@ 0x30
 800354e:	462b      	mov	r3, r5
 8003550:	460a      	mov	r2, r1
 8003552:	eb42 0303 	adc.w	r3, r2, r3
 8003556:	637b      	str	r3, [r7, #52]	@ 0x34
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003564:	4629      	mov	r1, r5
 8003566:	024b      	lsls	r3, r1, #9
 8003568:	4621      	mov	r1, r4
 800356a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800356e:	4621      	mov	r1, r4
 8003570:	024a      	lsls	r2, r1, #9
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003580:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003584:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003588:	f7fd fb2e 	bl	8000be8 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003596:	e067      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003598:	4b75      	ldr	r3, [pc, #468]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x354>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80035a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035b2:	2300      	movs	r3, #0
 80035b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80035ba:	4622      	mov	r2, r4
 80035bc:	462b      	mov	r3, r5
 80035be:	f04f 0000 	mov.w	r0, #0
 80035c2:	f04f 0100 	mov.w	r1, #0
 80035c6:	0159      	lsls	r1, r3, #5
 80035c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035cc:	0150      	lsls	r0, r2, #5
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4621      	mov	r1, r4
 80035d4:	1a51      	subs	r1, r2, r1
 80035d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80035d8:	4629      	mov	r1, r5
 80035da:	eb63 0301 	sbc.w	r3, r3, r1
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80035ec:	4649      	mov	r1, r9
 80035ee:	018b      	lsls	r3, r1, #6
 80035f0:	4641      	mov	r1, r8
 80035f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035f6:	4641      	mov	r1, r8
 80035f8:	018a      	lsls	r2, r1, #6
 80035fa:	4641      	mov	r1, r8
 80035fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003600:	4649      	mov	r1, r9
 8003602:	eb63 0b01 	sbc.w	fp, r3, r1
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003612:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003616:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800361a:	4692      	mov	sl, r2
 800361c:	469b      	mov	fp, r3
 800361e:	4623      	mov	r3, r4
 8003620:	eb1a 0303 	adds.w	r3, sl, r3
 8003624:	623b      	str	r3, [r7, #32]
 8003626:	462b      	mov	r3, r5
 8003628:	eb4b 0303 	adc.w	r3, fp, r3
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800363a:	4629      	mov	r1, r5
 800363c:	028b      	lsls	r3, r1, #10
 800363e:	4621      	mov	r1, r4
 8003640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003644:	4621      	mov	r1, r4
 8003646:	028a      	lsls	r2, r1, #10
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003650:	2200      	movs	r2, #0
 8003652:	673b      	str	r3, [r7, #112]	@ 0x70
 8003654:	677a      	str	r2, [r7, #116]	@ 0x74
 8003656:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800365a:	f7fd fac5 	bl	8000be8 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4613      	mov	r3, r2
 8003664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003668:	4b41      	ldr	r3, [pc, #260]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x354>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	3301      	adds	r3, #1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800367a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800367e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800368a:	e0eb      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800368c:	4b38      	ldr	r3, [pc, #224]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x354>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003694:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003698:	4b35      	ldr	r3, [pc, #212]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x354>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d06b      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a4:	4b32      	ldr	r3, [pc, #200]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x354>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	2200      	movs	r2, #0
 80036ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80036b8:	2300      	movs	r3, #0
 80036ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80036bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80036c0:	4622      	mov	r2, r4
 80036c2:	462b      	mov	r3, r5
 80036c4:	f04f 0000 	mov.w	r0, #0
 80036c8:	f04f 0100 	mov.w	r1, #0
 80036cc:	0159      	lsls	r1, r3, #5
 80036ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d2:	0150      	lsls	r0, r2, #5
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4621      	mov	r1, r4
 80036da:	1a51      	subs	r1, r2, r1
 80036dc:	61b9      	str	r1, [r7, #24]
 80036de:	4629      	mov	r1, r5
 80036e0:	eb63 0301 	sbc.w	r3, r3, r1
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80036f2:	4659      	mov	r1, fp
 80036f4:	018b      	lsls	r3, r1, #6
 80036f6:	4651      	mov	r1, sl
 80036f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036fc:	4651      	mov	r1, sl
 80036fe:	018a      	lsls	r2, r1, #6
 8003700:	4651      	mov	r1, sl
 8003702:	ebb2 0801 	subs.w	r8, r2, r1
 8003706:	4659      	mov	r1, fp
 8003708:	eb63 0901 	sbc.w	r9, r3, r1
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003718:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800371c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003720:	4690      	mov	r8, r2
 8003722:	4699      	mov	r9, r3
 8003724:	4623      	mov	r3, r4
 8003726:	eb18 0303 	adds.w	r3, r8, r3
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	462b      	mov	r3, r5
 800372e:	eb49 0303 	adc.w	r3, r9, r3
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003740:	4629      	mov	r1, r5
 8003742:	024b      	lsls	r3, r1, #9
 8003744:	4621      	mov	r1, r4
 8003746:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800374a:	4621      	mov	r1, r4
 800374c:	024a      	lsls	r2, r1, #9
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003756:	2200      	movs	r2, #0
 8003758:	65bb      	str	r3, [r7, #88]	@ 0x58
 800375a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800375c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003760:	f7fd fa42 	bl	8000be8 <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4613      	mov	r3, r2
 800376a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800376e:	e065      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x420>
 8003770:	40023800 	.word	0x40023800
 8003774:	00f42400 	.word	0x00f42400
 8003778:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377c:	4b3d      	ldr	r3, [pc, #244]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x458>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	099b      	lsrs	r3, r3, #6
 8003782:	2200      	movs	r2, #0
 8003784:	4618      	mov	r0, r3
 8003786:	4611      	mov	r1, r2
 8003788:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800378c:	653b      	str	r3, [r7, #80]	@ 0x50
 800378e:	2300      	movs	r3, #0
 8003790:	657b      	str	r3, [r7, #84]	@ 0x54
 8003792:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003796:	4642      	mov	r2, r8
 8003798:	464b      	mov	r3, r9
 800379a:	f04f 0000 	mov.w	r0, #0
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	0159      	lsls	r1, r3, #5
 80037a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a8:	0150      	lsls	r0, r2, #5
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4641      	mov	r1, r8
 80037b0:	1a51      	subs	r1, r2, r1
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	4649      	mov	r1, r9
 80037b6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80037c8:	4659      	mov	r1, fp
 80037ca:	018b      	lsls	r3, r1, #6
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d2:	4651      	mov	r1, sl
 80037d4:	018a      	lsls	r2, r1, #6
 80037d6:	4651      	mov	r1, sl
 80037d8:	1a54      	subs	r4, r2, r1
 80037da:	4659      	mov	r1, fp
 80037dc:	eb63 0501 	sbc.w	r5, r3, r1
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	00eb      	lsls	r3, r5, #3
 80037ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ee:	00e2      	lsls	r2, r4, #3
 80037f0:	4614      	mov	r4, r2
 80037f2:	461d      	mov	r5, r3
 80037f4:	4643      	mov	r3, r8
 80037f6:	18e3      	adds	r3, r4, r3
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	464b      	mov	r3, r9
 80037fc:	eb45 0303 	adc.w	r3, r5, r3
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800380e:	4629      	mov	r1, r5
 8003810:	028b      	lsls	r3, r1, #10
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003818:	4621      	mov	r1, r4
 800381a:	028a      	lsls	r2, r1, #10
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003824:	2200      	movs	r2, #0
 8003826:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003828:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800382a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800382e:	f7fd f9db 	bl	8000be8 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4613      	mov	r3, r2
 8003838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800383c:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x458>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	0f1b      	lsrs	r3, r3, #28
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800384a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800384e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800385a:	e003      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800385c:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x45c>)
 800385e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003862:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003868:	4618      	mov	r0, r3
 800386a:	37b8      	adds	r7, #184	@ 0xb8
 800386c:	46bd      	mov	sp, r7
 800386e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	00f42400 	.word	0x00f42400

0800387c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e28d      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8083 	beq.w	80039a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800389c:	4b94      	ldr	r3, [pc, #592]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d019      	beq.n	80038dc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038a8:	4b91      	ldr	r3, [pc, #580]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 030c 	and.w	r3, r3, #12
        || \
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038b4:	4b8e      	ldr	r3, [pc, #568]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038c0:	d00c      	beq.n	80038dc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c2:	4b8b      	ldr	r3, [pc, #556]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d112      	bne.n	80038f4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ce:	4b88      	ldr	r3, [pc, #544]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038da:	d10b      	bne.n	80038f4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	4b84      	ldr	r3, [pc, #528]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d05b      	beq.n	80039a0 <HAL_RCC_OscConfig+0x124>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d157      	bne.n	80039a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e25a      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fc:	d106      	bne.n	800390c <HAL_RCC_OscConfig+0x90>
 80038fe:	4b7c      	ldr	r3, [pc, #496]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7b      	ldr	r2, [pc, #492]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e01d      	b.n	8003948 <HAL_RCC_OscConfig+0xcc>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0xb4>
 8003916:	4b76      	ldr	r3, [pc, #472]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a75      	ldr	r2, [pc, #468]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 800391c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b73      	ldr	r3, [pc, #460]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a72      	ldr	r2, [pc, #456]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0xcc>
 8003930:	4b6f      	ldr	r3, [pc, #444]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6e      	ldr	r2, [pc, #440]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	4b6c      	ldr	r3, [pc, #432]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6b      	ldr	r2, [pc, #428]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d013      	beq.n	8003978 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe f8f8 	bl	8001b44 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003958:	f7fe f8f4 	bl	8001b44 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e21f      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	4b61      	ldr	r3, [pc, #388]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0xdc>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe f8e4 	bl	8001b44 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003980:	f7fe f8e0 	bl	8001b44 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e20b      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	4b57      	ldr	r3, [pc, #348]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x104>
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d06f      	beq.n	8003a8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039ae:	4b50      	ldr	r3, [pc, #320]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d017      	beq.n	80039ea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039ba:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
        || \
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d105      	bne.n	80039d2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039c6:	4b4a      	ldr	r3, [pc, #296]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d2:	4b47      	ldr	r3, [pc, #284]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d11c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039de:	4b44      	ldr	r3, [pc, #272]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d116      	bne.n	8003a18 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ea:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_RCC_OscConfig+0x186>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e1d3      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a02:	4b3b      	ldr	r3, [pc, #236]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4937      	ldr	r1, [pc, #220]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	e03a      	b.n	8003a8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a20:	4b34      	ldr	r3, [pc, #208]	@ (8003af4 <HAL_RCC_OscConfig+0x278>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fe f88d 	bl	8001b44 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2e:	f7fe f889 	bl	8001b44 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1b4      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	4b2b      	ldr	r3, [pc, #172]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4c:	4b28      	ldr	r3, [pc, #160]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4925      	ldr	r1, [pc, #148]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
 8003a60:	e015      	b.n	8003a8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a62:	4b24      	ldr	r3, [pc, #144]	@ (8003af4 <HAL_RCC_OscConfig+0x278>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe f86c 	bl	8001b44 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a70:	f7fe f868 	bl	8001b44 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e193      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	4b1b      	ldr	r3, [pc, #108]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d036      	beq.n	8003b08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa2:	4b15      	ldr	r3, [pc, #84]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fe f84c 	bl	8001b44 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7fe f848 	bl	8001b44 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e173      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x234>
 8003ace:	e01b      	b.n	8003b08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad0:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <HAL_RCC_OscConfig+0x27c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fe f835 	bl	8001b44 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003adc:	e00e      	b.n	8003afc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ade:	f7fe f831 	bl	8001b44 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d907      	bls.n	8003afc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e15c      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
 8003af0:	40023800 	.word	0x40023800
 8003af4:	42470000 	.word	0x42470000
 8003af8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afc:	4b8a      	ldr	r3, [pc, #552]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ea      	bne.n	8003ade <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8097 	beq.w	8003c44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1a:	4b83      	ldr	r3, [pc, #524]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10f      	bne.n	8003b46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b36:	4b7c      	ldr	r3, [pc, #496]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b46:	4b79      	ldr	r3, [pc, #484]	@ (8003d2c <HAL_RCC_OscConfig+0x4b0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d118      	bne.n	8003b84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b52:	4b76      	ldr	r3, [pc, #472]	@ (8003d2c <HAL_RCC_OscConfig+0x4b0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a75      	ldr	r2, [pc, #468]	@ (8003d2c <HAL_RCC_OscConfig+0x4b0>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fff1 	bl	8001b44 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b66:	f7fd ffed 	bl	8001b44 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e118      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	4b6c      	ldr	r3, [pc, #432]	@ (8003d2c <HAL_RCC_OscConfig+0x4b0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCC_OscConfig+0x31e>
 8003b8c:	4b66      	ldr	r3, [pc, #408]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b90:	4a65      	ldr	r2, [pc, #404]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b98:	e01c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x358>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x340>
 8003ba2:	4b61      	ldr	r3, [pc, #388]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	4a60      	ldr	r2, [pc, #384]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bae:	4b5e      	ldr	r3, [pc, #376]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb2:	4a5d      	ldr	r2, [pc, #372]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCC_OscConfig+0x358>
 8003bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc0:	4a59      	ldr	r2, [pc, #356]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc8:	4b57      	ldr	r3, [pc, #348]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bcc:	4a56      	ldr	r2, [pc, #344]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003bce:	f023 0304 	bic.w	r3, r3, #4
 8003bd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d015      	beq.n	8003c08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fd ffb2 	bl	8001b44 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be4:	f7fd ffae 	bl	8001b44 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e0d7      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0ee      	beq.n	8003be4 <HAL_RCC_OscConfig+0x368>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd ff9c 	bl	8001b44 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7fd ff98 	bl	8001b44 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e0c1      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c26:	4b40      	ldr	r3, [pc, #256]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1ee      	bne.n	8003c10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d105      	bne.n	8003c44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c38:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80ad 	beq.w	8003da8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c4e:	4b36      	ldr	r3, [pc, #216]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d060      	beq.n	8003d1c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d145      	bne.n	8003cee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c62:	4b33      	ldr	r3, [pc, #204]	@ (8003d30 <HAL_RCC_OscConfig+0x4b4>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd ff6c 	bl	8001b44 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fd ff68 	bl	8001b44 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e093      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	4b29      	ldr	r3, [pc, #164]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	019b      	lsls	r3, r3, #6
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	061b      	lsls	r3, r3, #24
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	071b      	lsls	r3, r3, #28
 8003cba:	491b      	ldr	r1, [pc, #108]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <HAL_RCC_OscConfig+0x4b4>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc6:	f7fd ff3d 	bl	8001b44 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cce:	f7fd ff39 	bl	8001b44 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e064      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce0:	4b11      	ldr	r3, [pc, #68]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x452>
 8003cec:	e05c      	b.n	8003da8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <HAL_RCC_OscConfig+0x4b4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd ff26 	bl	8001b44 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fd ff22 	bl	8001b44 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e04d      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_RCC_OscConfig+0x4ac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x480>
 8003d1a:	e045      	b.n	8003da8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e040      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d34:	4b1f      	ldr	r3, [pc, #124]	@ (8003db4 <HAL_RCC_OscConfig+0x538>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d030      	beq.n	8003da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d129      	bne.n	8003da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d122      	bne.n	8003da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d64:	4013      	ands	r3, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d119      	bne.n	8003da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d10f      	bne.n	8003da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800

08003db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e041      	b.n	8003e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f839 	bl	8003e56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 f9c0 	bl	800417c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d001      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e04e      	b.n	8003f22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d022      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x80>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eae:	d01d      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x80>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xc8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x80>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x80>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f3c <HAL_TIM_Base_Start_IT+0xd0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x80>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f40 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x80>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a19      	ldr	r2, [pc, #100]	@ (8003f44 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x80>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a18      	ldr	r2, [pc, #96]	@ (8003f48 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b06      	cmp	r3, #6
 8003efc:	d010      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	e007      	b.n	8003f20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00
 8003f40:	40010400 	.word	0x40010400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40001800 	.word	0x40001800

08003f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d020      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0202 	mvn.w	r2, #2
 8003f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8d2 	bl	8004140 <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8c4 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8d5 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d020      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0204 	mvn.w	r2, #4
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8ac 	bl	8004140 <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f89e 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8af 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d020      	beq.n	8004048 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0208 	mvn.w	r2, #8
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f886 	bl	8004140 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f878 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f889 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d020      	beq.n	8004094 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0210 	mvn.w	r2, #16
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2208      	movs	r2, #8
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f860 	bl	8004140 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f852 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f863 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00c      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0201 	mvn.w	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fd fa5e 	bl	8001574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00c      	beq.n	80040dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f900 	bl	80042dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00c      	beq.n	8004100 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f834 	bl	8004168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0220 	mvn.w	r2, #32
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f8d2 	bl	80042c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a43      	ldr	r2, [pc, #268]	@ (800429c <TIM_Base_SetConfig+0x120>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <TIM_Base_SetConfig+0x40>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419a:	d00f      	beq.n	80041bc <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a40      	ldr	r2, [pc, #256]	@ (80042a0 <TIM_Base_SetConfig+0x124>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00b      	beq.n	80041bc <TIM_Base_SetConfig+0x40>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a3f      	ldr	r2, [pc, #252]	@ (80042a4 <TIM_Base_SetConfig+0x128>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_Base_SetConfig+0x40>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a3e      	ldr	r2, [pc, #248]	@ (80042a8 <TIM_Base_SetConfig+0x12c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0x40>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a3d      	ldr	r2, [pc, #244]	@ (80042ac <TIM_Base_SetConfig+0x130>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d108      	bne.n	80041ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a32      	ldr	r2, [pc, #200]	@ (800429c <TIM_Base_SetConfig+0x120>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02b      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d027      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2f      	ldr	r2, [pc, #188]	@ (80042a0 <TIM_Base_SetConfig+0x124>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d023      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a2e      	ldr	r2, [pc, #184]	@ (80042a4 <TIM_Base_SetConfig+0x128>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01f      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a2d      	ldr	r2, [pc, #180]	@ (80042a8 <TIM_Base_SetConfig+0x12c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d01b      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2c      	ldr	r2, [pc, #176]	@ (80042ac <TIM_Base_SetConfig+0x130>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d017      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2b      	ldr	r2, [pc, #172]	@ (80042b0 <TIM_Base_SetConfig+0x134>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2a      	ldr	r2, [pc, #168]	@ (80042b4 <TIM_Base_SetConfig+0x138>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00f      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a29      	ldr	r2, [pc, #164]	@ (80042b8 <TIM_Base_SetConfig+0x13c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00b      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a28      	ldr	r2, [pc, #160]	@ (80042bc <TIM_Base_SetConfig+0x140>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d007      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a27      	ldr	r2, [pc, #156]	@ (80042c0 <TIM_Base_SetConfig+0x144>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d003      	beq.n	800422e <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a26      	ldr	r2, [pc, #152]	@ (80042c4 <TIM_Base_SetConfig+0x148>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d108      	bne.n	8004240 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a0e      	ldr	r2, [pc, #56]	@ (800429c <TIM_Base_SetConfig+0x120>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_Base_SetConfig+0xf2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a10      	ldr	r2, [pc, #64]	@ (80042ac <TIM_Base_SetConfig+0x130>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d103      	bne.n	8004276 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f043 0204 	orr.w	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]
}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40010400 	.word	0x40010400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800
 80042bc:	40001800 	.word	0x40001800
 80042c0:	40001c00 	.word	0x40001c00
 80042c4:	40002000 	.word	0x40002000

080042c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e042      	b.n	8004388 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fd f9fc 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	@ 0x24
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f973 	bl	8004620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	@ 0x28
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d175      	bne.n	800449c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_UART_Transmit+0x2c>
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e06e      	b.n	800449e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2221      	movs	r2, #33	@ 0x21
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ce:	f7fd fbb9 	bl	8001b44 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	88fa      	ldrh	r2, [r7, #6]
 80043de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e8:	d108      	bne.n	80043fc <HAL_UART_Transmit+0x6c>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	e003      	b.n	8004404 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004404:	e02e      	b.n	8004464 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	2180      	movs	r1, #128	@ 0x80
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f848 	bl	80044a6 <UART_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e03a      	b.n	800449e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	3302      	adds	r3, #2
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e007      	b.n	8004456 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	3301      	adds	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1cb      	bne.n	8004406 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2200      	movs	r2, #0
 8004476:	2140      	movs	r1, #64	@ 0x40
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f814 	bl	80044a6 <UART_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e006      	b.n	800449e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b086      	sub	sp, #24
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	4613      	mov	r3, r2
 80044b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b6:	e03b      	b.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044be:	d037      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c0:	f7fd fb40 	bl	8001b44 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	6a3a      	ldr	r2, [r7, #32]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d302      	bcc.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e03a      	b.n	8004550 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d023      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b80      	cmp	r3, #128	@ 0x80
 80044ec:	d020      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b40      	cmp	r3, #64	@ 0x40
 80044f2:	d01d      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d116      	bne.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f81d 	bl	8004558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2208      	movs	r2, #8
 8004522:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e00f      	b.n	8004550 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	bf0c      	ite	eq
 8004540:	2301      	moveq	r3, #1
 8004542:	2300      	movne	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	429a      	cmp	r2, r3
 800454c:	d0b4      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b095      	sub	sp, #84	@ 0x54
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004572:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004580:	643a      	str	r2, [r7, #64]	@ 0x40
 8004582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004586:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800458e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3314      	adds	r3, #20
 800459a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e5      	bne.n	8004594 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d119      	bne.n	8004604 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f023 0310 	bic.w	r3, r3, #16
 80045e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045f0:	61ba      	str	r2, [r7, #24]
 80045f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6979      	ldr	r1, [r7, #20]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	613b      	str	r3, [r7, #16]
   return(result);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e5      	bne.n	80045d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004612:	bf00      	nop
 8004614:	3754      	adds	r7, #84	@ 0x54
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004624:	b0c0      	sub	sp, #256	@ 0x100
 8004626:	af00      	add	r7, sp, #0
 8004628:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	68d9      	ldr	r1, [r3, #12]
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	ea40 0301 	orr.w	r3, r0, r1
 8004648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	431a      	orrs	r2, r3
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	431a      	orrs	r2, r3
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004678:	f021 010c 	bic.w	r1, r1, #12
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004686:	430b      	orrs	r3, r1
 8004688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469a:	6999      	ldr	r1, [r3, #24]
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	ea40 0301 	orr.w	r3, r0, r1
 80046a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4b8f      	ldr	r3, [pc, #572]	@ (80048ec <UART_SetConfig+0x2cc>)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d005      	beq.n	80046c0 <UART_SetConfig+0xa0>
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b8d      	ldr	r3, [pc, #564]	@ (80048f0 <UART_SetConfig+0x2d0>)
 80046bc:	429a      	cmp	r2, r3
 80046be:	d104      	bne.n	80046ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046c0:	f7fe fe66 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
 80046c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046c8:	e003      	b.n	80046d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ca:	f7fe fe4d 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 80046ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046dc:	f040 810c 	bne.w	80048f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046f2:	4622      	mov	r2, r4
 80046f4:	462b      	mov	r3, r5
 80046f6:	1891      	adds	r1, r2, r2
 80046f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046fa:	415b      	adcs	r3, r3
 80046fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004702:	4621      	mov	r1, r4
 8004704:	eb12 0801 	adds.w	r8, r2, r1
 8004708:	4629      	mov	r1, r5
 800470a:	eb43 0901 	adc.w	r9, r3, r1
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800471a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800471e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004722:	4690      	mov	r8, r2
 8004724:	4699      	mov	r9, r3
 8004726:	4623      	mov	r3, r4
 8004728:	eb18 0303 	adds.w	r3, r8, r3
 800472c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004730:	462b      	mov	r3, r5
 8004732:	eb49 0303 	adc.w	r3, r9, r3
 8004736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004746:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800474a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800474e:	460b      	mov	r3, r1
 8004750:	18db      	adds	r3, r3, r3
 8004752:	653b      	str	r3, [r7, #80]	@ 0x50
 8004754:	4613      	mov	r3, r2
 8004756:	eb42 0303 	adc.w	r3, r2, r3
 800475a:	657b      	str	r3, [r7, #84]	@ 0x54
 800475c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004764:	f7fc fa40 	bl	8000be8 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4b61      	ldr	r3, [pc, #388]	@ (80048f4 <UART_SetConfig+0x2d4>)
 800476e:	fba3 2302 	umull	r2, r3, r3, r2
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	011c      	lsls	r4, r3, #4
 8004776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004780:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004788:	4642      	mov	r2, r8
 800478a:	464b      	mov	r3, r9
 800478c:	1891      	adds	r1, r2, r2
 800478e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004790:	415b      	adcs	r3, r3
 8004792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004798:	4641      	mov	r1, r8
 800479a:	eb12 0a01 	adds.w	sl, r2, r1
 800479e:	4649      	mov	r1, r9
 80047a0:	eb43 0b01 	adc.w	fp, r3, r1
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047b8:	4692      	mov	sl, r2
 80047ba:	469b      	mov	fp, r3
 80047bc:	4643      	mov	r3, r8
 80047be:	eb1a 0303 	adds.w	r3, sl, r3
 80047c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047c6:	464b      	mov	r3, r9
 80047c8:	eb4b 0303 	adc.w	r3, fp, r3
 80047cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047e4:	460b      	mov	r3, r1
 80047e6:	18db      	adds	r3, r3, r3
 80047e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ea:	4613      	mov	r3, r2
 80047ec:	eb42 0303 	adc.w	r3, r2, r3
 80047f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047fa:	f7fc f9f5 	bl	8000be8 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4611      	mov	r1, r2
 8004804:	4b3b      	ldr	r3, [pc, #236]	@ (80048f4 <UART_SetConfig+0x2d4>)
 8004806:	fba3 2301 	umull	r2, r3, r3, r1
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2264      	movs	r2, #100	@ 0x64
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	1acb      	subs	r3, r1, r3
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800481a:	4b36      	ldr	r3, [pc, #216]	@ (80048f4 <UART_SetConfig+0x2d4>)
 800481c:	fba3 2302 	umull	r2, r3, r3, r2
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004828:	441c      	add	r4, r3
 800482a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800482e:	2200      	movs	r2, #0
 8004830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004834:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	1891      	adds	r1, r2, r2
 8004842:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004844:	415b      	adcs	r3, r3
 8004846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800484c:	4641      	mov	r1, r8
 800484e:	1851      	adds	r1, r2, r1
 8004850:	6339      	str	r1, [r7, #48]	@ 0x30
 8004852:	4649      	mov	r1, r9
 8004854:	414b      	adcs	r3, r1
 8004856:	637b      	str	r3, [r7, #52]	@ 0x34
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004864:	4659      	mov	r1, fp
 8004866:	00cb      	lsls	r3, r1, #3
 8004868:	4651      	mov	r1, sl
 800486a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800486e:	4651      	mov	r1, sl
 8004870:	00ca      	lsls	r2, r1, #3
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	4603      	mov	r3, r0
 8004878:	4642      	mov	r2, r8
 800487a:	189b      	adds	r3, r3, r2
 800487c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004880:	464b      	mov	r3, r9
 8004882:	460a      	mov	r2, r1
 8004884:	eb42 0303 	adc.w	r3, r2, r3
 8004888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004898:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800489c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048a0:	460b      	mov	r3, r1
 80048a2:	18db      	adds	r3, r3, r3
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048a6:	4613      	mov	r3, r2
 80048a8:	eb42 0303 	adc.w	r3, r2, r3
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80048b6:	f7fc f997 	bl	8000be8 <__aeabi_uldivmod>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <UART_SetConfig+0x2d4>)
 80048c0:	fba3 1302 	umull	r1, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	2164      	movs	r1, #100	@ 0x64
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	3332      	adds	r3, #50	@ 0x32
 80048d2:	4a08      	ldr	r2, [pc, #32]	@ (80048f4 <UART_SetConfig+0x2d4>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	f003 0207 	and.w	r2, r3, #7
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4422      	add	r2, r4
 80048e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048e8:	e106      	b.n	8004af8 <UART_SetConfig+0x4d8>
 80048ea:	bf00      	nop
 80048ec:	40011000 	.word	0x40011000
 80048f0:	40011400 	.word	0x40011400
 80048f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004902:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800490a:	4642      	mov	r2, r8
 800490c:	464b      	mov	r3, r9
 800490e:	1891      	adds	r1, r2, r2
 8004910:	6239      	str	r1, [r7, #32]
 8004912:	415b      	adcs	r3, r3
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24
 8004916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800491a:	4641      	mov	r1, r8
 800491c:	1854      	adds	r4, r2, r1
 800491e:	4649      	mov	r1, r9
 8004920:	eb43 0501 	adc.w	r5, r3, r1
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	00eb      	lsls	r3, r5, #3
 800492e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004932:	00e2      	lsls	r2, r4, #3
 8004934:	4614      	mov	r4, r2
 8004936:	461d      	mov	r5, r3
 8004938:	4643      	mov	r3, r8
 800493a:	18e3      	adds	r3, r4, r3
 800493c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004940:	464b      	mov	r3, r9
 8004942:	eb45 0303 	adc.w	r3, r5, r3
 8004946:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004956:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004966:	4629      	mov	r1, r5
 8004968:	008b      	lsls	r3, r1, #2
 800496a:	4621      	mov	r1, r4
 800496c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004970:	4621      	mov	r1, r4
 8004972:	008a      	lsls	r2, r1, #2
 8004974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004978:	f7fc f936 	bl	8000be8 <__aeabi_uldivmod>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4b60      	ldr	r3, [pc, #384]	@ (8004b04 <UART_SetConfig+0x4e4>)
 8004982:	fba3 2302 	umull	r2, r3, r3, r2
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	011c      	lsls	r4, r3, #4
 800498a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800498e:	2200      	movs	r2, #0
 8004990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004994:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800499c:	4642      	mov	r2, r8
 800499e:	464b      	mov	r3, r9
 80049a0:	1891      	adds	r1, r2, r2
 80049a2:	61b9      	str	r1, [r7, #24]
 80049a4:	415b      	adcs	r3, r3
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ac:	4641      	mov	r1, r8
 80049ae:	1851      	adds	r1, r2, r1
 80049b0:	6139      	str	r1, [r7, #16]
 80049b2:	4649      	mov	r1, r9
 80049b4:	414b      	adcs	r3, r1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c4:	4659      	mov	r1, fp
 80049c6:	00cb      	lsls	r3, r1, #3
 80049c8:	4651      	mov	r1, sl
 80049ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ce:	4651      	mov	r1, sl
 80049d0:	00ca      	lsls	r2, r1, #3
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	4603      	mov	r3, r0
 80049d8:	4642      	mov	r2, r8
 80049da:	189b      	adds	r3, r3, r2
 80049dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049e0:	464b      	mov	r3, r9
 80049e2:	460a      	mov	r2, r1
 80049e4:	eb42 0303 	adc.w	r3, r2, r3
 80049e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a04:	4649      	mov	r1, r9
 8004a06:	008b      	lsls	r3, r1, #2
 8004a08:	4641      	mov	r1, r8
 8004a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a0e:	4641      	mov	r1, r8
 8004a10:	008a      	lsls	r2, r1, #2
 8004a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a16:	f7fc f8e7 	bl	8000be8 <__aeabi_uldivmod>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4b38      	ldr	r3, [pc, #224]	@ (8004b04 <UART_SetConfig+0x4e4>)
 8004a22:	fba3 2301 	umull	r2, r3, r3, r1
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2264      	movs	r2, #100	@ 0x64
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	1acb      	subs	r3, r1, r3
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	3332      	adds	r3, #50	@ 0x32
 8004a34:	4a33      	ldr	r2, [pc, #204]	@ (8004b04 <UART_SetConfig+0x4e4>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a40:	441c      	add	r4, r3
 8004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a46:	2200      	movs	r2, #0
 8004a48:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	1891      	adds	r1, r2, r2
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	415b      	adcs	r3, r3
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a60:	4641      	mov	r1, r8
 8004a62:	1851      	adds	r1, r2, r1
 8004a64:	6039      	str	r1, [r7, #0]
 8004a66:	4649      	mov	r1, r9
 8004a68:	414b      	adcs	r3, r1
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a78:	4659      	mov	r1, fp
 8004a7a:	00cb      	lsls	r3, r1, #3
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a82:	4651      	mov	r1, sl
 8004a84:	00ca      	lsls	r2, r1, #3
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a92:	464b      	mov	r3, r9
 8004a94:	460a      	mov	r2, r1
 8004a96:	eb42 0303 	adc.w	r3, r2, r3
 8004a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aa6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	008b      	lsls	r3, r1, #2
 8004ab8:	4641      	mov	r1, r8
 8004aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004abe:	4641      	mov	r1, r8
 8004ac0:	008a      	lsls	r2, r1, #2
 8004ac2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ac6:	f7fc f88f 	bl	8000be8 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <UART_SetConfig+0x4e4>)
 8004ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	2164      	movs	r1, #100	@ 0x64
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	3332      	adds	r3, #50	@ 0x32
 8004ae2:	4a08      	ldr	r2, [pc, #32]	@ (8004b04 <UART_SetConfig+0x4e4>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	f003 020f 	and.w	r2, r3, #15
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4422      	add	r2, r4
 8004af6:	609a      	str	r2, [r3, #8]
}
 8004af8:	bf00      	nop
 8004afa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004afe:	46bd      	mov	sp, r7
 8004b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b04:	51eb851f 	.word	0x51eb851f

08004b08 <__NVIC_SetPriority>:
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	6039      	str	r1, [r7, #0]
 8004b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	db0a      	blt.n	8004b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	490c      	ldr	r1, [pc, #48]	@ (8004b54 <__NVIC_SetPriority+0x4c>)
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	0112      	lsls	r2, r2, #4
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b30:	e00a      	b.n	8004b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	4908      	ldr	r1, [pc, #32]	@ (8004b58 <__NVIC_SetPriority+0x50>)
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	3b04      	subs	r3, #4
 8004b40:	0112      	lsls	r2, r2, #4
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	440b      	add	r3, r1
 8004b46:	761a      	strb	r2, [r3, #24]
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	e000e100 	.word	0xe000e100
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <SysTick_Handler+0x1c>)
 8004b62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b64:	f001 ff34 	bl	80069d0 <xTaskGetSchedulerState>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d001      	beq.n	8004b72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b6e:	f002 fd2b 	bl	80075c8 <xPortSysTickHandler>
  }
}
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	e000e010 	.word	0xe000e010

08004b7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b80:	2100      	movs	r1, #0
 8004b82:	f06f 0004 	mvn.w	r0, #4
 8004b86:	f7ff ffbf 	bl	8004b08 <__NVIC_SetPriority>
#endif
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b96:	f3ef 8305 	mrs	r3, IPSR
 8004b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ba2:	f06f 0305 	mvn.w	r3, #5
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	e00c      	b.n	8004bc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004baa:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <osKernelInitialize+0x44>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d105      	bne.n	8004bbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004bb2:	4b08      	ldr	r3, [pc, #32]	@ (8004bd4 <osKernelInitialize+0x44>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	e002      	b.n	8004bc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bc4:	687b      	ldr	r3, [r7, #4]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000334 	.word	0x20000334

08004bd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bde:	f3ef 8305 	mrs	r3, IPSR
 8004be2:	603b      	str	r3, [r7, #0]
  return(result);
 8004be4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004bea:	f06f 0305 	mvn.w	r3, #5
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	e010      	b.n	8004c14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <osKernelStart+0x48>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d109      	bne.n	8004c0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004bfa:	f7ff ffbf 	bl	8004b7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004bfe:	4b08      	ldr	r3, [pc, #32]	@ (8004c20 <osKernelStart+0x48>)
 8004c00:	2202      	movs	r2, #2
 8004c02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c04:	f001 fa80 	bl	8006108 <vTaskStartScheduler>
      stat = osOK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	e002      	b.n	8004c14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c14:	687b      	ldr	r3, [r7, #4]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000334 	.word	0x20000334

08004c24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08e      	sub	sp, #56	@ 0x38
 8004c28:	af04      	add	r7, sp, #16
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c34:	f3ef 8305 	mrs	r3, IPSR
 8004c38:	617b      	str	r3, [r7, #20]
  return(result);
 8004c3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d17e      	bne.n	8004d3e <osThreadNew+0x11a>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d07b      	beq.n	8004d3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c46:	2380      	movs	r3, #128	@ 0x80
 8004c48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c4a:	2318      	movs	r3, #24
 8004c4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d045      	beq.n	8004cea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <osThreadNew+0x48>
        name = attr->name;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <osThreadNew+0x6e>
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b38      	cmp	r3, #56	@ 0x38
 8004c84:	d805      	bhi.n	8004c92 <osThreadNew+0x6e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <osThreadNew+0x72>
        return (NULL);
 8004c92:	2300      	movs	r3, #0
 8004c94:	e054      	b.n	8004d40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	089b      	lsrs	r3, r3, #2
 8004ca4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00e      	beq.n	8004ccc <osThreadNew+0xa8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2ba7      	cmp	r3, #167	@ 0xa7
 8004cb4:	d90a      	bls.n	8004ccc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <osThreadNew+0xa8>
        mem = 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	e010      	b.n	8004cee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10c      	bne.n	8004cee <osThreadNew+0xca>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d108      	bne.n	8004cee <osThreadNew+0xca>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <osThreadNew+0xca>
          mem = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	e001      	b.n	8004cee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d110      	bne.n	8004d16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cfc:	9202      	str	r2, [sp, #8]
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6a3a      	ldr	r2, [r7, #32]
 8004d08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f001 f808 	bl	8005d20 <xTaskCreateStatic>
 8004d10:	4603      	mov	r3, r0
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	e013      	b.n	8004d3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d110      	bne.n	8004d3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	f107 0310 	add.w	r3, r7, #16
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f001 f856 	bl	8005de0 <xTaskCreate>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d001      	beq.n	8004d3e <osThreadNew+0x11a>
            hTask = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d3e:	693b      	ldr	r3, [r7, #16]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3728      	adds	r7, #40	@ 0x28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d50:	f3ef 8305 	mrs	r3, IPSR
 8004d54:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <osDelay+0x1c>
    stat = osErrorISR;
 8004d5c:	f06f 0305 	mvn.w	r3, #5
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e007      	b.n	8004d74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 f994 	bl	800609c <vTaskDelay>
    }
  }

  return (stat);
 8004d74:	68fb      	ldr	r3, [r7, #12]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b08a      	sub	sp, #40	@ 0x28
 8004d82:	af02      	add	r7, sp, #8
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d8e:	f3ef 8305 	mrs	r3, IPSR
 8004d92:	613b      	str	r3, [r7, #16]
  return(result);
 8004d94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d15f      	bne.n	8004e5a <osMessageQueueNew+0xdc>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d05c      	beq.n	8004e5a <osMessageQueueNew+0xdc>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d059      	beq.n	8004e5a <osMessageQueueNew+0xdc>
    mem = -1;
 8004da6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004daa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d029      	beq.n	8004e06 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d012      	beq.n	8004de0 <osMessageQueueNew+0x62>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b4f      	cmp	r3, #79	@ 0x4f
 8004dc0:	d90e      	bls.n	8004de0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <osMessageQueueNew+0x62>
        mem = 1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e014      	b.n	8004e0a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d110      	bne.n	8004e0a <osMessageQueueNew+0x8c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10c      	bne.n	8004e0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d108      	bne.n	8004e0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <osMessageQueueNew+0x8c>
          mem = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	e001      	b.n	8004e0a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10b      	bne.n	8004e28 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2100      	movs	r1, #0
 8004e1a:	9100      	str	r1, [sp, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fa30 	bl	8005284 <xQueueGenericCreateStatic>
 8004e24:	61f8      	str	r0, [r7, #28]
 8004e26:	e008      	b.n	8004e3a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d105      	bne.n	8004e3a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 faa3 	bl	800537e <xQueueGenericCreate>
 8004e38:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00c      	beq.n	8004e5a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e001      	b.n	8004e52 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004e52:	6979      	ldr	r1, [r7, #20]
 8004e54:	69f8      	ldr	r0, [r7, #28]
 8004e56:	f000 ff05 	bl	8005c64 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004e5a:	69fb      	ldr	r3, [r7, #28]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3720      	adds	r7, #32
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e7c:	f3ef 8305 	mrs	r3, IPSR
 8004e80:	617b      	str	r3, [r7, #20]
  return(result);
 8004e82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d028      	beq.n	8004eda <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <osMessageQueuePut+0x36>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <osMessageQueuePut+0x36>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004e9a:	f06f 0303 	mvn.w	r3, #3
 8004e9e:	61fb      	str	r3, [r7, #28]
 8004ea0:	e038      	b.n	8004f14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004ea6:	f107 0210 	add.w	r2, r7, #16
 8004eaa:	2300      	movs	r3, #0
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	69b8      	ldr	r0, [r7, #24]
 8004eb0:	f000 fbc6 	bl	8005640 <xQueueGenericSendFromISR>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d003      	beq.n	8004ec2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004eba:	f06f 0302 	mvn.w	r3, #2
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	e028      	b.n	8004f14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d025      	beq.n	8004f14 <osMessageQueuePut+0xb0>
 8004ec8:	4b15      	ldr	r3, [pc, #84]	@ (8004f20 <osMessageQueuePut+0xbc>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	e01c      	b.n	8004f14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <osMessageQueuePut+0x82>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004ee6:	f06f 0303 	mvn.w	r3, #3
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	e012      	b.n	8004f14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004eee:	2300      	movs	r3, #0
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	69b8      	ldr	r0, [r7, #24]
 8004ef6:	f000 faa1 	bl	800543c <xQueueGenericSend>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d009      	beq.n	8004f14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004f06:	f06f 0301 	mvn.w	r3, #1
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	e002      	b.n	8004f14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004f0e:	f06f 0302 	mvn.w	r3, #2
 8004f12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004f14:	69fb      	ldr	r3, [r7, #28]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f3a:	f3ef 8305 	mrs	r3, IPSR
 8004f3e:	617b      	str	r3, [r7, #20]
  return(result);
 8004f40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d028      	beq.n	8004f98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <osMessageQueueGet+0x34>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <osMessageQueueGet+0x34>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004f58:	f06f 0303 	mvn.w	r3, #3
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	e037      	b.n	8004fd0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004f64:	f107 0310 	add.w	r3, r7, #16
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	69b8      	ldr	r0, [r7, #24]
 8004f6e:	f000 fce7 	bl	8005940 <xQueueReceiveFromISR>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d003      	beq.n	8004f80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004f78:	f06f 0302 	mvn.w	r3, #2
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	e027      	b.n	8004fd0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d024      	beq.n	8004fd0 <osMessageQueueGet+0xac>
 8004f86:	4b15      	ldr	r3, [pc, #84]	@ (8004fdc <osMessageQueueGet+0xb8>)
 8004f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	e01b      	b.n	8004fd0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <osMessageQueueGet+0x80>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004fa4:	f06f 0303 	mvn.w	r3, #3
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	e011      	b.n	8004fd0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	69b8      	ldr	r0, [r7, #24]
 8004fb2:	f000 fbe3 	bl	800577c <xQueueReceive>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d009      	beq.n	8004fd0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004fc2:	f06f 0301 	mvn.w	r3, #1
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	e002      	b.n	8004fd0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004fca:	f06f 0302 	mvn.w	r3, #2
 8004fce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004fd0:	69fb      	ldr	r3, [r7, #28]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	e000ed04 	.word	0xe000ed04

08004fe0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a07      	ldr	r2, [pc, #28]	@ (800500c <vApplicationGetIdleTaskMemory+0x2c>)
 8004ff0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4a06      	ldr	r2, [pc, #24]	@ (8005010 <vApplicationGetIdleTaskMemory+0x30>)
 8004ff6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2280      	movs	r2, #128	@ 0x80
 8004ffc:	601a      	str	r2, [r3, #0]
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000338 	.word	0x20000338
 8005010:	200003e0 	.word	0x200003e0

08005014 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a07      	ldr	r2, [pc, #28]	@ (8005040 <vApplicationGetTimerTaskMemory+0x2c>)
 8005024:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4a06      	ldr	r2, [pc, #24]	@ (8005044 <vApplicationGetTimerTaskMemory+0x30>)
 800502a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	200005e0 	.word	0x200005e0
 8005044:	20000688 	.word	0x20000688

08005048 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f103 0208 	add.w	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005060:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f103 0208 	add.w	r2, r3, #8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f103 0208 	add.w	r2, r3, #8
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005100:	d103      	bne.n	800510a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e00c      	b.n	8005124 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3308      	adds	r3, #8
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e002      	b.n	8005118 <vListInsert+0x2e>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	429a      	cmp	r2, r3
 8005122:	d2f6      	bcs.n	8005112 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6892      	ldr	r2, [r2, #8]
 8005172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6852      	ldr	r2, [r2, #4]
 800517c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	429a      	cmp	r2, r3
 8005186:	d103      	bne.n	8005190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	1e5a      	subs	r2, r3, #1
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051dc:	f002 f964 	bl	80074a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520c:	3b01      	subs	r3, #1
 800520e:	68f9      	ldr	r1, [r7, #12]
 8005210:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	441a      	add	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	22ff      	movs	r2, #255	@ 0xff
 8005220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	22ff      	movs	r2, #255	@ 0xff
 8005228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d114      	bne.n	800525c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01a      	beq.n	8005270 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3310      	adds	r3, #16
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fa00 	bl	8006644 <xTaskRemoveFromEventList>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d012      	beq.n	8005270 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800524a:	4b0d      	ldr	r3, [pc, #52]	@ (8005280 <xQueueGenericReset+0xd0>)
 800524c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	e009      	b.n	8005270 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3310      	adds	r3, #16
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fef1 	bl	8005048 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3324      	adds	r3, #36	@ 0x24
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff feec 	bl	8005048 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005270:	f002 f94c 	bl	800750c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005274:	2301      	movs	r3, #1
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08e      	sub	sp, #56	@ 0x38
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10b      	bne.n	80052b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	e7fd      	b.n	80052ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	e7fd      	b.n	80052ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <xQueueGenericCreateStatic+0x56>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <xQueueGenericCreateStatic+0x5a>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <xQueueGenericCreateStatic+0x5c>
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10b      	bne.n	80052fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	623b      	str	r3, [r7, #32]
}
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	e7fd      	b.n	80052f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <xQueueGenericCreateStatic+0x84>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <xQueueGenericCreateStatic+0x88>
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <xQueueGenericCreateStatic+0x8a>
 800530c:	2300      	movs	r3, #0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10b      	bne.n	800532a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	61fb      	str	r3, [r7, #28]
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	e7fd      	b.n	8005326 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800532a:	2350      	movs	r3, #80	@ 0x50
 800532c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b50      	cmp	r3, #80	@ 0x50
 8005332:	d00b      	beq.n	800534c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	61bb      	str	r3, [r7, #24]
}
 8005346:	bf00      	nop
 8005348:	bf00      	nop
 800534a:	e7fd      	b.n	8005348 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800534c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00d      	beq.n	8005374 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005360:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f840 	bl	80053f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005376:	4618      	mov	r0, r3
 8005378:	3730      	adds	r7, #48	@ 0x30
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800537e:	b580      	push	{r7, lr}
 8005380:	b08a      	sub	sp, #40	@ 0x28
 8005382:	af02      	add	r7, sp, #8
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10b      	bne.n	80053aa <xQueueGenericCreate+0x2c>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	613b      	str	r3, [r7, #16]
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	e7fd      	b.n	80053a6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	fb02 f303 	mul.w	r3, r2, r3
 80053b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	3350      	adds	r3, #80	@ 0x50
 80053b8:	4618      	mov	r0, r3
 80053ba:	f002 f997 	bl	80076ec <pvPortMalloc>
 80053be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d011      	beq.n	80053ea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	3350      	adds	r3, #80	@ 0x50
 80053ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053d8:	79fa      	ldrb	r2, [r7, #7]
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	4613      	mov	r3, r2
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f805 	bl	80053f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053ea:	69bb      	ldr	r3, [r7, #24]
	}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d103      	bne.n	8005410 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e002      	b.n	8005416 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005422:	2101      	movs	r1, #1
 8005424:	69b8      	ldr	r0, [r7, #24]
 8005426:	f7ff fec3 	bl	80051b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	78fa      	ldrb	r2, [r7, #3]
 800542e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08e      	sub	sp, #56	@ 0x38
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800544a:	2300      	movs	r3, #0
 800544c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10b      	bne.n	8005470 <xQueueGenericSend+0x34>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800546a:	bf00      	nop
 800546c:	bf00      	nop
 800546e:	e7fd      	b.n	800546c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d103      	bne.n	800547e <xQueueGenericSend+0x42>
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <xQueueGenericSend+0x46>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <xQueueGenericSend+0x48>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10b      	bne.n	80054a0 <xQueueGenericSend+0x64>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800549a:	bf00      	nop
 800549c:	bf00      	nop
 800549e:	e7fd      	b.n	800549c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d103      	bne.n	80054ae <xQueueGenericSend+0x72>
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <xQueueGenericSend+0x76>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <xQueueGenericSend+0x78>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10b      	bne.n	80054d0 <xQueueGenericSend+0x94>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	623b      	str	r3, [r7, #32]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054d0:	f001 fa7e 	bl	80069d0 <xTaskGetSchedulerState>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <xQueueGenericSend+0xa4>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <xQueueGenericSend+0xa8>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <xQueueGenericSend+0xaa>
 80054e4:	2300      	movs	r3, #0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <xQueueGenericSend+0xc6>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	61fb      	str	r3, [r7, #28]
}
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	e7fd      	b.n	80054fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005502:	f001 ffd1 	bl	80074a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550e:	429a      	cmp	r2, r3
 8005510:	d302      	bcc.n	8005518 <xQueueGenericSend+0xdc>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d129      	bne.n	800556c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800551e:	f000 fa91 	bl	8005a44 <prvCopyDataToQueue>
 8005522:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	d010      	beq.n	800554e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	3324      	adds	r3, #36	@ 0x24
 8005530:	4618      	mov	r0, r3
 8005532:	f001 f887 	bl	8006644 <xTaskRemoveFromEventList>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d013      	beq.n	8005564 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800553c:	4b3f      	ldr	r3, [pc, #252]	@ (800563c <xQueueGenericSend+0x200>)
 800553e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	e00a      	b.n	8005564 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800554e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d007      	beq.n	8005564 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005554:	4b39      	ldr	r3, [pc, #228]	@ (800563c <xQueueGenericSend+0x200>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005564:	f001 ffd2 	bl	800750c <vPortExitCritical>
				return pdPASS;
 8005568:	2301      	movs	r3, #1
 800556a:	e063      	b.n	8005634 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d103      	bne.n	800557a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005572:	f001 ffcb 	bl	800750c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005576:	2300      	movs	r3, #0
 8005578:	e05c      	b.n	8005634 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800557a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005580:	f107 0314 	add.w	r3, r7, #20
 8005584:	4618      	mov	r0, r3
 8005586:	f001 f8c1 	bl	800670c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800558a:	2301      	movs	r3, #1
 800558c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800558e:	f001 ffbd 	bl	800750c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005592:	f000 fe29 	bl	80061e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005596:	f001 ff87 	bl	80074a8 <vPortEnterCritical>
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055a0:	b25b      	sxtb	r3, r3
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055a6:	d103      	bne.n	80055b0 <xQueueGenericSend+0x174>
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055b6:	b25b      	sxtb	r3, r3
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055bc:	d103      	bne.n	80055c6 <xQueueGenericSend+0x18a>
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055c6:	f001 ffa1 	bl	800750c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ca:	1d3a      	adds	r2, r7, #4
 80055cc:	f107 0314 	add.w	r3, r7, #20
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f001 f8b0 	bl	8006738 <xTaskCheckForTimeOut>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d124      	bne.n	8005628 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055e0:	f000 fb28 	bl	8005c34 <prvIsQueueFull>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d018      	beq.n	800561c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	3310      	adds	r3, #16
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	4611      	mov	r1, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 ffd4 	bl	80065a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055fa:	f000 fab3 	bl	8005b64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055fe:	f000 fe01 	bl	8006204 <xTaskResumeAll>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	f47f af7c 	bne.w	8005502 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800560a:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <xQueueGenericSend+0x200>)
 800560c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	e772      	b.n	8005502 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800561c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800561e:	f000 faa1 	bl	8005b64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005622:	f000 fdef 	bl	8006204 <xTaskResumeAll>
 8005626:	e76c      	b.n	8005502 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800562a:	f000 fa9b 	bl	8005b64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800562e:	f000 fde9 	bl	8006204 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005632:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005634:	4618      	mov	r0, r3
 8005636:	3738      	adds	r7, #56	@ 0x38
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b090      	sub	sp, #64	@ 0x40
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <xQueueGenericSendFromISR+0x3e>
 8005676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <xQueueGenericSendFromISR+0x42>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <xQueueGenericSendFromISR+0x44>
 8005682:	2300      	movs	r3, #0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	e7fd      	b.n	800569c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d103      	bne.n	80056ae <xQueueGenericSendFromISR+0x6e>
 80056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <xQueueGenericSendFromISR+0x72>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <xQueueGenericSendFromISR+0x74>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	623b      	str	r3, [r7, #32]
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	e7fd      	b.n	80056cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056d0:	f001 ffca 	bl	8007668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056d4:	f3ef 8211 	mrs	r2, BASEPRI
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	61fa      	str	r2, [r7, #28]
 80056ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <xQueueGenericSendFromISR+0xc2>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d12f      	bne.n	8005762 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005708:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800570c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005718:	f000 f994 	bl	8005a44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800571c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005724:	d112      	bne.n	800574c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572a:	2b00      	cmp	r3, #0
 800572c:	d016      	beq.n	800575c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800572e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005730:	3324      	adds	r3, #36	@ 0x24
 8005732:	4618      	mov	r0, r3
 8005734:	f000 ff86 	bl	8006644 <xTaskRemoveFromEventList>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00e      	beq.n	800575c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	e007      	b.n	800575c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800574c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005750:	3301      	adds	r3, #1
 8005752:	b2db      	uxtb	r3, r3
 8005754:	b25a      	sxtb	r2, r3
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800575c:	2301      	movs	r3, #1
 800575e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005760:	e001      	b.n	8005766 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005762:	2300      	movs	r3, #0
 8005764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005768:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005770:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005774:	4618      	mov	r0, r3
 8005776:	3740      	adds	r7, #64	@ 0x40
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08c      	sub	sp, #48	@ 0x30
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005788:	2300      	movs	r3, #0
 800578a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <xQueueReceive+0x32>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	623b      	str	r3, [r7, #32]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d103      	bne.n	80057bc <xQueueReceive+0x40>
 80057b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <xQueueReceive+0x44>
 80057bc:	2301      	movs	r3, #1
 80057be:	e000      	b.n	80057c2 <xQueueReceive+0x46>
 80057c0:	2300      	movs	r3, #0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10b      	bne.n	80057de <xQueueReceive+0x62>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	61fb      	str	r3, [r7, #28]
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	e7fd      	b.n	80057da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057de:	f001 f8f7 	bl	80069d0 <xTaskGetSchedulerState>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <xQueueReceive+0x72>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <xQueueReceive+0x76>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <xQueueReceive+0x78>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <xQueueReceive+0x94>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	61bb      	str	r3, [r7, #24]
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	e7fd      	b.n	800580c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005810:	f001 fe4a 	bl	80074a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01f      	beq.n	8005860 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005824:	f000 f978 	bl	8005b18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	1e5a      	subs	r2, r3, #1
 800582c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00f      	beq.n	8005858 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	3310      	adds	r3, #16
 800583c:	4618      	mov	r0, r3
 800583e:	f000 ff01 	bl	8006644 <xTaskRemoveFromEventList>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005848:	4b3c      	ldr	r3, [pc, #240]	@ (800593c <xQueueReceive+0x1c0>)
 800584a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005858:	f001 fe58 	bl	800750c <vPortExitCritical>
				return pdPASS;
 800585c:	2301      	movs	r3, #1
 800585e:	e069      	b.n	8005934 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005866:	f001 fe51 	bl	800750c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800586a:	2300      	movs	r3, #0
 800586c:	e062      	b.n	8005934 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800586e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005874:	f107 0310 	add.w	r3, r7, #16
 8005878:	4618      	mov	r0, r3
 800587a:	f000 ff47 	bl	800670c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800587e:	2301      	movs	r3, #1
 8005880:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005882:	f001 fe43 	bl	800750c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005886:	f000 fcaf 	bl	80061e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800588a:	f001 fe0d 	bl	80074a8 <vPortEnterCritical>
 800588e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005890:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005894:	b25b      	sxtb	r3, r3
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800589a:	d103      	bne.n	80058a4 <xQueueReceive+0x128>
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058aa:	b25b      	sxtb	r3, r3
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058b0:	d103      	bne.n	80058ba <xQueueReceive+0x13e>
 80058b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058ba:	f001 fe27 	bl	800750c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058be:	1d3a      	adds	r2, r7, #4
 80058c0:	f107 0310 	add.w	r3, r7, #16
 80058c4:	4611      	mov	r1, r2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 ff36 	bl	8006738 <xTaskCheckForTimeOut>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d123      	bne.n	800591a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058d4:	f000 f998 	bl	8005c08 <prvIsQueueEmpty>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d017      	beq.n	800590e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e0:	3324      	adds	r3, #36	@ 0x24
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fe5a 	bl	80065a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058ee:	f000 f939 	bl	8005b64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058f2:	f000 fc87 	bl	8006204 <xTaskResumeAll>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d189      	bne.n	8005810 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80058fc:	4b0f      	ldr	r3, [pc, #60]	@ (800593c <xQueueReceive+0x1c0>)
 80058fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	e780      	b.n	8005810 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800590e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005910:	f000 f928 	bl	8005b64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005914:	f000 fc76 	bl	8006204 <xTaskResumeAll>
 8005918:	e77a      	b.n	8005810 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800591a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800591c:	f000 f922 	bl	8005b64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005920:	f000 fc70 	bl	8006204 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005926:	f000 f96f 	bl	8005c08 <prvIsQueueEmpty>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	f43f af6f 	beq.w	8005810 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005932:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005934:	4618      	mov	r0, r3
 8005936:	3730      	adds	r7, #48	@ 0x30
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	e000ed04 	.word	0xe000ed04

08005940 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08e      	sub	sp, #56	@ 0x38
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10b      	bne.n	800596e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	623b      	str	r3, [r7, #32]
}
 8005968:	bf00      	nop
 800596a:	bf00      	nop
 800596c:	e7fd      	b.n	800596a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d103      	bne.n	800597c <xQueueReceiveFromISR+0x3c>
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <xQueueReceiveFromISR+0x40>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <xQueueReceiveFromISR+0x42>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	61fb      	str	r3, [r7, #28]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800599e:	f001 fe63 	bl	8007668 <vPortValidateInterruptPriority>
	__asm volatile
 80059a2:	f3ef 8211 	mrs	r2, BASEPRI
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	61ba      	str	r2, [r7, #24]
 80059b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80059ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d02f      	beq.n	8005a2a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059d8:	f000 f89e 	bl	8005b18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	1e5a      	subs	r2, r3, #1
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80059e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ec:	d112      	bne.n	8005a14 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d016      	beq.n	8005a24 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	3310      	adds	r3, #16
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fe22 	bl	8006644 <xTaskRemoveFromEventList>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e007      	b.n	8005a24 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a18:	3301      	adds	r3, #1
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	b25a      	sxtb	r2, r3
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005a24:	2301      	movs	r3, #1
 8005a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a28:	e001      	b.n	8005a2e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f383 8811 	msr	BASEPRI, r3
}
 8005a38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3738      	adds	r7, #56	@ 0x38
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10d      	bne.n	8005a7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d14d      	bne.n	8005b06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 ffcc 	bl	8006a0c <xTaskPriorityDisinherit>
 8005a74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	609a      	str	r2, [r3, #8]
 8005a7c:	e043      	b.n	8005b06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d119      	bne.n	8005ab8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6858      	ldr	r0, [r3, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	f002 fe81 	bl	8008796 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	441a      	add	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d32b      	bcc.n	8005b06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	e026      	b.n	8005b06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68d8      	ldr	r0, [r3, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	f002 fe67 	bl	8008796 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	425b      	negs	r3, r3
 8005ad2:	441a      	add	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d207      	bcs.n	8005af4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aec:	425b      	negs	r3, r3
 8005aee:	441a      	add	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d105      	bne.n	8005b06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005b0e:	697b      	ldr	r3, [r7, #20]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d018      	beq.n	8005b5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	441a      	add	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d303      	bcc.n	8005b4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68d9      	ldr	r1, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b54:	461a      	mov	r2, r3
 8005b56:	6838      	ldr	r0, [r7, #0]
 8005b58:	f002 fe1d 	bl	8008796 <memcpy>
	}
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b6c:	f001 fc9c 	bl	80074a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b78:	e011      	b.n	8005b9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d012      	beq.n	8005ba8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3324      	adds	r3, #36	@ 0x24
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fd5c 	bl	8006644 <xTaskRemoveFromEventList>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b92:	f000 fe35 	bl	8006800 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	dce9      	bgt.n	8005b7a <prvUnlockQueue+0x16>
 8005ba6:	e000      	b.n	8005baa <prvUnlockQueue+0x46>
					break;
 8005ba8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	22ff      	movs	r2, #255	@ 0xff
 8005bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005bb2:	f001 fcab 	bl	800750c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bb6:	f001 fc77 	bl	80074a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bc2:	e011      	b.n	8005be8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d012      	beq.n	8005bf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3310      	adds	r3, #16
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fd37 	bl	8006644 <xTaskRemoveFromEventList>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bdc:	f000 fe10 	bl	8006800 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	dce9      	bgt.n	8005bc4 <prvUnlockQueue+0x60>
 8005bf0:	e000      	b.n	8005bf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	22ff      	movs	r2, #255	@ 0xff
 8005bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005bfc:	f001 fc86 	bl	800750c <vPortExitCritical>
}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c10:	f001 fc4a 	bl	80074a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	e001      	b.n	8005c26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c26:	f001 fc71 	bl	800750c <vPortExitCritical>

	return xReturn;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c3c:	f001 fc34 	bl	80074a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d102      	bne.n	8005c52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	e001      	b.n	8005c56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c56:	f001 fc59 	bl	800750c <vPortExitCritical>

	return xReturn;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e014      	b.n	8005c9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c74:	4a0f      	ldr	r2, [pc, #60]	@ (8005cb4 <vQueueAddToRegistry+0x50>)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10b      	bne.n	8005c98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c80:	490c      	ldr	r1, [pc, #48]	@ (8005cb4 <vQueueAddToRegistry+0x50>)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb4 <vQueueAddToRegistry+0x50>)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4413      	add	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c96:	e006      	b.n	8005ca6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b07      	cmp	r3, #7
 8005ca2:	d9e7      	bls.n	8005c74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000a88 	.word	0x20000a88

08005cb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cc8:	f001 fbee 	bl	80074a8 <vPortEnterCritical>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cd2:	b25b      	sxtb	r3, r3
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cd8:	d103      	bne.n	8005ce2 <vQueueWaitForMessageRestricted+0x2a>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ce8:	b25b      	sxtb	r3, r3
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cee:	d103      	bne.n	8005cf8 <vQueueWaitForMessageRestricted+0x40>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cf8:	f001 fc08 	bl	800750c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	3324      	adds	r3, #36	@ 0x24
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fc6d 	bl	80065ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d12:	6978      	ldr	r0, [r7, #20]
 8005d14:	f7ff ff26 	bl	8005b64 <prvUnlockQueue>
	}
 8005d18:	bf00      	nop
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08e      	sub	sp, #56	@ 0x38
 8005d24:	af04      	add	r7, sp, #16
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	623b      	str	r3, [r7, #32]
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	e7fd      	b.n	8005d48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	61fb      	str	r3, [r7, #28]
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	e7fd      	b.n	8005d66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d6a:	23a8      	movs	r3, #168	@ 0xa8
 8005d6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2ba8      	cmp	r3, #168	@ 0xa8
 8005d72:	d00b      	beq.n	8005d8c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	61bb      	str	r3, [r7, #24]
}
 8005d86:	bf00      	nop
 8005d88:	bf00      	nop
 8005d8a:	e7fd      	b.n	8005d88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01e      	beq.n	8005dd2 <xTaskCreateStatic+0xb2>
 8005d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d01b      	beq.n	8005dd2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005da2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dac:	2300      	movs	r3, #0
 8005dae:	9303      	str	r3, [sp, #12]
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	9302      	str	r3, [sp, #8]
 8005db4:	f107 0314 	add.w	r3, r7, #20
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f851 	bl	8005e6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005dcc:	f000 f8f6 	bl	8005fbc <prvAddNewTaskToReadyList>
 8005dd0:	e001      	b.n	8005dd6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dd6:	697b      	ldr	r3, [r7, #20]
	}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3728      	adds	r7, #40	@ 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	@ 0x30
 8005de4:	af04      	add	r7, sp, #16
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fc79 	bl	80076ec <pvPortMalloc>
 8005dfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00e      	beq.n	8005e20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e02:	20a8      	movs	r0, #168	@ 0xa8
 8005e04:	f001 fc72 	bl	80076ec <pvPortMalloc>
 8005e08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e16:	e005      	b.n	8005e24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e18:	6978      	ldr	r0, [r7, #20]
 8005e1a:	f001 fd35 	bl	8007888 <vPortFree>
 8005e1e:	e001      	b.n	8005e24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d017      	beq.n	8005e5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e32:	88fa      	ldrh	r2, [r7, #6]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f80f 	bl	8005e6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e4e:	69f8      	ldr	r0, [r7, #28]
 8005e50:	f000 f8b4 	bl	8005fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e54:	2301      	movs	r3, #1
 8005e56:	61bb      	str	r3, [r7, #24]
 8005e58:	e002      	b.n	8005e60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e60:	69bb      	ldr	r3, [r7, #24]
	}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3720      	adds	r7, #32
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	461a      	mov	r2, r3
 8005e84:	21a5      	movs	r1, #165	@ 0xa5
 8005e86:	f002 fbb0 	bl	80085ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e94:	3b01      	subs	r3, #1
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f023 0307 	bic.w	r3, r3, #7
 8005ea2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00b      	beq.n	8005ec6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	617b      	str	r3, [r7, #20]
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	e7fd      	b.n	8005ec2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01f      	beq.n	8005f0c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	e012      	b.n	8005ef8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	7819      	ldrb	r1, [r3, #0]
 8005eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	3334      	adds	r3, #52	@ 0x34
 8005ee2:	460a      	mov	r2, r1
 8005ee4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d006      	beq.n	8005f00 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b0f      	cmp	r3, #15
 8005efc:	d9e9      	bls.n	8005ed2 <prvInitialiseNewTask+0x66>
 8005efe:	e000      	b.n	8005f02 <prvInitialiseNewTask+0x96>
			{
				break;
 8005f00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f0a:	e003      	b.n	8005f14 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	2b37      	cmp	r3, #55	@ 0x37
 8005f18:	d901      	bls.n	8005f1e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f1a:	2337      	movs	r3, #55	@ 0x37
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	3304      	adds	r3, #4
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff f8a7 	bl	8005088 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	3318      	adds	r3, #24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff f8a2 	bl	8005088 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	3354      	adds	r3, #84	@ 0x54
 8005f6e:	224c      	movs	r2, #76	@ 0x4c
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f002 fb39 	bl	80085ea <memset>
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005fb0 <prvInitialiseNewTask+0x144>)
 8005f7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f80:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb4 <prvInitialiseNewTask+0x148>)
 8005f82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb8 <prvInitialiseNewTask+0x14c>)
 8005f88:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	68f9      	ldr	r1, [r7, #12]
 8005f8e:	69b8      	ldr	r0, [r7, #24]
 8005f90:	f001 f95a 	bl	8007248 <pxPortInitialiseStack>
 8005f94:	4602      	mov	r2, r0
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa6:	bf00      	nop
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20004d1c 	.word	0x20004d1c
 8005fb4:	20004d84 	.word	0x20004d84
 8005fb8:	20004dec 	.word	0x20004dec

08005fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fc4:	f001 fa70 	bl	80074a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	4a2c      	ldr	r2, [pc, #176]	@ (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fda:	4a2a      	ldr	r2, [pc, #168]	@ (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fe0:	4b27      	ldr	r3, [pc, #156]	@ (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d110      	bne.n	800600a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fe8:	f000 fc2e 	bl	8006848 <prvInitialiseTaskLists>
 8005fec:	e00d      	b.n	800600a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fee:	4b26      	ldr	r3, [pc, #152]	@ (8006088 <prvAddNewTaskToReadyList+0xcc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ff6:	4b23      	ldr	r3, [pc, #140]	@ (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	429a      	cmp	r2, r3
 8006002:	d802      	bhi.n	800600a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006004:	4a1f      	ldr	r2, [pc, #124]	@ (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800600a:	4b20      	ldr	r3, [pc, #128]	@ (800608c <prvAddNewTaskToReadyList+0xd0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3301      	adds	r3, #1
 8006010:	4a1e      	ldr	r2, [pc, #120]	@ (800608c <prvAddNewTaskToReadyList+0xd0>)
 8006012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006014:	4b1d      	ldr	r3, [pc, #116]	@ (800608c <prvAddNewTaskToReadyList+0xd0>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006020:	4b1b      	ldr	r3, [pc, #108]	@ (8006090 <prvAddNewTaskToReadyList+0xd4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d903      	bls.n	8006030 <prvAddNewTaskToReadyList+0x74>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	4a18      	ldr	r2, [pc, #96]	@ (8006090 <prvAddNewTaskToReadyList+0xd4>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4a15      	ldr	r2, [pc, #84]	@ (8006094 <prvAddNewTaskToReadyList+0xd8>)
 800603e:	441a      	add	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f7ff f82b 	bl	80050a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800604c:	f001 fa5e 	bl	800750c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006050:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <prvAddNewTaskToReadyList+0xcc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00e      	beq.n	8006076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006058:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <prvAddNewTaskToReadyList+0xc8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006062:	429a      	cmp	r2, r3
 8006064:	d207      	bcs.n	8006076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006066:	4b0c      	ldr	r3, [pc, #48]	@ (8006098 <prvAddNewTaskToReadyList+0xdc>)
 8006068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000f9c 	.word	0x20000f9c
 8006084:	20000ac8 	.word	0x20000ac8
 8006088:	20000fa8 	.word	0x20000fa8
 800608c:	20000fb8 	.word	0x20000fb8
 8006090:	20000fa4 	.word	0x20000fa4
 8006094:	20000acc 	.word	0x20000acc
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d018      	beq.n	80060e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ae:	4b14      	ldr	r3, [pc, #80]	@ (8006100 <vTaskDelay+0x64>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <vTaskDelay+0x32>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60bb      	str	r3, [r7, #8]
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	e7fd      	b.n	80060ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060ce:	f000 f88b 	bl	80061e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060d2:	2100      	movs	r1, #0
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fd09 	bl	8006aec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060da:	f000 f893 	bl	8006204 <xTaskResumeAll>
 80060de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d107      	bne.n	80060f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80060e6:	4b07      	ldr	r3, [pc, #28]	@ (8006104 <vTaskDelay+0x68>)
 80060e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060f6:	bf00      	nop
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000fc4 	.word	0x20000fc4
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	@ 0x28
 800610c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006116:	463a      	mov	r2, r7
 8006118:	1d39      	adds	r1, r7, #4
 800611a:	f107 0308 	add.w	r3, r7, #8
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe ff5e 	bl	8004fe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	9202      	str	r2, [sp, #8]
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	2300      	movs	r3, #0
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	2300      	movs	r3, #0
 8006134:	460a      	mov	r2, r1
 8006136:	4924      	ldr	r1, [pc, #144]	@ (80061c8 <vTaskStartScheduler+0xc0>)
 8006138:	4824      	ldr	r0, [pc, #144]	@ (80061cc <vTaskStartScheduler+0xc4>)
 800613a:	f7ff fdf1 	bl	8005d20 <xTaskCreateStatic>
 800613e:	4603      	mov	r3, r0
 8006140:	4a23      	ldr	r2, [pc, #140]	@ (80061d0 <vTaskStartScheduler+0xc8>)
 8006142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006144:	4b22      	ldr	r3, [pc, #136]	@ (80061d0 <vTaskStartScheduler+0xc8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800614c:	2301      	movs	r3, #1
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	e001      	b.n	8006156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d102      	bne.n	8006162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800615c:	f000 fd1a 	bl	8006b94 <xTimerCreateTimerTask>
 8006160:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d11b      	bne.n	80061a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	613b      	str	r3, [r7, #16]
}
 800617a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800617c:	4b15      	ldr	r3, [pc, #84]	@ (80061d4 <vTaskStartScheduler+0xcc>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3354      	adds	r3, #84	@ 0x54
 8006182:	4a15      	ldr	r2, [pc, #84]	@ (80061d8 <vTaskStartScheduler+0xd0>)
 8006184:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006186:	4b15      	ldr	r3, [pc, #84]	@ (80061dc <vTaskStartScheduler+0xd4>)
 8006188:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800618c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800618e:	4b14      	ldr	r3, [pc, #80]	@ (80061e0 <vTaskStartScheduler+0xd8>)
 8006190:	2201      	movs	r2, #1
 8006192:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006194:	4b13      	ldr	r3, [pc, #76]	@ (80061e4 <vTaskStartScheduler+0xdc>)
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800619a:	f001 f8e1 	bl	8007360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800619e:	e00f      	b.n	80061c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061a6:	d10b      	bne.n	80061c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	60fb      	str	r3, [r7, #12]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <vTaskStartScheduler+0xb4>
}
 80061c0:	bf00      	nop
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	0800a894 	.word	0x0800a894
 80061cc:	08006819 	.word	0x08006819
 80061d0:	20000fc0 	.word	0x20000fc0
 80061d4:	20000ac8 	.word	0x20000ac8
 80061d8:	2000001c 	.word	0x2000001c
 80061dc:	20000fbc 	.word	0x20000fbc
 80061e0:	20000fa8 	.word	0x20000fa8
 80061e4:	20000fa0 	.word	0x20000fa0

080061e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061ec:	4b04      	ldr	r3, [pc, #16]	@ (8006200 <vTaskSuspendAll+0x18>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	4a03      	ldr	r2, [pc, #12]	@ (8006200 <vTaskSuspendAll+0x18>)
 80061f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061f6:	bf00      	nop
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000fc4 	.word	0x20000fc4

08006204 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006212:	4b42      	ldr	r3, [pc, #264]	@ (800631c <xTaskResumeAll+0x118>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <xTaskResumeAll+0x2e>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	603b      	str	r3, [r7, #0]
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	e7fd      	b.n	800622e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006232:	f001 f939 	bl	80074a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006236:	4b39      	ldr	r3, [pc, #228]	@ (800631c <xTaskResumeAll+0x118>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3b01      	subs	r3, #1
 800623c:	4a37      	ldr	r2, [pc, #220]	@ (800631c <xTaskResumeAll+0x118>)
 800623e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006240:	4b36      	ldr	r3, [pc, #216]	@ (800631c <xTaskResumeAll+0x118>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d162      	bne.n	800630e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006248:	4b35      	ldr	r3, [pc, #212]	@ (8006320 <xTaskResumeAll+0x11c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05e      	beq.n	800630e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006250:	e02f      	b.n	80062b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006252:	4b34      	ldr	r3, [pc, #208]	@ (8006324 <xTaskResumeAll+0x120>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3318      	adds	r3, #24
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe ff7c 	bl	800515c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3304      	adds	r3, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe ff77 	bl	800515c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006272:	4b2d      	ldr	r3, [pc, #180]	@ (8006328 <xTaskResumeAll+0x124>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d903      	bls.n	8006282 <xTaskResumeAll+0x7e>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	4a2a      	ldr	r2, [pc, #168]	@ (8006328 <xTaskResumeAll+0x124>)
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4a27      	ldr	r2, [pc, #156]	@ (800632c <xTaskResumeAll+0x128>)
 8006290:	441a      	add	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3304      	adds	r3, #4
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f7fe ff02 	bl	80050a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a2:	4b23      	ldr	r3, [pc, #140]	@ (8006330 <xTaskResumeAll+0x12c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d302      	bcc.n	80062b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80062ac:	4b21      	ldr	r3, [pc, #132]	@ (8006334 <xTaskResumeAll+0x130>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006324 <xTaskResumeAll+0x120>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1cb      	bne.n	8006252 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062c0:	f000 fb66 	bl	8006990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006338 <xTaskResumeAll+0x134>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d010      	beq.n	80062f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062d0:	f000 f846 	bl	8006360 <xTaskIncrementTick>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80062da:	4b16      	ldr	r3, [pc, #88]	@ (8006334 <xTaskResumeAll+0x130>)
 80062dc:	2201      	movs	r2, #1
 80062de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f1      	bne.n	80062d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80062ec:	4b12      	ldr	r3, [pc, #72]	@ (8006338 <xTaskResumeAll+0x134>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062f2:	4b10      	ldr	r3, [pc, #64]	@ (8006334 <xTaskResumeAll+0x130>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062fa:	2301      	movs	r3, #1
 80062fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062fe:	4b0f      	ldr	r3, [pc, #60]	@ (800633c <xTaskResumeAll+0x138>)
 8006300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800630e:	f001 f8fd 	bl	800750c <vPortExitCritical>

	return xAlreadyYielded;
 8006312:	68bb      	ldr	r3, [r7, #8]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000fc4 	.word	0x20000fc4
 8006320:	20000f9c 	.word	0x20000f9c
 8006324:	20000f5c 	.word	0x20000f5c
 8006328:	20000fa4 	.word	0x20000fa4
 800632c:	20000acc 	.word	0x20000acc
 8006330:	20000ac8 	.word	0x20000ac8
 8006334:	20000fb0 	.word	0x20000fb0
 8006338:	20000fac 	.word	0x20000fac
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006346:	4b05      	ldr	r3, [pc, #20]	@ (800635c <xTaskGetTickCount+0x1c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800634c:	687b      	ldr	r3, [r7, #4]
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000fa0 	.word	0x20000fa0

08006360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636a:	4b4f      	ldr	r3, [pc, #316]	@ (80064a8 <xTaskIncrementTick+0x148>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 8090 	bne.w	8006494 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006374:	4b4d      	ldr	r3, [pc, #308]	@ (80064ac <xTaskIncrementTick+0x14c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800637c:	4a4b      	ldr	r2, [pc, #300]	@ (80064ac <xTaskIncrementTick+0x14c>)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d121      	bne.n	80063cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006388:	4b49      	ldr	r3, [pc, #292]	@ (80064b0 <xTaskIncrementTick+0x150>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	603b      	str	r3, [r7, #0]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <xTaskIncrementTick+0x46>
 80063aa:	4b41      	ldr	r3, [pc, #260]	@ (80064b0 <xTaskIncrementTick+0x150>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	4b40      	ldr	r3, [pc, #256]	@ (80064b4 <xTaskIncrementTick+0x154>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a3e      	ldr	r2, [pc, #248]	@ (80064b0 <xTaskIncrementTick+0x150>)
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	4a3e      	ldr	r2, [pc, #248]	@ (80064b4 <xTaskIncrementTick+0x154>)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	4b3e      	ldr	r3, [pc, #248]	@ (80064b8 <xTaskIncrementTick+0x158>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3301      	adds	r3, #1
 80063c4:	4a3c      	ldr	r2, [pc, #240]	@ (80064b8 <xTaskIncrementTick+0x158>)
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	f000 fae2 	bl	8006990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063cc:	4b3b      	ldr	r3, [pc, #236]	@ (80064bc <xTaskIncrementTick+0x15c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d349      	bcc.n	800646a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d6:	4b36      	ldr	r3, [pc, #216]	@ (80064b0 <xTaskIncrementTick+0x150>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e0:	4b36      	ldr	r3, [pc, #216]	@ (80064bc <xTaskIncrementTick+0x15c>)
 80063e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063e6:	601a      	str	r2, [r3, #0]
					break;
 80063e8:	e03f      	b.n	800646a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ea:	4b31      	ldr	r3, [pc, #196]	@ (80064b0 <xTaskIncrementTick+0x150>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d203      	bcs.n	800640a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006402:	4a2e      	ldr	r2, [pc, #184]	@ (80064bc <xTaskIncrementTick+0x15c>)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006408:	e02f      	b.n	800646a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	3304      	adds	r3, #4
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fea4 	bl	800515c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	3318      	adds	r3, #24
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe fe9b 	bl	800515c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800642a:	4b25      	ldr	r3, [pc, #148]	@ (80064c0 <xTaskIncrementTick+0x160>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d903      	bls.n	800643a <xTaskIncrementTick+0xda>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006436:	4a22      	ldr	r2, [pc, #136]	@ (80064c0 <xTaskIncrementTick+0x160>)
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4a1f      	ldr	r2, [pc, #124]	@ (80064c4 <xTaskIncrementTick+0x164>)
 8006448:	441a      	add	r2, r3
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	3304      	adds	r3, #4
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f7fe fe26 	bl	80050a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645a:	4b1b      	ldr	r3, [pc, #108]	@ (80064c8 <xTaskIncrementTick+0x168>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	429a      	cmp	r2, r3
 8006462:	d3b8      	bcc.n	80063d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006468:	e7b5      	b.n	80063d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800646a:	4b17      	ldr	r3, [pc, #92]	@ (80064c8 <xTaskIncrementTick+0x168>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006470:	4914      	ldr	r1, [pc, #80]	@ (80064c4 <xTaskIncrementTick+0x164>)
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d901      	bls.n	8006486 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006482:	2301      	movs	r3, #1
 8006484:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006486:	4b11      	ldr	r3, [pc, #68]	@ (80064cc <xTaskIncrementTick+0x16c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800648e:	2301      	movs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e004      	b.n	800649e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006494:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <xTaskIncrementTick+0x170>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	4a0d      	ldr	r2, [pc, #52]	@ (80064d0 <xTaskIncrementTick+0x170>)
 800649c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800649e:	697b      	ldr	r3, [r7, #20]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000fc4 	.word	0x20000fc4
 80064ac:	20000fa0 	.word	0x20000fa0
 80064b0:	20000f54 	.word	0x20000f54
 80064b4:	20000f58 	.word	0x20000f58
 80064b8:	20000fb4 	.word	0x20000fb4
 80064bc:	20000fbc 	.word	0x20000fbc
 80064c0:	20000fa4 	.word	0x20000fa4
 80064c4:	20000acc 	.word	0x20000acc
 80064c8:	20000ac8 	.word	0x20000ac8
 80064cc:	20000fb0 	.word	0x20000fb0
 80064d0:	20000fac 	.word	0x20000fac

080064d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064da:	4b2b      	ldr	r3, [pc, #172]	@ (8006588 <vTaskSwitchContext+0xb4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064e2:	4b2a      	ldr	r3, [pc, #168]	@ (800658c <vTaskSwitchContext+0xb8>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064e8:	e047      	b.n	800657a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80064ea:	4b28      	ldr	r3, [pc, #160]	@ (800658c <vTaskSwitchContext+0xb8>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f0:	4b27      	ldr	r3, [pc, #156]	@ (8006590 <vTaskSwitchContext+0xbc>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e011      	b.n	800651c <vTaskSwitchContext+0x48>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <vTaskSwitchContext+0x42>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <vTaskSwitchContext+0x3e>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3b01      	subs	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	491d      	ldr	r1, [pc, #116]	@ (8006594 <vTaskSwitchContext+0xc0>)
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0e3      	beq.n	80064f8 <vTaskSwitchContext+0x24>
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4a16      	ldr	r2, [pc, #88]	@ (8006594 <vTaskSwitchContext+0xc0>)
 800653c:	4413      	add	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3308      	adds	r3, #8
 8006552:	429a      	cmp	r2, r3
 8006554:	d104      	bne.n	8006560 <vTaskSwitchContext+0x8c>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	605a      	str	r2, [r3, #4]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4a0c      	ldr	r2, [pc, #48]	@ (8006598 <vTaskSwitchContext+0xc4>)
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	4a09      	ldr	r2, [pc, #36]	@ (8006590 <vTaskSwitchContext+0xbc>)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006570:	4b09      	ldr	r3, [pc, #36]	@ (8006598 <vTaskSwitchContext+0xc4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3354      	adds	r3, #84	@ 0x54
 8006576:	4a09      	ldr	r2, [pc, #36]	@ (800659c <vTaskSwitchContext+0xc8>)
 8006578:	6013      	str	r3, [r2, #0]
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000fc4 	.word	0x20000fc4
 800658c:	20000fb0 	.word	0x20000fb0
 8006590:	20000fa4 	.word	0x20000fa4
 8006594:	20000acc 	.word	0x20000acc
 8006598:	20000ac8 	.word	0x20000ac8
 800659c:	2000001c 	.word	0x2000001c

080065a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10b      	bne.n	80065c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	60fb      	str	r3, [r7, #12]
}
 80065c2:	bf00      	nop
 80065c4:	bf00      	nop
 80065c6:	e7fd      	b.n	80065c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065c8:	4b07      	ldr	r3, [pc, #28]	@ (80065e8 <vTaskPlaceOnEventList+0x48>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3318      	adds	r3, #24
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fe fd8a 	bl	80050ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065d6:	2101      	movs	r1, #1
 80065d8:	6838      	ldr	r0, [r7, #0]
 80065da:	f000 fa87 	bl	8006aec <prvAddCurrentTaskToDelayedList>
}
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000ac8 	.word	0x20000ac8

080065ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	617b      	str	r3, [r7, #20]
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	e7fd      	b.n	8006612 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006616:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <vTaskPlaceOnEventListRestricted+0x54>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3318      	adds	r3, #24
 800661c:	4619      	mov	r1, r3
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7fe fd3f 	bl	80050a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800662a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800662e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	68b8      	ldr	r0, [r7, #8]
 8006634:	f000 fa5a 	bl	8006aec <prvAddCurrentTaskToDelayedList>
	}
 8006638:	bf00      	nop
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000ac8 	.word	0x20000ac8

08006644 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	60fb      	str	r3, [r7, #12]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3318      	adds	r3, #24
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fd70 	bl	800515c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800667c:	4b1d      	ldr	r3, [pc, #116]	@ (80066f4 <xTaskRemoveFromEventList+0xb0>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11d      	bne.n	80066c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	3304      	adds	r3, #4
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe fd67 	bl	800515c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006692:	4b19      	ldr	r3, [pc, #100]	@ (80066f8 <xTaskRemoveFromEventList+0xb4>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d903      	bls.n	80066a2 <xTaskRemoveFromEventList+0x5e>
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669e:	4a16      	ldr	r2, [pc, #88]	@ (80066f8 <xTaskRemoveFromEventList+0xb4>)
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4a13      	ldr	r2, [pc, #76]	@ (80066fc <xTaskRemoveFromEventList+0xb8>)
 80066b0:	441a      	add	r2, r3
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f7fe fcf2 	bl	80050a2 <vListInsertEnd>
 80066be:	e005      	b.n	80066cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3318      	adds	r3, #24
 80066c4:	4619      	mov	r1, r3
 80066c6:	480e      	ldr	r0, [pc, #56]	@ (8006700 <xTaskRemoveFromEventList+0xbc>)
 80066c8:	f7fe fceb 	bl	80050a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <xTaskRemoveFromEventList+0xc0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d905      	bls.n	80066e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066de:	4b0a      	ldr	r3, [pc, #40]	@ (8006708 <xTaskRemoveFromEventList+0xc4>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e001      	b.n	80066ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066ea:	697b      	ldr	r3, [r7, #20]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20000fc4 	.word	0x20000fc4
 80066f8:	20000fa4 	.word	0x20000fa4
 80066fc:	20000acc 	.word	0x20000acc
 8006700:	20000f5c 	.word	0x20000f5c
 8006704:	20000ac8 	.word	0x20000ac8
 8006708:	20000fb0 	.word	0x20000fb0

0800670c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006714:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <vTaskInternalSetTimeOutState+0x24>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800671c:	4b05      	ldr	r3, [pc, #20]	@ (8006734 <vTaskInternalSetTimeOutState+0x28>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	605a      	str	r2, [r3, #4]
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20000fb4 	.word	0x20000fb4
 8006734:	20000fa0 	.word	0x20000fa0

08006738 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10b      	bne.n	8006760 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	613b      	str	r3, [r7, #16]
}
 800675a:	bf00      	nop
 800675c:	bf00      	nop
 800675e:	e7fd      	b.n	800675c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	60fb      	str	r3, [r7, #12]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800677e:	f000 fe93 	bl	80074a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006782:	4b1d      	ldr	r3, [pc, #116]	@ (80067f8 <xTaskCheckForTimeOut+0xc0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800679a:	d102      	bne.n	80067a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800679c:	2300      	movs	r3, #0
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	e023      	b.n	80067ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b15      	ldr	r3, [pc, #84]	@ (80067fc <xTaskCheckForTimeOut+0xc4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d007      	beq.n	80067be <xTaskCheckForTimeOut+0x86>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d302      	bcc.n	80067be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067b8:	2301      	movs	r3, #1
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	e015      	b.n	80067ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d20b      	bcs.n	80067e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ff99 	bl	800670c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067da:	2300      	movs	r3, #0
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	e004      	b.n	80067ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067e6:	2301      	movs	r3, #1
 80067e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067ea:	f000 fe8f 	bl	800750c <vPortExitCritical>

	return xReturn;
 80067ee:	69fb      	ldr	r3, [r7, #28]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3720      	adds	r7, #32
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000fa0 	.word	0x20000fa0
 80067fc:	20000fb4 	.word	0x20000fb4

08006800 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006804:	4b03      	ldr	r3, [pc, #12]	@ (8006814 <vTaskMissedYield+0x14>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
}
 800680a:	bf00      	nop
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	20000fb0 	.word	0x20000fb0

08006818 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006820:	f000 f852 	bl	80068c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006824:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <prvIdleTask+0x28>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d9f9      	bls.n	8006820 <prvIdleTask+0x8>
			{
				taskYIELD();
 800682c:	4b05      	ldr	r3, [pc, #20]	@ (8006844 <prvIdleTask+0x2c>)
 800682e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800683c:	e7f0      	b.n	8006820 <prvIdleTask+0x8>
 800683e:	bf00      	nop
 8006840:	20000acc 	.word	0x20000acc
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800684e:	2300      	movs	r3, #0
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	e00c      	b.n	800686e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4a12      	ldr	r2, [pc, #72]	@ (80068a8 <prvInitialiseTaskLists+0x60>)
 8006860:	4413      	add	r3, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fbf0 	bl	8005048 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3301      	adds	r3, #1
 800686c:	607b      	str	r3, [r7, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b37      	cmp	r3, #55	@ 0x37
 8006872:	d9ef      	bls.n	8006854 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006874:	480d      	ldr	r0, [pc, #52]	@ (80068ac <prvInitialiseTaskLists+0x64>)
 8006876:	f7fe fbe7 	bl	8005048 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800687a:	480d      	ldr	r0, [pc, #52]	@ (80068b0 <prvInitialiseTaskLists+0x68>)
 800687c:	f7fe fbe4 	bl	8005048 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006880:	480c      	ldr	r0, [pc, #48]	@ (80068b4 <prvInitialiseTaskLists+0x6c>)
 8006882:	f7fe fbe1 	bl	8005048 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006886:	480c      	ldr	r0, [pc, #48]	@ (80068b8 <prvInitialiseTaskLists+0x70>)
 8006888:	f7fe fbde 	bl	8005048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800688c:	480b      	ldr	r0, [pc, #44]	@ (80068bc <prvInitialiseTaskLists+0x74>)
 800688e:	f7fe fbdb 	bl	8005048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006892:	4b0b      	ldr	r3, [pc, #44]	@ (80068c0 <prvInitialiseTaskLists+0x78>)
 8006894:	4a05      	ldr	r2, [pc, #20]	@ (80068ac <prvInitialiseTaskLists+0x64>)
 8006896:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006898:	4b0a      	ldr	r3, [pc, #40]	@ (80068c4 <prvInitialiseTaskLists+0x7c>)
 800689a:	4a05      	ldr	r2, [pc, #20]	@ (80068b0 <prvInitialiseTaskLists+0x68>)
 800689c:	601a      	str	r2, [r3, #0]
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000acc 	.word	0x20000acc
 80068ac:	20000f2c 	.word	0x20000f2c
 80068b0:	20000f40 	.word	0x20000f40
 80068b4:	20000f5c 	.word	0x20000f5c
 80068b8:	20000f70 	.word	0x20000f70
 80068bc:	20000f88 	.word	0x20000f88
 80068c0:	20000f54 	.word	0x20000f54
 80068c4:	20000f58 	.word	0x20000f58

080068c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068ce:	e019      	b.n	8006904 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068d0:	f000 fdea 	bl	80074a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d4:	4b10      	ldr	r3, [pc, #64]	@ (8006918 <prvCheckTasksWaitingTermination+0x50>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3304      	adds	r3, #4
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fe fc3b 	bl	800515c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068e6:	4b0d      	ldr	r3, [pc, #52]	@ (800691c <prvCheckTasksWaitingTermination+0x54>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	4a0b      	ldr	r2, [pc, #44]	@ (800691c <prvCheckTasksWaitingTermination+0x54>)
 80068ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <prvCheckTasksWaitingTermination+0x58>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006920 <prvCheckTasksWaitingTermination+0x58>)
 80068f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068fa:	f000 fe07 	bl	800750c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f810 	bl	8006924 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006904:	4b06      	ldr	r3, [pc, #24]	@ (8006920 <prvCheckTasksWaitingTermination+0x58>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e1      	bne.n	80068d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800690c:	bf00      	nop
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20000f70 	.word	0x20000f70
 800691c:	20000f9c 	.word	0x20000f9c
 8006920:	20000f84 	.word	0x20000f84

08006924 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3354      	adds	r3, #84	@ 0x54
 8006930:	4618      	mov	r0, r3
 8006932:	f001 fe77 	bl	8008624 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800693c:	2b00      	cmp	r3, #0
 800693e:	d108      	bne.n	8006952 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006944:	4618      	mov	r0, r3
 8006946:	f000 ff9f 	bl	8007888 <vPortFree>
				vPortFree( pxTCB );
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 ff9c 	bl	8007888 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006950:	e019      	b.n	8006986 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006958:	2b01      	cmp	r3, #1
 800695a:	d103      	bne.n	8006964 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 ff93 	bl	8007888 <vPortFree>
	}
 8006962:	e010      	b.n	8006986 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800696a:	2b02      	cmp	r3, #2
 800696c:	d00b      	beq.n	8006986 <prvDeleteTCB+0x62>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	60fb      	str	r3, [r7, #12]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <prvDeleteTCB+0x5e>
	}
 8006986:	bf00      	nop
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006996:	4b0c      	ldr	r3, [pc, #48]	@ (80069c8 <prvResetNextTaskUnblockTime+0x38>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069a0:	4b0a      	ldr	r3, [pc, #40]	@ (80069cc <prvResetNextTaskUnblockTime+0x3c>)
 80069a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069a8:	e008      	b.n	80069bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069aa:	4b07      	ldr	r3, [pc, #28]	@ (80069c8 <prvResetNextTaskUnblockTime+0x38>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4a04      	ldr	r2, [pc, #16]	@ (80069cc <prvResetNextTaskUnblockTime+0x3c>)
 80069ba:	6013      	str	r3, [r2, #0]
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	20000f54 	.word	0x20000f54
 80069cc:	20000fbc 	.word	0x20000fbc

080069d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <xTaskGetSchedulerState+0x34>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d102      	bne.n	80069e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069de:	2301      	movs	r3, #1
 80069e0:	607b      	str	r3, [r7, #4]
 80069e2:	e008      	b.n	80069f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069e4:	4b08      	ldr	r3, [pc, #32]	@ (8006a08 <xTaskGetSchedulerState+0x38>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069ec:	2302      	movs	r3, #2
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	e001      	b.n	80069f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069f2:	2300      	movs	r3, #0
 80069f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069f6:	687b      	ldr	r3, [r7, #4]
	}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	20000fa8 	.word	0x20000fa8
 8006a08:	20000fc4 	.word	0x20000fc4

08006a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d058      	beq.n	8006ad4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a22:	4b2f      	ldr	r3, [pc, #188]	@ (8006ae0 <xTaskPriorityDisinherit+0xd4>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d00b      	beq.n	8006a44 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	60fb      	str	r3, [r7, #12]
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	e7fd      	b.n	8006a40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10b      	bne.n	8006a64 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	60bb      	str	r3, [r7, #8]
}
 8006a5e:	bf00      	nop
 8006a60:	bf00      	nop
 8006a62:	e7fd      	b.n	8006a60 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a68:	1e5a      	subs	r2, r3, #1
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d02c      	beq.n	8006ad4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d128      	bne.n	8006ad4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	3304      	adds	r3, #4
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe fb68 	bl	800515c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae4 <xTaskPriorityDisinherit+0xd8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d903      	bls.n	8006ab4 <xTaskPriorityDisinherit+0xa8>
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8006ae4 <xTaskPriorityDisinherit+0xd8>)
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4a09      	ldr	r2, [pc, #36]	@ (8006ae8 <xTaskPriorityDisinherit+0xdc>)
 8006ac2:	441a      	add	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4610      	mov	r0, r2
 8006acc:	f7fe fae9 	bl	80050a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ad4:	697b      	ldr	r3, [r7, #20]
	}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000ac8 	.word	0x20000ac8
 8006ae4:	20000fa4 	.word	0x20000fa4
 8006ae8:	20000acc 	.word	0x20000acc

08006aec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006af6:	4b21      	ldr	r3, [pc, #132]	@ (8006b7c <prvAddCurrentTaskToDelayedList+0x90>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006afc:	4b20      	ldr	r3, [pc, #128]	@ (8006b80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fb2a 	bl	800515c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b0e:	d10a      	bne.n	8006b26 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b16:	4b1a      	ldr	r3, [pc, #104]	@ (8006b80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4819      	ldr	r0, [pc, #100]	@ (8006b84 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b20:	f7fe fabf 	bl	80050a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b24:	e026      	b.n	8006b74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b2e:	4b14      	ldr	r3, [pc, #80]	@ (8006b80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d209      	bcs.n	8006b52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b3e:	4b12      	ldr	r3, [pc, #72]	@ (8006b88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b0f      	ldr	r3, [pc, #60]	@ (8006b80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f7fe facd 	bl	80050ea <vListInsert>
}
 8006b50:	e010      	b.n	8006b74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b52:	4b0e      	ldr	r3, [pc, #56]	@ (8006b8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b0a      	ldr	r3, [pc, #40]	@ (8006b80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f7fe fac3 	bl	80050ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b64:	4b0a      	ldr	r3, [pc, #40]	@ (8006b90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d202      	bcs.n	8006b74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b6e:	4a08      	ldr	r2, [pc, #32]	@ (8006b90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6013      	str	r3, [r2, #0]
}
 8006b74:	bf00      	nop
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000fa0 	.word	0x20000fa0
 8006b80:	20000ac8 	.word	0x20000ac8
 8006b84:	20000f88 	.word	0x20000f88
 8006b88:	20000f58 	.word	0x20000f58
 8006b8c:	20000f54 	.word	0x20000f54
 8006b90:	20000fbc 	.word	0x20000fbc

08006b94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08a      	sub	sp, #40	@ 0x28
 8006b98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b9e:	f000 fb13 	bl	80071c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8006c18 <xTimerCreateTimerTask+0x84>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d021      	beq.n	8006bee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bb2:	1d3a      	adds	r2, r7, #4
 8006bb4:	f107 0108 	add.w	r1, r7, #8
 8006bb8:	f107 030c 	add.w	r3, r7, #12
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fe fa29 	bl	8005014 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	9202      	str	r2, [sp, #8]
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	2302      	movs	r3, #2
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	460a      	mov	r2, r1
 8006bd4:	4911      	ldr	r1, [pc, #68]	@ (8006c1c <xTimerCreateTimerTask+0x88>)
 8006bd6:	4812      	ldr	r0, [pc, #72]	@ (8006c20 <xTimerCreateTimerTask+0x8c>)
 8006bd8:	f7ff f8a2 	bl	8005d20 <xTaskCreateStatic>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	4a11      	ldr	r2, [pc, #68]	@ (8006c24 <xTimerCreateTimerTask+0x90>)
 8006be0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006be2:	4b10      	ldr	r3, [pc, #64]	@ (8006c24 <xTimerCreateTimerTask+0x90>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bea:	2301      	movs	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10b      	bne.n	8006c0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	613b      	str	r3, [r7, #16]
}
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	e7fd      	b.n	8006c08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c0c:	697b      	ldr	r3, [r7, #20]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000ff8 	.word	0x20000ff8
 8006c1c:	0800a89c 	.word	0x0800a89c
 8006c20:	08006d61 	.word	0x08006d61
 8006c24:	20000ffc 	.word	0x20000ffc

08006c28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	@ 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10b      	bne.n	8006c58 <xTimerGenericCommand+0x30>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	623b      	str	r3, [r7, #32]
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c58:	4b19      	ldr	r3, [pc, #100]	@ (8006cc0 <xTimerGenericCommand+0x98>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d02a      	beq.n	8006cb6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	dc18      	bgt.n	8006ca4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c72:	f7ff fead 	bl	80069d0 <xTaskGetSchedulerState>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d109      	bne.n	8006c90 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c7c:	4b10      	ldr	r3, [pc, #64]	@ (8006cc0 <xTimerGenericCommand+0x98>)
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	f107 0110 	add.w	r1, r7, #16
 8006c84:	2300      	movs	r3, #0
 8006c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c88:	f7fe fbd8 	bl	800543c <xQueueGenericSend>
 8006c8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c8e:	e012      	b.n	8006cb6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c90:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <xTimerGenericCommand+0x98>)
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	f107 0110 	add.w	r1, r7, #16
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f7fe fbce 	bl	800543c <xQueueGenericSend>
 8006ca0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ca2:	e008      	b.n	8006cb6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ca4:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <xTimerGenericCommand+0x98>)
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	f107 0110 	add.w	r1, r7, #16
 8006cac:	2300      	movs	r3, #0
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	f7fe fcc6 	bl	8005640 <xQueueGenericSendFromISR>
 8006cb4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3728      	adds	r7, #40	@ 0x28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000ff8 	.word	0x20000ff8

08006cc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cce:	4b23      	ldr	r3, [pc, #140]	@ (8006d5c <prvProcessExpiredTimer+0x98>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fe fa3d 	bl	800515c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d023      	beq.n	8006d38 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	699a      	ldr	r2, [r3, #24]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	18d1      	adds	r1, r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	6978      	ldr	r0, [r7, #20]
 8006cfe:	f000 f8d5 	bl	8006eac <prvInsertTimerInActiveList>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d020      	beq.n	8006d4a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d08:	2300      	movs	r3, #0
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	2100      	movs	r1, #0
 8006d12:	6978      	ldr	r0, [r7, #20]
 8006d14:	f7ff ff88 	bl	8006c28 <xTimerGenericCommand>
 8006d18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d114      	bne.n	8006d4a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	60fb      	str	r3, [r7, #12]
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d3e:	f023 0301 	bic.w	r3, r3, #1
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	4798      	blx	r3
}
 8006d52:	bf00      	nop
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000ff0 	.word	0x20000ff0

08006d60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d68:	f107 0308 	add.w	r3, r7, #8
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 f859 	bl	8006e24 <prvGetNextExpireTime>
 8006d72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4619      	mov	r1, r3
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 f805 	bl	8006d88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d7e:	f000 f8d7 	bl	8006f30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d82:	bf00      	nop
 8006d84:	e7f0      	b.n	8006d68 <prvTimerTask+0x8>
	...

08006d88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d92:	f7ff fa29 	bl	80061e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d96:	f107 0308 	add.w	r3, r7, #8
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f866 	bl	8006e6c <prvSampleTimeNow>
 8006da0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d130      	bne.n	8006e0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <prvProcessTimerOrBlockTask+0x3c>
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d806      	bhi.n	8006dc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006db6:	f7ff fa25 	bl	8006204 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006dba:	68f9      	ldr	r1, [r7, #12]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff ff81 	bl	8006cc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006dc2:	e024      	b.n	8006e0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dca:	4b13      	ldr	r3, [pc, #76]	@ (8006e18 <prvProcessTimerOrBlockTask+0x90>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <prvProcessTimerOrBlockTask+0x50>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <prvProcessTimerOrBlockTask+0x52>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8006e1c <prvProcessTimerOrBlockTask+0x94>)
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	4619      	mov	r1, r3
 8006dea:	f7fe ff65 	bl	8005cb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dee:	f7ff fa09 	bl	8006204 <xTaskResumeAll>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006df8:	4b09      	ldr	r3, [pc, #36]	@ (8006e20 <prvProcessTimerOrBlockTask+0x98>)
 8006dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	f3bf 8f6f 	isb	sy
}
 8006e08:	e001      	b.n	8006e0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e0a:	f7ff f9fb 	bl	8006204 <xTaskResumeAll>
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000ff4 	.word	0x20000ff4
 8006e1c:	20000ff8 	.word	0x20000ff8
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e68 <prvGetNextExpireTime+0x44>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <prvGetNextExpireTime+0x16>
 8006e36:	2201      	movs	r2, #1
 8006e38:	e000      	b.n	8006e3c <prvGetNextExpireTime+0x18>
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d105      	bne.n	8006e54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e48:	4b07      	ldr	r3, [pc, #28]	@ (8006e68 <prvGetNextExpireTime+0x44>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	e001      	b.n	8006e58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e58:	68fb      	ldr	r3, [r7, #12]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000ff0 	.word	0x20000ff0

08006e6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e74:	f7ff fa64 	bl	8006340 <xTaskGetTickCount>
 8006e78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea8 <prvSampleTimeNow+0x3c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d205      	bcs.n	8006e90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e84:	f000 f93a 	bl	80070fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e002      	b.n	8006e96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e96:	4a04      	ldr	r2, [pc, #16]	@ (8006ea8 <prvSampleTimeNow+0x3c>)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20001000 	.word	0x20001000

08006eac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d812      	bhi.n	8006ef8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	1ad2      	subs	r2, r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d302      	bcc.n	8006ee6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	e01b      	b.n	8006f1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ee6:	4b10      	ldr	r3, [pc, #64]	@ (8006f28 <prvInsertTimerInActiveList+0x7c>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7fe f8fa 	bl	80050ea <vListInsert>
 8006ef6:	e012      	b.n	8006f1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d206      	bcs.n	8006f0e <prvInsertTimerInActiveList+0x62>
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d302      	bcc.n	8006f0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e007      	b.n	8006f1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f0e:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <prvInsertTimerInActiveList+0x80>)
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4619      	mov	r1, r3
 8006f18:	4610      	mov	r0, r2
 8006f1a:	f7fe f8e6 	bl	80050ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f1e:	697b      	ldr	r3, [r7, #20]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000ff4 	.word	0x20000ff4
 8006f2c:	20000ff0 	.word	0x20000ff0

08006f30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08e      	sub	sp, #56	@ 0x38
 8006f34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f36:	e0ce      	b.n	80070d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	da19      	bge.n	8006f72 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f3e:	1d3b      	adds	r3, r7, #4
 8006f40:	3304      	adds	r3, #4
 8006f42:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	61fb      	str	r3, [r7, #28]
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	e7fd      	b.n	8006f5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f68:	6850      	ldr	r0, [r2, #4]
 8006f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f6c:	6892      	ldr	r2, [r2, #8]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f2c0 80ae 	blt.w	80070d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d004      	beq.n	8006f90 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe f8e6 	bl	800515c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f90:	463b      	mov	r3, r7
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff ff6a 	bl	8006e6c <prvSampleTimeNow>
 8006f98:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b09      	cmp	r3, #9
 8006f9e:	f200 8097 	bhi.w	80070d0 <prvProcessReceivedCommands+0x1a0>
 8006fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa8 <prvProcessReceivedCommands+0x78>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fd1 	.word	0x08006fd1
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fd1 	.word	0x08006fd1
 8006fb4:	08007047 	.word	0x08007047
 8006fb8:	0800705b 	.word	0x0800705b
 8006fbc:	080070a7 	.word	0x080070a7
 8006fc0:	08006fd1 	.word	0x08006fd1
 8006fc4:	08006fd1 	.word	0x08006fd1
 8006fc8:	08007047 	.word	0x08007047
 8006fcc:	0800705b 	.word	0x0800705b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	18d1      	adds	r1, r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ff0:	f7ff ff5c 	bl	8006eac <prvInsertTimerInActiveList>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d06c      	beq.n	80070d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007000:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b00      	cmp	r3, #0
 800700e:	d061      	beq.n	80070d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	441a      	add	r2, r3
 8007018:	2300      	movs	r3, #0
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	2300      	movs	r3, #0
 800701e:	2100      	movs	r1, #0
 8007020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007022:	f7ff fe01 	bl	8006c28 <xTimerGenericCommand>
 8007026:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d152      	bne.n	80070d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	61bb      	str	r3, [r7, #24]
}
 8007040:	bf00      	nop
 8007042:	bf00      	nop
 8007044:	e7fd      	b.n	8007042 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800704c:	f023 0301 	bic.w	r3, r3, #1
 8007050:	b2da      	uxtb	r2, r3
 8007052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007054:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007058:	e03d      	b.n	80070d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800705a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007060:	f043 0301 	orr.w	r3, r3, #1
 8007064:	b2da      	uxtb	r2, r3
 8007066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007068:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10b      	bne.n	8007092 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	617b      	str	r3, [r7, #20]
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	e7fd      	b.n	800708e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	18d1      	adds	r1, r2, r3
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800709e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070a0:	f7ff ff04 	bl	8006eac <prvInsertTimerInActiveList>
					break;
 80070a4:	e017      	b.n	80070d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80070b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070b6:	f000 fbe7 	bl	8007888 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070ba:	e00c      	b.n	80070d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070c2:	f023 0301 	bic.w	r3, r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070ce:	e002      	b.n	80070d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80070d0:	bf00      	nop
 80070d2:	e000      	b.n	80070d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80070d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070d6:	4b08      	ldr	r3, [pc, #32]	@ (80070f8 <prvProcessReceivedCommands+0x1c8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	1d39      	adds	r1, r7, #4
 80070dc:	2200      	movs	r2, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fb4c 	bl	800577c <xQueueReceive>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f47f af26 	bne.w	8006f38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	3730      	adds	r7, #48	@ 0x30
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20000ff8 	.word	0x20000ff8

080070fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007102:	e049      	b.n	8007198 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007104:	4b2e      	ldr	r3, [pc, #184]	@ (80071c0 <prvSwitchTimerLists+0xc4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710e:	4b2c      	ldr	r3, [pc, #176]	@ (80071c0 <prvSwitchTimerLists+0xc4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3304      	adds	r3, #4
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe f81d 	bl	800515c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d02f      	beq.n	8007198 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	429a      	cmp	r2, r3
 8007148:	d90e      	bls.n	8007168 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007156:	4b1a      	ldr	r3, [pc, #104]	@ (80071c0 <prvSwitchTimerLists+0xc4>)
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3304      	adds	r3, #4
 800715e:	4619      	mov	r1, r3
 8007160:	4610      	mov	r0, r2
 8007162:	f7fd ffc2 	bl	80050ea <vListInsert>
 8007166:	e017      	b.n	8007198 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007168:	2300      	movs	r3, #0
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	2300      	movs	r3, #0
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	2100      	movs	r1, #0
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff fd58 	bl	8006c28 <xTimerGenericCommand>
 8007178:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	603b      	str	r3, [r7, #0]
}
 8007192:	bf00      	nop
 8007194:	bf00      	nop
 8007196:	e7fd      	b.n	8007194 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007198:	4b09      	ldr	r3, [pc, #36]	@ (80071c0 <prvSwitchTimerLists+0xc4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1b0      	bne.n	8007104 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071a2:	4b07      	ldr	r3, [pc, #28]	@ (80071c0 <prvSwitchTimerLists+0xc4>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071a8:	4b06      	ldr	r3, [pc, #24]	@ (80071c4 <prvSwitchTimerLists+0xc8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a04      	ldr	r2, [pc, #16]	@ (80071c0 <prvSwitchTimerLists+0xc4>)
 80071ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071b0:	4a04      	ldr	r2, [pc, #16]	@ (80071c4 <prvSwitchTimerLists+0xc8>)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	6013      	str	r3, [r2, #0]
}
 80071b6:	bf00      	nop
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000ff0 	.word	0x20000ff0
 80071c4:	20000ff4 	.word	0x20000ff4

080071c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071ce:	f000 f96b 	bl	80074a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071d2:	4b15      	ldr	r3, [pc, #84]	@ (8007228 <prvCheckForValidListAndQueue+0x60>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d120      	bne.n	800721c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071da:	4814      	ldr	r0, [pc, #80]	@ (800722c <prvCheckForValidListAndQueue+0x64>)
 80071dc:	f7fd ff34 	bl	8005048 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071e0:	4813      	ldr	r0, [pc, #76]	@ (8007230 <prvCheckForValidListAndQueue+0x68>)
 80071e2:	f7fd ff31 	bl	8005048 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071e6:	4b13      	ldr	r3, [pc, #76]	@ (8007234 <prvCheckForValidListAndQueue+0x6c>)
 80071e8:	4a10      	ldr	r2, [pc, #64]	@ (800722c <prvCheckForValidListAndQueue+0x64>)
 80071ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80071ec:	4b12      	ldr	r3, [pc, #72]	@ (8007238 <prvCheckForValidListAndQueue+0x70>)
 80071ee:	4a10      	ldr	r2, [pc, #64]	@ (8007230 <prvCheckForValidListAndQueue+0x68>)
 80071f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80071f2:	2300      	movs	r3, #0
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	4b11      	ldr	r3, [pc, #68]	@ (800723c <prvCheckForValidListAndQueue+0x74>)
 80071f8:	4a11      	ldr	r2, [pc, #68]	@ (8007240 <prvCheckForValidListAndQueue+0x78>)
 80071fa:	2110      	movs	r1, #16
 80071fc:	200a      	movs	r0, #10
 80071fe:	f7fe f841 	bl	8005284 <xQueueGenericCreateStatic>
 8007202:	4603      	mov	r3, r0
 8007204:	4a08      	ldr	r2, [pc, #32]	@ (8007228 <prvCheckForValidListAndQueue+0x60>)
 8007206:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007208:	4b07      	ldr	r3, [pc, #28]	@ (8007228 <prvCheckForValidListAndQueue+0x60>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007210:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <prvCheckForValidListAndQueue+0x60>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	490b      	ldr	r1, [pc, #44]	@ (8007244 <prvCheckForValidListAndQueue+0x7c>)
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe fd24 	bl	8005c64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800721c:	f000 f976 	bl	800750c <vPortExitCritical>
}
 8007220:	bf00      	nop
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000ff8 	.word	0x20000ff8
 800722c:	20000fc8 	.word	0x20000fc8
 8007230:	20000fdc 	.word	0x20000fdc
 8007234:	20000ff0 	.word	0x20000ff0
 8007238:	20000ff4 	.word	0x20000ff4
 800723c:	200010a4 	.word	0x200010a4
 8007240:	20001004 	.word	0x20001004
 8007244:	0800a8a4 	.word	0x0800a8a4

08007248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3b04      	subs	r3, #4
 8007258:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3b04      	subs	r3, #4
 8007266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f023 0201 	bic.w	r2, r3, #1
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3b04      	subs	r3, #4
 8007276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007278:	4a0c      	ldr	r2, [pc, #48]	@ (80072ac <pxPortInitialiseStack+0x64>)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3b14      	subs	r3, #20
 8007282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3b04      	subs	r3, #4
 800728e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f06f 0202 	mvn.w	r2, #2
 8007296:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3b20      	subs	r3, #32
 800729c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800729e:	68fb      	ldr	r3, [r7, #12]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	080072b1 	.word	0x080072b1

080072b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072ba:	4b13      	ldr	r3, [pc, #76]	@ (8007308 <prvTaskExitError+0x58>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072c2:	d00b      	beq.n	80072dc <prvTaskExitError+0x2c>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	60fb      	str	r3, [r7, #12]
}
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
 80072da:	e7fd      	b.n	80072d8 <prvTaskExitError+0x28>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	60bb      	str	r3, [r7, #8]
}
 80072ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072f0:	bf00      	nop
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0fc      	beq.n	80072f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	2000000c 	.word	0x2000000c
 800730c:	00000000 	.word	0x00000000

08007310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007310:	4b07      	ldr	r3, [pc, #28]	@ (8007330 <pxCurrentTCBConst2>)
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	6808      	ldr	r0, [r1, #0]
 8007316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731a:	f380 8809 	msr	PSP, r0
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8811 	msr	BASEPRI, r0
 800732a:	4770      	bx	lr
 800732c:	f3af 8000 	nop.w

08007330 <pxCurrentTCBConst2>:
 8007330:	20000ac8 	.word	0x20000ac8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop

08007338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007338:	4808      	ldr	r0, [pc, #32]	@ (800735c <prvPortStartFirstTask+0x24>)
 800733a:	6800      	ldr	r0, [r0, #0]
 800733c:	6800      	ldr	r0, [r0, #0]
 800733e:	f380 8808 	msr	MSP, r0
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f380 8814 	msr	CONTROL, r0
 800734a:	b662      	cpsie	i
 800734c:	b661      	cpsie	f
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	df00      	svc	0
 8007358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800735a:	bf00      	nop
 800735c:	e000ed08 	.word	0xe000ed08

08007360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007366:	4b47      	ldr	r3, [pc, #284]	@ (8007484 <xPortStartScheduler+0x124>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a47      	ldr	r2, [pc, #284]	@ (8007488 <xPortStartScheduler+0x128>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d10b      	bne.n	8007388 <xPortStartScheduler+0x28>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	613b      	str	r3, [r7, #16]
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	e7fd      	b.n	8007384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007388:	4b3e      	ldr	r3, [pc, #248]	@ (8007484 <xPortStartScheduler+0x124>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a3f      	ldr	r2, [pc, #252]	@ (800748c <xPortStartScheduler+0x12c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d10b      	bne.n	80073aa <xPortStartScheduler+0x4a>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	60fb      	str	r3, [r7, #12]
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	e7fd      	b.n	80073a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073aa:	4b39      	ldr	r3, [pc, #228]	@ (8007490 <xPortStartScheduler+0x130>)
 80073ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	22ff      	movs	r2, #255	@ 0xff
 80073ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	4b31      	ldr	r3, [pc, #196]	@ (8007494 <xPortStartScheduler+0x134>)
 80073d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073d2:	4b31      	ldr	r3, [pc, #196]	@ (8007498 <xPortStartScheduler+0x138>)
 80073d4:	2207      	movs	r2, #7
 80073d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073d8:	e009      	b.n	80073ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80073da:	4b2f      	ldr	r3, [pc, #188]	@ (8007498 <xPortStartScheduler+0x138>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3b01      	subs	r3, #1
 80073e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007498 <xPortStartScheduler+0x138>)
 80073e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f6:	2b80      	cmp	r3, #128	@ 0x80
 80073f8:	d0ef      	beq.n	80073da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073fa:	4b27      	ldr	r3, [pc, #156]	@ (8007498 <xPortStartScheduler+0x138>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f1c3 0307 	rsb	r3, r3, #7
 8007402:	2b04      	cmp	r3, #4
 8007404:	d00b      	beq.n	800741e <xPortStartScheduler+0xbe>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60bb      	str	r3, [r7, #8]
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	e7fd      	b.n	800741a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800741e:	4b1e      	ldr	r3, [pc, #120]	@ (8007498 <xPortStartScheduler+0x138>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	4a1c      	ldr	r2, [pc, #112]	@ (8007498 <xPortStartScheduler+0x138>)
 8007426:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007428:	4b1b      	ldr	r3, [pc, #108]	@ (8007498 <xPortStartScheduler+0x138>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007430:	4a19      	ldr	r2, [pc, #100]	@ (8007498 <xPortStartScheduler+0x138>)
 8007432:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	b2da      	uxtb	r2, r3
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800743c:	4b17      	ldr	r3, [pc, #92]	@ (800749c <xPortStartScheduler+0x13c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a16      	ldr	r2, [pc, #88]	@ (800749c <xPortStartScheduler+0x13c>)
 8007442:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007446:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007448:	4b14      	ldr	r3, [pc, #80]	@ (800749c <xPortStartScheduler+0x13c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a13      	ldr	r2, [pc, #76]	@ (800749c <xPortStartScheduler+0x13c>)
 800744e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007452:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007454:	f000 f8da 	bl	800760c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007458:	4b11      	ldr	r3, [pc, #68]	@ (80074a0 <xPortStartScheduler+0x140>)
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800745e:	f000 f8f9 	bl	8007654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007462:	4b10      	ldr	r3, [pc, #64]	@ (80074a4 <xPortStartScheduler+0x144>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a0f      	ldr	r2, [pc, #60]	@ (80074a4 <xPortStartScheduler+0x144>)
 8007468:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800746c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800746e:	f7ff ff63 	bl	8007338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007472:	f7ff f82f 	bl	80064d4 <vTaskSwitchContext>
	prvTaskExitError();
 8007476:	f7ff ff1b 	bl	80072b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	e000ed00 	.word	0xe000ed00
 8007488:	410fc271 	.word	0x410fc271
 800748c:	410fc270 	.word	0x410fc270
 8007490:	e000e400 	.word	0xe000e400
 8007494:	200010f4 	.word	0x200010f4
 8007498:	200010f8 	.word	0x200010f8
 800749c:	e000ed20 	.word	0xe000ed20
 80074a0:	2000000c 	.word	0x2000000c
 80074a4:	e000ef34 	.word	0xe000ef34

080074a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	607b      	str	r3, [r7, #4]
}
 80074c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074c2:	4b10      	ldr	r3, [pc, #64]	@ (8007504 <vPortEnterCritical+0x5c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3301      	adds	r3, #1
 80074c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007504 <vPortEnterCritical+0x5c>)
 80074ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <vPortEnterCritical+0x5c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d110      	bne.n	80074f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007508 <vPortEnterCritical+0x60>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	603b      	str	r3, [r7, #0]
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	e7fd      	b.n	80074f2 <vPortEnterCritical+0x4a>
	}
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	2000000c 	.word	0x2000000c
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007512:	4b12      	ldr	r3, [pc, #72]	@ (800755c <vPortExitCritical+0x50>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <vPortExitCritical+0x26>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	607b      	str	r3, [r7, #4]
}
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	e7fd      	b.n	800752e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007532:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <vPortExitCritical+0x50>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3b01      	subs	r3, #1
 8007538:	4a08      	ldr	r2, [pc, #32]	@ (800755c <vPortExitCritical+0x50>)
 800753a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800753c:	4b07      	ldr	r3, [pc, #28]	@ (800755c <vPortExitCritical+0x50>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <vPortExitCritical+0x44>
 8007544:	2300      	movs	r3, #0
 8007546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f383 8811 	msr	BASEPRI, r3
}
 800754e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	2000000c 	.word	0x2000000c

08007560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007560:	f3ef 8009 	mrs	r0, PSP
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	4b15      	ldr	r3, [pc, #84]	@ (80075c0 <pxCurrentTCBConst>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	f01e 0f10 	tst.w	lr, #16
 8007570:	bf08      	it	eq
 8007572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757a:	6010      	str	r0, [r2, #0]
 800757c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007580:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007584:	f380 8811 	msr	BASEPRI, r0
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f7fe ffa0 	bl	80064d4 <vTaskSwitchContext>
 8007594:	f04f 0000 	mov.w	r0, #0
 8007598:	f380 8811 	msr	BASEPRI, r0
 800759c:	bc09      	pop	{r0, r3}
 800759e:	6819      	ldr	r1, [r3, #0]
 80075a0:	6808      	ldr	r0, [r1, #0]
 80075a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a6:	f01e 0f10 	tst.w	lr, #16
 80075aa:	bf08      	it	eq
 80075ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075b0:	f380 8809 	msr	PSP, r0
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w

080075c0 <pxCurrentTCBConst>:
 80075c0:	20000ac8 	.word	0x20000ac8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop

080075c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	607b      	str	r3, [r7, #4]
}
 80075e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075e2:	f7fe febd 	bl	8006360 <xTaskIncrementTick>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075ec:	4b06      	ldr	r3, [pc, #24]	@ (8007608 <xPortSysTickHandler+0x40>)
 80075ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f383 8811 	msr	BASEPRI, r3
}
 80075fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007610:	4b0b      	ldr	r3, [pc, #44]	@ (8007640 <vPortSetupTimerInterrupt+0x34>)
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007616:	4b0b      	ldr	r3, [pc, #44]	@ (8007644 <vPortSetupTimerInterrupt+0x38>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800761c:	4b0a      	ldr	r3, [pc, #40]	@ (8007648 <vPortSetupTimerInterrupt+0x3c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a0a      	ldr	r2, [pc, #40]	@ (800764c <vPortSetupTimerInterrupt+0x40>)
 8007622:	fba2 2303 	umull	r2, r3, r2, r3
 8007626:	099b      	lsrs	r3, r3, #6
 8007628:	4a09      	ldr	r2, [pc, #36]	@ (8007650 <vPortSetupTimerInterrupt+0x44>)
 800762a:	3b01      	subs	r3, #1
 800762c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800762e:	4b04      	ldr	r3, [pc, #16]	@ (8007640 <vPortSetupTimerInterrupt+0x34>)
 8007630:	2207      	movs	r2, #7
 8007632:	601a      	str	r2, [r3, #0]
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	e000e010 	.word	0xe000e010
 8007644:	e000e018 	.word	0xe000e018
 8007648:	20000000 	.word	0x20000000
 800764c:	10624dd3 	.word	0x10624dd3
 8007650:	e000e014 	.word	0xe000e014

08007654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007654:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007664 <vPortEnableVFP+0x10>
 8007658:	6801      	ldr	r1, [r0, #0]
 800765a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800765e:	6001      	str	r1, [r0, #0]
 8007660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007662:	bf00      	nop
 8007664:	e000ed88 	.word	0xe000ed88

08007668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800766e:	f3ef 8305 	mrs	r3, IPSR
 8007672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b0f      	cmp	r3, #15
 8007678:	d915      	bls.n	80076a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800767a:	4a18      	ldr	r2, [pc, #96]	@ (80076dc <vPortValidateInterruptPriority+0x74>)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007684:	4b16      	ldr	r3, [pc, #88]	@ (80076e0 <vPortValidateInterruptPriority+0x78>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	7afa      	ldrb	r2, [r7, #11]
 800768a:	429a      	cmp	r2, r3
 800768c:	d20b      	bcs.n	80076a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	e7fd      	b.n	80076a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076a6:	4b0f      	ldr	r3, [pc, #60]	@ (80076e4 <vPortValidateInterruptPriority+0x7c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80076ae:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <vPortValidateInterruptPriority+0x80>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d90b      	bls.n	80076ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	603b      	str	r3, [r7, #0]
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <vPortValidateInterruptPriority+0x62>
	}
 80076ce:	bf00      	nop
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	e000e3f0 	.word	0xe000e3f0
 80076e0:	200010f4 	.word	0x200010f4
 80076e4:	e000ed0c 	.word	0xe000ed0c
 80076e8:	200010f8 	.word	0x200010f8

080076ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	@ 0x28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076f8:	f7fe fd76 	bl	80061e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007870 <pvPortMalloc+0x184>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007704:	f000 f924 	bl	8007950 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007708:	4b5a      	ldr	r3, [pc, #360]	@ (8007874 <pvPortMalloc+0x188>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	f040 8095 	bne.w	8007840 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01e      	beq.n	800775a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800771c:	2208      	movs	r2, #8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4413      	add	r3, r2
 8007722:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	2b00      	cmp	r3, #0
 800772c:	d015      	beq.n	800775a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f023 0307 	bic.w	r3, r3, #7
 8007734:	3308      	adds	r3, #8
 8007736:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <pvPortMalloc+0x6e>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	617b      	str	r3, [r7, #20]
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	e7fd      	b.n	8007756 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d06f      	beq.n	8007840 <pvPortMalloc+0x154>
 8007760:	4b45      	ldr	r3, [pc, #276]	@ (8007878 <pvPortMalloc+0x18c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	429a      	cmp	r2, r3
 8007768:	d86a      	bhi.n	8007840 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800776a:	4b44      	ldr	r3, [pc, #272]	@ (800787c <pvPortMalloc+0x190>)
 800776c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800776e:	4b43      	ldr	r3, [pc, #268]	@ (800787c <pvPortMalloc+0x190>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007774:	e004      	b.n	8007780 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	429a      	cmp	r2, r3
 8007788:	d903      	bls.n	8007792 <pvPortMalloc+0xa6>
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1f1      	bne.n	8007776 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007792:	4b37      	ldr	r3, [pc, #220]	@ (8007870 <pvPortMalloc+0x184>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007798:	429a      	cmp	r2, r3
 800779a:	d051      	beq.n	8007840 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2208      	movs	r2, #8
 80077a2:	4413      	add	r3, r2
 80077a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	1ad2      	subs	r2, r2, r3
 80077b6:	2308      	movs	r3, #8
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d920      	bls.n	8007800 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4413      	add	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <pvPortMalloc+0xfc>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	613b      	str	r3, [r7, #16]
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	e7fd      	b.n	80077e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	1ad2      	subs	r2, r2, r3
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077fa:	69b8      	ldr	r0, [r7, #24]
 80077fc:	f000 f90a 	bl	8007a14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007800:	4b1d      	ldr	r3, [pc, #116]	@ (8007878 <pvPortMalloc+0x18c>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	4a1b      	ldr	r2, [pc, #108]	@ (8007878 <pvPortMalloc+0x18c>)
 800780c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800780e:	4b1a      	ldr	r3, [pc, #104]	@ (8007878 <pvPortMalloc+0x18c>)
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	4b1b      	ldr	r3, [pc, #108]	@ (8007880 <pvPortMalloc+0x194>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d203      	bcs.n	8007822 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800781a:	4b17      	ldr	r3, [pc, #92]	@ (8007878 <pvPortMalloc+0x18c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a18      	ldr	r2, [pc, #96]	@ (8007880 <pvPortMalloc+0x194>)
 8007820:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	4b13      	ldr	r3, [pc, #76]	@ (8007874 <pvPortMalloc+0x188>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	431a      	orrs	r2, r3
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007836:	4b13      	ldr	r3, [pc, #76]	@ (8007884 <pvPortMalloc+0x198>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	4a11      	ldr	r2, [pc, #68]	@ (8007884 <pvPortMalloc+0x198>)
 800783e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007840:	f7fe fce0 	bl	8006204 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <pvPortMalloc+0x17a>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	60fb      	str	r3, [r7, #12]
}
 8007860:	bf00      	nop
 8007862:	bf00      	nop
 8007864:	e7fd      	b.n	8007862 <pvPortMalloc+0x176>
	return pvReturn;
 8007866:	69fb      	ldr	r3, [r7, #28]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3728      	adds	r7, #40	@ 0x28
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20004d04 	.word	0x20004d04
 8007874:	20004d18 	.word	0x20004d18
 8007878:	20004d08 	.word	0x20004d08
 800787c:	20004cfc 	.word	0x20004cfc
 8007880:	20004d0c 	.word	0x20004d0c
 8007884:	20004d10 	.word	0x20004d10

08007888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d04f      	beq.n	800793a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800789a:	2308      	movs	r3, #8
 800789c:	425b      	negs	r3, r3
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4413      	add	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	4b25      	ldr	r3, [pc, #148]	@ (8007944 <vPortFree+0xbc>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10b      	bne.n	80078ce <vPortFree+0x46>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	60fb      	str	r3, [r7, #12]
}
 80078c8:	bf00      	nop
 80078ca:	bf00      	nop
 80078cc:	e7fd      	b.n	80078ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00b      	beq.n	80078ee <vPortFree+0x66>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	60bb      	str	r3, [r7, #8]
}
 80078e8:	bf00      	nop
 80078ea:	bf00      	nop
 80078ec:	e7fd      	b.n	80078ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	4b14      	ldr	r3, [pc, #80]	@ (8007944 <vPortFree+0xbc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4013      	ands	r3, r2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01e      	beq.n	800793a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d11a      	bne.n	800793a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	4b0e      	ldr	r3, [pc, #56]	@ (8007944 <vPortFree+0xbc>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	43db      	mvns	r3, r3
 800790e:	401a      	ands	r2, r3
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007914:	f7fe fc68 	bl	80061e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	4b0a      	ldr	r3, [pc, #40]	@ (8007948 <vPortFree+0xc0>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4413      	add	r3, r2
 8007922:	4a09      	ldr	r2, [pc, #36]	@ (8007948 <vPortFree+0xc0>)
 8007924:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007926:	6938      	ldr	r0, [r7, #16]
 8007928:	f000 f874 	bl	8007a14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800792c:	4b07      	ldr	r3, [pc, #28]	@ (800794c <vPortFree+0xc4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3301      	adds	r3, #1
 8007932:	4a06      	ldr	r2, [pc, #24]	@ (800794c <vPortFree+0xc4>)
 8007934:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007936:	f7fe fc65 	bl	8006204 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800793a:	bf00      	nop
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20004d18 	.word	0x20004d18
 8007948:	20004d08 	.word	0x20004d08
 800794c:	20004d14 	.word	0x20004d14

08007950 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007956:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800795a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800795c:	4b27      	ldr	r3, [pc, #156]	@ (80079fc <prvHeapInit+0xac>)
 800795e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00c      	beq.n	8007984 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3307      	adds	r3, #7
 800796e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0307 	bic.w	r3, r3, #7
 8007976:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	4a1f      	ldr	r2, [pc, #124]	@ (80079fc <prvHeapInit+0xac>)
 8007980:	4413      	add	r3, r2
 8007982:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007988:	4a1d      	ldr	r2, [pc, #116]	@ (8007a00 <prvHeapInit+0xb0>)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800798e:	4b1c      	ldr	r3, [pc, #112]	@ (8007a00 <prvHeapInit+0xb0>)
 8007990:	2200      	movs	r2, #0
 8007992:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	4413      	add	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800799c:	2208      	movs	r2, #8
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	1a9b      	subs	r3, r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0307 	bic.w	r3, r3, #7
 80079aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4a15      	ldr	r2, [pc, #84]	@ (8007a04 <prvHeapInit+0xb4>)
 80079b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079b2:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <prvHeapInit+0xb4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2200      	movs	r2, #0
 80079b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079ba:	4b12      	ldr	r3, [pc, #72]	@ (8007a04 <prvHeapInit+0xb4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	1ad2      	subs	r2, r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a04 <prvHeapInit+0xb4>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007a08 <prvHeapInit+0xb8>)
 80079de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	4a09      	ldr	r2, [pc, #36]	@ (8007a0c <prvHeapInit+0xbc>)
 80079e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079e8:	4b09      	ldr	r3, [pc, #36]	@ (8007a10 <prvHeapInit+0xc0>)
 80079ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80079ee:	601a      	str	r2, [r3, #0]
}
 80079f0:	bf00      	nop
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	200010fc 	.word	0x200010fc
 8007a00:	20004cfc 	.word	0x20004cfc
 8007a04:	20004d04 	.word	0x20004d04
 8007a08:	20004d0c 	.word	0x20004d0c
 8007a0c:	20004d08 	.word	0x20004d08
 8007a10:	20004d18 	.word	0x20004d18

08007a14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a1c:	4b28      	ldr	r3, [pc, #160]	@ (8007ac0 <prvInsertBlockIntoFreeList+0xac>)
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	e002      	b.n	8007a28 <prvInsertBlockIntoFreeList+0x14>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d8f7      	bhi.n	8007a22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d108      	bne.n	8007a56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	441a      	add	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	441a      	add	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d118      	bne.n	8007a9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	4b15      	ldr	r3, [pc, #84]	@ (8007ac4 <prvInsertBlockIntoFreeList+0xb0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d00d      	beq.n	8007a92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	441a      	add	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	e008      	b.n	8007aa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a92:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac4 <prvInsertBlockIntoFreeList+0xb0>)
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	e003      	b.n	8007aa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d002      	beq.n	8007ab2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ab2:	bf00      	nop
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	20004cfc 	.word	0x20004cfc
 8007ac4:	20004d04 	.word	0x20004d04

08007ac8 <__cvt>:
 8007ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007acc:	ec57 6b10 	vmov	r6, r7, d0
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	463b      	mov	r3, r7
 8007ad8:	bfbb      	ittet	lt
 8007ada:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007ade:	461f      	movlt	r7, r3
 8007ae0:	2300      	movge	r3, #0
 8007ae2:	232d      	movlt	r3, #45	@ 0x2d
 8007ae4:	700b      	strb	r3, [r1, #0]
 8007ae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ae8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007aec:	4691      	mov	r9, r2
 8007aee:	f023 0820 	bic.w	r8, r3, #32
 8007af2:	bfbc      	itt	lt
 8007af4:	4632      	movlt	r2, r6
 8007af6:	4616      	movlt	r6, r2
 8007af8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007afc:	d005      	beq.n	8007b0a <__cvt+0x42>
 8007afe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007b02:	d100      	bne.n	8007b06 <__cvt+0x3e>
 8007b04:	3401      	adds	r4, #1
 8007b06:	2102      	movs	r1, #2
 8007b08:	e000      	b.n	8007b0c <__cvt+0x44>
 8007b0a:	2103      	movs	r1, #3
 8007b0c:	ab03      	add	r3, sp, #12
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	ab02      	add	r3, sp, #8
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	ec47 6b10 	vmov	d0, r6, r7
 8007b18:	4653      	mov	r3, sl
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	f000 fed4 	bl	80088c8 <_dtoa_r>
 8007b20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007b24:	4605      	mov	r5, r0
 8007b26:	d119      	bne.n	8007b5c <__cvt+0x94>
 8007b28:	f019 0f01 	tst.w	r9, #1
 8007b2c:	d00e      	beq.n	8007b4c <__cvt+0x84>
 8007b2e:	eb00 0904 	add.w	r9, r0, r4
 8007b32:	2200      	movs	r2, #0
 8007b34:	2300      	movs	r3, #0
 8007b36:	4630      	mov	r0, r6
 8007b38:	4639      	mov	r1, r7
 8007b3a:	f7f8 ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 8007b3e:	b108      	cbz	r0, 8007b44 <__cvt+0x7c>
 8007b40:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b44:	2230      	movs	r2, #48	@ 0x30
 8007b46:	9b03      	ldr	r3, [sp, #12]
 8007b48:	454b      	cmp	r3, r9
 8007b4a:	d31e      	bcc.n	8007b8a <__cvt+0xc2>
 8007b4c:	9b03      	ldr	r3, [sp, #12]
 8007b4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b50:	1b5b      	subs	r3, r3, r5
 8007b52:	4628      	mov	r0, r5
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	b004      	add	sp, #16
 8007b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b60:	eb00 0904 	add.w	r9, r0, r4
 8007b64:	d1e5      	bne.n	8007b32 <__cvt+0x6a>
 8007b66:	7803      	ldrb	r3, [r0, #0]
 8007b68:	2b30      	cmp	r3, #48	@ 0x30
 8007b6a:	d10a      	bne.n	8007b82 <__cvt+0xba>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4630      	mov	r0, r6
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 ffc8 	bl	8000b08 <__aeabi_dcmpeq>
 8007b78:	b918      	cbnz	r0, 8007b82 <__cvt+0xba>
 8007b7a:	f1c4 0401 	rsb	r4, r4, #1
 8007b7e:	f8ca 4000 	str.w	r4, [sl]
 8007b82:	f8da 3000 	ldr.w	r3, [sl]
 8007b86:	4499      	add	r9, r3
 8007b88:	e7d3      	b.n	8007b32 <__cvt+0x6a>
 8007b8a:	1c59      	adds	r1, r3, #1
 8007b8c:	9103      	str	r1, [sp, #12]
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	e7d9      	b.n	8007b46 <__cvt+0x7e>

08007b92 <__exponent>:
 8007b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b94:	2900      	cmp	r1, #0
 8007b96:	bfba      	itte	lt
 8007b98:	4249      	neglt	r1, r1
 8007b9a:	232d      	movlt	r3, #45	@ 0x2d
 8007b9c:	232b      	movge	r3, #43	@ 0x2b
 8007b9e:	2909      	cmp	r1, #9
 8007ba0:	7002      	strb	r2, [r0, #0]
 8007ba2:	7043      	strb	r3, [r0, #1]
 8007ba4:	dd29      	ble.n	8007bfa <__exponent+0x68>
 8007ba6:	f10d 0307 	add.w	r3, sp, #7
 8007baa:	461d      	mov	r5, r3
 8007bac:	270a      	movs	r7, #10
 8007bae:	461a      	mov	r2, r3
 8007bb0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007bb4:	fb07 1416 	mls	r4, r7, r6, r1
 8007bb8:	3430      	adds	r4, #48	@ 0x30
 8007bba:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	2c63      	cmp	r4, #99	@ 0x63
 8007bc2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	dcf1      	bgt.n	8007bae <__exponent+0x1c>
 8007bca:	3130      	adds	r1, #48	@ 0x30
 8007bcc:	1e94      	subs	r4, r2, #2
 8007bce:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007bd2:	1c41      	adds	r1, r0, #1
 8007bd4:	4623      	mov	r3, r4
 8007bd6:	42ab      	cmp	r3, r5
 8007bd8:	d30a      	bcc.n	8007bf0 <__exponent+0x5e>
 8007bda:	f10d 0309 	add.w	r3, sp, #9
 8007bde:	1a9b      	subs	r3, r3, r2
 8007be0:	42ac      	cmp	r4, r5
 8007be2:	bf88      	it	hi
 8007be4:	2300      	movhi	r3, #0
 8007be6:	3302      	adds	r3, #2
 8007be8:	4403      	add	r3, r0
 8007bea:	1a18      	subs	r0, r3, r0
 8007bec:	b003      	add	sp, #12
 8007bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007bf4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007bf8:	e7ed      	b.n	8007bd6 <__exponent+0x44>
 8007bfa:	2330      	movs	r3, #48	@ 0x30
 8007bfc:	3130      	adds	r1, #48	@ 0x30
 8007bfe:	7083      	strb	r3, [r0, #2]
 8007c00:	70c1      	strb	r1, [r0, #3]
 8007c02:	1d03      	adds	r3, r0, #4
 8007c04:	e7f1      	b.n	8007bea <__exponent+0x58>
	...

08007c08 <_printf_float>:
 8007c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	b08d      	sub	sp, #52	@ 0x34
 8007c0e:	460c      	mov	r4, r1
 8007c10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007c14:	4616      	mov	r6, r2
 8007c16:	461f      	mov	r7, r3
 8007c18:	4605      	mov	r5, r0
 8007c1a:	f000 fcef 	bl	80085fc <_localeconv_r>
 8007c1e:	6803      	ldr	r3, [r0, #0]
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7f8 fb44 	bl	80002b0 <strlen>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c30:	9005      	str	r0, [sp, #20]
 8007c32:	3307      	adds	r3, #7
 8007c34:	f023 0307 	bic.w	r3, r3, #7
 8007c38:	f103 0208 	add.w	r2, r3, #8
 8007c3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007c40:	f8d4 b000 	ldr.w	fp, [r4]
 8007c44:	f8c8 2000 	str.w	r2, [r8]
 8007c48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007c50:	9307      	str	r3, [sp, #28]
 8007c52:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007c5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c5e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ed0 <_printf_float+0x2c8>)
 8007c60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c64:	f7f8 ff82 	bl	8000b6c <__aeabi_dcmpun>
 8007c68:	bb70      	cbnz	r0, 8007cc8 <_printf_float+0xc0>
 8007c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c6e:	4b98      	ldr	r3, [pc, #608]	@ (8007ed0 <_printf_float+0x2c8>)
 8007c70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c74:	f7f8 ff5c 	bl	8000b30 <__aeabi_dcmple>
 8007c78:	bb30      	cbnz	r0, 8007cc8 <_printf_float+0xc0>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4640      	mov	r0, r8
 8007c80:	4649      	mov	r1, r9
 8007c82:	f7f8 ff4b 	bl	8000b1c <__aeabi_dcmplt>
 8007c86:	b110      	cbz	r0, 8007c8e <_printf_float+0x86>
 8007c88:	232d      	movs	r3, #45	@ 0x2d
 8007c8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c8e:	4a91      	ldr	r2, [pc, #580]	@ (8007ed4 <_printf_float+0x2cc>)
 8007c90:	4b91      	ldr	r3, [pc, #580]	@ (8007ed8 <_printf_float+0x2d0>)
 8007c92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c96:	bf94      	ite	ls
 8007c98:	4690      	movls	r8, r2
 8007c9a:	4698      	movhi	r8, r3
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	6123      	str	r3, [r4, #16]
 8007ca0:	f02b 0304 	bic.w	r3, fp, #4
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	f04f 0900 	mov.w	r9, #0
 8007caa:	9700      	str	r7, [sp, #0]
 8007cac:	4633      	mov	r3, r6
 8007cae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 f9d2 	bl	800805c <_printf_common>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f040 808d 	bne.w	8007dd8 <_printf_float+0x1d0>
 8007cbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cc2:	b00d      	add	sp, #52	@ 0x34
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc8:	4642      	mov	r2, r8
 8007cca:	464b      	mov	r3, r9
 8007ccc:	4640      	mov	r0, r8
 8007cce:	4649      	mov	r1, r9
 8007cd0:	f7f8 ff4c 	bl	8000b6c <__aeabi_dcmpun>
 8007cd4:	b140      	cbz	r0, 8007ce8 <_printf_float+0xe0>
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	bfbc      	itt	lt
 8007cdc:	232d      	movlt	r3, #45	@ 0x2d
 8007cde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007ce2:	4a7e      	ldr	r2, [pc, #504]	@ (8007edc <_printf_float+0x2d4>)
 8007ce4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ee0 <_printf_float+0x2d8>)
 8007ce6:	e7d4      	b.n	8007c92 <_printf_float+0x8a>
 8007ce8:	6863      	ldr	r3, [r4, #4]
 8007cea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007cee:	9206      	str	r2, [sp, #24]
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	d13b      	bne.n	8007d6c <_printf_float+0x164>
 8007cf4:	2306      	movs	r3, #6
 8007cf6:	6063      	str	r3, [r4, #4]
 8007cf8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6022      	str	r2, [r4, #0]
 8007d00:	9303      	str	r3, [sp, #12]
 8007d02:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d04:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007d08:	ab09      	add	r3, sp, #36	@ 0x24
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	6861      	ldr	r1, [r4, #4]
 8007d0e:	ec49 8b10 	vmov	d0, r8, r9
 8007d12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007d16:	4628      	mov	r0, r5
 8007d18:	f7ff fed6 	bl	8007ac8 <__cvt>
 8007d1c:	9b06      	ldr	r3, [sp, #24]
 8007d1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d20:	2b47      	cmp	r3, #71	@ 0x47
 8007d22:	4680      	mov	r8, r0
 8007d24:	d129      	bne.n	8007d7a <_printf_float+0x172>
 8007d26:	1cc8      	adds	r0, r1, #3
 8007d28:	db02      	blt.n	8007d30 <_printf_float+0x128>
 8007d2a:	6863      	ldr	r3, [r4, #4]
 8007d2c:	4299      	cmp	r1, r3
 8007d2e:	dd41      	ble.n	8007db4 <_printf_float+0x1ac>
 8007d30:	f1aa 0a02 	sub.w	sl, sl, #2
 8007d34:	fa5f fa8a 	uxtb.w	sl, sl
 8007d38:	3901      	subs	r1, #1
 8007d3a:	4652      	mov	r2, sl
 8007d3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007d40:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d42:	f7ff ff26 	bl	8007b92 <__exponent>
 8007d46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d48:	1813      	adds	r3, r2, r0
 8007d4a:	2a01      	cmp	r2, #1
 8007d4c:	4681      	mov	r9, r0
 8007d4e:	6123      	str	r3, [r4, #16]
 8007d50:	dc02      	bgt.n	8007d58 <_printf_float+0x150>
 8007d52:	6822      	ldr	r2, [r4, #0]
 8007d54:	07d2      	lsls	r2, r2, #31
 8007d56:	d501      	bpl.n	8007d5c <_printf_float+0x154>
 8007d58:	3301      	adds	r3, #1
 8007d5a:	6123      	str	r3, [r4, #16]
 8007d5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0a2      	beq.n	8007caa <_printf_float+0xa2>
 8007d64:	232d      	movs	r3, #45	@ 0x2d
 8007d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d6a:	e79e      	b.n	8007caa <_printf_float+0xa2>
 8007d6c:	9a06      	ldr	r2, [sp, #24]
 8007d6e:	2a47      	cmp	r2, #71	@ 0x47
 8007d70:	d1c2      	bne.n	8007cf8 <_printf_float+0xf0>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1c0      	bne.n	8007cf8 <_printf_float+0xf0>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e7bd      	b.n	8007cf6 <_printf_float+0xee>
 8007d7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d7e:	d9db      	bls.n	8007d38 <_printf_float+0x130>
 8007d80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007d84:	d118      	bne.n	8007db8 <_printf_float+0x1b0>
 8007d86:	2900      	cmp	r1, #0
 8007d88:	6863      	ldr	r3, [r4, #4]
 8007d8a:	dd0b      	ble.n	8007da4 <_printf_float+0x19c>
 8007d8c:	6121      	str	r1, [r4, #16]
 8007d8e:	b913      	cbnz	r3, 8007d96 <_printf_float+0x18e>
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	07d0      	lsls	r0, r2, #31
 8007d94:	d502      	bpl.n	8007d9c <_printf_float+0x194>
 8007d96:	3301      	adds	r3, #1
 8007d98:	440b      	add	r3, r1
 8007d9a:	6123      	str	r3, [r4, #16]
 8007d9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007d9e:	f04f 0900 	mov.w	r9, #0
 8007da2:	e7db      	b.n	8007d5c <_printf_float+0x154>
 8007da4:	b913      	cbnz	r3, 8007dac <_printf_float+0x1a4>
 8007da6:	6822      	ldr	r2, [r4, #0]
 8007da8:	07d2      	lsls	r2, r2, #31
 8007daa:	d501      	bpl.n	8007db0 <_printf_float+0x1a8>
 8007dac:	3302      	adds	r3, #2
 8007dae:	e7f4      	b.n	8007d9a <_printf_float+0x192>
 8007db0:	2301      	movs	r3, #1
 8007db2:	e7f2      	b.n	8007d9a <_printf_float+0x192>
 8007db4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dba:	4299      	cmp	r1, r3
 8007dbc:	db05      	blt.n	8007dca <_printf_float+0x1c2>
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	6121      	str	r1, [r4, #16]
 8007dc2:	07d8      	lsls	r0, r3, #31
 8007dc4:	d5ea      	bpl.n	8007d9c <_printf_float+0x194>
 8007dc6:	1c4b      	adds	r3, r1, #1
 8007dc8:	e7e7      	b.n	8007d9a <_printf_float+0x192>
 8007dca:	2900      	cmp	r1, #0
 8007dcc:	bfd4      	ite	le
 8007dce:	f1c1 0202 	rsble	r2, r1, #2
 8007dd2:	2201      	movgt	r2, #1
 8007dd4:	4413      	add	r3, r2
 8007dd6:	e7e0      	b.n	8007d9a <_printf_float+0x192>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	055a      	lsls	r2, r3, #21
 8007ddc:	d407      	bmi.n	8007dee <_printf_float+0x1e6>
 8007dde:	6923      	ldr	r3, [r4, #16]
 8007de0:	4642      	mov	r2, r8
 8007de2:	4631      	mov	r1, r6
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b8      	blx	r7
 8007de8:	3001      	adds	r0, #1
 8007dea:	d12b      	bne.n	8007e44 <_printf_float+0x23c>
 8007dec:	e767      	b.n	8007cbe <_printf_float+0xb6>
 8007dee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007df2:	f240 80dd 	bls.w	8007fb0 <_printf_float+0x3a8>
 8007df6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f7f8 fe83 	bl	8000b08 <__aeabi_dcmpeq>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d033      	beq.n	8007e6e <_printf_float+0x266>
 8007e06:	4a37      	ldr	r2, [pc, #220]	@ (8007ee4 <_printf_float+0x2dc>)
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	f43f af54 	beq.w	8007cbe <_printf_float+0xb6>
 8007e16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007e1a:	4543      	cmp	r3, r8
 8007e1c:	db02      	blt.n	8007e24 <_printf_float+0x21c>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	07d8      	lsls	r0, r3, #31
 8007e22:	d50f      	bpl.n	8007e44 <_printf_float+0x23c>
 8007e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f43f af45 	beq.w	8007cbe <_printf_float+0xb6>
 8007e34:	f04f 0900 	mov.w	r9, #0
 8007e38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007e3c:	f104 0a1a 	add.w	sl, r4, #26
 8007e40:	45c8      	cmp	r8, r9
 8007e42:	dc09      	bgt.n	8007e58 <_printf_float+0x250>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	079b      	lsls	r3, r3, #30
 8007e48:	f100 8103 	bmi.w	8008052 <_printf_float+0x44a>
 8007e4c:	68e0      	ldr	r0, [r4, #12]
 8007e4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e50:	4298      	cmp	r0, r3
 8007e52:	bfb8      	it	lt
 8007e54:	4618      	movlt	r0, r3
 8007e56:	e734      	b.n	8007cc2 <_printf_float+0xba>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4652      	mov	r2, sl
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	4628      	mov	r0, r5
 8007e60:	47b8      	blx	r7
 8007e62:	3001      	adds	r0, #1
 8007e64:	f43f af2b 	beq.w	8007cbe <_printf_float+0xb6>
 8007e68:	f109 0901 	add.w	r9, r9, #1
 8007e6c:	e7e8      	b.n	8007e40 <_printf_float+0x238>
 8007e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	dc39      	bgt.n	8007ee8 <_printf_float+0x2e0>
 8007e74:	4a1b      	ldr	r2, [pc, #108]	@ (8007ee4 <_printf_float+0x2dc>)
 8007e76:	2301      	movs	r3, #1
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	f43f af1d 	beq.w	8007cbe <_printf_float+0xb6>
 8007e84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007e88:	ea59 0303 	orrs.w	r3, r9, r3
 8007e8c:	d102      	bne.n	8007e94 <_printf_float+0x28c>
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	07d9      	lsls	r1, r3, #31
 8007e92:	d5d7      	bpl.n	8007e44 <_printf_float+0x23c>
 8007e94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	47b8      	blx	r7
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	f43f af0d 	beq.w	8007cbe <_printf_float+0xb6>
 8007ea4:	f04f 0a00 	mov.w	sl, #0
 8007ea8:	f104 0b1a 	add.w	fp, r4, #26
 8007eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eae:	425b      	negs	r3, r3
 8007eb0:	4553      	cmp	r3, sl
 8007eb2:	dc01      	bgt.n	8007eb8 <_printf_float+0x2b0>
 8007eb4:	464b      	mov	r3, r9
 8007eb6:	e793      	b.n	8007de0 <_printf_float+0x1d8>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	465a      	mov	r2, fp
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	47b8      	blx	r7
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	f43f aefb 	beq.w	8007cbe <_printf_float+0xb6>
 8007ec8:	f10a 0a01 	add.w	sl, sl, #1
 8007ecc:	e7ee      	b.n	8007eac <_printf_float+0x2a4>
 8007ece:	bf00      	nop
 8007ed0:	7fefffff 	.word	0x7fefffff
 8007ed4:	0800a924 	.word	0x0800a924
 8007ed8:	0800a928 	.word	0x0800a928
 8007edc:	0800a92c 	.word	0x0800a92c
 8007ee0:	0800a930 	.word	0x0800a930
 8007ee4:	0800a934 	.word	0x0800a934
 8007ee8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007eea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007eee:	4553      	cmp	r3, sl
 8007ef0:	bfa8      	it	ge
 8007ef2:	4653      	movge	r3, sl
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	4699      	mov	r9, r3
 8007ef8:	dc36      	bgt.n	8007f68 <_printf_float+0x360>
 8007efa:	f04f 0b00 	mov.w	fp, #0
 8007efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f02:	f104 021a 	add.w	r2, r4, #26
 8007f06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f08:	9306      	str	r3, [sp, #24]
 8007f0a:	eba3 0309 	sub.w	r3, r3, r9
 8007f0e:	455b      	cmp	r3, fp
 8007f10:	dc31      	bgt.n	8007f76 <_printf_float+0x36e>
 8007f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f14:	459a      	cmp	sl, r3
 8007f16:	dc3a      	bgt.n	8007f8e <_printf_float+0x386>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	07da      	lsls	r2, r3, #31
 8007f1c:	d437      	bmi.n	8007f8e <_printf_float+0x386>
 8007f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f20:	ebaa 0903 	sub.w	r9, sl, r3
 8007f24:	9b06      	ldr	r3, [sp, #24]
 8007f26:	ebaa 0303 	sub.w	r3, sl, r3
 8007f2a:	4599      	cmp	r9, r3
 8007f2c:	bfa8      	it	ge
 8007f2e:	4699      	movge	r9, r3
 8007f30:	f1b9 0f00 	cmp.w	r9, #0
 8007f34:	dc33      	bgt.n	8007f9e <_printf_float+0x396>
 8007f36:	f04f 0800 	mov.w	r8, #0
 8007f3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f3e:	f104 0b1a 	add.w	fp, r4, #26
 8007f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f44:	ebaa 0303 	sub.w	r3, sl, r3
 8007f48:	eba3 0309 	sub.w	r3, r3, r9
 8007f4c:	4543      	cmp	r3, r8
 8007f4e:	f77f af79 	ble.w	8007e44 <_printf_float+0x23c>
 8007f52:	2301      	movs	r3, #1
 8007f54:	465a      	mov	r2, fp
 8007f56:	4631      	mov	r1, r6
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b8      	blx	r7
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f43f aeae 	beq.w	8007cbe <_printf_float+0xb6>
 8007f62:	f108 0801 	add.w	r8, r8, #1
 8007f66:	e7ec      	b.n	8007f42 <_printf_float+0x33a>
 8007f68:	4642      	mov	r2, r8
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	d1c2      	bne.n	8007efa <_printf_float+0x2f2>
 8007f74:	e6a3      	b.n	8007cbe <_printf_float+0xb6>
 8007f76:	2301      	movs	r3, #1
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	9206      	str	r2, [sp, #24]
 8007f7e:	47b8      	blx	r7
 8007f80:	3001      	adds	r0, #1
 8007f82:	f43f ae9c 	beq.w	8007cbe <_printf_float+0xb6>
 8007f86:	9a06      	ldr	r2, [sp, #24]
 8007f88:	f10b 0b01 	add.w	fp, fp, #1
 8007f8c:	e7bb      	b.n	8007f06 <_printf_float+0x2fe>
 8007f8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d1c0      	bne.n	8007f1e <_printf_float+0x316>
 8007f9c:	e68f      	b.n	8007cbe <_printf_float+0xb6>
 8007f9e:	9a06      	ldr	r2, [sp, #24]
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	4442      	add	r2, r8
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	d1c3      	bne.n	8007f36 <_printf_float+0x32e>
 8007fae:	e686      	b.n	8007cbe <_printf_float+0xb6>
 8007fb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fb4:	f1ba 0f01 	cmp.w	sl, #1
 8007fb8:	dc01      	bgt.n	8007fbe <_printf_float+0x3b6>
 8007fba:	07db      	lsls	r3, r3, #31
 8007fbc:	d536      	bpl.n	800802c <_printf_float+0x424>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	f43f ae78 	beq.w	8007cbe <_printf_float+0xb6>
 8007fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b8      	blx	r7
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f43f ae70 	beq.w	8007cbe <_printf_float+0xb6>
 8007fde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007fea:	f7f8 fd8d 	bl	8000b08 <__aeabi_dcmpeq>
 8007fee:	b9c0      	cbnz	r0, 8008022 <_printf_float+0x41a>
 8007ff0:	4653      	mov	r3, sl
 8007ff2:	f108 0201 	add.w	r2, r8, #1
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b8      	blx	r7
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d10c      	bne.n	800801a <_printf_float+0x412>
 8008000:	e65d      	b.n	8007cbe <_printf_float+0xb6>
 8008002:	2301      	movs	r3, #1
 8008004:	465a      	mov	r2, fp
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	f43f ae56 	beq.w	8007cbe <_printf_float+0xb6>
 8008012:	f108 0801 	add.w	r8, r8, #1
 8008016:	45d0      	cmp	r8, sl
 8008018:	dbf3      	blt.n	8008002 <_printf_float+0x3fa>
 800801a:	464b      	mov	r3, r9
 800801c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008020:	e6df      	b.n	8007de2 <_printf_float+0x1da>
 8008022:	f04f 0800 	mov.w	r8, #0
 8008026:	f104 0b1a 	add.w	fp, r4, #26
 800802a:	e7f4      	b.n	8008016 <_printf_float+0x40e>
 800802c:	2301      	movs	r3, #1
 800802e:	4642      	mov	r2, r8
 8008030:	e7e1      	b.n	8007ff6 <_printf_float+0x3ee>
 8008032:	2301      	movs	r3, #1
 8008034:	464a      	mov	r2, r9
 8008036:	4631      	mov	r1, r6
 8008038:	4628      	mov	r0, r5
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	f43f ae3e 	beq.w	8007cbe <_printf_float+0xb6>
 8008042:	f108 0801 	add.w	r8, r8, #1
 8008046:	68e3      	ldr	r3, [r4, #12]
 8008048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800804a:	1a5b      	subs	r3, r3, r1
 800804c:	4543      	cmp	r3, r8
 800804e:	dcf0      	bgt.n	8008032 <_printf_float+0x42a>
 8008050:	e6fc      	b.n	8007e4c <_printf_float+0x244>
 8008052:	f04f 0800 	mov.w	r8, #0
 8008056:	f104 0919 	add.w	r9, r4, #25
 800805a:	e7f4      	b.n	8008046 <_printf_float+0x43e>

0800805c <_printf_common>:
 800805c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008060:	4616      	mov	r6, r2
 8008062:	4698      	mov	r8, r3
 8008064:	688a      	ldr	r2, [r1, #8]
 8008066:	690b      	ldr	r3, [r1, #16]
 8008068:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800806c:	4293      	cmp	r3, r2
 800806e:	bfb8      	it	lt
 8008070:	4613      	movlt	r3, r2
 8008072:	6033      	str	r3, [r6, #0]
 8008074:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008078:	4607      	mov	r7, r0
 800807a:	460c      	mov	r4, r1
 800807c:	b10a      	cbz	r2, 8008082 <_printf_common+0x26>
 800807e:	3301      	adds	r3, #1
 8008080:	6033      	str	r3, [r6, #0]
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	0699      	lsls	r1, r3, #26
 8008086:	bf42      	ittt	mi
 8008088:	6833      	ldrmi	r3, [r6, #0]
 800808a:	3302      	addmi	r3, #2
 800808c:	6033      	strmi	r3, [r6, #0]
 800808e:	6825      	ldr	r5, [r4, #0]
 8008090:	f015 0506 	ands.w	r5, r5, #6
 8008094:	d106      	bne.n	80080a4 <_printf_common+0x48>
 8008096:	f104 0a19 	add.w	sl, r4, #25
 800809a:	68e3      	ldr	r3, [r4, #12]
 800809c:	6832      	ldr	r2, [r6, #0]
 800809e:	1a9b      	subs	r3, r3, r2
 80080a0:	42ab      	cmp	r3, r5
 80080a2:	dc26      	bgt.n	80080f2 <_printf_common+0x96>
 80080a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	3b00      	subs	r3, #0
 80080ac:	bf18      	it	ne
 80080ae:	2301      	movne	r3, #1
 80080b0:	0692      	lsls	r2, r2, #26
 80080b2:	d42b      	bmi.n	800810c <_printf_common+0xb0>
 80080b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080b8:	4641      	mov	r1, r8
 80080ba:	4638      	mov	r0, r7
 80080bc:	47c8      	blx	r9
 80080be:	3001      	adds	r0, #1
 80080c0:	d01e      	beq.n	8008100 <_printf_common+0xa4>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	6922      	ldr	r2, [r4, #16]
 80080c6:	f003 0306 	and.w	r3, r3, #6
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	bf02      	ittt	eq
 80080ce:	68e5      	ldreq	r5, [r4, #12]
 80080d0:	6833      	ldreq	r3, [r6, #0]
 80080d2:	1aed      	subeq	r5, r5, r3
 80080d4:	68a3      	ldr	r3, [r4, #8]
 80080d6:	bf0c      	ite	eq
 80080d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080dc:	2500      	movne	r5, #0
 80080de:	4293      	cmp	r3, r2
 80080e0:	bfc4      	itt	gt
 80080e2:	1a9b      	subgt	r3, r3, r2
 80080e4:	18ed      	addgt	r5, r5, r3
 80080e6:	2600      	movs	r6, #0
 80080e8:	341a      	adds	r4, #26
 80080ea:	42b5      	cmp	r5, r6
 80080ec:	d11a      	bne.n	8008124 <_printf_common+0xc8>
 80080ee:	2000      	movs	r0, #0
 80080f0:	e008      	b.n	8008104 <_printf_common+0xa8>
 80080f2:	2301      	movs	r3, #1
 80080f4:	4652      	mov	r2, sl
 80080f6:	4641      	mov	r1, r8
 80080f8:	4638      	mov	r0, r7
 80080fa:	47c8      	blx	r9
 80080fc:	3001      	adds	r0, #1
 80080fe:	d103      	bne.n	8008108 <_printf_common+0xac>
 8008100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008108:	3501      	adds	r5, #1
 800810a:	e7c6      	b.n	800809a <_printf_common+0x3e>
 800810c:	18e1      	adds	r1, r4, r3
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	2030      	movs	r0, #48	@ 0x30
 8008112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008116:	4422      	add	r2, r4
 8008118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800811c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008120:	3302      	adds	r3, #2
 8008122:	e7c7      	b.n	80080b4 <_printf_common+0x58>
 8008124:	2301      	movs	r3, #1
 8008126:	4622      	mov	r2, r4
 8008128:	4641      	mov	r1, r8
 800812a:	4638      	mov	r0, r7
 800812c:	47c8      	blx	r9
 800812e:	3001      	adds	r0, #1
 8008130:	d0e6      	beq.n	8008100 <_printf_common+0xa4>
 8008132:	3601      	adds	r6, #1
 8008134:	e7d9      	b.n	80080ea <_printf_common+0x8e>
	...

08008138 <_printf_i>:
 8008138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800813c:	7e0f      	ldrb	r7, [r1, #24]
 800813e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008140:	2f78      	cmp	r7, #120	@ 0x78
 8008142:	4691      	mov	r9, r2
 8008144:	4680      	mov	r8, r0
 8008146:	460c      	mov	r4, r1
 8008148:	469a      	mov	sl, r3
 800814a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800814e:	d807      	bhi.n	8008160 <_printf_i+0x28>
 8008150:	2f62      	cmp	r7, #98	@ 0x62
 8008152:	d80a      	bhi.n	800816a <_printf_i+0x32>
 8008154:	2f00      	cmp	r7, #0
 8008156:	f000 80d2 	beq.w	80082fe <_printf_i+0x1c6>
 800815a:	2f58      	cmp	r7, #88	@ 0x58
 800815c:	f000 80b9 	beq.w	80082d2 <_printf_i+0x19a>
 8008160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008168:	e03a      	b.n	80081e0 <_printf_i+0xa8>
 800816a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800816e:	2b15      	cmp	r3, #21
 8008170:	d8f6      	bhi.n	8008160 <_printf_i+0x28>
 8008172:	a101      	add	r1, pc, #4	@ (adr r1, 8008178 <_printf_i+0x40>)
 8008174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008178:	080081d1 	.word	0x080081d1
 800817c:	080081e5 	.word	0x080081e5
 8008180:	08008161 	.word	0x08008161
 8008184:	08008161 	.word	0x08008161
 8008188:	08008161 	.word	0x08008161
 800818c:	08008161 	.word	0x08008161
 8008190:	080081e5 	.word	0x080081e5
 8008194:	08008161 	.word	0x08008161
 8008198:	08008161 	.word	0x08008161
 800819c:	08008161 	.word	0x08008161
 80081a0:	08008161 	.word	0x08008161
 80081a4:	080082e5 	.word	0x080082e5
 80081a8:	0800820f 	.word	0x0800820f
 80081ac:	0800829f 	.word	0x0800829f
 80081b0:	08008161 	.word	0x08008161
 80081b4:	08008161 	.word	0x08008161
 80081b8:	08008307 	.word	0x08008307
 80081bc:	08008161 	.word	0x08008161
 80081c0:	0800820f 	.word	0x0800820f
 80081c4:	08008161 	.word	0x08008161
 80081c8:	08008161 	.word	0x08008161
 80081cc:	080082a7 	.word	0x080082a7
 80081d0:	6833      	ldr	r3, [r6, #0]
 80081d2:	1d1a      	adds	r2, r3, #4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6032      	str	r2, [r6, #0]
 80081d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081e0:	2301      	movs	r3, #1
 80081e2:	e09d      	b.n	8008320 <_printf_i+0x1e8>
 80081e4:	6833      	ldr	r3, [r6, #0]
 80081e6:	6820      	ldr	r0, [r4, #0]
 80081e8:	1d19      	adds	r1, r3, #4
 80081ea:	6031      	str	r1, [r6, #0]
 80081ec:	0606      	lsls	r6, r0, #24
 80081ee:	d501      	bpl.n	80081f4 <_printf_i+0xbc>
 80081f0:	681d      	ldr	r5, [r3, #0]
 80081f2:	e003      	b.n	80081fc <_printf_i+0xc4>
 80081f4:	0645      	lsls	r5, r0, #25
 80081f6:	d5fb      	bpl.n	80081f0 <_printf_i+0xb8>
 80081f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081fc:	2d00      	cmp	r5, #0
 80081fe:	da03      	bge.n	8008208 <_printf_i+0xd0>
 8008200:	232d      	movs	r3, #45	@ 0x2d
 8008202:	426d      	negs	r5, r5
 8008204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008208:	4859      	ldr	r0, [pc, #356]	@ (8008370 <_printf_i+0x238>)
 800820a:	230a      	movs	r3, #10
 800820c:	e011      	b.n	8008232 <_printf_i+0xfa>
 800820e:	6821      	ldr	r1, [r4, #0]
 8008210:	6833      	ldr	r3, [r6, #0]
 8008212:	0608      	lsls	r0, r1, #24
 8008214:	f853 5b04 	ldr.w	r5, [r3], #4
 8008218:	d402      	bmi.n	8008220 <_printf_i+0xe8>
 800821a:	0649      	lsls	r1, r1, #25
 800821c:	bf48      	it	mi
 800821e:	b2ad      	uxthmi	r5, r5
 8008220:	2f6f      	cmp	r7, #111	@ 0x6f
 8008222:	4853      	ldr	r0, [pc, #332]	@ (8008370 <_printf_i+0x238>)
 8008224:	6033      	str	r3, [r6, #0]
 8008226:	bf14      	ite	ne
 8008228:	230a      	movne	r3, #10
 800822a:	2308      	moveq	r3, #8
 800822c:	2100      	movs	r1, #0
 800822e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008232:	6866      	ldr	r6, [r4, #4]
 8008234:	60a6      	str	r6, [r4, #8]
 8008236:	2e00      	cmp	r6, #0
 8008238:	bfa2      	ittt	ge
 800823a:	6821      	ldrge	r1, [r4, #0]
 800823c:	f021 0104 	bicge.w	r1, r1, #4
 8008240:	6021      	strge	r1, [r4, #0]
 8008242:	b90d      	cbnz	r5, 8008248 <_printf_i+0x110>
 8008244:	2e00      	cmp	r6, #0
 8008246:	d04b      	beq.n	80082e0 <_printf_i+0x1a8>
 8008248:	4616      	mov	r6, r2
 800824a:	fbb5 f1f3 	udiv	r1, r5, r3
 800824e:	fb03 5711 	mls	r7, r3, r1, r5
 8008252:	5dc7      	ldrb	r7, [r0, r7]
 8008254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008258:	462f      	mov	r7, r5
 800825a:	42bb      	cmp	r3, r7
 800825c:	460d      	mov	r5, r1
 800825e:	d9f4      	bls.n	800824a <_printf_i+0x112>
 8008260:	2b08      	cmp	r3, #8
 8008262:	d10b      	bne.n	800827c <_printf_i+0x144>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	07df      	lsls	r7, r3, #31
 8008268:	d508      	bpl.n	800827c <_printf_i+0x144>
 800826a:	6923      	ldr	r3, [r4, #16]
 800826c:	6861      	ldr	r1, [r4, #4]
 800826e:	4299      	cmp	r1, r3
 8008270:	bfde      	ittt	le
 8008272:	2330      	movle	r3, #48	@ 0x30
 8008274:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008278:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800827c:	1b92      	subs	r2, r2, r6
 800827e:	6122      	str	r2, [r4, #16]
 8008280:	f8cd a000 	str.w	sl, [sp]
 8008284:	464b      	mov	r3, r9
 8008286:	aa03      	add	r2, sp, #12
 8008288:	4621      	mov	r1, r4
 800828a:	4640      	mov	r0, r8
 800828c:	f7ff fee6 	bl	800805c <_printf_common>
 8008290:	3001      	adds	r0, #1
 8008292:	d14a      	bne.n	800832a <_printf_i+0x1f2>
 8008294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008298:	b004      	add	sp, #16
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	f043 0320 	orr.w	r3, r3, #32
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	4833      	ldr	r0, [pc, #204]	@ (8008374 <_printf_i+0x23c>)
 80082a8:	2778      	movs	r7, #120	@ 0x78
 80082aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	6831      	ldr	r1, [r6, #0]
 80082b2:	061f      	lsls	r7, r3, #24
 80082b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80082b8:	d402      	bmi.n	80082c0 <_printf_i+0x188>
 80082ba:	065f      	lsls	r7, r3, #25
 80082bc:	bf48      	it	mi
 80082be:	b2ad      	uxthmi	r5, r5
 80082c0:	6031      	str	r1, [r6, #0]
 80082c2:	07d9      	lsls	r1, r3, #31
 80082c4:	bf44      	itt	mi
 80082c6:	f043 0320 	orrmi.w	r3, r3, #32
 80082ca:	6023      	strmi	r3, [r4, #0]
 80082cc:	b11d      	cbz	r5, 80082d6 <_printf_i+0x19e>
 80082ce:	2310      	movs	r3, #16
 80082d0:	e7ac      	b.n	800822c <_printf_i+0xf4>
 80082d2:	4827      	ldr	r0, [pc, #156]	@ (8008370 <_printf_i+0x238>)
 80082d4:	e7e9      	b.n	80082aa <_printf_i+0x172>
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	f023 0320 	bic.w	r3, r3, #32
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	e7f6      	b.n	80082ce <_printf_i+0x196>
 80082e0:	4616      	mov	r6, r2
 80082e2:	e7bd      	b.n	8008260 <_printf_i+0x128>
 80082e4:	6833      	ldr	r3, [r6, #0]
 80082e6:	6825      	ldr	r5, [r4, #0]
 80082e8:	6961      	ldr	r1, [r4, #20]
 80082ea:	1d18      	adds	r0, r3, #4
 80082ec:	6030      	str	r0, [r6, #0]
 80082ee:	062e      	lsls	r6, r5, #24
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	d501      	bpl.n	80082f8 <_printf_i+0x1c0>
 80082f4:	6019      	str	r1, [r3, #0]
 80082f6:	e002      	b.n	80082fe <_printf_i+0x1c6>
 80082f8:	0668      	lsls	r0, r5, #25
 80082fa:	d5fb      	bpl.n	80082f4 <_printf_i+0x1bc>
 80082fc:	8019      	strh	r1, [r3, #0]
 80082fe:	2300      	movs	r3, #0
 8008300:	6123      	str	r3, [r4, #16]
 8008302:	4616      	mov	r6, r2
 8008304:	e7bc      	b.n	8008280 <_printf_i+0x148>
 8008306:	6833      	ldr	r3, [r6, #0]
 8008308:	1d1a      	adds	r2, r3, #4
 800830a:	6032      	str	r2, [r6, #0]
 800830c:	681e      	ldr	r6, [r3, #0]
 800830e:	6862      	ldr	r2, [r4, #4]
 8008310:	2100      	movs	r1, #0
 8008312:	4630      	mov	r0, r6
 8008314:	f7f7 ff7c 	bl	8000210 <memchr>
 8008318:	b108      	cbz	r0, 800831e <_printf_i+0x1e6>
 800831a:	1b80      	subs	r0, r0, r6
 800831c:	6060      	str	r0, [r4, #4]
 800831e:	6863      	ldr	r3, [r4, #4]
 8008320:	6123      	str	r3, [r4, #16]
 8008322:	2300      	movs	r3, #0
 8008324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008328:	e7aa      	b.n	8008280 <_printf_i+0x148>
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	4632      	mov	r2, r6
 800832e:	4649      	mov	r1, r9
 8008330:	4640      	mov	r0, r8
 8008332:	47d0      	blx	sl
 8008334:	3001      	adds	r0, #1
 8008336:	d0ad      	beq.n	8008294 <_printf_i+0x15c>
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	079b      	lsls	r3, r3, #30
 800833c:	d413      	bmi.n	8008366 <_printf_i+0x22e>
 800833e:	68e0      	ldr	r0, [r4, #12]
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	4298      	cmp	r0, r3
 8008344:	bfb8      	it	lt
 8008346:	4618      	movlt	r0, r3
 8008348:	e7a6      	b.n	8008298 <_printf_i+0x160>
 800834a:	2301      	movs	r3, #1
 800834c:	4632      	mov	r2, r6
 800834e:	4649      	mov	r1, r9
 8008350:	4640      	mov	r0, r8
 8008352:	47d0      	blx	sl
 8008354:	3001      	adds	r0, #1
 8008356:	d09d      	beq.n	8008294 <_printf_i+0x15c>
 8008358:	3501      	adds	r5, #1
 800835a:	68e3      	ldr	r3, [r4, #12]
 800835c:	9903      	ldr	r1, [sp, #12]
 800835e:	1a5b      	subs	r3, r3, r1
 8008360:	42ab      	cmp	r3, r5
 8008362:	dcf2      	bgt.n	800834a <_printf_i+0x212>
 8008364:	e7eb      	b.n	800833e <_printf_i+0x206>
 8008366:	2500      	movs	r5, #0
 8008368:	f104 0619 	add.w	r6, r4, #25
 800836c:	e7f5      	b.n	800835a <_printf_i+0x222>
 800836e:	bf00      	nop
 8008370:	0800a936 	.word	0x0800a936
 8008374:	0800a947 	.word	0x0800a947

08008378 <std>:
 8008378:	2300      	movs	r3, #0
 800837a:	b510      	push	{r4, lr}
 800837c:	4604      	mov	r4, r0
 800837e:	e9c0 3300 	strd	r3, r3, [r0]
 8008382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008386:	6083      	str	r3, [r0, #8]
 8008388:	8181      	strh	r1, [r0, #12]
 800838a:	6643      	str	r3, [r0, #100]	@ 0x64
 800838c:	81c2      	strh	r2, [r0, #14]
 800838e:	6183      	str	r3, [r0, #24]
 8008390:	4619      	mov	r1, r3
 8008392:	2208      	movs	r2, #8
 8008394:	305c      	adds	r0, #92	@ 0x5c
 8008396:	f000 f928 	bl	80085ea <memset>
 800839a:	4b0d      	ldr	r3, [pc, #52]	@ (80083d0 <std+0x58>)
 800839c:	6263      	str	r3, [r4, #36]	@ 0x24
 800839e:	4b0d      	ldr	r3, [pc, #52]	@ (80083d4 <std+0x5c>)
 80083a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083a2:	4b0d      	ldr	r3, [pc, #52]	@ (80083d8 <std+0x60>)
 80083a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083a6:	4b0d      	ldr	r3, [pc, #52]	@ (80083dc <std+0x64>)
 80083a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80083aa:	4b0d      	ldr	r3, [pc, #52]	@ (80083e0 <std+0x68>)
 80083ac:	6224      	str	r4, [r4, #32]
 80083ae:	429c      	cmp	r4, r3
 80083b0:	d006      	beq.n	80083c0 <std+0x48>
 80083b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083b6:	4294      	cmp	r4, r2
 80083b8:	d002      	beq.n	80083c0 <std+0x48>
 80083ba:	33d0      	adds	r3, #208	@ 0xd0
 80083bc:	429c      	cmp	r4, r3
 80083be:	d105      	bne.n	80083cc <std+0x54>
 80083c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c8:	f000 b9e2 	b.w	8008790 <__retarget_lock_init_recursive>
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	bf00      	nop
 80083d0:	08008565 	.word	0x08008565
 80083d4:	08008587 	.word	0x08008587
 80083d8:	080085bf 	.word	0x080085bf
 80083dc:	080085e3 	.word	0x080085e3
 80083e0:	20004d1c 	.word	0x20004d1c

080083e4 <stdio_exit_handler>:
 80083e4:	4a02      	ldr	r2, [pc, #8]	@ (80083f0 <stdio_exit_handler+0xc>)
 80083e6:	4903      	ldr	r1, [pc, #12]	@ (80083f4 <stdio_exit_handler+0x10>)
 80083e8:	4803      	ldr	r0, [pc, #12]	@ (80083f8 <stdio_exit_handler+0x14>)
 80083ea:	f000 b869 	b.w	80084c0 <_fwalk_sglue>
 80083ee:	bf00      	nop
 80083f0:	20000010 	.word	0x20000010
 80083f4:	0800a10d 	.word	0x0800a10d
 80083f8:	20000020 	.word	0x20000020

080083fc <cleanup_stdio>:
 80083fc:	6841      	ldr	r1, [r0, #4]
 80083fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008430 <cleanup_stdio+0x34>)
 8008400:	4299      	cmp	r1, r3
 8008402:	b510      	push	{r4, lr}
 8008404:	4604      	mov	r4, r0
 8008406:	d001      	beq.n	800840c <cleanup_stdio+0x10>
 8008408:	f001 fe80 	bl	800a10c <_fflush_r>
 800840c:	68a1      	ldr	r1, [r4, #8]
 800840e:	4b09      	ldr	r3, [pc, #36]	@ (8008434 <cleanup_stdio+0x38>)
 8008410:	4299      	cmp	r1, r3
 8008412:	d002      	beq.n	800841a <cleanup_stdio+0x1e>
 8008414:	4620      	mov	r0, r4
 8008416:	f001 fe79 	bl	800a10c <_fflush_r>
 800841a:	68e1      	ldr	r1, [r4, #12]
 800841c:	4b06      	ldr	r3, [pc, #24]	@ (8008438 <cleanup_stdio+0x3c>)
 800841e:	4299      	cmp	r1, r3
 8008420:	d004      	beq.n	800842c <cleanup_stdio+0x30>
 8008422:	4620      	mov	r0, r4
 8008424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008428:	f001 be70 	b.w	800a10c <_fflush_r>
 800842c:	bd10      	pop	{r4, pc}
 800842e:	bf00      	nop
 8008430:	20004d1c 	.word	0x20004d1c
 8008434:	20004d84 	.word	0x20004d84
 8008438:	20004dec 	.word	0x20004dec

0800843c <global_stdio_init.part.0>:
 800843c:	b510      	push	{r4, lr}
 800843e:	4b0b      	ldr	r3, [pc, #44]	@ (800846c <global_stdio_init.part.0+0x30>)
 8008440:	4c0b      	ldr	r4, [pc, #44]	@ (8008470 <global_stdio_init.part.0+0x34>)
 8008442:	4a0c      	ldr	r2, [pc, #48]	@ (8008474 <global_stdio_init.part.0+0x38>)
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	4620      	mov	r0, r4
 8008448:	2200      	movs	r2, #0
 800844a:	2104      	movs	r1, #4
 800844c:	f7ff ff94 	bl	8008378 <std>
 8008450:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008454:	2201      	movs	r2, #1
 8008456:	2109      	movs	r1, #9
 8008458:	f7ff ff8e 	bl	8008378 <std>
 800845c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008460:	2202      	movs	r2, #2
 8008462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008466:	2112      	movs	r1, #18
 8008468:	f7ff bf86 	b.w	8008378 <std>
 800846c:	20004e54 	.word	0x20004e54
 8008470:	20004d1c 	.word	0x20004d1c
 8008474:	080083e5 	.word	0x080083e5

08008478 <__sfp_lock_acquire>:
 8008478:	4801      	ldr	r0, [pc, #4]	@ (8008480 <__sfp_lock_acquire+0x8>)
 800847a:	f000 b98a 	b.w	8008792 <__retarget_lock_acquire_recursive>
 800847e:	bf00      	nop
 8008480:	20004e5d 	.word	0x20004e5d

08008484 <__sfp_lock_release>:
 8008484:	4801      	ldr	r0, [pc, #4]	@ (800848c <__sfp_lock_release+0x8>)
 8008486:	f000 b985 	b.w	8008794 <__retarget_lock_release_recursive>
 800848a:	bf00      	nop
 800848c:	20004e5d 	.word	0x20004e5d

08008490 <__sinit>:
 8008490:	b510      	push	{r4, lr}
 8008492:	4604      	mov	r4, r0
 8008494:	f7ff fff0 	bl	8008478 <__sfp_lock_acquire>
 8008498:	6a23      	ldr	r3, [r4, #32]
 800849a:	b11b      	cbz	r3, 80084a4 <__sinit+0x14>
 800849c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a0:	f7ff bff0 	b.w	8008484 <__sfp_lock_release>
 80084a4:	4b04      	ldr	r3, [pc, #16]	@ (80084b8 <__sinit+0x28>)
 80084a6:	6223      	str	r3, [r4, #32]
 80084a8:	4b04      	ldr	r3, [pc, #16]	@ (80084bc <__sinit+0x2c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1f5      	bne.n	800849c <__sinit+0xc>
 80084b0:	f7ff ffc4 	bl	800843c <global_stdio_init.part.0>
 80084b4:	e7f2      	b.n	800849c <__sinit+0xc>
 80084b6:	bf00      	nop
 80084b8:	080083fd 	.word	0x080083fd
 80084bc:	20004e54 	.word	0x20004e54

080084c0 <_fwalk_sglue>:
 80084c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c4:	4607      	mov	r7, r0
 80084c6:	4688      	mov	r8, r1
 80084c8:	4614      	mov	r4, r2
 80084ca:	2600      	movs	r6, #0
 80084cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084d0:	f1b9 0901 	subs.w	r9, r9, #1
 80084d4:	d505      	bpl.n	80084e2 <_fwalk_sglue+0x22>
 80084d6:	6824      	ldr	r4, [r4, #0]
 80084d8:	2c00      	cmp	r4, #0
 80084da:	d1f7      	bne.n	80084cc <_fwalk_sglue+0xc>
 80084dc:	4630      	mov	r0, r6
 80084de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d907      	bls.n	80084f8 <_fwalk_sglue+0x38>
 80084e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084ec:	3301      	adds	r3, #1
 80084ee:	d003      	beq.n	80084f8 <_fwalk_sglue+0x38>
 80084f0:	4629      	mov	r1, r5
 80084f2:	4638      	mov	r0, r7
 80084f4:	47c0      	blx	r8
 80084f6:	4306      	orrs	r6, r0
 80084f8:	3568      	adds	r5, #104	@ 0x68
 80084fa:	e7e9      	b.n	80084d0 <_fwalk_sglue+0x10>

080084fc <sniprintf>:
 80084fc:	b40c      	push	{r2, r3}
 80084fe:	b530      	push	{r4, r5, lr}
 8008500:	4b17      	ldr	r3, [pc, #92]	@ (8008560 <sniprintf+0x64>)
 8008502:	1e0c      	subs	r4, r1, #0
 8008504:	681d      	ldr	r5, [r3, #0]
 8008506:	b09d      	sub	sp, #116	@ 0x74
 8008508:	da08      	bge.n	800851c <sniprintf+0x20>
 800850a:	238b      	movs	r3, #139	@ 0x8b
 800850c:	602b      	str	r3, [r5, #0]
 800850e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008512:	b01d      	add	sp, #116	@ 0x74
 8008514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008518:	b002      	add	sp, #8
 800851a:	4770      	bx	lr
 800851c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008520:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008524:	bf14      	ite	ne
 8008526:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800852a:	4623      	moveq	r3, r4
 800852c:	9304      	str	r3, [sp, #16]
 800852e:	9307      	str	r3, [sp, #28]
 8008530:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008534:	9002      	str	r0, [sp, #8]
 8008536:	9006      	str	r0, [sp, #24]
 8008538:	f8ad 3016 	strh.w	r3, [sp, #22]
 800853c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800853e:	ab21      	add	r3, sp, #132	@ 0x84
 8008540:	a902      	add	r1, sp, #8
 8008542:	4628      	mov	r0, r5
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	f001 fc61 	bl	8009e0c <_svfiprintf_r>
 800854a:	1c43      	adds	r3, r0, #1
 800854c:	bfbc      	itt	lt
 800854e:	238b      	movlt	r3, #139	@ 0x8b
 8008550:	602b      	strlt	r3, [r5, #0]
 8008552:	2c00      	cmp	r4, #0
 8008554:	d0dd      	beq.n	8008512 <sniprintf+0x16>
 8008556:	9b02      	ldr	r3, [sp, #8]
 8008558:	2200      	movs	r2, #0
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	e7d9      	b.n	8008512 <sniprintf+0x16>
 800855e:	bf00      	nop
 8008560:	2000001c 	.word	0x2000001c

08008564 <__sread>:
 8008564:	b510      	push	{r4, lr}
 8008566:	460c      	mov	r4, r1
 8008568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856c:	f000 f8c2 	bl	80086f4 <_read_r>
 8008570:	2800      	cmp	r0, #0
 8008572:	bfab      	itete	ge
 8008574:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008576:	89a3      	ldrhlt	r3, [r4, #12]
 8008578:	181b      	addge	r3, r3, r0
 800857a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800857e:	bfac      	ite	ge
 8008580:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008582:	81a3      	strhlt	r3, [r4, #12]
 8008584:	bd10      	pop	{r4, pc}

08008586 <__swrite>:
 8008586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858a:	461f      	mov	r7, r3
 800858c:	898b      	ldrh	r3, [r1, #12]
 800858e:	05db      	lsls	r3, r3, #23
 8008590:	4605      	mov	r5, r0
 8008592:	460c      	mov	r4, r1
 8008594:	4616      	mov	r6, r2
 8008596:	d505      	bpl.n	80085a4 <__swrite+0x1e>
 8008598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859c:	2302      	movs	r3, #2
 800859e:	2200      	movs	r2, #0
 80085a0:	f000 f896 	bl	80086d0 <_lseek_r>
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085ae:	81a3      	strh	r3, [r4, #12]
 80085b0:	4632      	mov	r2, r6
 80085b2:	463b      	mov	r3, r7
 80085b4:	4628      	mov	r0, r5
 80085b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ba:	f000 b8ad 	b.w	8008718 <_write_r>

080085be <__sseek>:
 80085be:	b510      	push	{r4, lr}
 80085c0:	460c      	mov	r4, r1
 80085c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c6:	f000 f883 	bl	80086d0 <_lseek_r>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	bf15      	itete	ne
 80085d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085da:	81a3      	strheq	r3, [r4, #12]
 80085dc:	bf18      	it	ne
 80085de:	81a3      	strhne	r3, [r4, #12]
 80085e0:	bd10      	pop	{r4, pc}

080085e2 <__sclose>:
 80085e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e6:	f000 b80d 	b.w	8008604 <_close_r>

080085ea <memset>:
 80085ea:	4402      	add	r2, r0
 80085ec:	4603      	mov	r3, r0
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d100      	bne.n	80085f4 <memset+0xa>
 80085f2:	4770      	bx	lr
 80085f4:	f803 1b01 	strb.w	r1, [r3], #1
 80085f8:	e7f9      	b.n	80085ee <memset+0x4>
	...

080085fc <_localeconv_r>:
 80085fc:	4800      	ldr	r0, [pc, #0]	@ (8008600 <_localeconv_r+0x4>)
 80085fe:	4770      	bx	lr
 8008600:	2000015c 	.word	0x2000015c

08008604 <_close_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4d06      	ldr	r5, [pc, #24]	@ (8008620 <_close_r+0x1c>)
 8008608:	2300      	movs	r3, #0
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	602b      	str	r3, [r5, #0]
 8008610:	f7f9 f9bc 	bl	800198c <_close>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_close_r+0x1a>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_close_r+0x1a>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	20004e58 	.word	0x20004e58

08008624 <_reclaim_reent>:
 8008624:	4b29      	ldr	r3, [pc, #164]	@ (80086cc <_reclaim_reent+0xa8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4283      	cmp	r3, r0
 800862a:	b570      	push	{r4, r5, r6, lr}
 800862c:	4604      	mov	r4, r0
 800862e:	d04b      	beq.n	80086c8 <_reclaim_reent+0xa4>
 8008630:	69c3      	ldr	r3, [r0, #28]
 8008632:	b1ab      	cbz	r3, 8008660 <_reclaim_reent+0x3c>
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	b16b      	cbz	r3, 8008654 <_reclaim_reent+0x30>
 8008638:	2500      	movs	r5, #0
 800863a:	69e3      	ldr	r3, [r4, #28]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	5959      	ldr	r1, [r3, r5]
 8008640:	2900      	cmp	r1, #0
 8008642:	d13b      	bne.n	80086bc <_reclaim_reent+0x98>
 8008644:	3504      	adds	r5, #4
 8008646:	2d80      	cmp	r5, #128	@ 0x80
 8008648:	d1f7      	bne.n	800863a <_reclaim_reent+0x16>
 800864a:	69e3      	ldr	r3, [r4, #28]
 800864c:	4620      	mov	r0, r4
 800864e:	68d9      	ldr	r1, [r3, #12]
 8008650:	f000 fefe 	bl	8009450 <_free_r>
 8008654:	69e3      	ldr	r3, [r4, #28]
 8008656:	6819      	ldr	r1, [r3, #0]
 8008658:	b111      	cbz	r1, 8008660 <_reclaim_reent+0x3c>
 800865a:	4620      	mov	r0, r4
 800865c:	f000 fef8 	bl	8009450 <_free_r>
 8008660:	6961      	ldr	r1, [r4, #20]
 8008662:	b111      	cbz	r1, 800866a <_reclaim_reent+0x46>
 8008664:	4620      	mov	r0, r4
 8008666:	f000 fef3 	bl	8009450 <_free_r>
 800866a:	69e1      	ldr	r1, [r4, #28]
 800866c:	b111      	cbz	r1, 8008674 <_reclaim_reent+0x50>
 800866e:	4620      	mov	r0, r4
 8008670:	f000 feee 	bl	8009450 <_free_r>
 8008674:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008676:	b111      	cbz	r1, 800867e <_reclaim_reent+0x5a>
 8008678:	4620      	mov	r0, r4
 800867a:	f000 fee9 	bl	8009450 <_free_r>
 800867e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008680:	b111      	cbz	r1, 8008688 <_reclaim_reent+0x64>
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fee4 	bl	8009450 <_free_r>
 8008688:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800868a:	b111      	cbz	r1, 8008692 <_reclaim_reent+0x6e>
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fedf 	bl	8009450 <_free_r>
 8008692:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008694:	b111      	cbz	r1, 800869c <_reclaim_reent+0x78>
 8008696:	4620      	mov	r0, r4
 8008698:	f000 feda 	bl	8009450 <_free_r>
 800869c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800869e:	b111      	cbz	r1, 80086a6 <_reclaim_reent+0x82>
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 fed5 	bl	8009450 <_free_r>
 80086a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80086a8:	b111      	cbz	r1, 80086b0 <_reclaim_reent+0x8c>
 80086aa:	4620      	mov	r0, r4
 80086ac:	f000 fed0 	bl	8009450 <_free_r>
 80086b0:	6a23      	ldr	r3, [r4, #32]
 80086b2:	b14b      	cbz	r3, 80086c8 <_reclaim_reent+0xa4>
 80086b4:	4620      	mov	r0, r4
 80086b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086ba:	4718      	bx	r3
 80086bc:	680e      	ldr	r6, [r1, #0]
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 fec6 	bl	8009450 <_free_r>
 80086c4:	4631      	mov	r1, r6
 80086c6:	e7bb      	b.n	8008640 <_reclaim_reent+0x1c>
 80086c8:	bd70      	pop	{r4, r5, r6, pc}
 80086ca:	bf00      	nop
 80086cc:	2000001c 	.word	0x2000001c

080086d0 <_lseek_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	@ (80086f0 <_lseek_r+0x20>)
 80086d4:	4604      	mov	r4, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7f9 f97b 	bl	80019da <_lseek>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_lseek_r+0x1e>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_lseek_r+0x1e>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20004e58 	.word	0x20004e58

080086f4 <_read_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4d07      	ldr	r5, [pc, #28]	@ (8008714 <_read_r+0x20>)
 80086f8:	4604      	mov	r4, r0
 80086fa:	4608      	mov	r0, r1
 80086fc:	4611      	mov	r1, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	602a      	str	r2, [r5, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	f7f9 f909 	bl	800191a <_read>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_read_r+0x1e>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	b103      	cbz	r3, 8008712 <_read_r+0x1e>
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	20004e58 	.word	0x20004e58

08008718 <_write_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4d07      	ldr	r5, [pc, #28]	@ (8008738 <_write_r+0x20>)
 800871c:	4604      	mov	r4, r0
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	2200      	movs	r2, #0
 8008724:	602a      	str	r2, [r5, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f7f9 f914 	bl	8001954 <_write>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_write_r+0x1e>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_write_r+0x1e>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	20004e58 	.word	0x20004e58

0800873c <__errno>:
 800873c:	4b01      	ldr	r3, [pc, #4]	@ (8008744 <__errno+0x8>)
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	2000001c 	.word	0x2000001c

08008748 <__libc_init_array>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	4d0d      	ldr	r5, [pc, #52]	@ (8008780 <__libc_init_array+0x38>)
 800874c:	4c0d      	ldr	r4, [pc, #52]	@ (8008784 <__libc_init_array+0x3c>)
 800874e:	1b64      	subs	r4, r4, r5
 8008750:	10a4      	asrs	r4, r4, #2
 8008752:	2600      	movs	r6, #0
 8008754:	42a6      	cmp	r6, r4
 8008756:	d109      	bne.n	800876c <__libc_init_array+0x24>
 8008758:	4d0b      	ldr	r5, [pc, #44]	@ (8008788 <__libc_init_array+0x40>)
 800875a:	4c0c      	ldr	r4, [pc, #48]	@ (800878c <__libc_init_array+0x44>)
 800875c:	f002 f866 	bl	800a82c <_init>
 8008760:	1b64      	subs	r4, r4, r5
 8008762:	10a4      	asrs	r4, r4, #2
 8008764:	2600      	movs	r6, #0
 8008766:	42a6      	cmp	r6, r4
 8008768:	d105      	bne.n	8008776 <__libc_init_array+0x2e>
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008770:	4798      	blx	r3
 8008772:	3601      	adds	r6, #1
 8008774:	e7ee      	b.n	8008754 <__libc_init_array+0xc>
 8008776:	f855 3b04 	ldr.w	r3, [r5], #4
 800877a:	4798      	blx	r3
 800877c:	3601      	adds	r6, #1
 800877e:	e7f2      	b.n	8008766 <__libc_init_array+0x1e>
 8008780:	0800aca0 	.word	0x0800aca0
 8008784:	0800aca0 	.word	0x0800aca0
 8008788:	0800aca0 	.word	0x0800aca0
 800878c:	0800aca4 	.word	0x0800aca4

08008790 <__retarget_lock_init_recursive>:
 8008790:	4770      	bx	lr

08008792 <__retarget_lock_acquire_recursive>:
 8008792:	4770      	bx	lr

08008794 <__retarget_lock_release_recursive>:
 8008794:	4770      	bx	lr

08008796 <memcpy>:
 8008796:	440a      	add	r2, r1
 8008798:	4291      	cmp	r1, r2
 800879a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800879e:	d100      	bne.n	80087a2 <memcpy+0xc>
 80087a0:	4770      	bx	lr
 80087a2:	b510      	push	{r4, lr}
 80087a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ac:	4291      	cmp	r1, r2
 80087ae:	d1f9      	bne.n	80087a4 <memcpy+0xe>
 80087b0:	bd10      	pop	{r4, pc}

080087b2 <quorem>:
 80087b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b6:	6903      	ldr	r3, [r0, #16]
 80087b8:	690c      	ldr	r4, [r1, #16]
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	4607      	mov	r7, r0
 80087be:	db7e      	blt.n	80088be <quorem+0x10c>
 80087c0:	3c01      	subs	r4, #1
 80087c2:	f101 0814 	add.w	r8, r1, #20
 80087c6:	00a3      	lsls	r3, r4, #2
 80087c8:	f100 0514 	add.w	r5, r0, #20
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087dc:	3301      	adds	r3, #1
 80087de:	429a      	cmp	r2, r3
 80087e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80087e8:	d32e      	bcc.n	8008848 <quorem+0x96>
 80087ea:	f04f 0a00 	mov.w	sl, #0
 80087ee:	46c4      	mov	ip, r8
 80087f0:	46ae      	mov	lr, r5
 80087f2:	46d3      	mov	fp, sl
 80087f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80087f8:	b298      	uxth	r0, r3
 80087fa:	fb06 a000 	mla	r0, r6, r0, sl
 80087fe:	0c02      	lsrs	r2, r0, #16
 8008800:	0c1b      	lsrs	r3, r3, #16
 8008802:	fb06 2303 	mla	r3, r6, r3, r2
 8008806:	f8de 2000 	ldr.w	r2, [lr]
 800880a:	b280      	uxth	r0, r0
 800880c:	b292      	uxth	r2, r2
 800880e:	1a12      	subs	r2, r2, r0
 8008810:	445a      	add	r2, fp
 8008812:	f8de 0000 	ldr.w	r0, [lr]
 8008816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800881a:	b29b      	uxth	r3, r3
 800881c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008820:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008824:	b292      	uxth	r2, r2
 8008826:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800882a:	45e1      	cmp	r9, ip
 800882c:	f84e 2b04 	str.w	r2, [lr], #4
 8008830:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008834:	d2de      	bcs.n	80087f4 <quorem+0x42>
 8008836:	9b00      	ldr	r3, [sp, #0]
 8008838:	58eb      	ldr	r3, [r5, r3]
 800883a:	b92b      	cbnz	r3, 8008848 <quorem+0x96>
 800883c:	9b01      	ldr	r3, [sp, #4]
 800883e:	3b04      	subs	r3, #4
 8008840:	429d      	cmp	r5, r3
 8008842:	461a      	mov	r2, r3
 8008844:	d32f      	bcc.n	80088a6 <quorem+0xf4>
 8008846:	613c      	str	r4, [r7, #16]
 8008848:	4638      	mov	r0, r7
 800884a:	f001 f97b 	bl	8009b44 <__mcmp>
 800884e:	2800      	cmp	r0, #0
 8008850:	db25      	blt.n	800889e <quorem+0xec>
 8008852:	4629      	mov	r1, r5
 8008854:	2000      	movs	r0, #0
 8008856:	f858 2b04 	ldr.w	r2, [r8], #4
 800885a:	f8d1 c000 	ldr.w	ip, [r1]
 800885e:	fa1f fe82 	uxth.w	lr, r2
 8008862:	fa1f f38c 	uxth.w	r3, ip
 8008866:	eba3 030e 	sub.w	r3, r3, lr
 800886a:	4403      	add	r3, r0
 800886c:	0c12      	lsrs	r2, r2, #16
 800886e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008872:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008876:	b29b      	uxth	r3, r3
 8008878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800887c:	45c1      	cmp	r9, r8
 800887e:	f841 3b04 	str.w	r3, [r1], #4
 8008882:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008886:	d2e6      	bcs.n	8008856 <quorem+0xa4>
 8008888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800888c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008890:	b922      	cbnz	r2, 800889c <quorem+0xea>
 8008892:	3b04      	subs	r3, #4
 8008894:	429d      	cmp	r5, r3
 8008896:	461a      	mov	r2, r3
 8008898:	d30b      	bcc.n	80088b2 <quorem+0x100>
 800889a:	613c      	str	r4, [r7, #16]
 800889c:	3601      	adds	r6, #1
 800889e:	4630      	mov	r0, r6
 80088a0:	b003      	add	sp, #12
 80088a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	3b04      	subs	r3, #4
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	d1cb      	bne.n	8008846 <quorem+0x94>
 80088ae:	3c01      	subs	r4, #1
 80088b0:	e7c6      	b.n	8008840 <quorem+0x8e>
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	3b04      	subs	r3, #4
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d1ef      	bne.n	800889a <quorem+0xe8>
 80088ba:	3c01      	subs	r4, #1
 80088bc:	e7ea      	b.n	8008894 <quorem+0xe2>
 80088be:	2000      	movs	r0, #0
 80088c0:	e7ee      	b.n	80088a0 <quorem+0xee>
 80088c2:	0000      	movs	r0, r0
 80088c4:	0000      	movs	r0, r0
	...

080088c8 <_dtoa_r>:
 80088c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088cc:	69c7      	ldr	r7, [r0, #28]
 80088ce:	b099      	sub	sp, #100	@ 0x64
 80088d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088d4:	ec55 4b10 	vmov	r4, r5, d0
 80088d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80088da:	9109      	str	r1, [sp, #36]	@ 0x24
 80088dc:	4683      	mov	fp, r0
 80088de:	920e      	str	r2, [sp, #56]	@ 0x38
 80088e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088e2:	b97f      	cbnz	r7, 8008904 <_dtoa_r+0x3c>
 80088e4:	2010      	movs	r0, #16
 80088e6:	f000 fdfd 	bl	80094e4 <malloc>
 80088ea:	4602      	mov	r2, r0
 80088ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80088f0:	b920      	cbnz	r0, 80088fc <_dtoa_r+0x34>
 80088f2:	4ba7      	ldr	r3, [pc, #668]	@ (8008b90 <_dtoa_r+0x2c8>)
 80088f4:	21ef      	movs	r1, #239	@ 0xef
 80088f6:	48a7      	ldr	r0, [pc, #668]	@ (8008b94 <_dtoa_r+0x2cc>)
 80088f8:	f001 fc5a 	bl	800a1b0 <__assert_func>
 80088fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008900:	6007      	str	r7, [r0, #0]
 8008902:	60c7      	str	r7, [r0, #12]
 8008904:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008908:	6819      	ldr	r1, [r3, #0]
 800890a:	b159      	cbz	r1, 8008924 <_dtoa_r+0x5c>
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	604a      	str	r2, [r1, #4]
 8008910:	2301      	movs	r3, #1
 8008912:	4093      	lsls	r3, r2
 8008914:	608b      	str	r3, [r1, #8]
 8008916:	4658      	mov	r0, fp
 8008918:	f000 feda 	bl	80096d0 <_Bfree>
 800891c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008920:	2200      	movs	r2, #0
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	1e2b      	subs	r3, r5, #0
 8008926:	bfb9      	ittee	lt
 8008928:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800892c:	9303      	strlt	r3, [sp, #12]
 800892e:	2300      	movge	r3, #0
 8008930:	6033      	strge	r3, [r6, #0]
 8008932:	9f03      	ldr	r7, [sp, #12]
 8008934:	4b98      	ldr	r3, [pc, #608]	@ (8008b98 <_dtoa_r+0x2d0>)
 8008936:	bfbc      	itt	lt
 8008938:	2201      	movlt	r2, #1
 800893a:	6032      	strlt	r2, [r6, #0]
 800893c:	43bb      	bics	r3, r7
 800893e:	d112      	bne.n	8008966 <_dtoa_r+0x9e>
 8008940:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008942:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800894c:	4323      	orrs	r3, r4
 800894e:	f000 854d 	beq.w	80093ec <_dtoa_r+0xb24>
 8008952:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008954:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008bac <_dtoa_r+0x2e4>
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 854f 	beq.w	80093fc <_dtoa_r+0xb34>
 800895e:	f10a 0303 	add.w	r3, sl, #3
 8008962:	f000 bd49 	b.w	80093f8 <_dtoa_r+0xb30>
 8008966:	ed9d 7b02 	vldr	d7, [sp, #8]
 800896a:	2200      	movs	r2, #0
 800896c:	ec51 0b17 	vmov	r0, r1, d7
 8008970:	2300      	movs	r3, #0
 8008972:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008976:	f7f8 f8c7 	bl	8000b08 <__aeabi_dcmpeq>
 800897a:	4680      	mov	r8, r0
 800897c:	b158      	cbz	r0, 8008996 <_dtoa_r+0xce>
 800897e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008980:	2301      	movs	r3, #1
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008986:	b113      	cbz	r3, 800898e <_dtoa_r+0xc6>
 8008988:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800898a:	4b84      	ldr	r3, [pc, #528]	@ (8008b9c <_dtoa_r+0x2d4>)
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008bb0 <_dtoa_r+0x2e8>
 8008992:	f000 bd33 	b.w	80093fc <_dtoa_r+0xb34>
 8008996:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800899a:	aa16      	add	r2, sp, #88	@ 0x58
 800899c:	a917      	add	r1, sp, #92	@ 0x5c
 800899e:	4658      	mov	r0, fp
 80089a0:	f001 f980 	bl	8009ca4 <__d2b>
 80089a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80089a8:	4681      	mov	r9, r0
 80089aa:	2e00      	cmp	r6, #0
 80089ac:	d077      	beq.n	8008a9e <_dtoa_r+0x1d6>
 80089ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80089b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80089c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80089c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80089c8:	4619      	mov	r1, r3
 80089ca:	2200      	movs	r2, #0
 80089cc:	4b74      	ldr	r3, [pc, #464]	@ (8008ba0 <_dtoa_r+0x2d8>)
 80089ce:	f7f7 fc7b 	bl	80002c8 <__aeabi_dsub>
 80089d2:	a369      	add	r3, pc, #420	@ (adr r3, 8008b78 <_dtoa_r+0x2b0>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 fe2e 	bl	8000638 <__aeabi_dmul>
 80089dc:	a368      	add	r3, pc, #416	@ (adr r3, 8008b80 <_dtoa_r+0x2b8>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	f7f7 fc73 	bl	80002cc <__adddf3>
 80089e6:	4604      	mov	r4, r0
 80089e8:	4630      	mov	r0, r6
 80089ea:	460d      	mov	r5, r1
 80089ec:	f7f7 fdba 	bl	8000564 <__aeabi_i2d>
 80089f0:	a365      	add	r3, pc, #404	@ (adr r3, 8008b88 <_dtoa_r+0x2c0>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f7 fe1f 	bl	8000638 <__aeabi_dmul>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4620      	mov	r0, r4
 8008a00:	4629      	mov	r1, r5
 8008a02:	f7f7 fc63 	bl	80002cc <__adddf3>
 8008a06:	4604      	mov	r4, r0
 8008a08:	460d      	mov	r5, r1
 8008a0a:	f7f8 f8c5 	bl	8000b98 <__aeabi_d2iz>
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4607      	mov	r7, r0
 8008a12:	2300      	movs	r3, #0
 8008a14:	4620      	mov	r0, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	f7f8 f880 	bl	8000b1c <__aeabi_dcmplt>
 8008a1c:	b140      	cbz	r0, 8008a30 <_dtoa_r+0x168>
 8008a1e:	4638      	mov	r0, r7
 8008a20:	f7f7 fda0 	bl	8000564 <__aeabi_i2d>
 8008a24:	4622      	mov	r2, r4
 8008a26:	462b      	mov	r3, r5
 8008a28:	f7f8 f86e 	bl	8000b08 <__aeabi_dcmpeq>
 8008a2c:	b900      	cbnz	r0, 8008a30 <_dtoa_r+0x168>
 8008a2e:	3f01      	subs	r7, #1
 8008a30:	2f16      	cmp	r7, #22
 8008a32:	d851      	bhi.n	8008ad8 <_dtoa_r+0x210>
 8008a34:	4b5b      	ldr	r3, [pc, #364]	@ (8008ba4 <_dtoa_r+0x2dc>)
 8008a36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a42:	f7f8 f86b 	bl	8000b1c <__aeabi_dcmplt>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d048      	beq.n	8008adc <_dtoa_r+0x214>
 8008a4a:	3f01      	subs	r7, #1
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a52:	1b9b      	subs	r3, r3, r6
 8008a54:	1e5a      	subs	r2, r3, #1
 8008a56:	bf44      	itt	mi
 8008a58:	f1c3 0801 	rsbmi	r8, r3, #1
 8008a5c:	2300      	movmi	r3, #0
 8008a5e:	9208      	str	r2, [sp, #32]
 8008a60:	bf54      	ite	pl
 8008a62:	f04f 0800 	movpl.w	r8, #0
 8008a66:	9308      	strmi	r3, [sp, #32]
 8008a68:	2f00      	cmp	r7, #0
 8008a6a:	db39      	blt.n	8008ae0 <_dtoa_r+0x218>
 8008a6c:	9b08      	ldr	r3, [sp, #32]
 8008a6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008a70:	443b      	add	r3, r7
 8008a72:	9308      	str	r3, [sp, #32]
 8008a74:	2300      	movs	r3, #0
 8008a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a7a:	2b09      	cmp	r3, #9
 8008a7c:	d864      	bhi.n	8008b48 <_dtoa_r+0x280>
 8008a7e:	2b05      	cmp	r3, #5
 8008a80:	bfc4      	itt	gt
 8008a82:	3b04      	subgt	r3, #4
 8008a84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a88:	f1a3 0302 	sub.w	r3, r3, #2
 8008a8c:	bfcc      	ite	gt
 8008a8e:	2400      	movgt	r4, #0
 8008a90:	2401      	movle	r4, #1
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d863      	bhi.n	8008b5e <_dtoa_r+0x296>
 8008a96:	e8df f003 	tbb	[pc, r3]
 8008a9a:	372a      	.short	0x372a
 8008a9c:	5535      	.short	0x5535
 8008a9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008aa2:	441e      	add	r6, r3
 8008aa4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	bfc1      	itttt	gt
 8008aac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ab0:	409f      	lslgt	r7, r3
 8008ab2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ab6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008aba:	bfd6      	itet	le
 8008abc:	f1c3 0320 	rsble	r3, r3, #32
 8008ac0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ac4:	fa04 f003 	lslle.w	r0, r4, r3
 8008ac8:	f7f7 fd3c 	bl	8000544 <__aeabi_ui2d>
 8008acc:	2201      	movs	r2, #1
 8008ace:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008ad2:	3e01      	subs	r6, #1
 8008ad4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008ad6:	e777      	b.n	80089c8 <_dtoa_r+0x100>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e7b8      	b.n	8008a4e <_dtoa_r+0x186>
 8008adc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008ade:	e7b7      	b.n	8008a50 <_dtoa_r+0x188>
 8008ae0:	427b      	negs	r3, r7
 8008ae2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	eba8 0807 	sub.w	r8, r8, r7
 8008aea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008aec:	e7c4      	b.n	8008a78 <_dtoa_r+0x1b0>
 8008aee:	2300      	movs	r3, #0
 8008af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dc35      	bgt.n	8008b64 <_dtoa_r+0x29c>
 8008af8:	2301      	movs	r3, #1
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	9307      	str	r3, [sp, #28]
 8008afe:	461a      	mov	r2, r3
 8008b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b02:	e00b      	b.n	8008b1c <_dtoa_r+0x254>
 8008b04:	2301      	movs	r3, #1
 8008b06:	e7f3      	b.n	8008af0 <_dtoa_r+0x228>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b0e:	18fb      	adds	r3, r7, r3
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	9307      	str	r3, [sp, #28]
 8008b18:	bfb8      	it	lt
 8008b1a:	2301      	movlt	r3, #1
 8008b1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008b20:	2100      	movs	r1, #0
 8008b22:	2204      	movs	r2, #4
 8008b24:	f102 0514 	add.w	r5, r2, #20
 8008b28:	429d      	cmp	r5, r3
 8008b2a:	d91f      	bls.n	8008b6c <_dtoa_r+0x2a4>
 8008b2c:	6041      	str	r1, [r0, #4]
 8008b2e:	4658      	mov	r0, fp
 8008b30:	f000 fd8e 	bl	8009650 <_Balloc>
 8008b34:	4682      	mov	sl, r0
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d13c      	bne.n	8008bb4 <_dtoa_r+0x2ec>
 8008b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba8 <_dtoa_r+0x2e0>)
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008b42:	e6d8      	b.n	80088f6 <_dtoa_r+0x2e>
 8008b44:	2301      	movs	r3, #1
 8008b46:	e7e0      	b.n	8008b0a <_dtoa_r+0x242>
 8008b48:	2401      	movs	r4, #1
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	9307      	str	r3, [sp, #28]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2312      	movs	r3, #18
 8008b5c:	e7d0      	b.n	8008b00 <_dtoa_r+0x238>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b62:	e7f5      	b.n	8008b50 <_dtoa_r+0x288>
 8008b64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	9307      	str	r3, [sp, #28]
 8008b6a:	e7d7      	b.n	8008b1c <_dtoa_r+0x254>
 8008b6c:	3101      	adds	r1, #1
 8008b6e:	0052      	lsls	r2, r2, #1
 8008b70:	e7d8      	b.n	8008b24 <_dtoa_r+0x25c>
 8008b72:	bf00      	nop
 8008b74:	f3af 8000 	nop.w
 8008b78:	636f4361 	.word	0x636f4361
 8008b7c:	3fd287a7 	.word	0x3fd287a7
 8008b80:	8b60c8b3 	.word	0x8b60c8b3
 8008b84:	3fc68a28 	.word	0x3fc68a28
 8008b88:	509f79fb 	.word	0x509f79fb
 8008b8c:	3fd34413 	.word	0x3fd34413
 8008b90:	0800a965 	.word	0x0800a965
 8008b94:	0800a97c 	.word	0x0800a97c
 8008b98:	7ff00000 	.word	0x7ff00000
 8008b9c:	0800a935 	.word	0x0800a935
 8008ba0:	3ff80000 	.word	0x3ff80000
 8008ba4:	0800aa78 	.word	0x0800aa78
 8008ba8:	0800a9d4 	.word	0x0800a9d4
 8008bac:	0800a961 	.word	0x0800a961
 8008bb0:	0800a934 	.word	0x0800a934
 8008bb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008bb8:	6018      	str	r0, [r3, #0]
 8008bba:	9b07      	ldr	r3, [sp, #28]
 8008bbc:	2b0e      	cmp	r3, #14
 8008bbe:	f200 80a4 	bhi.w	8008d0a <_dtoa_r+0x442>
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	f000 80a1 	beq.w	8008d0a <_dtoa_r+0x442>
 8008bc8:	2f00      	cmp	r7, #0
 8008bca:	dd33      	ble.n	8008c34 <_dtoa_r+0x36c>
 8008bcc:	4bad      	ldr	r3, [pc, #692]	@ (8008e84 <_dtoa_r+0x5bc>)
 8008bce:	f007 020f 	and.w	r2, r7, #15
 8008bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bd6:	ed93 7b00 	vldr	d7, [r3]
 8008bda:	05f8      	lsls	r0, r7, #23
 8008bdc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008be0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008be4:	d516      	bpl.n	8008c14 <_dtoa_r+0x34c>
 8008be6:	4ba8      	ldr	r3, [pc, #672]	@ (8008e88 <_dtoa_r+0x5c0>)
 8008be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bf0:	f7f7 fe4c 	bl	800088c <__aeabi_ddiv>
 8008bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bf8:	f004 040f 	and.w	r4, r4, #15
 8008bfc:	2603      	movs	r6, #3
 8008bfe:	4da2      	ldr	r5, [pc, #648]	@ (8008e88 <_dtoa_r+0x5c0>)
 8008c00:	b954      	cbnz	r4, 8008c18 <_dtoa_r+0x350>
 8008c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c0a:	f7f7 fe3f 	bl	800088c <__aeabi_ddiv>
 8008c0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c12:	e028      	b.n	8008c66 <_dtoa_r+0x39e>
 8008c14:	2602      	movs	r6, #2
 8008c16:	e7f2      	b.n	8008bfe <_dtoa_r+0x336>
 8008c18:	07e1      	lsls	r1, r4, #31
 8008c1a:	d508      	bpl.n	8008c2e <_dtoa_r+0x366>
 8008c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c24:	f7f7 fd08 	bl	8000638 <__aeabi_dmul>
 8008c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c2c:	3601      	adds	r6, #1
 8008c2e:	1064      	asrs	r4, r4, #1
 8008c30:	3508      	adds	r5, #8
 8008c32:	e7e5      	b.n	8008c00 <_dtoa_r+0x338>
 8008c34:	f000 80d2 	beq.w	8008ddc <_dtoa_r+0x514>
 8008c38:	427c      	negs	r4, r7
 8008c3a:	4b92      	ldr	r3, [pc, #584]	@ (8008e84 <_dtoa_r+0x5bc>)
 8008c3c:	4d92      	ldr	r5, [pc, #584]	@ (8008e88 <_dtoa_r+0x5c0>)
 8008c3e:	f004 020f 	and.w	r2, r4, #15
 8008c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c4e:	f7f7 fcf3 	bl	8000638 <__aeabi_dmul>
 8008c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c56:	1124      	asrs	r4, r4, #4
 8008c58:	2300      	movs	r3, #0
 8008c5a:	2602      	movs	r6, #2
 8008c5c:	2c00      	cmp	r4, #0
 8008c5e:	f040 80b2 	bne.w	8008dc6 <_dtoa_r+0x4fe>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1d3      	bne.n	8008c0e <_dtoa_r+0x346>
 8008c66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 80b7 	beq.w	8008de0 <_dtoa_r+0x518>
 8008c72:	4b86      	ldr	r3, [pc, #536]	@ (8008e8c <_dtoa_r+0x5c4>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	4620      	mov	r0, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7f7 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	f000 80ae 	beq.w	8008de0 <_dtoa_r+0x518>
 8008c84:	9b07      	ldr	r3, [sp, #28]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80aa 	beq.w	8008de0 <_dtoa_r+0x518>
 8008c8c:	9b00      	ldr	r3, [sp, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	dd37      	ble.n	8008d02 <_dtoa_r+0x43a>
 8008c92:	1e7b      	subs	r3, r7, #1
 8008c94:	9304      	str	r3, [sp, #16]
 8008c96:	4620      	mov	r0, r4
 8008c98:	4b7d      	ldr	r3, [pc, #500]	@ (8008e90 <_dtoa_r+0x5c8>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	f7f7 fccb 	bl	8000638 <__aeabi_dmul>
 8008ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ca6:	9c00      	ldr	r4, [sp, #0]
 8008ca8:	3601      	adds	r6, #1
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7f7 fc5a 	bl	8000564 <__aeabi_i2d>
 8008cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cb4:	f7f7 fcc0 	bl	8000638 <__aeabi_dmul>
 8008cb8:	4b76      	ldr	r3, [pc, #472]	@ (8008e94 <_dtoa_r+0x5cc>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f7f7 fb06 	bl	80002cc <__adddf3>
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008cc6:	2c00      	cmp	r4, #0
 8008cc8:	f040 808d 	bne.w	8008de6 <_dtoa_r+0x51e>
 8008ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cd0:	4b71      	ldr	r3, [pc, #452]	@ (8008e98 <_dtoa_r+0x5d0>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f7f7 faf8 	bl	80002c8 <__aeabi_dsub>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ce0:	462a      	mov	r2, r5
 8008ce2:	4633      	mov	r3, r6
 8008ce4:	f7f7 ff38 	bl	8000b58 <__aeabi_dcmpgt>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	f040 828b 	bne.w	8009204 <_dtoa_r+0x93c>
 8008cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cf2:	462a      	mov	r2, r5
 8008cf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008cf8:	f7f7 ff10 	bl	8000b1c <__aeabi_dcmplt>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	f040 8128 	bne.w	8008f52 <_dtoa_r+0x68a>
 8008d02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008d06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008d0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f2c0 815a 	blt.w	8008fc6 <_dtoa_r+0x6fe>
 8008d12:	2f0e      	cmp	r7, #14
 8008d14:	f300 8157 	bgt.w	8008fc6 <_dtoa_r+0x6fe>
 8008d18:	4b5a      	ldr	r3, [pc, #360]	@ (8008e84 <_dtoa_r+0x5bc>)
 8008d1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d1e:	ed93 7b00 	vldr	d7, [r3]
 8008d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	ed8d 7b00 	vstr	d7, [sp]
 8008d2a:	da03      	bge.n	8008d34 <_dtoa_r+0x46c>
 8008d2c:	9b07      	ldr	r3, [sp, #28]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f340 8101 	ble.w	8008f36 <_dtoa_r+0x66e>
 8008d34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d38:	4656      	mov	r6, sl
 8008d3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7f7 fda3 	bl	800088c <__aeabi_ddiv>
 8008d46:	f7f7 ff27 	bl	8000b98 <__aeabi_d2iz>
 8008d4a:	4680      	mov	r8, r0
 8008d4c:	f7f7 fc0a 	bl	8000564 <__aeabi_i2d>
 8008d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d54:	f7f7 fc70 	bl	8000638 <__aeabi_dmul>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	4629      	mov	r1, r5
 8008d60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d64:	f7f7 fab0 	bl	80002c8 <__aeabi_dsub>
 8008d68:	f806 4b01 	strb.w	r4, [r6], #1
 8008d6c:	9d07      	ldr	r5, [sp, #28]
 8008d6e:	eba6 040a 	sub.w	r4, r6, sl
 8008d72:	42a5      	cmp	r5, r4
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	f040 8117 	bne.w	8008faa <_dtoa_r+0x6e2>
 8008d7c:	f7f7 faa6 	bl	80002cc <__adddf3>
 8008d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d84:	4604      	mov	r4, r0
 8008d86:	460d      	mov	r5, r1
 8008d88:	f7f7 fee6 	bl	8000b58 <__aeabi_dcmpgt>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f040 80f9 	bne.w	8008f84 <_dtoa_r+0x6bc>
 8008d92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d96:	4620      	mov	r0, r4
 8008d98:	4629      	mov	r1, r5
 8008d9a:	f7f7 feb5 	bl	8000b08 <__aeabi_dcmpeq>
 8008d9e:	b118      	cbz	r0, 8008da8 <_dtoa_r+0x4e0>
 8008da0:	f018 0f01 	tst.w	r8, #1
 8008da4:	f040 80ee 	bne.w	8008f84 <_dtoa_r+0x6bc>
 8008da8:	4649      	mov	r1, r9
 8008daa:	4658      	mov	r0, fp
 8008dac:	f000 fc90 	bl	80096d0 <_Bfree>
 8008db0:	2300      	movs	r3, #0
 8008db2:	7033      	strb	r3, [r6, #0]
 8008db4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008db6:	3701      	adds	r7, #1
 8008db8:	601f      	str	r7, [r3, #0]
 8008dba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 831d 	beq.w	80093fc <_dtoa_r+0xb34>
 8008dc2:	601e      	str	r6, [r3, #0]
 8008dc4:	e31a      	b.n	80093fc <_dtoa_r+0xb34>
 8008dc6:	07e2      	lsls	r2, r4, #31
 8008dc8:	d505      	bpl.n	8008dd6 <_dtoa_r+0x50e>
 8008dca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dce:	f7f7 fc33 	bl	8000638 <__aeabi_dmul>
 8008dd2:	3601      	adds	r6, #1
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	1064      	asrs	r4, r4, #1
 8008dd8:	3508      	adds	r5, #8
 8008dda:	e73f      	b.n	8008c5c <_dtoa_r+0x394>
 8008ddc:	2602      	movs	r6, #2
 8008dde:	e742      	b.n	8008c66 <_dtoa_r+0x39e>
 8008de0:	9c07      	ldr	r4, [sp, #28]
 8008de2:	9704      	str	r7, [sp, #16]
 8008de4:	e761      	b.n	8008caa <_dtoa_r+0x3e2>
 8008de6:	4b27      	ldr	r3, [pc, #156]	@ (8008e84 <_dtoa_r+0x5bc>)
 8008de8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008df2:	4454      	add	r4, sl
 8008df4:	2900      	cmp	r1, #0
 8008df6:	d053      	beq.n	8008ea0 <_dtoa_r+0x5d8>
 8008df8:	4928      	ldr	r1, [pc, #160]	@ (8008e9c <_dtoa_r+0x5d4>)
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	f7f7 fd46 	bl	800088c <__aeabi_ddiv>
 8008e00:	4633      	mov	r3, r6
 8008e02:	462a      	mov	r2, r5
 8008e04:	f7f7 fa60 	bl	80002c8 <__aeabi_dsub>
 8008e08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e0c:	4656      	mov	r6, sl
 8008e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e12:	f7f7 fec1 	bl	8000b98 <__aeabi_d2iz>
 8008e16:	4605      	mov	r5, r0
 8008e18:	f7f7 fba4 	bl	8000564 <__aeabi_i2d>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e24:	f7f7 fa50 	bl	80002c8 <__aeabi_dsub>
 8008e28:	3530      	adds	r5, #48	@ 0x30
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e32:	f806 5b01 	strb.w	r5, [r6], #1
 8008e36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e3a:	f7f7 fe6f 	bl	8000b1c <__aeabi_dcmplt>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d171      	bne.n	8008f26 <_dtoa_r+0x65e>
 8008e42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e46:	4911      	ldr	r1, [pc, #68]	@ (8008e8c <_dtoa_r+0x5c4>)
 8008e48:	2000      	movs	r0, #0
 8008e4a:	f7f7 fa3d 	bl	80002c8 <__aeabi_dsub>
 8008e4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e52:	f7f7 fe63 	bl	8000b1c <__aeabi_dcmplt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	f040 8095 	bne.w	8008f86 <_dtoa_r+0x6be>
 8008e5c:	42a6      	cmp	r6, r4
 8008e5e:	f43f af50 	beq.w	8008d02 <_dtoa_r+0x43a>
 8008e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e66:	4b0a      	ldr	r3, [pc, #40]	@ (8008e90 <_dtoa_r+0x5c8>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f7f7 fbe5 	bl	8000638 <__aeabi_dmul>
 8008e6e:	4b08      	ldr	r3, [pc, #32]	@ (8008e90 <_dtoa_r+0x5c8>)
 8008e70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e74:	2200      	movs	r2, #0
 8008e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e7a:	f7f7 fbdd 	bl	8000638 <__aeabi_dmul>
 8008e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e82:	e7c4      	b.n	8008e0e <_dtoa_r+0x546>
 8008e84:	0800aa78 	.word	0x0800aa78
 8008e88:	0800aa50 	.word	0x0800aa50
 8008e8c:	3ff00000 	.word	0x3ff00000
 8008e90:	40240000 	.word	0x40240000
 8008e94:	401c0000 	.word	0x401c0000
 8008e98:	40140000 	.word	0x40140000
 8008e9c:	3fe00000 	.word	0x3fe00000
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f7f7 fbc8 	bl	8000638 <__aeabi_dmul>
 8008ea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008eac:	9415      	str	r4, [sp, #84]	@ 0x54
 8008eae:	4656      	mov	r6, sl
 8008eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eb4:	f7f7 fe70 	bl	8000b98 <__aeabi_d2iz>
 8008eb8:	4605      	mov	r5, r0
 8008eba:	f7f7 fb53 	bl	8000564 <__aeabi_i2d>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ec6:	f7f7 f9ff 	bl	80002c8 <__aeabi_dsub>
 8008eca:	3530      	adds	r5, #48	@ 0x30
 8008ecc:	f806 5b01 	strb.w	r5, [r6], #1
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	42a6      	cmp	r6, r4
 8008ed6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008eda:	f04f 0200 	mov.w	r2, #0
 8008ede:	d124      	bne.n	8008f2a <_dtoa_r+0x662>
 8008ee0:	4bac      	ldr	r3, [pc, #688]	@ (8009194 <_dtoa_r+0x8cc>)
 8008ee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ee6:	f7f7 f9f1 	bl	80002cc <__adddf3>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef2:	f7f7 fe31 	bl	8000b58 <__aeabi_dcmpgt>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d145      	bne.n	8008f86 <_dtoa_r+0x6be>
 8008efa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008efe:	49a5      	ldr	r1, [pc, #660]	@ (8009194 <_dtoa_r+0x8cc>)
 8008f00:	2000      	movs	r0, #0
 8008f02:	f7f7 f9e1 	bl	80002c8 <__aeabi_dsub>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f0e:	f7f7 fe05 	bl	8000b1c <__aeabi_dcmplt>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	f43f aef5 	beq.w	8008d02 <_dtoa_r+0x43a>
 8008f18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008f1a:	1e73      	subs	r3, r6, #1
 8008f1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f22:	2b30      	cmp	r3, #48	@ 0x30
 8008f24:	d0f8      	beq.n	8008f18 <_dtoa_r+0x650>
 8008f26:	9f04      	ldr	r7, [sp, #16]
 8008f28:	e73e      	b.n	8008da8 <_dtoa_r+0x4e0>
 8008f2a:	4b9b      	ldr	r3, [pc, #620]	@ (8009198 <_dtoa_r+0x8d0>)
 8008f2c:	f7f7 fb84 	bl	8000638 <__aeabi_dmul>
 8008f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f34:	e7bc      	b.n	8008eb0 <_dtoa_r+0x5e8>
 8008f36:	d10c      	bne.n	8008f52 <_dtoa_r+0x68a>
 8008f38:	4b98      	ldr	r3, [pc, #608]	@ (800919c <_dtoa_r+0x8d4>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f40:	f7f7 fb7a 	bl	8000638 <__aeabi_dmul>
 8008f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f48:	f7f7 fdfc 	bl	8000b44 <__aeabi_dcmpge>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	f000 8157 	beq.w	8009200 <_dtoa_r+0x938>
 8008f52:	2400      	movs	r4, #0
 8008f54:	4625      	mov	r5, r4
 8008f56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f58:	43db      	mvns	r3, r3
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	4656      	mov	r6, sl
 8008f5e:	2700      	movs	r7, #0
 8008f60:	4621      	mov	r1, r4
 8008f62:	4658      	mov	r0, fp
 8008f64:	f000 fbb4 	bl	80096d0 <_Bfree>
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	d0dc      	beq.n	8008f26 <_dtoa_r+0x65e>
 8008f6c:	b12f      	cbz	r7, 8008f7a <_dtoa_r+0x6b2>
 8008f6e:	42af      	cmp	r7, r5
 8008f70:	d003      	beq.n	8008f7a <_dtoa_r+0x6b2>
 8008f72:	4639      	mov	r1, r7
 8008f74:	4658      	mov	r0, fp
 8008f76:	f000 fbab 	bl	80096d0 <_Bfree>
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4658      	mov	r0, fp
 8008f7e:	f000 fba7 	bl	80096d0 <_Bfree>
 8008f82:	e7d0      	b.n	8008f26 <_dtoa_r+0x65e>
 8008f84:	9704      	str	r7, [sp, #16]
 8008f86:	4633      	mov	r3, r6
 8008f88:	461e      	mov	r6, r3
 8008f8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f8e:	2a39      	cmp	r2, #57	@ 0x39
 8008f90:	d107      	bne.n	8008fa2 <_dtoa_r+0x6da>
 8008f92:	459a      	cmp	sl, r3
 8008f94:	d1f8      	bne.n	8008f88 <_dtoa_r+0x6c0>
 8008f96:	9a04      	ldr	r2, [sp, #16]
 8008f98:	3201      	adds	r2, #1
 8008f9a:	9204      	str	r2, [sp, #16]
 8008f9c:	2230      	movs	r2, #48	@ 0x30
 8008f9e:	f88a 2000 	strb.w	r2, [sl]
 8008fa2:	781a      	ldrb	r2, [r3, #0]
 8008fa4:	3201      	adds	r2, #1
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	e7bd      	b.n	8008f26 <_dtoa_r+0x65e>
 8008faa:	4b7b      	ldr	r3, [pc, #492]	@ (8009198 <_dtoa_r+0x8d0>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	f7f7 fb43 	bl	8000638 <__aeabi_dmul>
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	460d      	mov	r5, r1
 8008fba:	f7f7 fda5 	bl	8000b08 <__aeabi_dcmpeq>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	f43f aebb 	beq.w	8008d3a <_dtoa_r+0x472>
 8008fc4:	e6f0      	b.n	8008da8 <_dtoa_r+0x4e0>
 8008fc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008fc8:	2a00      	cmp	r2, #0
 8008fca:	f000 80db 	beq.w	8009184 <_dtoa_r+0x8bc>
 8008fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fd0:	2a01      	cmp	r2, #1
 8008fd2:	f300 80bf 	bgt.w	8009154 <_dtoa_r+0x88c>
 8008fd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008fd8:	2a00      	cmp	r2, #0
 8008fda:	f000 80b7 	beq.w	800914c <_dtoa_r+0x884>
 8008fde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008fe2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008fe4:	4646      	mov	r6, r8
 8008fe6:	9a08      	ldr	r2, [sp, #32]
 8008fe8:	2101      	movs	r1, #1
 8008fea:	441a      	add	r2, r3
 8008fec:	4658      	mov	r0, fp
 8008fee:	4498      	add	r8, r3
 8008ff0:	9208      	str	r2, [sp, #32]
 8008ff2:	f000 fc21 	bl	8009838 <__i2b>
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	b15e      	cbz	r6, 8009012 <_dtoa_r+0x74a>
 8008ffa:	9b08      	ldr	r3, [sp, #32]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dd08      	ble.n	8009012 <_dtoa_r+0x74a>
 8009000:	42b3      	cmp	r3, r6
 8009002:	9a08      	ldr	r2, [sp, #32]
 8009004:	bfa8      	it	ge
 8009006:	4633      	movge	r3, r6
 8009008:	eba8 0803 	sub.w	r8, r8, r3
 800900c:	1af6      	subs	r6, r6, r3
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	9308      	str	r3, [sp, #32]
 8009012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009014:	b1f3      	cbz	r3, 8009054 <_dtoa_r+0x78c>
 8009016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 80b7 	beq.w	800918c <_dtoa_r+0x8c4>
 800901e:	b18c      	cbz	r4, 8009044 <_dtoa_r+0x77c>
 8009020:	4629      	mov	r1, r5
 8009022:	4622      	mov	r2, r4
 8009024:	4658      	mov	r0, fp
 8009026:	f000 fcc7 	bl	80099b8 <__pow5mult>
 800902a:	464a      	mov	r2, r9
 800902c:	4601      	mov	r1, r0
 800902e:	4605      	mov	r5, r0
 8009030:	4658      	mov	r0, fp
 8009032:	f000 fc17 	bl	8009864 <__multiply>
 8009036:	4649      	mov	r1, r9
 8009038:	9004      	str	r0, [sp, #16]
 800903a:	4658      	mov	r0, fp
 800903c:	f000 fb48 	bl	80096d0 <_Bfree>
 8009040:	9b04      	ldr	r3, [sp, #16]
 8009042:	4699      	mov	r9, r3
 8009044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009046:	1b1a      	subs	r2, r3, r4
 8009048:	d004      	beq.n	8009054 <_dtoa_r+0x78c>
 800904a:	4649      	mov	r1, r9
 800904c:	4658      	mov	r0, fp
 800904e:	f000 fcb3 	bl	80099b8 <__pow5mult>
 8009052:	4681      	mov	r9, r0
 8009054:	2101      	movs	r1, #1
 8009056:	4658      	mov	r0, fp
 8009058:	f000 fbee 	bl	8009838 <__i2b>
 800905c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800905e:	4604      	mov	r4, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 81cf 	beq.w	8009404 <_dtoa_r+0xb3c>
 8009066:	461a      	mov	r2, r3
 8009068:	4601      	mov	r1, r0
 800906a:	4658      	mov	r0, fp
 800906c:	f000 fca4 	bl	80099b8 <__pow5mult>
 8009070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009072:	2b01      	cmp	r3, #1
 8009074:	4604      	mov	r4, r0
 8009076:	f300 8095 	bgt.w	80091a4 <_dtoa_r+0x8dc>
 800907a:	9b02      	ldr	r3, [sp, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	f040 8087 	bne.w	8009190 <_dtoa_r+0x8c8>
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009088:	2b00      	cmp	r3, #0
 800908a:	f040 8089 	bne.w	80091a0 <_dtoa_r+0x8d8>
 800908e:	9b03      	ldr	r3, [sp, #12]
 8009090:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009094:	0d1b      	lsrs	r3, r3, #20
 8009096:	051b      	lsls	r3, r3, #20
 8009098:	b12b      	cbz	r3, 80090a6 <_dtoa_r+0x7de>
 800909a:	9b08      	ldr	r3, [sp, #32]
 800909c:	3301      	adds	r3, #1
 800909e:	9308      	str	r3, [sp, #32]
 80090a0:	f108 0801 	add.w	r8, r8, #1
 80090a4:	2301      	movs	r3, #1
 80090a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 81b0 	beq.w	8009410 <_dtoa_r+0xb48>
 80090b0:	6923      	ldr	r3, [r4, #16]
 80090b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090b6:	6918      	ldr	r0, [r3, #16]
 80090b8:	f000 fb72 	bl	80097a0 <__hi0bits>
 80090bc:	f1c0 0020 	rsb	r0, r0, #32
 80090c0:	9b08      	ldr	r3, [sp, #32]
 80090c2:	4418      	add	r0, r3
 80090c4:	f010 001f 	ands.w	r0, r0, #31
 80090c8:	d077      	beq.n	80091ba <_dtoa_r+0x8f2>
 80090ca:	f1c0 0320 	rsb	r3, r0, #32
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	dd6b      	ble.n	80091aa <_dtoa_r+0x8e2>
 80090d2:	9b08      	ldr	r3, [sp, #32]
 80090d4:	f1c0 001c 	rsb	r0, r0, #28
 80090d8:	4403      	add	r3, r0
 80090da:	4480      	add	r8, r0
 80090dc:	4406      	add	r6, r0
 80090de:	9308      	str	r3, [sp, #32]
 80090e0:	f1b8 0f00 	cmp.w	r8, #0
 80090e4:	dd05      	ble.n	80090f2 <_dtoa_r+0x82a>
 80090e6:	4649      	mov	r1, r9
 80090e8:	4642      	mov	r2, r8
 80090ea:	4658      	mov	r0, fp
 80090ec:	f000 fcbe 	bl	8009a6c <__lshift>
 80090f0:	4681      	mov	r9, r0
 80090f2:	9b08      	ldr	r3, [sp, #32]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	dd05      	ble.n	8009104 <_dtoa_r+0x83c>
 80090f8:	4621      	mov	r1, r4
 80090fa:	461a      	mov	r2, r3
 80090fc:	4658      	mov	r0, fp
 80090fe:	f000 fcb5 	bl	8009a6c <__lshift>
 8009102:	4604      	mov	r4, r0
 8009104:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009106:	2b00      	cmp	r3, #0
 8009108:	d059      	beq.n	80091be <_dtoa_r+0x8f6>
 800910a:	4621      	mov	r1, r4
 800910c:	4648      	mov	r0, r9
 800910e:	f000 fd19 	bl	8009b44 <__mcmp>
 8009112:	2800      	cmp	r0, #0
 8009114:	da53      	bge.n	80091be <_dtoa_r+0x8f6>
 8009116:	1e7b      	subs	r3, r7, #1
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	4649      	mov	r1, r9
 800911c:	2300      	movs	r3, #0
 800911e:	220a      	movs	r2, #10
 8009120:	4658      	mov	r0, fp
 8009122:	f000 faf7 	bl	8009714 <__multadd>
 8009126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009128:	4681      	mov	r9, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 8172 	beq.w	8009414 <_dtoa_r+0xb4c>
 8009130:	2300      	movs	r3, #0
 8009132:	4629      	mov	r1, r5
 8009134:	220a      	movs	r2, #10
 8009136:	4658      	mov	r0, fp
 8009138:	f000 faec 	bl	8009714 <__multadd>
 800913c:	9b00      	ldr	r3, [sp, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	4605      	mov	r5, r0
 8009142:	dc67      	bgt.n	8009214 <_dtoa_r+0x94c>
 8009144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009146:	2b02      	cmp	r3, #2
 8009148:	dc41      	bgt.n	80091ce <_dtoa_r+0x906>
 800914a:	e063      	b.n	8009214 <_dtoa_r+0x94c>
 800914c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800914e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009152:	e746      	b.n	8008fe2 <_dtoa_r+0x71a>
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	1e5c      	subs	r4, r3, #1
 8009158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800915a:	42a3      	cmp	r3, r4
 800915c:	bfbf      	itttt	lt
 800915e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009160:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009162:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009164:	1ae3      	sublt	r3, r4, r3
 8009166:	bfb4      	ite	lt
 8009168:	18d2      	addlt	r2, r2, r3
 800916a:	1b1c      	subge	r4, r3, r4
 800916c:	9b07      	ldr	r3, [sp, #28]
 800916e:	bfbc      	itt	lt
 8009170:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009172:	2400      	movlt	r4, #0
 8009174:	2b00      	cmp	r3, #0
 8009176:	bfb5      	itete	lt
 8009178:	eba8 0603 	sublt.w	r6, r8, r3
 800917c:	9b07      	ldrge	r3, [sp, #28]
 800917e:	2300      	movlt	r3, #0
 8009180:	4646      	movge	r6, r8
 8009182:	e730      	b.n	8008fe6 <_dtoa_r+0x71e>
 8009184:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009186:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009188:	4646      	mov	r6, r8
 800918a:	e735      	b.n	8008ff8 <_dtoa_r+0x730>
 800918c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800918e:	e75c      	b.n	800904a <_dtoa_r+0x782>
 8009190:	2300      	movs	r3, #0
 8009192:	e788      	b.n	80090a6 <_dtoa_r+0x7de>
 8009194:	3fe00000 	.word	0x3fe00000
 8009198:	40240000 	.word	0x40240000
 800919c:	40140000 	.word	0x40140000
 80091a0:	9b02      	ldr	r3, [sp, #8]
 80091a2:	e780      	b.n	80090a6 <_dtoa_r+0x7de>
 80091a4:	2300      	movs	r3, #0
 80091a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091a8:	e782      	b.n	80090b0 <_dtoa_r+0x7e8>
 80091aa:	d099      	beq.n	80090e0 <_dtoa_r+0x818>
 80091ac:	9a08      	ldr	r2, [sp, #32]
 80091ae:	331c      	adds	r3, #28
 80091b0:	441a      	add	r2, r3
 80091b2:	4498      	add	r8, r3
 80091b4:	441e      	add	r6, r3
 80091b6:	9208      	str	r2, [sp, #32]
 80091b8:	e792      	b.n	80090e0 <_dtoa_r+0x818>
 80091ba:	4603      	mov	r3, r0
 80091bc:	e7f6      	b.n	80091ac <_dtoa_r+0x8e4>
 80091be:	9b07      	ldr	r3, [sp, #28]
 80091c0:	9704      	str	r7, [sp, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dc20      	bgt.n	8009208 <_dtoa_r+0x940>
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	dd1e      	ble.n	800920c <_dtoa_r+0x944>
 80091ce:	9b00      	ldr	r3, [sp, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f47f aec0 	bne.w	8008f56 <_dtoa_r+0x68e>
 80091d6:	4621      	mov	r1, r4
 80091d8:	2205      	movs	r2, #5
 80091da:	4658      	mov	r0, fp
 80091dc:	f000 fa9a 	bl	8009714 <__multadd>
 80091e0:	4601      	mov	r1, r0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4648      	mov	r0, r9
 80091e6:	f000 fcad 	bl	8009b44 <__mcmp>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f77f aeb3 	ble.w	8008f56 <_dtoa_r+0x68e>
 80091f0:	4656      	mov	r6, sl
 80091f2:	2331      	movs	r3, #49	@ 0x31
 80091f4:	f806 3b01 	strb.w	r3, [r6], #1
 80091f8:	9b04      	ldr	r3, [sp, #16]
 80091fa:	3301      	adds	r3, #1
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	e6ae      	b.n	8008f5e <_dtoa_r+0x696>
 8009200:	9c07      	ldr	r4, [sp, #28]
 8009202:	9704      	str	r7, [sp, #16]
 8009204:	4625      	mov	r5, r4
 8009206:	e7f3      	b.n	80091f0 <_dtoa_r+0x928>
 8009208:	9b07      	ldr	r3, [sp, #28]
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 8104 	beq.w	800941c <_dtoa_r+0xb54>
 8009214:	2e00      	cmp	r6, #0
 8009216:	dd05      	ble.n	8009224 <_dtoa_r+0x95c>
 8009218:	4629      	mov	r1, r5
 800921a:	4632      	mov	r2, r6
 800921c:	4658      	mov	r0, fp
 800921e:	f000 fc25 	bl	8009a6c <__lshift>
 8009222:	4605      	mov	r5, r0
 8009224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	d05a      	beq.n	80092e0 <_dtoa_r+0xa18>
 800922a:	6869      	ldr	r1, [r5, #4]
 800922c:	4658      	mov	r0, fp
 800922e:	f000 fa0f 	bl	8009650 <_Balloc>
 8009232:	4606      	mov	r6, r0
 8009234:	b928      	cbnz	r0, 8009242 <_dtoa_r+0x97a>
 8009236:	4b84      	ldr	r3, [pc, #528]	@ (8009448 <_dtoa_r+0xb80>)
 8009238:	4602      	mov	r2, r0
 800923a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800923e:	f7ff bb5a 	b.w	80088f6 <_dtoa_r+0x2e>
 8009242:	692a      	ldr	r2, [r5, #16]
 8009244:	3202      	adds	r2, #2
 8009246:	0092      	lsls	r2, r2, #2
 8009248:	f105 010c 	add.w	r1, r5, #12
 800924c:	300c      	adds	r0, #12
 800924e:	f7ff faa2 	bl	8008796 <memcpy>
 8009252:	2201      	movs	r2, #1
 8009254:	4631      	mov	r1, r6
 8009256:	4658      	mov	r0, fp
 8009258:	f000 fc08 	bl	8009a6c <__lshift>
 800925c:	f10a 0301 	add.w	r3, sl, #1
 8009260:	9307      	str	r3, [sp, #28]
 8009262:	9b00      	ldr	r3, [sp, #0]
 8009264:	4453      	add	r3, sl
 8009266:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009268:	9b02      	ldr	r3, [sp, #8]
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	462f      	mov	r7, r5
 8009270:	930a      	str	r3, [sp, #40]	@ 0x28
 8009272:	4605      	mov	r5, r0
 8009274:	9b07      	ldr	r3, [sp, #28]
 8009276:	4621      	mov	r1, r4
 8009278:	3b01      	subs	r3, #1
 800927a:	4648      	mov	r0, r9
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	f7ff fa98 	bl	80087b2 <quorem>
 8009282:	4639      	mov	r1, r7
 8009284:	9002      	str	r0, [sp, #8]
 8009286:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800928a:	4648      	mov	r0, r9
 800928c:	f000 fc5a 	bl	8009b44 <__mcmp>
 8009290:	462a      	mov	r2, r5
 8009292:	9008      	str	r0, [sp, #32]
 8009294:	4621      	mov	r1, r4
 8009296:	4658      	mov	r0, fp
 8009298:	f000 fc70 	bl	8009b7c <__mdiff>
 800929c:	68c2      	ldr	r2, [r0, #12]
 800929e:	4606      	mov	r6, r0
 80092a0:	bb02      	cbnz	r2, 80092e4 <_dtoa_r+0xa1c>
 80092a2:	4601      	mov	r1, r0
 80092a4:	4648      	mov	r0, r9
 80092a6:	f000 fc4d 	bl	8009b44 <__mcmp>
 80092aa:	4602      	mov	r2, r0
 80092ac:	4631      	mov	r1, r6
 80092ae:	4658      	mov	r0, fp
 80092b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80092b2:	f000 fa0d 	bl	80096d0 <_Bfree>
 80092b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092ba:	9e07      	ldr	r6, [sp, #28]
 80092bc:	ea43 0102 	orr.w	r1, r3, r2
 80092c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092c2:	4319      	orrs	r1, r3
 80092c4:	d110      	bne.n	80092e8 <_dtoa_r+0xa20>
 80092c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092ca:	d029      	beq.n	8009320 <_dtoa_r+0xa58>
 80092cc:	9b08      	ldr	r3, [sp, #32]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	dd02      	ble.n	80092d8 <_dtoa_r+0xa10>
 80092d2:	9b02      	ldr	r3, [sp, #8]
 80092d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80092d8:	9b00      	ldr	r3, [sp, #0]
 80092da:	f883 8000 	strb.w	r8, [r3]
 80092de:	e63f      	b.n	8008f60 <_dtoa_r+0x698>
 80092e0:	4628      	mov	r0, r5
 80092e2:	e7bb      	b.n	800925c <_dtoa_r+0x994>
 80092e4:	2201      	movs	r2, #1
 80092e6:	e7e1      	b.n	80092ac <_dtoa_r+0x9e4>
 80092e8:	9b08      	ldr	r3, [sp, #32]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	db04      	blt.n	80092f8 <_dtoa_r+0xa30>
 80092ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092f0:	430b      	orrs	r3, r1
 80092f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092f4:	430b      	orrs	r3, r1
 80092f6:	d120      	bne.n	800933a <_dtoa_r+0xa72>
 80092f8:	2a00      	cmp	r2, #0
 80092fa:	dded      	ble.n	80092d8 <_dtoa_r+0xa10>
 80092fc:	4649      	mov	r1, r9
 80092fe:	2201      	movs	r2, #1
 8009300:	4658      	mov	r0, fp
 8009302:	f000 fbb3 	bl	8009a6c <__lshift>
 8009306:	4621      	mov	r1, r4
 8009308:	4681      	mov	r9, r0
 800930a:	f000 fc1b 	bl	8009b44 <__mcmp>
 800930e:	2800      	cmp	r0, #0
 8009310:	dc03      	bgt.n	800931a <_dtoa_r+0xa52>
 8009312:	d1e1      	bne.n	80092d8 <_dtoa_r+0xa10>
 8009314:	f018 0f01 	tst.w	r8, #1
 8009318:	d0de      	beq.n	80092d8 <_dtoa_r+0xa10>
 800931a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800931e:	d1d8      	bne.n	80092d2 <_dtoa_r+0xa0a>
 8009320:	9a00      	ldr	r2, [sp, #0]
 8009322:	2339      	movs	r3, #57	@ 0x39
 8009324:	7013      	strb	r3, [r2, #0]
 8009326:	4633      	mov	r3, r6
 8009328:	461e      	mov	r6, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009330:	2a39      	cmp	r2, #57	@ 0x39
 8009332:	d052      	beq.n	80093da <_dtoa_r+0xb12>
 8009334:	3201      	adds	r2, #1
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	e612      	b.n	8008f60 <_dtoa_r+0x698>
 800933a:	2a00      	cmp	r2, #0
 800933c:	dd07      	ble.n	800934e <_dtoa_r+0xa86>
 800933e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009342:	d0ed      	beq.n	8009320 <_dtoa_r+0xa58>
 8009344:	9a00      	ldr	r2, [sp, #0]
 8009346:	f108 0301 	add.w	r3, r8, #1
 800934a:	7013      	strb	r3, [r2, #0]
 800934c:	e608      	b.n	8008f60 <_dtoa_r+0x698>
 800934e:	9b07      	ldr	r3, [sp, #28]
 8009350:	9a07      	ldr	r2, [sp, #28]
 8009352:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009358:	4293      	cmp	r3, r2
 800935a:	d028      	beq.n	80093ae <_dtoa_r+0xae6>
 800935c:	4649      	mov	r1, r9
 800935e:	2300      	movs	r3, #0
 8009360:	220a      	movs	r2, #10
 8009362:	4658      	mov	r0, fp
 8009364:	f000 f9d6 	bl	8009714 <__multadd>
 8009368:	42af      	cmp	r7, r5
 800936a:	4681      	mov	r9, r0
 800936c:	f04f 0300 	mov.w	r3, #0
 8009370:	f04f 020a 	mov.w	r2, #10
 8009374:	4639      	mov	r1, r7
 8009376:	4658      	mov	r0, fp
 8009378:	d107      	bne.n	800938a <_dtoa_r+0xac2>
 800937a:	f000 f9cb 	bl	8009714 <__multadd>
 800937e:	4607      	mov	r7, r0
 8009380:	4605      	mov	r5, r0
 8009382:	9b07      	ldr	r3, [sp, #28]
 8009384:	3301      	adds	r3, #1
 8009386:	9307      	str	r3, [sp, #28]
 8009388:	e774      	b.n	8009274 <_dtoa_r+0x9ac>
 800938a:	f000 f9c3 	bl	8009714 <__multadd>
 800938e:	4629      	mov	r1, r5
 8009390:	4607      	mov	r7, r0
 8009392:	2300      	movs	r3, #0
 8009394:	220a      	movs	r2, #10
 8009396:	4658      	mov	r0, fp
 8009398:	f000 f9bc 	bl	8009714 <__multadd>
 800939c:	4605      	mov	r5, r0
 800939e:	e7f0      	b.n	8009382 <_dtoa_r+0xaba>
 80093a0:	9b00      	ldr	r3, [sp, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	bfcc      	ite	gt
 80093a6:	461e      	movgt	r6, r3
 80093a8:	2601      	movle	r6, #1
 80093aa:	4456      	add	r6, sl
 80093ac:	2700      	movs	r7, #0
 80093ae:	4649      	mov	r1, r9
 80093b0:	2201      	movs	r2, #1
 80093b2:	4658      	mov	r0, fp
 80093b4:	f000 fb5a 	bl	8009a6c <__lshift>
 80093b8:	4621      	mov	r1, r4
 80093ba:	4681      	mov	r9, r0
 80093bc:	f000 fbc2 	bl	8009b44 <__mcmp>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	dcb0      	bgt.n	8009326 <_dtoa_r+0xa5e>
 80093c4:	d102      	bne.n	80093cc <_dtoa_r+0xb04>
 80093c6:	f018 0f01 	tst.w	r8, #1
 80093ca:	d1ac      	bne.n	8009326 <_dtoa_r+0xa5e>
 80093cc:	4633      	mov	r3, r6
 80093ce:	461e      	mov	r6, r3
 80093d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093d4:	2a30      	cmp	r2, #48	@ 0x30
 80093d6:	d0fa      	beq.n	80093ce <_dtoa_r+0xb06>
 80093d8:	e5c2      	b.n	8008f60 <_dtoa_r+0x698>
 80093da:	459a      	cmp	sl, r3
 80093dc:	d1a4      	bne.n	8009328 <_dtoa_r+0xa60>
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	3301      	adds	r3, #1
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	2331      	movs	r3, #49	@ 0x31
 80093e6:	f88a 3000 	strb.w	r3, [sl]
 80093ea:	e5b9      	b.n	8008f60 <_dtoa_r+0x698>
 80093ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800944c <_dtoa_r+0xb84>
 80093f2:	b11b      	cbz	r3, 80093fc <_dtoa_r+0xb34>
 80093f4:	f10a 0308 	add.w	r3, sl, #8
 80093f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093fa:	6013      	str	r3, [r2, #0]
 80093fc:	4650      	mov	r0, sl
 80093fe:	b019      	add	sp, #100	@ 0x64
 8009400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009406:	2b01      	cmp	r3, #1
 8009408:	f77f ae37 	ble.w	800907a <_dtoa_r+0x7b2>
 800940c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800940e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009410:	2001      	movs	r0, #1
 8009412:	e655      	b.n	80090c0 <_dtoa_r+0x7f8>
 8009414:	9b00      	ldr	r3, [sp, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f77f aed6 	ble.w	80091c8 <_dtoa_r+0x900>
 800941c:	4656      	mov	r6, sl
 800941e:	4621      	mov	r1, r4
 8009420:	4648      	mov	r0, r9
 8009422:	f7ff f9c6 	bl	80087b2 <quorem>
 8009426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800942a:	f806 8b01 	strb.w	r8, [r6], #1
 800942e:	9b00      	ldr	r3, [sp, #0]
 8009430:	eba6 020a 	sub.w	r2, r6, sl
 8009434:	4293      	cmp	r3, r2
 8009436:	ddb3      	ble.n	80093a0 <_dtoa_r+0xad8>
 8009438:	4649      	mov	r1, r9
 800943a:	2300      	movs	r3, #0
 800943c:	220a      	movs	r2, #10
 800943e:	4658      	mov	r0, fp
 8009440:	f000 f968 	bl	8009714 <__multadd>
 8009444:	4681      	mov	r9, r0
 8009446:	e7ea      	b.n	800941e <_dtoa_r+0xb56>
 8009448:	0800a9d4 	.word	0x0800a9d4
 800944c:	0800a958 	.word	0x0800a958

08009450 <_free_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4605      	mov	r5, r0
 8009454:	2900      	cmp	r1, #0
 8009456:	d041      	beq.n	80094dc <_free_r+0x8c>
 8009458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945c:	1f0c      	subs	r4, r1, #4
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfb8      	it	lt
 8009462:	18e4      	addlt	r4, r4, r3
 8009464:	f000 f8e8 	bl	8009638 <__malloc_lock>
 8009468:	4a1d      	ldr	r2, [pc, #116]	@ (80094e0 <_free_r+0x90>)
 800946a:	6813      	ldr	r3, [r2, #0]
 800946c:	b933      	cbnz	r3, 800947c <_free_r+0x2c>
 800946e:	6063      	str	r3, [r4, #4]
 8009470:	6014      	str	r4, [r2, #0]
 8009472:	4628      	mov	r0, r5
 8009474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009478:	f000 b8e4 	b.w	8009644 <__malloc_unlock>
 800947c:	42a3      	cmp	r3, r4
 800947e:	d908      	bls.n	8009492 <_free_r+0x42>
 8009480:	6820      	ldr	r0, [r4, #0]
 8009482:	1821      	adds	r1, r4, r0
 8009484:	428b      	cmp	r3, r1
 8009486:	bf01      	itttt	eq
 8009488:	6819      	ldreq	r1, [r3, #0]
 800948a:	685b      	ldreq	r3, [r3, #4]
 800948c:	1809      	addeq	r1, r1, r0
 800948e:	6021      	streq	r1, [r4, #0]
 8009490:	e7ed      	b.n	800946e <_free_r+0x1e>
 8009492:	461a      	mov	r2, r3
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	b10b      	cbz	r3, 800949c <_free_r+0x4c>
 8009498:	42a3      	cmp	r3, r4
 800949a:	d9fa      	bls.n	8009492 <_free_r+0x42>
 800949c:	6811      	ldr	r1, [r2, #0]
 800949e:	1850      	adds	r0, r2, r1
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d10b      	bne.n	80094bc <_free_r+0x6c>
 80094a4:	6820      	ldr	r0, [r4, #0]
 80094a6:	4401      	add	r1, r0
 80094a8:	1850      	adds	r0, r2, r1
 80094aa:	4283      	cmp	r3, r0
 80094ac:	6011      	str	r1, [r2, #0]
 80094ae:	d1e0      	bne.n	8009472 <_free_r+0x22>
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	6053      	str	r3, [r2, #4]
 80094b6:	4408      	add	r0, r1
 80094b8:	6010      	str	r0, [r2, #0]
 80094ba:	e7da      	b.n	8009472 <_free_r+0x22>
 80094bc:	d902      	bls.n	80094c4 <_free_r+0x74>
 80094be:	230c      	movs	r3, #12
 80094c0:	602b      	str	r3, [r5, #0]
 80094c2:	e7d6      	b.n	8009472 <_free_r+0x22>
 80094c4:	6820      	ldr	r0, [r4, #0]
 80094c6:	1821      	adds	r1, r4, r0
 80094c8:	428b      	cmp	r3, r1
 80094ca:	bf04      	itt	eq
 80094cc:	6819      	ldreq	r1, [r3, #0]
 80094ce:	685b      	ldreq	r3, [r3, #4]
 80094d0:	6063      	str	r3, [r4, #4]
 80094d2:	bf04      	itt	eq
 80094d4:	1809      	addeq	r1, r1, r0
 80094d6:	6021      	streq	r1, [r4, #0]
 80094d8:	6054      	str	r4, [r2, #4]
 80094da:	e7ca      	b.n	8009472 <_free_r+0x22>
 80094dc:	bd38      	pop	{r3, r4, r5, pc}
 80094de:	bf00      	nop
 80094e0:	20004e64 	.word	0x20004e64

080094e4 <malloc>:
 80094e4:	4b02      	ldr	r3, [pc, #8]	@ (80094f0 <malloc+0xc>)
 80094e6:	4601      	mov	r1, r0
 80094e8:	6818      	ldr	r0, [r3, #0]
 80094ea:	f000 b825 	b.w	8009538 <_malloc_r>
 80094ee:	bf00      	nop
 80094f0:	2000001c 	.word	0x2000001c

080094f4 <sbrk_aligned>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	4e0f      	ldr	r6, [pc, #60]	@ (8009534 <sbrk_aligned+0x40>)
 80094f8:	460c      	mov	r4, r1
 80094fa:	6831      	ldr	r1, [r6, #0]
 80094fc:	4605      	mov	r5, r0
 80094fe:	b911      	cbnz	r1, 8009506 <sbrk_aligned+0x12>
 8009500:	f000 fe46 	bl	800a190 <_sbrk_r>
 8009504:	6030      	str	r0, [r6, #0]
 8009506:	4621      	mov	r1, r4
 8009508:	4628      	mov	r0, r5
 800950a:	f000 fe41 	bl	800a190 <_sbrk_r>
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	d103      	bne.n	800951a <sbrk_aligned+0x26>
 8009512:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009516:	4620      	mov	r0, r4
 8009518:	bd70      	pop	{r4, r5, r6, pc}
 800951a:	1cc4      	adds	r4, r0, #3
 800951c:	f024 0403 	bic.w	r4, r4, #3
 8009520:	42a0      	cmp	r0, r4
 8009522:	d0f8      	beq.n	8009516 <sbrk_aligned+0x22>
 8009524:	1a21      	subs	r1, r4, r0
 8009526:	4628      	mov	r0, r5
 8009528:	f000 fe32 	bl	800a190 <_sbrk_r>
 800952c:	3001      	adds	r0, #1
 800952e:	d1f2      	bne.n	8009516 <sbrk_aligned+0x22>
 8009530:	e7ef      	b.n	8009512 <sbrk_aligned+0x1e>
 8009532:	bf00      	nop
 8009534:	20004e60 	.word	0x20004e60

08009538 <_malloc_r>:
 8009538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800953c:	1ccd      	adds	r5, r1, #3
 800953e:	f025 0503 	bic.w	r5, r5, #3
 8009542:	3508      	adds	r5, #8
 8009544:	2d0c      	cmp	r5, #12
 8009546:	bf38      	it	cc
 8009548:	250c      	movcc	r5, #12
 800954a:	2d00      	cmp	r5, #0
 800954c:	4606      	mov	r6, r0
 800954e:	db01      	blt.n	8009554 <_malloc_r+0x1c>
 8009550:	42a9      	cmp	r1, r5
 8009552:	d904      	bls.n	800955e <_malloc_r+0x26>
 8009554:	230c      	movs	r3, #12
 8009556:	6033      	str	r3, [r6, #0]
 8009558:	2000      	movs	r0, #0
 800955a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800955e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009634 <_malloc_r+0xfc>
 8009562:	f000 f869 	bl	8009638 <__malloc_lock>
 8009566:	f8d8 3000 	ldr.w	r3, [r8]
 800956a:	461c      	mov	r4, r3
 800956c:	bb44      	cbnz	r4, 80095c0 <_malloc_r+0x88>
 800956e:	4629      	mov	r1, r5
 8009570:	4630      	mov	r0, r6
 8009572:	f7ff ffbf 	bl	80094f4 <sbrk_aligned>
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	4604      	mov	r4, r0
 800957a:	d158      	bne.n	800962e <_malloc_r+0xf6>
 800957c:	f8d8 4000 	ldr.w	r4, [r8]
 8009580:	4627      	mov	r7, r4
 8009582:	2f00      	cmp	r7, #0
 8009584:	d143      	bne.n	800960e <_malloc_r+0xd6>
 8009586:	2c00      	cmp	r4, #0
 8009588:	d04b      	beq.n	8009622 <_malloc_r+0xea>
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	4639      	mov	r1, r7
 800958e:	4630      	mov	r0, r6
 8009590:	eb04 0903 	add.w	r9, r4, r3
 8009594:	f000 fdfc 	bl	800a190 <_sbrk_r>
 8009598:	4581      	cmp	r9, r0
 800959a:	d142      	bne.n	8009622 <_malloc_r+0xea>
 800959c:	6821      	ldr	r1, [r4, #0]
 800959e:	1a6d      	subs	r5, r5, r1
 80095a0:	4629      	mov	r1, r5
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7ff ffa6 	bl	80094f4 <sbrk_aligned>
 80095a8:	3001      	adds	r0, #1
 80095aa:	d03a      	beq.n	8009622 <_malloc_r+0xea>
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	442b      	add	r3, r5
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	f8d8 3000 	ldr.w	r3, [r8]
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	bb62      	cbnz	r2, 8009614 <_malloc_r+0xdc>
 80095ba:	f8c8 7000 	str.w	r7, [r8]
 80095be:	e00f      	b.n	80095e0 <_malloc_r+0xa8>
 80095c0:	6822      	ldr	r2, [r4, #0]
 80095c2:	1b52      	subs	r2, r2, r5
 80095c4:	d420      	bmi.n	8009608 <_malloc_r+0xd0>
 80095c6:	2a0b      	cmp	r2, #11
 80095c8:	d917      	bls.n	80095fa <_malloc_r+0xc2>
 80095ca:	1961      	adds	r1, r4, r5
 80095cc:	42a3      	cmp	r3, r4
 80095ce:	6025      	str	r5, [r4, #0]
 80095d0:	bf18      	it	ne
 80095d2:	6059      	strne	r1, [r3, #4]
 80095d4:	6863      	ldr	r3, [r4, #4]
 80095d6:	bf08      	it	eq
 80095d8:	f8c8 1000 	streq.w	r1, [r8]
 80095dc:	5162      	str	r2, [r4, r5]
 80095de:	604b      	str	r3, [r1, #4]
 80095e0:	4630      	mov	r0, r6
 80095e2:	f000 f82f 	bl	8009644 <__malloc_unlock>
 80095e6:	f104 000b 	add.w	r0, r4, #11
 80095ea:	1d23      	adds	r3, r4, #4
 80095ec:	f020 0007 	bic.w	r0, r0, #7
 80095f0:	1ac2      	subs	r2, r0, r3
 80095f2:	bf1c      	itt	ne
 80095f4:	1a1b      	subne	r3, r3, r0
 80095f6:	50a3      	strne	r3, [r4, r2]
 80095f8:	e7af      	b.n	800955a <_malloc_r+0x22>
 80095fa:	6862      	ldr	r2, [r4, #4]
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	bf0c      	ite	eq
 8009600:	f8c8 2000 	streq.w	r2, [r8]
 8009604:	605a      	strne	r2, [r3, #4]
 8009606:	e7eb      	b.n	80095e0 <_malloc_r+0xa8>
 8009608:	4623      	mov	r3, r4
 800960a:	6864      	ldr	r4, [r4, #4]
 800960c:	e7ae      	b.n	800956c <_malloc_r+0x34>
 800960e:	463c      	mov	r4, r7
 8009610:	687f      	ldr	r7, [r7, #4]
 8009612:	e7b6      	b.n	8009582 <_malloc_r+0x4a>
 8009614:	461a      	mov	r2, r3
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	42a3      	cmp	r3, r4
 800961a:	d1fb      	bne.n	8009614 <_malloc_r+0xdc>
 800961c:	2300      	movs	r3, #0
 800961e:	6053      	str	r3, [r2, #4]
 8009620:	e7de      	b.n	80095e0 <_malloc_r+0xa8>
 8009622:	230c      	movs	r3, #12
 8009624:	6033      	str	r3, [r6, #0]
 8009626:	4630      	mov	r0, r6
 8009628:	f000 f80c 	bl	8009644 <__malloc_unlock>
 800962c:	e794      	b.n	8009558 <_malloc_r+0x20>
 800962e:	6005      	str	r5, [r0, #0]
 8009630:	e7d6      	b.n	80095e0 <_malloc_r+0xa8>
 8009632:	bf00      	nop
 8009634:	20004e64 	.word	0x20004e64

08009638 <__malloc_lock>:
 8009638:	4801      	ldr	r0, [pc, #4]	@ (8009640 <__malloc_lock+0x8>)
 800963a:	f7ff b8aa 	b.w	8008792 <__retarget_lock_acquire_recursive>
 800963e:	bf00      	nop
 8009640:	20004e5c 	.word	0x20004e5c

08009644 <__malloc_unlock>:
 8009644:	4801      	ldr	r0, [pc, #4]	@ (800964c <__malloc_unlock+0x8>)
 8009646:	f7ff b8a5 	b.w	8008794 <__retarget_lock_release_recursive>
 800964a:	bf00      	nop
 800964c:	20004e5c 	.word	0x20004e5c

08009650 <_Balloc>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	69c6      	ldr	r6, [r0, #28]
 8009654:	4604      	mov	r4, r0
 8009656:	460d      	mov	r5, r1
 8009658:	b976      	cbnz	r6, 8009678 <_Balloc+0x28>
 800965a:	2010      	movs	r0, #16
 800965c:	f7ff ff42 	bl	80094e4 <malloc>
 8009660:	4602      	mov	r2, r0
 8009662:	61e0      	str	r0, [r4, #28]
 8009664:	b920      	cbnz	r0, 8009670 <_Balloc+0x20>
 8009666:	4b18      	ldr	r3, [pc, #96]	@ (80096c8 <_Balloc+0x78>)
 8009668:	4818      	ldr	r0, [pc, #96]	@ (80096cc <_Balloc+0x7c>)
 800966a:	216b      	movs	r1, #107	@ 0x6b
 800966c:	f000 fda0 	bl	800a1b0 <__assert_func>
 8009670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009674:	6006      	str	r6, [r0, #0]
 8009676:	60c6      	str	r6, [r0, #12]
 8009678:	69e6      	ldr	r6, [r4, #28]
 800967a:	68f3      	ldr	r3, [r6, #12]
 800967c:	b183      	cbz	r3, 80096a0 <_Balloc+0x50>
 800967e:	69e3      	ldr	r3, [r4, #28]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009686:	b9b8      	cbnz	r0, 80096b8 <_Balloc+0x68>
 8009688:	2101      	movs	r1, #1
 800968a:	fa01 f605 	lsl.w	r6, r1, r5
 800968e:	1d72      	adds	r2, r6, #5
 8009690:	0092      	lsls	r2, r2, #2
 8009692:	4620      	mov	r0, r4
 8009694:	f000 fdaa 	bl	800a1ec <_calloc_r>
 8009698:	b160      	cbz	r0, 80096b4 <_Balloc+0x64>
 800969a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800969e:	e00e      	b.n	80096be <_Balloc+0x6e>
 80096a0:	2221      	movs	r2, #33	@ 0x21
 80096a2:	2104      	movs	r1, #4
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fda1 	bl	800a1ec <_calloc_r>
 80096aa:	69e3      	ldr	r3, [r4, #28]
 80096ac:	60f0      	str	r0, [r6, #12]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e4      	bne.n	800967e <_Balloc+0x2e>
 80096b4:	2000      	movs	r0, #0
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
 80096b8:	6802      	ldr	r2, [r0, #0]
 80096ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096be:	2300      	movs	r3, #0
 80096c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096c4:	e7f7      	b.n	80096b6 <_Balloc+0x66>
 80096c6:	bf00      	nop
 80096c8:	0800a965 	.word	0x0800a965
 80096cc:	0800a9e5 	.word	0x0800a9e5

080096d0 <_Bfree>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	69c6      	ldr	r6, [r0, #28]
 80096d4:	4605      	mov	r5, r0
 80096d6:	460c      	mov	r4, r1
 80096d8:	b976      	cbnz	r6, 80096f8 <_Bfree+0x28>
 80096da:	2010      	movs	r0, #16
 80096dc:	f7ff ff02 	bl	80094e4 <malloc>
 80096e0:	4602      	mov	r2, r0
 80096e2:	61e8      	str	r0, [r5, #28]
 80096e4:	b920      	cbnz	r0, 80096f0 <_Bfree+0x20>
 80096e6:	4b09      	ldr	r3, [pc, #36]	@ (800970c <_Bfree+0x3c>)
 80096e8:	4809      	ldr	r0, [pc, #36]	@ (8009710 <_Bfree+0x40>)
 80096ea:	218f      	movs	r1, #143	@ 0x8f
 80096ec:	f000 fd60 	bl	800a1b0 <__assert_func>
 80096f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096f4:	6006      	str	r6, [r0, #0]
 80096f6:	60c6      	str	r6, [r0, #12]
 80096f8:	b13c      	cbz	r4, 800970a <_Bfree+0x3a>
 80096fa:	69eb      	ldr	r3, [r5, #28]
 80096fc:	6862      	ldr	r2, [r4, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009704:	6021      	str	r1, [r4, #0]
 8009706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	0800a965 	.word	0x0800a965
 8009710:	0800a9e5 	.word	0x0800a9e5

08009714 <__multadd>:
 8009714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	690d      	ldr	r5, [r1, #16]
 800971a:	4607      	mov	r7, r0
 800971c:	460c      	mov	r4, r1
 800971e:	461e      	mov	r6, r3
 8009720:	f101 0c14 	add.w	ip, r1, #20
 8009724:	2000      	movs	r0, #0
 8009726:	f8dc 3000 	ldr.w	r3, [ip]
 800972a:	b299      	uxth	r1, r3
 800972c:	fb02 6101 	mla	r1, r2, r1, r6
 8009730:	0c1e      	lsrs	r6, r3, #16
 8009732:	0c0b      	lsrs	r3, r1, #16
 8009734:	fb02 3306 	mla	r3, r2, r6, r3
 8009738:	b289      	uxth	r1, r1
 800973a:	3001      	adds	r0, #1
 800973c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009740:	4285      	cmp	r5, r0
 8009742:	f84c 1b04 	str.w	r1, [ip], #4
 8009746:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800974a:	dcec      	bgt.n	8009726 <__multadd+0x12>
 800974c:	b30e      	cbz	r6, 8009792 <__multadd+0x7e>
 800974e:	68a3      	ldr	r3, [r4, #8]
 8009750:	42ab      	cmp	r3, r5
 8009752:	dc19      	bgt.n	8009788 <__multadd+0x74>
 8009754:	6861      	ldr	r1, [r4, #4]
 8009756:	4638      	mov	r0, r7
 8009758:	3101      	adds	r1, #1
 800975a:	f7ff ff79 	bl	8009650 <_Balloc>
 800975e:	4680      	mov	r8, r0
 8009760:	b928      	cbnz	r0, 800976e <__multadd+0x5a>
 8009762:	4602      	mov	r2, r0
 8009764:	4b0c      	ldr	r3, [pc, #48]	@ (8009798 <__multadd+0x84>)
 8009766:	480d      	ldr	r0, [pc, #52]	@ (800979c <__multadd+0x88>)
 8009768:	21ba      	movs	r1, #186	@ 0xba
 800976a:	f000 fd21 	bl	800a1b0 <__assert_func>
 800976e:	6922      	ldr	r2, [r4, #16]
 8009770:	3202      	adds	r2, #2
 8009772:	f104 010c 	add.w	r1, r4, #12
 8009776:	0092      	lsls	r2, r2, #2
 8009778:	300c      	adds	r0, #12
 800977a:	f7ff f80c 	bl	8008796 <memcpy>
 800977e:	4621      	mov	r1, r4
 8009780:	4638      	mov	r0, r7
 8009782:	f7ff ffa5 	bl	80096d0 <_Bfree>
 8009786:	4644      	mov	r4, r8
 8009788:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800978c:	3501      	adds	r5, #1
 800978e:	615e      	str	r6, [r3, #20]
 8009790:	6125      	str	r5, [r4, #16]
 8009792:	4620      	mov	r0, r4
 8009794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009798:	0800a9d4 	.word	0x0800a9d4
 800979c:	0800a9e5 	.word	0x0800a9e5

080097a0 <__hi0bits>:
 80097a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097a4:	4603      	mov	r3, r0
 80097a6:	bf36      	itet	cc
 80097a8:	0403      	lslcc	r3, r0, #16
 80097aa:	2000      	movcs	r0, #0
 80097ac:	2010      	movcc	r0, #16
 80097ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097b2:	bf3c      	itt	cc
 80097b4:	021b      	lslcc	r3, r3, #8
 80097b6:	3008      	addcc	r0, #8
 80097b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097bc:	bf3c      	itt	cc
 80097be:	011b      	lslcc	r3, r3, #4
 80097c0:	3004      	addcc	r0, #4
 80097c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097c6:	bf3c      	itt	cc
 80097c8:	009b      	lslcc	r3, r3, #2
 80097ca:	3002      	addcc	r0, #2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	db05      	blt.n	80097dc <__hi0bits+0x3c>
 80097d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097d4:	f100 0001 	add.w	r0, r0, #1
 80097d8:	bf08      	it	eq
 80097da:	2020      	moveq	r0, #32
 80097dc:	4770      	bx	lr

080097de <__lo0bits>:
 80097de:	6803      	ldr	r3, [r0, #0]
 80097e0:	4602      	mov	r2, r0
 80097e2:	f013 0007 	ands.w	r0, r3, #7
 80097e6:	d00b      	beq.n	8009800 <__lo0bits+0x22>
 80097e8:	07d9      	lsls	r1, r3, #31
 80097ea:	d421      	bmi.n	8009830 <__lo0bits+0x52>
 80097ec:	0798      	lsls	r0, r3, #30
 80097ee:	bf49      	itett	mi
 80097f0:	085b      	lsrmi	r3, r3, #1
 80097f2:	089b      	lsrpl	r3, r3, #2
 80097f4:	2001      	movmi	r0, #1
 80097f6:	6013      	strmi	r3, [r2, #0]
 80097f8:	bf5c      	itt	pl
 80097fa:	6013      	strpl	r3, [r2, #0]
 80097fc:	2002      	movpl	r0, #2
 80097fe:	4770      	bx	lr
 8009800:	b299      	uxth	r1, r3
 8009802:	b909      	cbnz	r1, 8009808 <__lo0bits+0x2a>
 8009804:	0c1b      	lsrs	r3, r3, #16
 8009806:	2010      	movs	r0, #16
 8009808:	b2d9      	uxtb	r1, r3
 800980a:	b909      	cbnz	r1, 8009810 <__lo0bits+0x32>
 800980c:	3008      	adds	r0, #8
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	0719      	lsls	r1, r3, #28
 8009812:	bf04      	itt	eq
 8009814:	091b      	lsreq	r3, r3, #4
 8009816:	3004      	addeq	r0, #4
 8009818:	0799      	lsls	r1, r3, #30
 800981a:	bf04      	itt	eq
 800981c:	089b      	lsreq	r3, r3, #2
 800981e:	3002      	addeq	r0, #2
 8009820:	07d9      	lsls	r1, r3, #31
 8009822:	d403      	bmi.n	800982c <__lo0bits+0x4e>
 8009824:	085b      	lsrs	r3, r3, #1
 8009826:	f100 0001 	add.w	r0, r0, #1
 800982a:	d003      	beq.n	8009834 <__lo0bits+0x56>
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	4770      	bx	lr
 8009830:	2000      	movs	r0, #0
 8009832:	4770      	bx	lr
 8009834:	2020      	movs	r0, #32
 8009836:	4770      	bx	lr

08009838 <__i2b>:
 8009838:	b510      	push	{r4, lr}
 800983a:	460c      	mov	r4, r1
 800983c:	2101      	movs	r1, #1
 800983e:	f7ff ff07 	bl	8009650 <_Balloc>
 8009842:	4602      	mov	r2, r0
 8009844:	b928      	cbnz	r0, 8009852 <__i2b+0x1a>
 8009846:	4b05      	ldr	r3, [pc, #20]	@ (800985c <__i2b+0x24>)
 8009848:	4805      	ldr	r0, [pc, #20]	@ (8009860 <__i2b+0x28>)
 800984a:	f240 1145 	movw	r1, #325	@ 0x145
 800984e:	f000 fcaf 	bl	800a1b0 <__assert_func>
 8009852:	2301      	movs	r3, #1
 8009854:	6144      	str	r4, [r0, #20]
 8009856:	6103      	str	r3, [r0, #16]
 8009858:	bd10      	pop	{r4, pc}
 800985a:	bf00      	nop
 800985c:	0800a9d4 	.word	0x0800a9d4
 8009860:	0800a9e5 	.word	0x0800a9e5

08009864 <__multiply>:
 8009864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009868:	4614      	mov	r4, r2
 800986a:	690a      	ldr	r2, [r1, #16]
 800986c:	6923      	ldr	r3, [r4, #16]
 800986e:	429a      	cmp	r2, r3
 8009870:	bfa8      	it	ge
 8009872:	4623      	movge	r3, r4
 8009874:	460f      	mov	r7, r1
 8009876:	bfa4      	itt	ge
 8009878:	460c      	movge	r4, r1
 800987a:	461f      	movge	r7, r3
 800987c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009880:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009884:	68a3      	ldr	r3, [r4, #8]
 8009886:	6861      	ldr	r1, [r4, #4]
 8009888:	eb0a 0609 	add.w	r6, sl, r9
 800988c:	42b3      	cmp	r3, r6
 800988e:	b085      	sub	sp, #20
 8009890:	bfb8      	it	lt
 8009892:	3101      	addlt	r1, #1
 8009894:	f7ff fedc 	bl	8009650 <_Balloc>
 8009898:	b930      	cbnz	r0, 80098a8 <__multiply+0x44>
 800989a:	4602      	mov	r2, r0
 800989c:	4b44      	ldr	r3, [pc, #272]	@ (80099b0 <__multiply+0x14c>)
 800989e:	4845      	ldr	r0, [pc, #276]	@ (80099b4 <__multiply+0x150>)
 80098a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098a4:	f000 fc84 	bl	800a1b0 <__assert_func>
 80098a8:	f100 0514 	add.w	r5, r0, #20
 80098ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098b0:	462b      	mov	r3, r5
 80098b2:	2200      	movs	r2, #0
 80098b4:	4543      	cmp	r3, r8
 80098b6:	d321      	bcc.n	80098fc <__multiply+0x98>
 80098b8:	f107 0114 	add.w	r1, r7, #20
 80098bc:	f104 0214 	add.w	r2, r4, #20
 80098c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098c8:	9302      	str	r3, [sp, #8]
 80098ca:	1b13      	subs	r3, r2, r4
 80098cc:	3b15      	subs	r3, #21
 80098ce:	f023 0303 	bic.w	r3, r3, #3
 80098d2:	3304      	adds	r3, #4
 80098d4:	f104 0715 	add.w	r7, r4, #21
 80098d8:	42ba      	cmp	r2, r7
 80098da:	bf38      	it	cc
 80098dc:	2304      	movcc	r3, #4
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	9b02      	ldr	r3, [sp, #8]
 80098e2:	9103      	str	r1, [sp, #12]
 80098e4:	428b      	cmp	r3, r1
 80098e6:	d80c      	bhi.n	8009902 <__multiply+0x9e>
 80098e8:	2e00      	cmp	r6, #0
 80098ea:	dd03      	ble.n	80098f4 <__multiply+0x90>
 80098ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d05b      	beq.n	80099ac <__multiply+0x148>
 80098f4:	6106      	str	r6, [r0, #16]
 80098f6:	b005      	add	sp, #20
 80098f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fc:	f843 2b04 	str.w	r2, [r3], #4
 8009900:	e7d8      	b.n	80098b4 <__multiply+0x50>
 8009902:	f8b1 a000 	ldrh.w	sl, [r1]
 8009906:	f1ba 0f00 	cmp.w	sl, #0
 800990a:	d024      	beq.n	8009956 <__multiply+0xf2>
 800990c:	f104 0e14 	add.w	lr, r4, #20
 8009910:	46a9      	mov	r9, r5
 8009912:	f04f 0c00 	mov.w	ip, #0
 8009916:	f85e 7b04 	ldr.w	r7, [lr], #4
 800991a:	f8d9 3000 	ldr.w	r3, [r9]
 800991e:	fa1f fb87 	uxth.w	fp, r7
 8009922:	b29b      	uxth	r3, r3
 8009924:	fb0a 330b 	mla	r3, sl, fp, r3
 8009928:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800992c:	f8d9 7000 	ldr.w	r7, [r9]
 8009930:	4463      	add	r3, ip
 8009932:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009936:	fb0a c70b 	mla	r7, sl, fp, ip
 800993a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800993e:	b29b      	uxth	r3, r3
 8009940:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009944:	4572      	cmp	r2, lr
 8009946:	f849 3b04 	str.w	r3, [r9], #4
 800994a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800994e:	d8e2      	bhi.n	8009916 <__multiply+0xb2>
 8009950:	9b01      	ldr	r3, [sp, #4]
 8009952:	f845 c003 	str.w	ip, [r5, r3]
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800995c:	3104      	adds	r1, #4
 800995e:	f1b9 0f00 	cmp.w	r9, #0
 8009962:	d021      	beq.n	80099a8 <__multiply+0x144>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	f104 0c14 	add.w	ip, r4, #20
 800996a:	46ae      	mov	lr, r5
 800996c:	f04f 0a00 	mov.w	sl, #0
 8009970:	f8bc b000 	ldrh.w	fp, [ip]
 8009974:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009978:	fb09 770b 	mla	r7, r9, fp, r7
 800997c:	4457      	add	r7, sl
 800997e:	b29b      	uxth	r3, r3
 8009980:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009984:	f84e 3b04 	str.w	r3, [lr], #4
 8009988:	f85c 3b04 	ldr.w	r3, [ip], #4
 800998c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009990:	f8be 3000 	ldrh.w	r3, [lr]
 8009994:	fb09 330a 	mla	r3, r9, sl, r3
 8009998:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800999c:	4562      	cmp	r2, ip
 800999e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099a2:	d8e5      	bhi.n	8009970 <__multiply+0x10c>
 80099a4:	9f01      	ldr	r7, [sp, #4]
 80099a6:	51eb      	str	r3, [r5, r7]
 80099a8:	3504      	adds	r5, #4
 80099aa:	e799      	b.n	80098e0 <__multiply+0x7c>
 80099ac:	3e01      	subs	r6, #1
 80099ae:	e79b      	b.n	80098e8 <__multiply+0x84>
 80099b0:	0800a9d4 	.word	0x0800a9d4
 80099b4:	0800a9e5 	.word	0x0800a9e5

080099b8 <__pow5mult>:
 80099b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099bc:	4615      	mov	r5, r2
 80099be:	f012 0203 	ands.w	r2, r2, #3
 80099c2:	4607      	mov	r7, r0
 80099c4:	460e      	mov	r6, r1
 80099c6:	d007      	beq.n	80099d8 <__pow5mult+0x20>
 80099c8:	4c25      	ldr	r4, [pc, #148]	@ (8009a60 <__pow5mult+0xa8>)
 80099ca:	3a01      	subs	r2, #1
 80099cc:	2300      	movs	r3, #0
 80099ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099d2:	f7ff fe9f 	bl	8009714 <__multadd>
 80099d6:	4606      	mov	r6, r0
 80099d8:	10ad      	asrs	r5, r5, #2
 80099da:	d03d      	beq.n	8009a58 <__pow5mult+0xa0>
 80099dc:	69fc      	ldr	r4, [r7, #28]
 80099de:	b97c      	cbnz	r4, 8009a00 <__pow5mult+0x48>
 80099e0:	2010      	movs	r0, #16
 80099e2:	f7ff fd7f 	bl	80094e4 <malloc>
 80099e6:	4602      	mov	r2, r0
 80099e8:	61f8      	str	r0, [r7, #28]
 80099ea:	b928      	cbnz	r0, 80099f8 <__pow5mult+0x40>
 80099ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009a64 <__pow5mult+0xac>)
 80099ee:	481e      	ldr	r0, [pc, #120]	@ (8009a68 <__pow5mult+0xb0>)
 80099f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099f4:	f000 fbdc 	bl	800a1b0 <__assert_func>
 80099f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099fc:	6004      	str	r4, [r0, #0]
 80099fe:	60c4      	str	r4, [r0, #12]
 8009a00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a08:	b94c      	cbnz	r4, 8009a1e <__pow5mult+0x66>
 8009a0a:	f240 2171 	movw	r1, #625	@ 0x271
 8009a0e:	4638      	mov	r0, r7
 8009a10:	f7ff ff12 	bl	8009838 <__i2b>
 8009a14:	2300      	movs	r3, #0
 8009a16:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	6003      	str	r3, [r0, #0]
 8009a1e:	f04f 0900 	mov.w	r9, #0
 8009a22:	07eb      	lsls	r3, r5, #31
 8009a24:	d50a      	bpl.n	8009a3c <__pow5mult+0x84>
 8009a26:	4631      	mov	r1, r6
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	f7ff ff1a 	bl	8009864 <__multiply>
 8009a30:	4631      	mov	r1, r6
 8009a32:	4680      	mov	r8, r0
 8009a34:	4638      	mov	r0, r7
 8009a36:	f7ff fe4b 	bl	80096d0 <_Bfree>
 8009a3a:	4646      	mov	r6, r8
 8009a3c:	106d      	asrs	r5, r5, #1
 8009a3e:	d00b      	beq.n	8009a58 <__pow5mult+0xa0>
 8009a40:	6820      	ldr	r0, [r4, #0]
 8009a42:	b938      	cbnz	r0, 8009a54 <__pow5mult+0x9c>
 8009a44:	4622      	mov	r2, r4
 8009a46:	4621      	mov	r1, r4
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7ff ff0b 	bl	8009864 <__multiply>
 8009a4e:	6020      	str	r0, [r4, #0]
 8009a50:	f8c0 9000 	str.w	r9, [r0]
 8009a54:	4604      	mov	r4, r0
 8009a56:	e7e4      	b.n	8009a22 <__pow5mult+0x6a>
 8009a58:	4630      	mov	r0, r6
 8009a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5e:	bf00      	nop
 8009a60:	0800aa40 	.word	0x0800aa40
 8009a64:	0800a965 	.word	0x0800a965
 8009a68:	0800a9e5 	.word	0x0800a9e5

08009a6c <__lshift>:
 8009a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a70:	460c      	mov	r4, r1
 8009a72:	6849      	ldr	r1, [r1, #4]
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a7a:	68a3      	ldr	r3, [r4, #8]
 8009a7c:	4607      	mov	r7, r0
 8009a7e:	4691      	mov	r9, r2
 8009a80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a84:	f108 0601 	add.w	r6, r8, #1
 8009a88:	42b3      	cmp	r3, r6
 8009a8a:	db0b      	blt.n	8009aa4 <__lshift+0x38>
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	f7ff fddf 	bl	8009650 <_Balloc>
 8009a92:	4605      	mov	r5, r0
 8009a94:	b948      	cbnz	r0, 8009aaa <__lshift+0x3e>
 8009a96:	4602      	mov	r2, r0
 8009a98:	4b28      	ldr	r3, [pc, #160]	@ (8009b3c <__lshift+0xd0>)
 8009a9a:	4829      	ldr	r0, [pc, #164]	@ (8009b40 <__lshift+0xd4>)
 8009a9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009aa0:	f000 fb86 	bl	800a1b0 <__assert_func>
 8009aa4:	3101      	adds	r1, #1
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	e7ee      	b.n	8009a88 <__lshift+0x1c>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f100 0114 	add.w	r1, r0, #20
 8009ab0:	f100 0210 	add.w	r2, r0, #16
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	4553      	cmp	r3, sl
 8009ab8:	db33      	blt.n	8009b22 <__lshift+0xb6>
 8009aba:	6920      	ldr	r0, [r4, #16]
 8009abc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ac0:	f104 0314 	add.w	r3, r4, #20
 8009ac4:	f019 091f 	ands.w	r9, r9, #31
 8009ac8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009acc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ad0:	d02b      	beq.n	8009b2a <__lshift+0xbe>
 8009ad2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ad6:	468a      	mov	sl, r1
 8009ad8:	2200      	movs	r2, #0
 8009ada:	6818      	ldr	r0, [r3, #0]
 8009adc:	fa00 f009 	lsl.w	r0, r0, r9
 8009ae0:	4310      	orrs	r0, r2
 8009ae2:	f84a 0b04 	str.w	r0, [sl], #4
 8009ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aea:	459c      	cmp	ip, r3
 8009aec:	fa22 f20e 	lsr.w	r2, r2, lr
 8009af0:	d8f3      	bhi.n	8009ada <__lshift+0x6e>
 8009af2:	ebac 0304 	sub.w	r3, ip, r4
 8009af6:	3b15      	subs	r3, #21
 8009af8:	f023 0303 	bic.w	r3, r3, #3
 8009afc:	3304      	adds	r3, #4
 8009afe:	f104 0015 	add.w	r0, r4, #21
 8009b02:	4584      	cmp	ip, r0
 8009b04:	bf38      	it	cc
 8009b06:	2304      	movcc	r3, #4
 8009b08:	50ca      	str	r2, [r1, r3]
 8009b0a:	b10a      	cbz	r2, 8009b10 <__lshift+0xa4>
 8009b0c:	f108 0602 	add.w	r6, r8, #2
 8009b10:	3e01      	subs	r6, #1
 8009b12:	4638      	mov	r0, r7
 8009b14:	612e      	str	r6, [r5, #16]
 8009b16:	4621      	mov	r1, r4
 8009b18:	f7ff fdda 	bl	80096d0 <_Bfree>
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b22:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b26:	3301      	adds	r3, #1
 8009b28:	e7c5      	b.n	8009ab6 <__lshift+0x4a>
 8009b2a:	3904      	subs	r1, #4
 8009b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b30:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b34:	459c      	cmp	ip, r3
 8009b36:	d8f9      	bhi.n	8009b2c <__lshift+0xc0>
 8009b38:	e7ea      	b.n	8009b10 <__lshift+0xa4>
 8009b3a:	bf00      	nop
 8009b3c:	0800a9d4 	.word	0x0800a9d4
 8009b40:	0800a9e5 	.word	0x0800a9e5

08009b44 <__mcmp>:
 8009b44:	690a      	ldr	r2, [r1, #16]
 8009b46:	4603      	mov	r3, r0
 8009b48:	6900      	ldr	r0, [r0, #16]
 8009b4a:	1a80      	subs	r0, r0, r2
 8009b4c:	b530      	push	{r4, r5, lr}
 8009b4e:	d10e      	bne.n	8009b6e <__mcmp+0x2a>
 8009b50:	3314      	adds	r3, #20
 8009b52:	3114      	adds	r1, #20
 8009b54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b64:	4295      	cmp	r5, r2
 8009b66:	d003      	beq.n	8009b70 <__mcmp+0x2c>
 8009b68:	d205      	bcs.n	8009b76 <__mcmp+0x32>
 8009b6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b6e:	bd30      	pop	{r4, r5, pc}
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	d3f3      	bcc.n	8009b5c <__mcmp+0x18>
 8009b74:	e7fb      	b.n	8009b6e <__mcmp+0x2a>
 8009b76:	2001      	movs	r0, #1
 8009b78:	e7f9      	b.n	8009b6e <__mcmp+0x2a>
	...

08009b7c <__mdiff>:
 8009b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b80:	4689      	mov	r9, r1
 8009b82:	4606      	mov	r6, r0
 8009b84:	4611      	mov	r1, r2
 8009b86:	4648      	mov	r0, r9
 8009b88:	4614      	mov	r4, r2
 8009b8a:	f7ff ffdb 	bl	8009b44 <__mcmp>
 8009b8e:	1e05      	subs	r5, r0, #0
 8009b90:	d112      	bne.n	8009bb8 <__mdiff+0x3c>
 8009b92:	4629      	mov	r1, r5
 8009b94:	4630      	mov	r0, r6
 8009b96:	f7ff fd5b 	bl	8009650 <_Balloc>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	b928      	cbnz	r0, 8009baa <__mdiff+0x2e>
 8009b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8009c9c <__mdiff+0x120>)
 8009ba0:	f240 2137 	movw	r1, #567	@ 0x237
 8009ba4:	483e      	ldr	r0, [pc, #248]	@ (8009ca0 <__mdiff+0x124>)
 8009ba6:	f000 fb03 	bl	800a1b0 <__assert_func>
 8009baa:	2301      	movs	r3, #1
 8009bac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	b003      	add	sp, #12
 8009bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb8:	bfbc      	itt	lt
 8009bba:	464b      	movlt	r3, r9
 8009bbc:	46a1      	movlt	r9, r4
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009bc4:	bfba      	itte	lt
 8009bc6:	461c      	movlt	r4, r3
 8009bc8:	2501      	movlt	r5, #1
 8009bca:	2500      	movge	r5, #0
 8009bcc:	f7ff fd40 	bl	8009650 <_Balloc>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	b918      	cbnz	r0, 8009bdc <__mdiff+0x60>
 8009bd4:	4b31      	ldr	r3, [pc, #196]	@ (8009c9c <__mdiff+0x120>)
 8009bd6:	f240 2145 	movw	r1, #581	@ 0x245
 8009bda:	e7e3      	b.n	8009ba4 <__mdiff+0x28>
 8009bdc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009be0:	6926      	ldr	r6, [r4, #16]
 8009be2:	60c5      	str	r5, [r0, #12]
 8009be4:	f109 0310 	add.w	r3, r9, #16
 8009be8:	f109 0514 	add.w	r5, r9, #20
 8009bec:	f104 0e14 	add.w	lr, r4, #20
 8009bf0:	f100 0b14 	add.w	fp, r0, #20
 8009bf4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009bf8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	46d9      	mov	r9, fp
 8009c00:	f04f 0c00 	mov.w	ip, #0
 8009c04:	9b01      	ldr	r3, [sp, #4]
 8009c06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	fa1f f38a 	uxth.w	r3, sl
 8009c14:	4619      	mov	r1, r3
 8009c16:	b283      	uxth	r3, r0
 8009c18:	1acb      	subs	r3, r1, r3
 8009c1a:	0c00      	lsrs	r0, r0, #16
 8009c1c:	4463      	add	r3, ip
 8009c1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c2c:	4576      	cmp	r6, lr
 8009c2e:	f849 3b04 	str.w	r3, [r9], #4
 8009c32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c36:	d8e5      	bhi.n	8009c04 <__mdiff+0x88>
 8009c38:	1b33      	subs	r3, r6, r4
 8009c3a:	3b15      	subs	r3, #21
 8009c3c:	f023 0303 	bic.w	r3, r3, #3
 8009c40:	3415      	adds	r4, #21
 8009c42:	3304      	adds	r3, #4
 8009c44:	42a6      	cmp	r6, r4
 8009c46:	bf38      	it	cc
 8009c48:	2304      	movcc	r3, #4
 8009c4a:	441d      	add	r5, r3
 8009c4c:	445b      	add	r3, fp
 8009c4e:	461e      	mov	r6, r3
 8009c50:	462c      	mov	r4, r5
 8009c52:	4544      	cmp	r4, r8
 8009c54:	d30e      	bcc.n	8009c74 <__mdiff+0xf8>
 8009c56:	f108 0103 	add.w	r1, r8, #3
 8009c5a:	1b49      	subs	r1, r1, r5
 8009c5c:	f021 0103 	bic.w	r1, r1, #3
 8009c60:	3d03      	subs	r5, #3
 8009c62:	45a8      	cmp	r8, r5
 8009c64:	bf38      	it	cc
 8009c66:	2100      	movcc	r1, #0
 8009c68:	440b      	add	r3, r1
 8009c6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c6e:	b191      	cbz	r1, 8009c96 <__mdiff+0x11a>
 8009c70:	6117      	str	r7, [r2, #16]
 8009c72:	e79d      	b.n	8009bb0 <__mdiff+0x34>
 8009c74:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c78:	46e6      	mov	lr, ip
 8009c7a:	0c08      	lsrs	r0, r1, #16
 8009c7c:	fa1c fc81 	uxtah	ip, ip, r1
 8009c80:	4471      	add	r1, lr
 8009c82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c86:	b289      	uxth	r1, r1
 8009c88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c8c:	f846 1b04 	str.w	r1, [r6], #4
 8009c90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c94:	e7dd      	b.n	8009c52 <__mdiff+0xd6>
 8009c96:	3f01      	subs	r7, #1
 8009c98:	e7e7      	b.n	8009c6a <__mdiff+0xee>
 8009c9a:	bf00      	nop
 8009c9c:	0800a9d4 	.word	0x0800a9d4
 8009ca0:	0800a9e5 	.word	0x0800a9e5

08009ca4 <__d2b>:
 8009ca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ca8:	460f      	mov	r7, r1
 8009caa:	2101      	movs	r1, #1
 8009cac:	ec59 8b10 	vmov	r8, r9, d0
 8009cb0:	4616      	mov	r6, r2
 8009cb2:	f7ff fccd 	bl	8009650 <_Balloc>
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	b930      	cbnz	r0, 8009cc8 <__d2b+0x24>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	4b23      	ldr	r3, [pc, #140]	@ (8009d4c <__d2b+0xa8>)
 8009cbe:	4824      	ldr	r0, [pc, #144]	@ (8009d50 <__d2b+0xac>)
 8009cc0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009cc4:	f000 fa74 	bl	800a1b0 <__assert_func>
 8009cc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ccc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cd0:	b10d      	cbz	r5, 8009cd6 <__d2b+0x32>
 8009cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	f1b8 0300 	subs.w	r3, r8, #0
 8009cdc:	d023      	beq.n	8009d26 <__d2b+0x82>
 8009cde:	4668      	mov	r0, sp
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	f7ff fd7c 	bl	80097de <__lo0bits>
 8009ce6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009cea:	b1d0      	cbz	r0, 8009d22 <__d2b+0x7e>
 8009cec:	f1c0 0320 	rsb	r3, r0, #32
 8009cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	40c2      	lsrs	r2, r0
 8009cf8:	6163      	str	r3, [r4, #20]
 8009cfa:	9201      	str	r2, [sp, #4]
 8009cfc:	9b01      	ldr	r3, [sp, #4]
 8009cfe:	61a3      	str	r3, [r4, #24]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bf0c      	ite	eq
 8009d04:	2201      	moveq	r2, #1
 8009d06:	2202      	movne	r2, #2
 8009d08:	6122      	str	r2, [r4, #16]
 8009d0a:	b1a5      	cbz	r5, 8009d36 <__d2b+0x92>
 8009d0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d10:	4405      	add	r5, r0
 8009d12:	603d      	str	r5, [r7, #0]
 8009d14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d18:	6030      	str	r0, [r6, #0]
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	b003      	add	sp, #12
 8009d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d22:	6161      	str	r1, [r4, #20]
 8009d24:	e7ea      	b.n	8009cfc <__d2b+0x58>
 8009d26:	a801      	add	r0, sp, #4
 8009d28:	f7ff fd59 	bl	80097de <__lo0bits>
 8009d2c:	9b01      	ldr	r3, [sp, #4]
 8009d2e:	6163      	str	r3, [r4, #20]
 8009d30:	3020      	adds	r0, #32
 8009d32:	2201      	movs	r2, #1
 8009d34:	e7e8      	b.n	8009d08 <__d2b+0x64>
 8009d36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d3e:	6038      	str	r0, [r7, #0]
 8009d40:	6918      	ldr	r0, [r3, #16]
 8009d42:	f7ff fd2d 	bl	80097a0 <__hi0bits>
 8009d46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d4a:	e7e5      	b.n	8009d18 <__d2b+0x74>
 8009d4c:	0800a9d4 	.word	0x0800a9d4
 8009d50:	0800a9e5 	.word	0x0800a9e5

08009d54 <__ssputs_r>:
 8009d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d58:	688e      	ldr	r6, [r1, #8]
 8009d5a:	461f      	mov	r7, r3
 8009d5c:	42be      	cmp	r6, r7
 8009d5e:	680b      	ldr	r3, [r1, #0]
 8009d60:	4682      	mov	sl, r0
 8009d62:	460c      	mov	r4, r1
 8009d64:	4690      	mov	r8, r2
 8009d66:	d82d      	bhi.n	8009dc4 <__ssputs_r+0x70>
 8009d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d70:	d026      	beq.n	8009dc0 <__ssputs_r+0x6c>
 8009d72:	6965      	ldr	r5, [r4, #20]
 8009d74:	6909      	ldr	r1, [r1, #16]
 8009d76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d7a:	eba3 0901 	sub.w	r9, r3, r1
 8009d7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d82:	1c7b      	adds	r3, r7, #1
 8009d84:	444b      	add	r3, r9
 8009d86:	106d      	asrs	r5, r5, #1
 8009d88:	429d      	cmp	r5, r3
 8009d8a:	bf38      	it	cc
 8009d8c:	461d      	movcc	r5, r3
 8009d8e:	0553      	lsls	r3, r2, #21
 8009d90:	d527      	bpl.n	8009de2 <__ssputs_r+0x8e>
 8009d92:	4629      	mov	r1, r5
 8009d94:	f7ff fbd0 	bl	8009538 <_malloc_r>
 8009d98:	4606      	mov	r6, r0
 8009d9a:	b360      	cbz	r0, 8009df6 <__ssputs_r+0xa2>
 8009d9c:	6921      	ldr	r1, [r4, #16]
 8009d9e:	464a      	mov	r2, r9
 8009da0:	f7fe fcf9 	bl	8008796 <memcpy>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	6126      	str	r6, [r4, #16]
 8009db2:	6165      	str	r5, [r4, #20]
 8009db4:	444e      	add	r6, r9
 8009db6:	eba5 0509 	sub.w	r5, r5, r9
 8009dba:	6026      	str	r6, [r4, #0]
 8009dbc:	60a5      	str	r5, [r4, #8]
 8009dbe:	463e      	mov	r6, r7
 8009dc0:	42be      	cmp	r6, r7
 8009dc2:	d900      	bls.n	8009dc6 <__ssputs_r+0x72>
 8009dc4:	463e      	mov	r6, r7
 8009dc6:	6820      	ldr	r0, [r4, #0]
 8009dc8:	4632      	mov	r2, r6
 8009dca:	4641      	mov	r1, r8
 8009dcc:	f000 f9c6 	bl	800a15c <memmove>
 8009dd0:	68a3      	ldr	r3, [r4, #8]
 8009dd2:	1b9b      	subs	r3, r3, r6
 8009dd4:	60a3      	str	r3, [r4, #8]
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	4433      	add	r3, r6
 8009dda:	6023      	str	r3, [r4, #0]
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de2:	462a      	mov	r2, r5
 8009de4:	f000 fa28 	bl	800a238 <_realloc_r>
 8009de8:	4606      	mov	r6, r0
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d1e0      	bne.n	8009db0 <__ssputs_r+0x5c>
 8009dee:	6921      	ldr	r1, [r4, #16]
 8009df0:	4650      	mov	r0, sl
 8009df2:	f7ff fb2d 	bl	8009450 <_free_r>
 8009df6:	230c      	movs	r3, #12
 8009df8:	f8ca 3000 	str.w	r3, [sl]
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e02:	81a3      	strh	r3, [r4, #12]
 8009e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e08:	e7e9      	b.n	8009dde <__ssputs_r+0x8a>
	...

08009e0c <_svfiprintf_r>:
 8009e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e10:	4698      	mov	r8, r3
 8009e12:	898b      	ldrh	r3, [r1, #12]
 8009e14:	061b      	lsls	r3, r3, #24
 8009e16:	b09d      	sub	sp, #116	@ 0x74
 8009e18:	4607      	mov	r7, r0
 8009e1a:	460d      	mov	r5, r1
 8009e1c:	4614      	mov	r4, r2
 8009e1e:	d510      	bpl.n	8009e42 <_svfiprintf_r+0x36>
 8009e20:	690b      	ldr	r3, [r1, #16]
 8009e22:	b973      	cbnz	r3, 8009e42 <_svfiprintf_r+0x36>
 8009e24:	2140      	movs	r1, #64	@ 0x40
 8009e26:	f7ff fb87 	bl	8009538 <_malloc_r>
 8009e2a:	6028      	str	r0, [r5, #0]
 8009e2c:	6128      	str	r0, [r5, #16]
 8009e2e:	b930      	cbnz	r0, 8009e3e <_svfiprintf_r+0x32>
 8009e30:	230c      	movs	r3, #12
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e38:	b01d      	add	sp, #116	@ 0x74
 8009e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3e:	2340      	movs	r3, #64	@ 0x40
 8009e40:	616b      	str	r3, [r5, #20]
 8009e42:	2300      	movs	r3, #0
 8009e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e46:	2320      	movs	r3, #32
 8009e48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e50:	2330      	movs	r3, #48	@ 0x30
 8009e52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ff0 <_svfiprintf_r+0x1e4>
 8009e56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e5a:	f04f 0901 	mov.w	r9, #1
 8009e5e:	4623      	mov	r3, r4
 8009e60:	469a      	mov	sl, r3
 8009e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e66:	b10a      	cbz	r2, 8009e6c <_svfiprintf_r+0x60>
 8009e68:	2a25      	cmp	r2, #37	@ 0x25
 8009e6a:	d1f9      	bne.n	8009e60 <_svfiprintf_r+0x54>
 8009e6c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e70:	d00b      	beq.n	8009e8a <_svfiprintf_r+0x7e>
 8009e72:	465b      	mov	r3, fp
 8009e74:	4622      	mov	r2, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f7ff ff6b 	bl	8009d54 <__ssputs_r>
 8009e7e:	3001      	adds	r0, #1
 8009e80:	f000 80a7 	beq.w	8009fd2 <_svfiprintf_r+0x1c6>
 8009e84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e86:	445a      	add	r2, fp
 8009e88:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f000 809f 	beq.w	8009fd2 <_svfiprintf_r+0x1c6>
 8009e94:	2300      	movs	r3, #0
 8009e96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e9e:	f10a 0a01 	add.w	sl, sl, #1
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	9307      	str	r3, [sp, #28]
 8009ea6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009eaa:	931a      	str	r3, [sp, #104]	@ 0x68
 8009eac:	4654      	mov	r4, sl
 8009eae:	2205      	movs	r2, #5
 8009eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb4:	484e      	ldr	r0, [pc, #312]	@ (8009ff0 <_svfiprintf_r+0x1e4>)
 8009eb6:	f7f6 f9ab 	bl	8000210 <memchr>
 8009eba:	9a04      	ldr	r2, [sp, #16]
 8009ebc:	b9d8      	cbnz	r0, 8009ef6 <_svfiprintf_r+0xea>
 8009ebe:	06d0      	lsls	r0, r2, #27
 8009ec0:	bf44      	itt	mi
 8009ec2:	2320      	movmi	r3, #32
 8009ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ec8:	0711      	lsls	r1, r2, #28
 8009eca:	bf44      	itt	mi
 8009ecc:	232b      	movmi	r3, #43	@ 0x2b
 8009ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ed8:	d015      	beq.n	8009f06 <_svfiprintf_r+0xfa>
 8009eda:	9a07      	ldr	r2, [sp, #28]
 8009edc:	4654      	mov	r4, sl
 8009ede:	2000      	movs	r0, #0
 8009ee0:	f04f 0c0a 	mov.w	ip, #10
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eea:	3b30      	subs	r3, #48	@ 0x30
 8009eec:	2b09      	cmp	r3, #9
 8009eee:	d94b      	bls.n	8009f88 <_svfiprintf_r+0x17c>
 8009ef0:	b1b0      	cbz	r0, 8009f20 <_svfiprintf_r+0x114>
 8009ef2:	9207      	str	r2, [sp, #28]
 8009ef4:	e014      	b.n	8009f20 <_svfiprintf_r+0x114>
 8009ef6:	eba0 0308 	sub.w	r3, r0, r8
 8009efa:	fa09 f303 	lsl.w	r3, r9, r3
 8009efe:	4313      	orrs	r3, r2
 8009f00:	9304      	str	r3, [sp, #16]
 8009f02:	46a2      	mov	sl, r4
 8009f04:	e7d2      	b.n	8009eac <_svfiprintf_r+0xa0>
 8009f06:	9b03      	ldr	r3, [sp, #12]
 8009f08:	1d19      	adds	r1, r3, #4
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	9103      	str	r1, [sp, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	bfbb      	ittet	lt
 8009f12:	425b      	neglt	r3, r3
 8009f14:	f042 0202 	orrlt.w	r2, r2, #2
 8009f18:	9307      	strge	r3, [sp, #28]
 8009f1a:	9307      	strlt	r3, [sp, #28]
 8009f1c:	bfb8      	it	lt
 8009f1e:	9204      	strlt	r2, [sp, #16]
 8009f20:	7823      	ldrb	r3, [r4, #0]
 8009f22:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f24:	d10a      	bne.n	8009f3c <_svfiprintf_r+0x130>
 8009f26:	7863      	ldrb	r3, [r4, #1]
 8009f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f2a:	d132      	bne.n	8009f92 <_svfiprintf_r+0x186>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	1d1a      	adds	r2, r3, #4
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	9203      	str	r2, [sp, #12]
 8009f34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f38:	3402      	adds	r4, #2
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a000 <_svfiprintf_r+0x1f4>
 8009f40:	7821      	ldrb	r1, [r4, #0]
 8009f42:	2203      	movs	r2, #3
 8009f44:	4650      	mov	r0, sl
 8009f46:	f7f6 f963 	bl	8000210 <memchr>
 8009f4a:	b138      	cbz	r0, 8009f5c <_svfiprintf_r+0x150>
 8009f4c:	9b04      	ldr	r3, [sp, #16]
 8009f4e:	eba0 000a 	sub.w	r0, r0, sl
 8009f52:	2240      	movs	r2, #64	@ 0x40
 8009f54:	4082      	lsls	r2, r0
 8009f56:	4313      	orrs	r3, r2
 8009f58:	3401      	adds	r4, #1
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f60:	4824      	ldr	r0, [pc, #144]	@ (8009ff4 <_svfiprintf_r+0x1e8>)
 8009f62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f66:	2206      	movs	r2, #6
 8009f68:	f7f6 f952 	bl	8000210 <memchr>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d036      	beq.n	8009fde <_svfiprintf_r+0x1d2>
 8009f70:	4b21      	ldr	r3, [pc, #132]	@ (8009ff8 <_svfiprintf_r+0x1ec>)
 8009f72:	bb1b      	cbnz	r3, 8009fbc <_svfiprintf_r+0x1b0>
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	3307      	adds	r3, #7
 8009f78:	f023 0307 	bic.w	r3, r3, #7
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	9303      	str	r3, [sp, #12]
 8009f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f82:	4433      	add	r3, r6
 8009f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f86:	e76a      	b.n	8009e5e <_svfiprintf_r+0x52>
 8009f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	2001      	movs	r0, #1
 8009f90:	e7a8      	b.n	8009ee4 <_svfiprintf_r+0xd8>
 8009f92:	2300      	movs	r3, #0
 8009f94:	3401      	adds	r4, #1
 8009f96:	9305      	str	r3, [sp, #20]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	f04f 0c0a 	mov.w	ip, #10
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fa4:	3a30      	subs	r2, #48	@ 0x30
 8009fa6:	2a09      	cmp	r2, #9
 8009fa8:	d903      	bls.n	8009fb2 <_svfiprintf_r+0x1a6>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d0c6      	beq.n	8009f3c <_svfiprintf_r+0x130>
 8009fae:	9105      	str	r1, [sp, #20]
 8009fb0:	e7c4      	b.n	8009f3c <_svfiprintf_r+0x130>
 8009fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e7f0      	b.n	8009f9e <_svfiprintf_r+0x192>
 8009fbc:	ab03      	add	r3, sp, #12
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8009ffc <_svfiprintf_r+0x1f0>)
 8009fc4:	a904      	add	r1, sp, #16
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	f7fd fe1e 	bl	8007c08 <_printf_float>
 8009fcc:	1c42      	adds	r2, r0, #1
 8009fce:	4606      	mov	r6, r0
 8009fd0:	d1d6      	bne.n	8009f80 <_svfiprintf_r+0x174>
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	065b      	lsls	r3, r3, #25
 8009fd6:	f53f af2d 	bmi.w	8009e34 <_svfiprintf_r+0x28>
 8009fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fdc:	e72c      	b.n	8009e38 <_svfiprintf_r+0x2c>
 8009fde:	ab03      	add	r3, sp, #12
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	462a      	mov	r2, r5
 8009fe4:	4b05      	ldr	r3, [pc, #20]	@ (8009ffc <_svfiprintf_r+0x1f0>)
 8009fe6:	a904      	add	r1, sp, #16
 8009fe8:	4638      	mov	r0, r7
 8009fea:	f7fe f8a5 	bl	8008138 <_printf_i>
 8009fee:	e7ed      	b.n	8009fcc <_svfiprintf_r+0x1c0>
 8009ff0:	0800ab40 	.word	0x0800ab40
 8009ff4:	0800ab4a 	.word	0x0800ab4a
 8009ff8:	08007c09 	.word	0x08007c09
 8009ffc:	08009d55 	.word	0x08009d55
 800a000:	0800ab46 	.word	0x0800ab46

0800a004 <__sflush_r>:
 800a004:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a00c:	0716      	lsls	r6, r2, #28
 800a00e:	4605      	mov	r5, r0
 800a010:	460c      	mov	r4, r1
 800a012:	d454      	bmi.n	800a0be <__sflush_r+0xba>
 800a014:	684b      	ldr	r3, [r1, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	dc02      	bgt.n	800a020 <__sflush_r+0x1c>
 800a01a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	dd48      	ble.n	800a0b2 <__sflush_r+0xae>
 800a020:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a022:	2e00      	cmp	r6, #0
 800a024:	d045      	beq.n	800a0b2 <__sflush_r+0xae>
 800a026:	2300      	movs	r3, #0
 800a028:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a02c:	682f      	ldr	r7, [r5, #0]
 800a02e:	6a21      	ldr	r1, [r4, #32]
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	d030      	beq.n	800a096 <__sflush_r+0x92>
 800a034:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	0759      	lsls	r1, r3, #29
 800a03a:	d505      	bpl.n	800a048 <__sflush_r+0x44>
 800a03c:	6863      	ldr	r3, [r4, #4]
 800a03e:	1ad2      	subs	r2, r2, r3
 800a040:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a042:	b10b      	cbz	r3, 800a048 <__sflush_r+0x44>
 800a044:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a046:	1ad2      	subs	r2, r2, r3
 800a048:	2300      	movs	r3, #0
 800a04a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a04c:	6a21      	ldr	r1, [r4, #32]
 800a04e:	4628      	mov	r0, r5
 800a050:	47b0      	blx	r6
 800a052:	1c43      	adds	r3, r0, #1
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	d106      	bne.n	800a066 <__sflush_r+0x62>
 800a058:	6829      	ldr	r1, [r5, #0]
 800a05a:	291d      	cmp	r1, #29
 800a05c:	d82b      	bhi.n	800a0b6 <__sflush_r+0xb2>
 800a05e:	4a2a      	ldr	r2, [pc, #168]	@ (800a108 <__sflush_r+0x104>)
 800a060:	410a      	asrs	r2, r1
 800a062:	07d6      	lsls	r6, r2, #31
 800a064:	d427      	bmi.n	800a0b6 <__sflush_r+0xb2>
 800a066:	2200      	movs	r2, #0
 800a068:	6062      	str	r2, [r4, #4]
 800a06a:	04d9      	lsls	r1, r3, #19
 800a06c:	6922      	ldr	r2, [r4, #16]
 800a06e:	6022      	str	r2, [r4, #0]
 800a070:	d504      	bpl.n	800a07c <__sflush_r+0x78>
 800a072:	1c42      	adds	r2, r0, #1
 800a074:	d101      	bne.n	800a07a <__sflush_r+0x76>
 800a076:	682b      	ldr	r3, [r5, #0]
 800a078:	b903      	cbnz	r3, 800a07c <__sflush_r+0x78>
 800a07a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a07c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a07e:	602f      	str	r7, [r5, #0]
 800a080:	b1b9      	cbz	r1, 800a0b2 <__sflush_r+0xae>
 800a082:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a086:	4299      	cmp	r1, r3
 800a088:	d002      	beq.n	800a090 <__sflush_r+0x8c>
 800a08a:	4628      	mov	r0, r5
 800a08c:	f7ff f9e0 	bl	8009450 <_free_r>
 800a090:	2300      	movs	r3, #0
 800a092:	6363      	str	r3, [r4, #52]	@ 0x34
 800a094:	e00d      	b.n	800a0b2 <__sflush_r+0xae>
 800a096:	2301      	movs	r3, #1
 800a098:	4628      	mov	r0, r5
 800a09a:	47b0      	blx	r6
 800a09c:	4602      	mov	r2, r0
 800a09e:	1c50      	adds	r0, r2, #1
 800a0a0:	d1c9      	bne.n	800a036 <__sflush_r+0x32>
 800a0a2:	682b      	ldr	r3, [r5, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0c6      	beq.n	800a036 <__sflush_r+0x32>
 800a0a8:	2b1d      	cmp	r3, #29
 800a0aa:	d001      	beq.n	800a0b0 <__sflush_r+0xac>
 800a0ac:	2b16      	cmp	r3, #22
 800a0ae:	d11e      	bne.n	800a0ee <__sflush_r+0xea>
 800a0b0:	602f      	str	r7, [r5, #0]
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	e022      	b.n	800a0fc <__sflush_r+0xf8>
 800a0b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ba:	b21b      	sxth	r3, r3
 800a0bc:	e01b      	b.n	800a0f6 <__sflush_r+0xf2>
 800a0be:	690f      	ldr	r7, [r1, #16]
 800a0c0:	2f00      	cmp	r7, #0
 800a0c2:	d0f6      	beq.n	800a0b2 <__sflush_r+0xae>
 800a0c4:	0793      	lsls	r3, r2, #30
 800a0c6:	680e      	ldr	r6, [r1, #0]
 800a0c8:	bf08      	it	eq
 800a0ca:	694b      	ldreq	r3, [r1, #20]
 800a0cc:	600f      	str	r7, [r1, #0]
 800a0ce:	bf18      	it	ne
 800a0d0:	2300      	movne	r3, #0
 800a0d2:	eba6 0807 	sub.w	r8, r6, r7
 800a0d6:	608b      	str	r3, [r1, #8]
 800a0d8:	f1b8 0f00 	cmp.w	r8, #0
 800a0dc:	dde9      	ble.n	800a0b2 <__sflush_r+0xae>
 800a0de:	6a21      	ldr	r1, [r4, #32]
 800a0e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a0e2:	4643      	mov	r3, r8
 800a0e4:	463a      	mov	r2, r7
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	47b0      	blx	r6
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	dc08      	bgt.n	800a100 <__sflush_r+0xfc>
 800a0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0f6:	81a3      	strh	r3, [r4, #12]
 800a0f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a100:	4407      	add	r7, r0
 800a102:	eba8 0800 	sub.w	r8, r8, r0
 800a106:	e7e7      	b.n	800a0d8 <__sflush_r+0xd4>
 800a108:	dfbffffe 	.word	0xdfbffffe

0800a10c <_fflush_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	690b      	ldr	r3, [r1, #16]
 800a110:	4605      	mov	r5, r0
 800a112:	460c      	mov	r4, r1
 800a114:	b913      	cbnz	r3, 800a11c <_fflush_r+0x10>
 800a116:	2500      	movs	r5, #0
 800a118:	4628      	mov	r0, r5
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	b118      	cbz	r0, 800a126 <_fflush_r+0x1a>
 800a11e:	6a03      	ldr	r3, [r0, #32]
 800a120:	b90b      	cbnz	r3, 800a126 <_fflush_r+0x1a>
 800a122:	f7fe f9b5 	bl	8008490 <__sinit>
 800a126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0f3      	beq.n	800a116 <_fflush_r+0xa>
 800a12e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a130:	07d0      	lsls	r0, r2, #31
 800a132:	d404      	bmi.n	800a13e <_fflush_r+0x32>
 800a134:	0599      	lsls	r1, r3, #22
 800a136:	d402      	bmi.n	800a13e <_fflush_r+0x32>
 800a138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a13a:	f7fe fb2a 	bl	8008792 <__retarget_lock_acquire_recursive>
 800a13e:	4628      	mov	r0, r5
 800a140:	4621      	mov	r1, r4
 800a142:	f7ff ff5f 	bl	800a004 <__sflush_r>
 800a146:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a148:	07da      	lsls	r2, r3, #31
 800a14a:	4605      	mov	r5, r0
 800a14c:	d4e4      	bmi.n	800a118 <_fflush_r+0xc>
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	059b      	lsls	r3, r3, #22
 800a152:	d4e1      	bmi.n	800a118 <_fflush_r+0xc>
 800a154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a156:	f7fe fb1d 	bl	8008794 <__retarget_lock_release_recursive>
 800a15a:	e7dd      	b.n	800a118 <_fflush_r+0xc>

0800a15c <memmove>:
 800a15c:	4288      	cmp	r0, r1
 800a15e:	b510      	push	{r4, lr}
 800a160:	eb01 0402 	add.w	r4, r1, r2
 800a164:	d902      	bls.n	800a16c <memmove+0x10>
 800a166:	4284      	cmp	r4, r0
 800a168:	4623      	mov	r3, r4
 800a16a:	d807      	bhi.n	800a17c <memmove+0x20>
 800a16c:	1e43      	subs	r3, r0, #1
 800a16e:	42a1      	cmp	r1, r4
 800a170:	d008      	beq.n	800a184 <memmove+0x28>
 800a172:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a17a:	e7f8      	b.n	800a16e <memmove+0x12>
 800a17c:	4402      	add	r2, r0
 800a17e:	4601      	mov	r1, r0
 800a180:	428a      	cmp	r2, r1
 800a182:	d100      	bne.n	800a186 <memmove+0x2a>
 800a184:	bd10      	pop	{r4, pc}
 800a186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a18a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a18e:	e7f7      	b.n	800a180 <memmove+0x24>

0800a190 <_sbrk_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d06      	ldr	r5, [pc, #24]	@ (800a1ac <_sbrk_r+0x1c>)
 800a194:	2300      	movs	r3, #0
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	602b      	str	r3, [r5, #0]
 800a19c:	f7f7 fc2a 	bl	80019f4 <_sbrk>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_sbrk_r+0x1a>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_sbrk_r+0x1a>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	20004e58 	.word	0x20004e58

0800a1b0 <__assert_func>:
 800a1b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1b2:	4614      	mov	r4, r2
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	4b09      	ldr	r3, [pc, #36]	@ (800a1dc <__assert_func+0x2c>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	68d8      	ldr	r0, [r3, #12]
 800a1be:	b954      	cbnz	r4, 800a1d6 <__assert_func+0x26>
 800a1c0:	4b07      	ldr	r3, [pc, #28]	@ (800a1e0 <__assert_func+0x30>)
 800a1c2:	461c      	mov	r4, r3
 800a1c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1c8:	9100      	str	r1, [sp, #0]
 800a1ca:	462b      	mov	r3, r5
 800a1cc:	4905      	ldr	r1, [pc, #20]	@ (800a1e4 <__assert_func+0x34>)
 800a1ce:	f000 f86f 	bl	800a2b0 <fiprintf>
 800a1d2:	f000 f87f 	bl	800a2d4 <abort>
 800a1d6:	4b04      	ldr	r3, [pc, #16]	@ (800a1e8 <__assert_func+0x38>)
 800a1d8:	e7f4      	b.n	800a1c4 <__assert_func+0x14>
 800a1da:	bf00      	nop
 800a1dc:	2000001c 	.word	0x2000001c
 800a1e0:	0800ab96 	.word	0x0800ab96
 800a1e4:	0800ab68 	.word	0x0800ab68
 800a1e8:	0800ab5b 	.word	0x0800ab5b

0800a1ec <_calloc_r>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	fba1 5402 	umull	r5, r4, r1, r2
 800a1f2:	b93c      	cbnz	r4, 800a204 <_calloc_r+0x18>
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	f7ff f99f 	bl	8009538 <_malloc_r>
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	b928      	cbnz	r0, 800a20a <_calloc_r+0x1e>
 800a1fe:	2600      	movs	r6, #0
 800a200:	4630      	mov	r0, r6
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	220c      	movs	r2, #12
 800a206:	6002      	str	r2, [r0, #0]
 800a208:	e7f9      	b.n	800a1fe <_calloc_r+0x12>
 800a20a:	462a      	mov	r2, r5
 800a20c:	4621      	mov	r1, r4
 800a20e:	f7fe f9ec 	bl	80085ea <memset>
 800a212:	e7f5      	b.n	800a200 <_calloc_r+0x14>

0800a214 <__ascii_mbtowc>:
 800a214:	b082      	sub	sp, #8
 800a216:	b901      	cbnz	r1, 800a21a <__ascii_mbtowc+0x6>
 800a218:	a901      	add	r1, sp, #4
 800a21a:	b142      	cbz	r2, 800a22e <__ascii_mbtowc+0x1a>
 800a21c:	b14b      	cbz	r3, 800a232 <__ascii_mbtowc+0x1e>
 800a21e:	7813      	ldrb	r3, [r2, #0]
 800a220:	600b      	str	r3, [r1, #0]
 800a222:	7812      	ldrb	r2, [r2, #0]
 800a224:	1e10      	subs	r0, r2, #0
 800a226:	bf18      	it	ne
 800a228:	2001      	movne	r0, #1
 800a22a:	b002      	add	sp, #8
 800a22c:	4770      	bx	lr
 800a22e:	4610      	mov	r0, r2
 800a230:	e7fb      	b.n	800a22a <__ascii_mbtowc+0x16>
 800a232:	f06f 0001 	mvn.w	r0, #1
 800a236:	e7f8      	b.n	800a22a <__ascii_mbtowc+0x16>

0800a238 <_realloc_r>:
 800a238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23c:	4680      	mov	r8, r0
 800a23e:	4615      	mov	r5, r2
 800a240:	460c      	mov	r4, r1
 800a242:	b921      	cbnz	r1, 800a24e <_realloc_r+0x16>
 800a244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a248:	4611      	mov	r1, r2
 800a24a:	f7ff b975 	b.w	8009538 <_malloc_r>
 800a24e:	b92a      	cbnz	r2, 800a25c <_realloc_r+0x24>
 800a250:	f7ff f8fe 	bl	8009450 <_free_r>
 800a254:	2400      	movs	r4, #0
 800a256:	4620      	mov	r0, r4
 800a258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25c:	f000 f841 	bl	800a2e2 <_malloc_usable_size_r>
 800a260:	4285      	cmp	r5, r0
 800a262:	4606      	mov	r6, r0
 800a264:	d802      	bhi.n	800a26c <_realloc_r+0x34>
 800a266:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a26a:	d8f4      	bhi.n	800a256 <_realloc_r+0x1e>
 800a26c:	4629      	mov	r1, r5
 800a26e:	4640      	mov	r0, r8
 800a270:	f7ff f962 	bl	8009538 <_malloc_r>
 800a274:	4607      	mov	r7, r0
 800a276:	2800      	cmp	r0, #0
 800a278:	d0ec      	beq.n	800a254 <_realloc_r+0x1c>
 800a27a:	42b5      	cmp	r5, r6
 800a27c:	462a      	mov	r2, r5
 800a27e:	4621      	mov	r1, r4
 800a280:	bf28      	it	cs
 800a282:	4632      	movcs	r2, r6
 800a284:	f7fe fa87 	bl	8008796 <memcpy>
 800a288:	4621      	mov	r1, r4
 800a28a:	4640      	mov	r0, r8
 800a28c:	f7ff f8e0 	bl	8009450 <_free_r>
 800a290:	463c      	mov	r4, r7
 800a292:	e7e0      	b.n	800a256 <_realloc_r+0x1e>

0800a294 <__ascii_wctomb>:
 800a294:	4603      	mov	r3, r0
 800a296:	4608      	mov	r0, r1
 800a298:	b141      	cbz	r1, 800a2ac <__ascii_wctomb+0x18>
 800a29a:	2aff      	cmp	r2, #255	@ 0xff
 800a29c:	d904      	bls.n	800a2a8 <__ascii_wctomb+0x14>
 800a29e:	228a      	movs	r2, #138	@ 0x8a
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2a6:	4770      	bx	lr
 800a2a8:	700a      	strb	r2, [r1, #0]
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	4770      	bx	lr
	...

0800a2b0 <fiprintf>:
 800a2b0:	b40e      	push	{r1, r2, r3}
 800a2b2:	b503      	push	{r0, r1, lr}
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	ab03      	add	r3, sp, #12
 800a2b8:	4805      	ldr	r0, [pc, #20]	@ (800a2d0 <fiprintf+0x20>)
 800a2ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2be:	6800      	ldr	r0, [r0, #0]
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	f000 f83f 	bl	800a344 <_vfiprintf_r>
 800a2c6:	b002      	add	sp, #8
 800a2c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2cc:	b003      	add	sp, #12
 800a2ce:	4770      	bx	lr
 800a2d0:	2000001c 	.word	0x2000001c

0800a2d4 <abort>:
 800a2d4:	b508      	push	{r3, lr}
 800a2d6:	2006      	movs	r0, #6
 800a2d8:	f000 fa08 	bl	800a6ec <raise>
 800a2dc:	2001      	movs	r0, #1
 800a2de:	f7f7 fb11 	bl	8001904 <_exit>

0800a2e2 <_malloc_usable_size_r>:
 800a2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e6:	1f18      	subs	r0, r3, #4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	bfbc      	itt	lt
 800a2ec:	580b      	ldrlt	r3, [r1, r0]
 800a2ee:	18c0      	addlt	r0, r0, r3
 800a2f0:	4770      	bx	lr

0800a2f2 <__sfputc_r>:
 800a2f2:	6893      	ldr	r3, [r2, #8]
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	b410      	push	{r4}
 800a2fa:	6093      	str	r3, [r2, #8]
 800a2fc:	da08      	bge.n	800a310 <__sfputc_r+0x1e>
 800a2fe:	6994      	ldr	r4, [r2, #24]
 800a300:	42a3      	cmp	r3, r4
 800a302:	db01      	blt.n	800a308 <__sfputc_r+0x16>
 800a304:	290a      	cmp	r1, #10
 800a306:	d103      	bne.n	800a310 <__sfputc_r+0x1e>
 800a308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a30c:	f000 b932 	b.w	800a574 <__swbuf_r>
 800a310:	6813      	ldr	r3, [r2, #0]
 800a312:	1c58      	adds	r0, r3, #1
 800a314:	6010      	str	r0, [r2, #0]
 800a316:	7019      	strb	r1, [r3, #0]
 800a318:	4608      	mov	r0, r1
 800a31a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <__sfputs_r>:
 800a320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a322:	4606      	mov	r6, r0
 800a324:	460f      	mov	r7, r1
 800a326:	4614      	mov	r4, r2
 800a328:	18d5      	adds	r5, r2, r3
 800a32a:	42ac      	cmp	r4, r5
 800a32c:	d101      	bne.n	800a332 <__sfputs_r+0x12>
 800a32e:	2000      	movs	r0, #0
 800a330:	e007      	b.n	800a342 <__sfputs_r+0x22>
 800a332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a336:	463a      	mov	r2, r7
 800a338:	4630      	mov	r0, r6
 800a33a:	f7ff ffda 	bl	800a2f2 <__sfputc_r>
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	d1f3      	bne.n	800a32a <__sfputs_r+0xa>
 800a342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a344 <_vfiprintf_r>:
 800a344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a348:	460d      	mov	r5, r1
 800a34a:	b09d      	sub	sp, #116	@ 0x74
 800a34c:	4614      	mov	r4, r2
 800a34e:	4698      	mov	r8, r3
 800a350:	4606      	mov	r6, r0
 800a352:	b118      	cbz	r0, 800a35c <_vfiprintf_r+0x18>
 800a354:	6a03      	ldr	r3, [r0, #32]
 800a356:	b90b      	cbnz	r3, 800a35c <_vfiprintf_r+0x18>
 800a358:	f7fe f89a 	bl	8008490 <__sinit>
 800a35c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a35e:	07d9      	lsls	r1, r3, #31
 800a360:	d405      	bmi.n	800a36e <_vfiprintf_r+0x2a>
 800a362:	89ab      	ldrh	r3, [r5, #12]
 800a364:	059a      	lsls	r2, r3, #22
 800a366:	d402      	bmi.n	800a36e <_vfiprintf_r+0x2a>
 800a368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a36a:	f7fe fa12 	bl	8008792 <__retarget_lock_acquire_recursive>
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	071b      	lsls	r3, r3, #28
 800a372:	d501      	bpl.n	800a378 <_vfiprintf_r+0x34>
 800a374:	692b      	ldr	r3, [r5, #16]
 800a376:	b99b      	cbnz	r3, 800a3a0 <_vfiprintf_r+0x5c>
 800a378:	4629      	mov	r1, r5
 800a37a:	4630      	mov	r0, r6
 800a37c:	f000 f938 	bl	800a5f0 <__swsetup_r>
 800a380:	b170      	cbz	r0, 800a3a0 <_vfiprintf_r+0x5c>
 800a382:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a384:	07dc      	lsls	r4, r3, #31
 800a386:	d504      	bpl.n	800a392 <_vfiprintf_r+0x4e>
 800a388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a38c:	b01d      	add	sp, #116	@ 0x74
 800a38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a392:	89ab      	ldrh	r3, [r5, #12]
 800a394:	0598      	lsls	r0, r3, #22
 800a396:	d4f7      	bmi.n	800a388 <_vfiprintf_r+0x44>
 800a398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a39a:	f7fe f9fb 	bl	8008794 <__retarget_lock_release_recursive>
 800a39e:	e7f3      	b.n	800a388 <_vfiprintf_r+0x44>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3a4:	2320      	movs	r3, #32
 800a3a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ae:	2330      	movs	r3, #48	@ 0x30
 800a3b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a560 <_vfiprintf_r+0x21c>
 800a3b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3b8:	f04f 0901 	mov.w	r9, #1
 800a3bc:	4623      	mov	r3, r4
 800a3be:	469a      	mov	sl, r3
 800a3c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c4:	b10a      	cbz	r2, 800a3ca <_vfiprintf_r+0x86>
 800a3c6:	2a25      	cmp	r2, #37	@ 0x25
 800a3c8:	d1f9      	bne.n	800a3be <_vfiprintf_r+0x7a>
 800a3ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ce:	d00b      	beq.n	800a3e8 <_vfiprintf_r+0xa4>
 800a3d0:	465b      	mov	r3, fp
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7ff ffa2 	bl	800a320 <__sfputs_r>
 800a3dc:	3001      	adds	r0, #1
 800a3de:	f000 80a7 	beq.w	800a530 <_vfiprintf_r+0x1ec>
 800a3e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3e4:	445a      	add	r2, fp
 800a3e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 809f 	beq.w	800a530 <_vfiprintf_r+0x1ec>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3fc:	f10a 0a01 	add.w	sl, sl, #1
 800a400:	9304      	str	r3, [sp, #16]
 800a402:	9307      	str	r3, [sp, #28]
 800a404:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a408:	931a      	str	r3, [sp, #104]	@ 0x68
 800a40a:	4654      	mov	r4, sl
 800a40c:	2205      	movs	r2, #5
 800a40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a412:	4853      	ldr	r0, [pc, #332]	@ (800a560 <_vfiprintf_r+0x21c>)
 800a414:	f7f5 fefc 	bl	8000210 <memchr>
 800a418:	9a04      	ldr	r2, [sp, #16]
 800a41a:	b9d8      	cbnz	r0, 800a454 <_vfiprintf_r+0x110>
 800a41c:	06d1      	lsls	r1, r2, #27
 800a41e:	bf44      	itt	mi
 800a420:	2320      	movmi	r3, #32
 800a422:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a426:	0713      	lsls	r3, r2, #28
 800a428:	bf44      	itt	mi
 800a42a:	232b      	movmi	r3, #43	@ 0x2b
 800a42c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a430:	f89a 3000 	ldrb.w	r3, [sl]
 800a434:	2b2a      	cmp	r3, #42	@ 0x2a
 800a436:	d015      	beq.n	800a464 <_vfiprintf_r+0x120>
 800a438:	9a07      	ldr	r2, [sp, #28]
 800a43a:	4654      	mov	r4, sl
 800a43c:	2000      	movs	r0, #0
 800a43e:	f04f 0c0a 	mov.w	ip, #10
 800a442:	4621      	mov	r1, r4
 800a444:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a448:	3b30      	subs	r3, #48	@ 0x30
 800a44a:	2b09      	cmp	r3, #9
 800a44c:	d94b      	bls.n	800a4e6 <_vfiprintf_r+0x1a2>
 800a44e:	b1b0      	cbz	r0, 800a47e <_vfiprintf_r+0x13a>
 800a450:	9207      	str	r2, [sp, #28]
 800a452:	e014      	b.n	800a47e <_vfiprintf_r+0x13a>
 800a454:	eba0 0308 	sub.w	r3, r0, r8
 800a458:	fa09 f303 	lsl.w	r3, r9, r3
 800a45c:	4313      	orrs	r3, r2
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	46a2      	mov	sl, r4
 800a462:	e7d2      	b.n	800a40a <_vfiprintf_r+0xc6>
 800a464:	9b03      	ldr	r3, [sp, #12]
 800a466:	1d19      	adds	r1, r3, #4
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	9103      	str	r1, [sp, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bfbb      	ittet	lt
 800a470:	425b      	neglt	r3, r3
 800a472:	f042 0202 	orrlt.w	r2, r2, #2
 800a476:	9307      	strge	r3, [sp, #28]
 800a478:	9307      	strlt	r3, [sp, #28]
 800a47a:	bfb8      	it	lt
 800a47c:	9204      	strlt	r2, [sp, #16]
 800a47e:	7823      	ldrb	r3, [r4, #0]
 800a480:	2b2e      	cmp	r3, #46	@ 0x2e
 800a482:	d10a      	bne.n	800a49a <_vfiprintf_r+0x156>
 800a484:	7863      	ldrb	r3, [r4, #1]
 800a486:	2b2a      	cmp	r3, #42	@ 0x2a
 800a488:	d132      	bne.n	800a4f0 <_vfiprintf_r+0x1ac>
 800a48a:	9b03      	ldr	r3, [sp, #12]
 800a48c:	1d1a      	adds	r2, r3, #4
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	9203      	str	r2, [sp, #12]
 800a492:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a496:	3402      	adds	r4, #2
 800a498:	9305      	str	r3, [sp, #20]
 800a49a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a570 <_vfiprintf_r+0x22c>
 800a49e:	7821      	ldrb	r1, [r4, #0]
 800a4a0:	2203      	movs	r2, #3
 800a4a2:	4650      	mov	r0, sl
 800a4a4:	f7f5 feb4 	bl	8000210 <memchr>
 800a4a8:	b138      	cbz	r0, 800a4ba <_vfiprintf_r+0x176>
 800a4aa:	9b04      	ldr	r3, [sp, #16]
 800a4ac:	eba0 000a 	sub.w	r0, r0, sl
 800a4b0:	2240      	movs	r2, #64	@ 0x40
 800a4b2:	4082      	lsls	r2, r0
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	3401      	adds	r4, #1
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4be:	4829      	ldr	r0, [pc, #164]	@ (800a564 <_vfiprintf_r+0x220>)
 800a4c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4c4:	2206      	movs	r2, #6
 800a4c6:	f7f5 fea3 	bl	8000210 <memchr>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d03f      	beq.n	800a54e <_vfiprintf_r+0x20a>
 800a4ce:	4b26      	ldr	r3, [pc, #152]	@ (800a568 <_vfiprintf_r+0x224>)
 800a4d0:	bb1b      	cbnz	r3, 800a51a <_vfiprintf_r+0x1d6>
 800a4d2:	9b03      	ldr	r3, [sp, #12]
 800a4d4:	3307      	adds	r3, #7
 800a4d6:	f023 0307 	bic.w	r3, r3, #7
 800a4da:	3308      	adds	r3, #8
 800a4dc:	9303      	str	r3, [sp, #12]
 800a4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4e0:	443b      	add	r3, r7
 800a4e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e4:	e76a      	b.n	800a3bc <_vfiprintf_r+0x78>
 800a4e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	2001      	movs	r0, #1
 800a4ee:	e7a8      	b.n	800a442 <_vfiprintf_r+0xfe>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	3401      	adds	r4, #1
 800a4f4:	9305      	str	r3, [sp, #20]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	f04f 0c0a 	mov.w	ip, #10
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a502:	3a30      	subs	r2, #48	@ 0x30
 800a504:	2a09      	cmp	r2, #9
 800a506:	d903      	bls.n	800a510 <_vfiprintf_r+0x1cc>
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d0c6      	beq.n	800a49a <_vfiprintf_r+0x156>
 800a50c:	9105      	str	r1, [sp, #20]
 800a50e:	e7c4      	b.n	800a49a <_vfiprintf_r+0x156>
 800a510:	fb0c 2101 	mla	r1, ip, r1, r2
 800a514:	4604      	mov	r4, r0
 800a516:	2301      	movs	r3, #1
 800a518:	e7f0      	b.n	800a4fc <_vfiprintf_r+0x1b8>
 800a51a:	ab03      	add	r3, sp, #12
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	462a      	mov	r2, r5
 800a520:	4b12      	ldr	r3, [pc, #72]	@ (800a56c <_vfiprintf_r+0x228>)
 800a522:	a904      	add	r1, sp, #16
 800a524:	4630      	mov	r0, r6
 800a526:	f7fd fb6f 	bl	8007c08 <_printf_float>
 800a52a:	4607      	mov	r7, r0
 800a52c:	1c78      	adds	r0, r7, #1
 800a52e:	d1d6      	bne.n	800a4de <_vfiprintf_r+0x19a>
 800a530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a532:	07d9      	lsls	r1, r3, #31
 800a534:	d405      	bmi.n	800a542 <_vfiprintf_r+0x1fe>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	059a      	lsls	r2, r3, #22
 800a53a:	d402      	bmi.n	800a542 <_vfiprintf_r+0x1fe>
 800a53c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a53e:	f7fe f929 	bl	8008794 <__retarget_lock_release_recursive>
 800a542:	89ab      	ldrh	r3, [r5, #12]
 800a544:	065b      	lsls	r3, r3, #25
 800a546:	f53f af1f 	bmi.w	800a388 <_vfiprintf_r+0x44>
 800a54a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a54c:	e71e      	b.n	800a38c <_vfiprintf_r+0x48>
 800a54e:	ab03      	add	r3, sp, #12
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	462a      	mov	r2, r5
 800a554:	4b05      	ldr	r3, [pc, #20]	@ (800a56c <_vfiprintf_r+0x228>)
 800a556:	a904      	add	r1, sp, #16
 800a558:	4630      	mov	r0, r6
 800a55a:	f7fd fded 	bl	8008138 <_printf_i>
 800a55e:	e7e4      	b.n	800a52a <_vfiprintf_r+0x1e6>
 800a560:	0800ab40 	.word	0x0800ab40
 800a564:	0800ab4a 	.word	0x0800ab4a
 800a568:	08007c09 	.word	0x08007c09
 800a56c:	0800a321 	.word	0x0800a321
 800a570:	0800ab46 	.word	0x0800ab46

0800a574 <__swbuf_r>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	460e      	mov	r6, r1
 800a578:	4614      	mov	r4, r2
 800a57a:	4605      	mov	r5, r0
 800a57c:	b118      	cbz	r0, 800a586 <__swbuf_r+0x12>
 800a57e:	6a03      	ldr	r3, [r0, #32]
 800a580:	b90b      	cbnz	r3, 800a586 <__swbuf_r+0x12>
 800a582:	f7fd ff85 	bl	8008490 <__sinit>
 800a586:	69a3      	ldr	r3, [r4, #24]
 800a588:	60a3      	str	r3, [r4, #8]
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	071a      	lsls	r2, r3, #28
 800a58e:	d501      	bpl.n	800a594 <__swbuf_r+0x20>
 800a590:	6923      	ldr	r3, [r4, #16]
 800a592:	b943      	cbnz	r3, 800a5a6 <__swbuf_r+0x32>
 800a594:	4621      	mov	r1, r4
 800a596:	4628      	mov	r0, r5
 800a598:	f000 f82a 	bl	800a5f0 <__swsetup_r>
 800a59c:	b118      	cbz	r0, 800a5a6 <__swbuf_r+0x32>
 800a59e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	6922      	ldr	r2, [r4, #16]
 800a5aa:	1a98      	subs	r0, r3, r2
 800a5ac:	6963      	ldr	r3, [r4, #20]
 800a5ae:	b2f6      	uxtb	r6, r6
 800a5b0:	4283      	cmp	r3, r0
 800a5b2:	4637      	mov	r7, r6
 800a5b4:	dc05      	bgt.n	800a5c2 <__swbuf_r+0x4e>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f7ff fda7 	bl	800a10c <_fflush_r>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d1ed      	bne.n	800a59e <__swbuf_r+0x2a>
 800a5c2:	68a3      	ldr	r3, [r4, #8]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	60a3      	str	r3, [r4, #8]
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	6022      	str	r2, [r4, #0]
 800a5ce:	701e      	strb	r6, [r3, #0]
 800a5d0:	6962      	ldr	r2, [r4, #20]
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d004      	beq.n	800a5e2 <__swbuf_r+0x6e>
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	07db      	lsls	r3, r3, #31
 800a5dc:	d5e1      	bpl.n	800a5a2 <__swbuf_r+0x2e>
 800a5de:	2e0a      	cmp	r6, #10
 800a5e0:	d1df      	bne.n	800a5a2 <__swbuf_r+0x2e>
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	f7ff fd91 	bl	800a10c <_fflush_r>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d0d9      	beq.n	800a5a2 <__swbuf_r+0x2e>
 800a5ee:	e7d6      	b.n	800a59e <__swbuf_r+0x2a>

0800a5f0 <__swsetup_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4b29      	ldr	r3, [pc, #164]	@ (800a698 <__swsetup_r+0xa8>)
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	b118      	cbz	r0, 800a604 <__swsetup_r+0x14>
 800a5fc:	6a03      	ldr	r3, [r0, #32]
 800a5fe:	b90b      	cbnz	r3, 800a604 <__swsetup_r+0x14>
 800a600:	f7fd ff46 	bl	8008490 <__sinit>
 800a604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a608:	0719      	lsls	r1, r3, #28
 800a60a:	d422      	bmi.n	800a652 <__swsetup_r+0x62>
 800a60c:	06da      	lsls	r2, r3, #27
 800a60e:	d407      	bmi.n	800a620 <__swsetup_r+0x30>
 800a610:	2209      	movs	r2, #9
 800a612:	602a      	str	r2, [r5, #0]
 800a614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a618:	81a3      	strh	r3, [r4, #12]
 800a61a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a61e:	e033      	b.n	800a688 <__swsetup_r+0x98>
 800a620:	0758      	lsls	r0, r3, #29
 800a622:	d512      	bpl.n	800a64a <__swsetup_r+0x5a>
 800a624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a626:	b141      	cbz	r1, 800a63a <__swsetup_r+0x4a>
 800a628:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a62c:	4299      	cmp	r1, r3
 800a62e:	d002      	beq.n	800a636 <__swsetup_r+0x46>
 800a630:	4628      	mov	r0, r5
 800a632:	f7fe ff0d 	bl	8009450 <_free_r>
 800a636:	2300      	movs	r3, #0
 800a638:	6363      	str	r3, [r4, #52]	@ 0x34
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a640:	81a3      	strh	r3, [r4, #12]
 800a642:	2300      	movs	r3, #0
 800a644:	6063      	str	r3, [r4, #4]
 800a646:	6923      	ldr	r3, [r4, #16]
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	89a3      	ldrh	r3, [r4, #12]
 800a64c:	f043 0308 	orr.w	r3, r3, #8
 800a650:	81a3      	strh	r3, [r4, #12]
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	b94b      	cbnz	r3, 800a66a <__swsetup_r+0x7a>
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a65c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a660:	d003      	beq.n	800a66a <__swsetup_r+0x7a>
 800a662:	4621      	mov	r1, r4
 800a664:	4628      	mov	r0, r5
 800a666:	f000 f883 	bl	800a770 <__smakebuf_r>
 800a66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a66e:	f013 0201 	ands.w	r2, r3, #1
 800a672:	d00a      	beq.n	800a68a <__swsetup_r+0x9a>
 800a674:	2200      	movs	r2, #0
 800a676:	60a2      	str	r2, [r4, #8]
 800a678:	6962      	ldr	r2, [r4, #20]
 800a67a:	4252      	negs	r2, r2
 800a67c:	61a2      	str	r2, [r4, #24]
 800a67e:	6922      	ldr	r2, [r4, #16]
 800a680:	b942      	cbnz	r2, 800a694 <__swsetup_r+0xa4>
 800a682:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a686:	d1c5      	bne.n	800a614 <__swsetup_r+0x24>
 800a688:	bd38      	pop	{r3, r4, r5, pc}
 800a68a:	0799      	lsls	r1, r3, #30
 800a68c:	bf58      	it	pl
 800a68e:	6962      	ldrpl	r2, [r4, #20]
 800a690:	60a2      	str	r2, [r4, #8]
 800a692:	e7f4      	b.n	800a67e <__swsetup_r+0x8e>
 800a694:	2000      	movs	r0, #0
 800a696:	e7f7      	b.n	800a688 <__swsetup_r+0x98>
 800a698:	2000001c 	.word	0x2000001c

0800a69c <_raise_r>:
 800a69c:	291f      	cmp	r1, #31
 800a69e:	b538      	push	{r3, r4, r5, lr}
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	d904      	bls.n	800a6b0 <_raise_r+0x14>
 800a6a6:	2316      	movs	r3, #22
 800a6a8:	6003      	str	r3, [r0, #0]
 800a6aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6b2:	b112      	cbz	r2, 800a6ba <_raise_r+0x1e>
 800a6b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6b8:	b94b      	cbnz	r3, 800a6ce <_raise_r+0x32>
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f000 f830 	bl	800a720 <_getpid_r>
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	4601      	mov	r1, r0
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6ca:	f000 b817 	b.w	800a6fc <_kill_r>
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d00a      	beq.n	800a6e8 <_raise_r+0x4c>
 800a6d2:	1c59      	adds	r1, r3, #1
 800a6d4:	d103      	bne.n	800a6de <_raise_r+0x42>
 800a6d6:	2316      	movs	r3, #22
 800a6d8:	6003      	str	r3, [r0, #0]
 800a6da:	2001      	movs	r0, #1
 800a6dc:	e7e7      	b.n	800a6ae <_raise_r+0x12>
 800a6de:	2100      	movs	r1, #0
 800a6e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	4798      	blx	r3
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	e7e0      	b.n	800a6ae <_raise_r+0x12>

0800a6ec <raise>:
 800a6ec:	4b02      	ldr	r3, [pc, #8]	@ (800a6f8 <raise+0xc>)
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	f7ff bfd3 	b.w	800a69c <_raise_r>
 800a6f6:	bf00      	nop
 800a6f8:	2000001c 	.word	0x2000001c

0800a6fc <_kill_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	4d07      	ldr	r5, [pc, #28]	@ (800a71c <_kill_r+0x20>)
 800a700:	2300      	movs	r3, #0
 800a702:	4604      	mov	r4, r0
 800a704:	4608      	mov	r0, r1
 800a706:	4611      	mov	r1, r2
 800a708:	602b      	str	r3, [r5, #0]
 800a70a:	f7f7 f8eb 	bl	80018e4 <_kill>
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	d102      	bne.n	800a718 <_kill_r+0x1c>
 800a712:	682b      	ldr	r3, [r5, #0]
 800a714:	b103      	cbz	r3, 800a718 <_kill_r+0x1c>
 800a716:	6023      	str	r3, [r4, #0]
 800a718:	bd38      	pop	{r3, r4, r5, pc}
 800a71a:	bf00      	nop
 800a71c:	20004e58 	.word	0x20004e58

0800a720 <_getpid_r>:
 800a720:	f7f7 b8d8 	b.w	80018d4 <_getpid>

0800a724 <__swhatbuf_r>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	460c      	mov	r4, r1
 800a728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72c:	2900      	cmp	r1, #0
 800a72e:	b096      	sub	sp, #88	@ 0x58
 800a730:	4615      	mov	r5, r2
 800a732:	461e      	mov	r6, r3
 800a734:	da0d      	bge.n	800a752 <__swhatbuf_r+0x2e>
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a73c:	f04f 0100 	mov.w	r1, #0
 800a740:	bf14      	ite	ne
 800a742:	2340      	movne	r3, #64	@ 0x40
 800a744:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a748:	2000      	movs	r0, #0
 800a74a:	6031      	str	r1, [r6, #0]
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	b016      	add	sp, #88	@ 0x58
 800a750:	bd70      	pop	{r4, r5, r6, pc}
 800a752:	466a      	mov	r2, sp
 800a754:	f000 f848 	bl	800a7e8 <_fstat_r>
 800a758:	2800      	cmp	r0, #0
 800a75a:	dbec      	blt.n	800a736 <__swhatbuf_r+0x12>
 800a75c:	9901      	ldr	r1, [sp, #4]
 800a75e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a762:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a766:	4259      	negs	r1, r3
 800a768:	4159      	adcs	r1, r3
 800a76a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a76e:	e7eb      	b.n	800a748 <__swhatbuf_r+0x24>

0800a770 <__smakebuf_r>:
 800a770:	898b      	ldrh	r3, [r1, #12]
 800a772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a774:	079d      	lsls	r5, r3, #30
 800a776:	4606      	mov	r6, r0
 800a778:	460c      	mov	r4, r1
 800a77a:	d507      	bpl.n	800a78c <__smakebuf_r+0x1c>
 800a77c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	6123      	str	r3, [r4, #16]
 800a784:	2301      	movs	r3, #1
 800a786:	6163      	str	r3, [r4, #20]
 800a788:	b003      	add	sp, #12
 800a78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a78c:	ab01      	add	r3, sp, #4
 800a78e:	466a      	mov	r2, sp
 800a790:	f7ff ffc8 	bl	800a724 <__swhatbuf_r>
 800a794:	9f00      	ldr	r7, [sp, #0]
 800a796:	4605      	mov	r5, r0
 800a798:	4639      	mov	r1, r7
 800a79a:	4630      	mov	r0, r6
 800a79c:	f7fe fecc 	bl	8009538 <_malloc_r>
 800a7a0:	b948      	cbnz	r0, 800a7b6 <__smakebuf_r+0x46>
 800a7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a6:	059a      	lsls	r2, r3, #22
 800a7a8:	d4ee      	bmi.n	800a788 <__smakebuf_r+0x18>
 800a7aa:	f023 0303 	bic.w	r3, r3, #3
 800a7ae:	f043 0302 	orr.w	r3, r3, #2
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	e7e2      	b.n	800a77c <__smakebuf_r+0xc>
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	6020      	str	r0, [r4, #0]
 800a7ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7be:	81a3      	strh	r3, [r4, #12]
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a7c6:	b15b      	cbz	r3, 800a7e0 <__smakebuf_r+0x70>
 800a7c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f000 f81d 	bl	800a80c <_isatty_r>
 800a7d2:	b128      	cbz	r0, 800a7e0 <__smakebuf_r+0x70>
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	f023 0303 	bic.w	r3, r3, #3
 800a7da:	f043 0301 	orr.w	r3, r3, #1
 800a7de:	81a3      	strh	r3, [r4, #12]
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	431d      	orrs	r5, r3
 800a7e4:	81a5      	strh	r5, [r4, #12]
 800a7e6:	e7cf      	b.n	800a788 <__smakebuf_r+0x18>

0800a7e8 <_fstat_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	4d07      	ldr	r5, [pc, #28]	@ (800a808 <_fstat_r+0x20>)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	602b      	str	r3, [r5, #0]
 800a7f6:	f7f7 f8d5 	bl	80019a4 <_fstat>
 800a7fa:	1c43      	adds	r3, r0, #1
 800a7fc:	d102      	bne.n	800a804 <_fstat_r+0x1c>
 800a7fe:	682b      	ldr	r3, [r5, #0]
 800a800:	b103      	cbz	r3, 800a804 <_fstat_r+0x1c>
 800a802:	6023      	str	r3, [r4, #0]
 800a804:	bd38      	pop	{r3, r4, r5, pc}
 800a806:	bf00      	nop
 800a808:	20004e58 	.word	0x20004e58

0800a80c <_isatty_r>:
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	4d06      	ldr	r5, [pc, #24]	@ (800a828 <_isatty_r+0x1c>)
 800a810:	2300      	movs	r3, #0
 800a812:	4604      	mov	r4, r0
 800a814:	4608      	mov	r0, r1
 800a816:	602b      	str	r3, [r5, #0]
 800a818:	f7f7 f8d4 	bl	80019c4 <_isatty>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_isatty_r+0x1a>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_isatty_r+0x1a>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	20004e58 	.word	0x20004e58

0800a82c <_init>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr

0800a838 <_fini>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	bf00      	nop
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr
